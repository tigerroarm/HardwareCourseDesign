/*
 * sdread.c
 *
 *  Created on: 2019年5月26日
 *      Author: 12757
 */


#include <errno.h>
#include <priv/alt_file.h>
#include <io.h>
#include <stdio.h>
#include <string.h>
#include "sdread.h"
#include <stdlib.h>


//直接从Altera_UP_SD_Card_Avalon_Interface.c里复制的宏定义和结构体定义

///////////////////////////////////////////////////////////////////////////
// Local Define Statements
///////////////////////////////////////////////////////////////////////////

#define CHAR_TO_UPPER(ch)	((char) (((ch >= 'a') && (ch <= 'z')) ? ((ch-'a')+'A'): ch))

// Data Buffer Address
#define SD_CARD_BUFFER(base, x)			(base + x)
// 128-bit Card Identification Number
#define SD_CARD_CID(base, x)			(base + 0x0200 + x)
// 128-bit Card Specific Data Register
#define SD_CARD_CSD(base, x)			(base + 0x0210 + x)
// 32-bit Operating Conditions Register
#define SD_CARD_OCR(base)				(base + 0x0220)
// 32-bit Card Status Register
#define SD_CARD_STATUS(base)			(base + 0x0224)
// 16-bit Relative Card Address Register
#define SD_CARD_RCA(base)				(base + 0x0228)
// 32-bit Card Argument Register
#define SD_CARD_ARGUMENT(base)			(base + 0x022C)
// 16-bit Card Command Register
#define SD_CARD_COMMAND(base)			(base + 0x0230)
// 16-bit Card Auxiliary Status Register
#define SD_CARD_AUX_STATUS(base)		(base + 0x0234)
// 32-bit R1 Response Register
#define SD_CARD_R1_RESPONSE(base)		(base + 0x0238)

#define CMD_READ_BLOCK					17
#define CMD_WRITE_BLOCK					24

// FAT 12/16 related stuff
//#define BOOT_SECTOR_DATA_SIZE			0x005A
#define MAX_FILES_OPENED				20

/******************************************************************************/
/******  LOCAL DATA STRUCTURES  ***********************************************/
/******************************************************************************/



typedef struct s_FAT_12_16_boot_sector {
	unsigned char jump_instruction[3];
	char OEM_name[8];
	unsigned short int sector_size_in_bytes;
	unsigned char sectors_per_cluster;
	unsigned short int reserved_sectors;
	unsigned char number_of_FATs;
	unsigned short int max_number_of_dir_entires;
	unsigned short int number_of_sectors_in_partition;
	unsigned char media_descriptor;
	unsigned short int number_of_sectors_per_table;
	unsigned short int number_of_sectors_per_track;
	unsigned short int number_of_heads;
	unsigned int number_of_hidden_sectors;
	unsigned int total_sector_count_if_above_32MB;
	unsigned char drive_number;
	unsigned char current_head;
	unsigned char boot_signature;
	unsigned char volume_id[4];
	char volume_label[11];
	unsigned char file_system_type[8];
	unsigned char bits_for_cluster_index;
	unsigned int first_fat_sector_offset;
	unsigned int second_fat_sector_offset;
	unsigned int root_directory_sector_offset;
	unsigned int data_sector_offset;
} t_FAT_12_16_boot_sector;


typedef struct s_file_record {
	unsigned char name[8];
	unsigned char extension[3];
	unsigned char attributes;
	unsigned short int create_time;
	unsigned short int create_date;
	unsigned short int last_access_date;
	unsigned short int last_modified_time;
	unsigned short int last_modified_date;
	unsigned short int start_cluster_index;
	unsigned int file_size_in_bytes;
	/* The following fields are only used when a file has been created or opened. */
	unsigned int current_cluster_index;
    unsigned int current_sector_in_cluster;
	unsigned int current_byte_position;
    // Absolute location of the file record on the SD Card.
    unsigned int file_record_cluster;
    unsigned int file_record_sector_in_cluster;
    short int    file_record_offset;
    // Is this record in use and has the file been modified.
    unsigned int home_directory_cluster;
    bool         modified;
	bool		 in_use;
} t_file_record;


typedef struct s_find_data {
	unsigned int directory_root_cluster; // 0 means root directory.
	unsigned int current_cluster_index;
	unsigned int current_sector_in_cluster;
	short int file_index_in_sector;
	bool valid;
} t_find_data;

///////////////////////////////////////////////////////////////////////////
// extern Variables( 使用Altera_UP_SD_Card_Avalon_Interface.c中的变量 )
///////////////////////////////////////////////////////////////////////////


// Pointers to currently opened files.
extern t_file_record active_files[MAX_FILES_OPENED];
extern t_FAT_12_16_boot_sector boot_sector_data;
extern int fat_partition_offset_in_512_byte_sectors;
extern unsigned int current_sector_index;
extern volatile char *buffer_memory;

extern t_find_data search_data;
///////////////////////////////////////////////////////////////////////////
// Local Functions
///////////////////////////////////////////////////////////////////////////





//自定义函数


//读取文本内容，读取size个字节，放入缓存buffer,返回值为真实读取的字节数
int fread_txt( short file_handle, char *buffer, int numInByte )
{
	//校验file_handle
	if ( file_handle < 0 || file_handle >= MAX_FILES_OPENED )
	{
		return 0;
	}
	//该文件如果没有打开
	if ( !active_files[file_handle].in_use )
	{
		return 0;
	}

	//获得active_files[]对应的元素指针
	t_file_record *curActiveFile = active_files + file_handle;

	//numInByte如果超过了文本剩下的字节数，就进行限制
	if ( numInByte > (curActiveFile->file_size_in_bytes - curActiveFile->current_byte_position) )
	{
		numInByte = (curActiveFile->file_size_in_bytes - curActiveFile->current_byte_position);
	}

	//当前读取的字节数
	unsigned int bufferIndex = 0;

	printf( "start_read\n" );

	//current_byte_position从0开始，file_size_in_bytes-1为读取最后一个，file_size_in_bytes说明读完了
	while ( curActiveFile->current_byte_position < curActiveFile->file_size_in_bytes && bufferIndex < numInByte )
	{
		int data_sector = boot_sector_data.data_sector_offset + \
				(curActiveFile->current_cluster_index - 2)*boot_sector_data.sectors_per_cluster + \
				 curActiveFile->current_sector_in_cluster;

		printf( "current_byte_position = %u\n", curActiveFile->current_byte_position );

		//当前读取的字节不为文本的第一个字节，而且正好位于新扇区，这样保证FAT表可以正常工作，链表首做特殊处理（即避开FAT表首）
		if ((curActiveFile->current_byte_position > 0) && ((curActiveFile->current_byte_position % 512) == 0))
		{
			// Read in a new sector of data.
			//如果读到了一个簇的结束，就读下一个簇
			if (curActiveFile->current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
			{
				// Go to the next cluster.
				unsigned short int next_cluster;
				if (get_cluster_flag(curActiveFile->current_cluster_index, &next_cluster))
				{
					printf( "cur_cluster_index = %u , next_cluster_index = %u\n", curActiveFile->current_cluster_index, next_cluster );
					if ((next_cluster & 0x0000fff8) == 0x0000fff8)
					{
						/* End of file */
						break;
					}
					else
					{
						//用新簇替换旧簇
						curActiveFile->current_cluster_index = next_cluster;
						//簇内扇区偏移为0
						curActiveFile->current_sector_in_cluster = 0;
						//重新计算data_sector
						data_sector = boot_sector_data.data_sector_offset + (curActiveFile->current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
						  curActiveFile->current_sector_in_cluster;

						printf( "data_sector = %d\n", data_sector );
						printf( "current_sector_in_cluster = %d\n", curActiveFile->current_sector_in_cluster );
					}
				}
				else
				{
					//不支持除FAT16外的FAT表
					return 0;
				}
			}
			else//簇不变
			{
				curActiveFile->current_sector_in_cluster = curActiveFile->current_sector_in_cluster + 1;
				data_sector = data_sector + 1;
				printf( "data_sector = %d\n", data_sector );
				printf( "current_sector_in_cluster = %d\n", curActiveFile->current_sector_in_cluster );
			}
		}

		//如果读取的扇区发生变化，就读新扇区。current_sector_index存储的是之前读取的扇区位置,
		//(data_sector + fat_partition_offset_in_512_byte_sectors)是现在要读取的扇区位置
		if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
		{
			if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
			{
				return 0;
			}
		}
		//将读到的数据存入缓存
		int curByteOfSector = (curActiveFile->current_byte_position % 512);

		printf( "curByteOfSector = %d\n", curByteOfSector );

		int i_max = curByteOfSector + numInByte - bufferIndex;
		printf( "i_max = %d\n", i_max );
		if ( i_max > 512 )
		{
			i_max = 512;
		}
		printf( "i_max = %d\n", i_max );

		printf( "numInByte = %d\n", numInByte );

		printf( "bufferIndex = %d", bufferIndex );


		int i;
		for ( i = curByteOfSector; i < i_max; i ++ )
		{
			//取出扇区中的值，返回
			buffer[bufferIndex] = (unsigned char) IORD_8DIRECT(buffer_memory, i );
			bufferIndex ++;
			//调整读取的下标
			curActiveFile->current_byte_position = curActiveFile->current_byte_position + 1;
		}
	}

	printf( "stop_read\n" );

	return bufferIndex;//返回实际读取的字节数
}

//文本指针偏移(返回0,成功； 返回-1，失败)
short fseek_txt( short file_handle, int offset, enum fseekType fromwhere )
{
	//校验file_handle
	if ( file_handle < 0 || file_handle >= MAX_FILES_OPENED )
	{
		return -1;
	}
	//该文件如果没有打开
	if ( !active_files[file_handle].in_use )
	{
		return -1;
	}

	int status = 0;

	//获得active_files[]对应的元素指针
	t_file_record *curActiveFile = active_files + file_handle;
	unsigned char sectors_per_cluster = boot_sector_data.sectors_per_cluster;
	//之前的簇数
	int preCluster = ((curActiveFile->current_byte_position) >> 9) / sectors_per_cluster;


	//current_byte_position从0开始，file_size_in_bytes-1为读取最后一个，file_size_in_bytes说明读完了
	int currentByte = 0;

	switch( fromwhere )
	{
		case SEEK_SET_TXT://移到文件开头
			currentByte = offset;
			break;

		case SEEK_CUR_TXT://当前位置偏移
			currentByte = curActiveFile->current_byte_position + offset;
			break;

		case SEEK_END_TXT://移到文件结尾
			currentByte = curActiveFile->file_size_in_bytes + offset;
			break;
		default:
			return -1;
	}


	//debug
//	curActiveFile->current_byte_position = currentByte;
	if ( currentByte > curActiveFile->file_size_in_bytes )
	{
		curActiveFile->current_byte_position = curActiveFile->file_size_in_bytes;
	}
	else if ( currentByte < 0 )
	{
		curActiveFile->current_byte_position = 0;
	}
	else
	{
		curActiveFile->current_byte_position = currentByte;
	}

	//debug
	printf( "current_byte_position = %ld\n", ftell_txt( file_handle ) );

	//计算簇数、扇区数
	int curSector = (curActiveFile->current_byte_position) >> 9;
	int curCluster = curSector / sectors_per_cluster;
	int sectorInCluster = curSector % sectors_per_cluster;
	curActiveFile->current_sector_in_cluster = sectorInCluster;

	//根据簇数查找FAT表
	int fatClusterNum = 0;//查找fat表的次数(延着链表向后找)
	if ( curSector < preCluster )//FAT表需要查找上一个簇，则只能从FAT表首重新找
	{
		curActiveFile->current_cluster_index = curActiveFile->start_cluster_index;
		fatClusterNum = curCluster;
	}
	else//直接向后找
	{
		fatClusterNum = curCluster - preCluster;
	}

	//FAT表查找簇
	int i;
	unsigned short int next_cluster;
	for ( i = 0; i < fatClusterNum; i ++ )
	{
		if (get_cluster_flag(curActiveFile->current_cluster_index, &next_cluster))
		{
//			printf( "i = %d, cur_cluster_index = %u , next_cluster_index = %u\n",i, curActiveFile->current_cluster_index, next_cluster );
			if ((next_cluster & 0x0000fff8) == 0x0000fff8)
			{
				/* End of file */
				break;
			}
			else
			{
				//用新簇替换旧簇
				curActiveFile->current_cluster_index = next_cluster;
			}
		}
		else
		{
			//不支持除FAT16外的FAT表
			return -1;
		}
	}
	return 0;
}


//获取当前读取文件的位置(返回值)
long ftell_txt( short file_handle )
{
	//校验file_handle
	if ( file_handle < 0 || file_handle >= MAX_FILES_OPENED )
	{
		return -1;
	}
	//该文件如果没有打开
	if ( !active_files[file_handle].in_use )
	{
		return -1;
	}
	//返回当前读取字节数
	return active_files[file_handle].current_byte_position;
}


//打开文件
//input: fileReadName( 包含 .TXT )
//Output: file_handle
//An index to the file record assigned to the specified file.
//-1 is returned if the file could not be opened.
//Return -2 if the specified file has already been opened previously.
short fopen_txt( char *fileReadName )
{
	return alt_up_sd_card_fopen( fileReadName, false );
}


//关闭文件
//input: file_handle
//output: true:成功  false:失败(可能关闭了未打开的文件)
bool fclose_txt( short file_handle )
{
	bool status;
	if ( file_handle < 0 || file_handle >= MAX_FILES_OPENED )
	{
		status = false;
	}
	else
	{
		status = alt_up_sd_card_fclose( file_handle );
	}

	return status;
}
//获取文件大小
int getfileSizeTxt( short file_handle )
{
	if ( file_handle < 0 || file_handle >= MAX_FILES_OPENED )
	{
		return -1;
	}
	return active_files[file_handle].file_size_in_bytes;
}

//读取长文件名，返回TextType类型变量，保存长文件名
TextType readLongFileName( void )
{
	TextType longNameText;
	longNameText.fmt = UCS2_LITTLE;
	longNameText.text = NULL;
	longNameText.textLen = 0;

	int cluster = search_data.current_cluster_index;

	bool status = true;

	//调试模式开始（调试完了要注释掉）
//	printf( "readLongFileName() 没有做任何事就返回\n" );
//	return longNameText;
	//调试模式结束

	//如果为根目录
	if (cluster == 0)
	{
		alt_u8 fileNameStore[32]; //目录内容存储空间


		//当前扇区下标(最大扇区数为max_root_dir_sectors)
		int sector_index = search_data.current_sector_in_cluster;
		//当前文件在扇区中的下标 (一个扇区的最大目录数为512/32=16)
		int file_counter = search_data.file_index_in_sector;


		//计算短文件名校验和
		Read_Sector_Data( sector_index + boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors );

		int i;
		int fileOffset = ( file_counter << 5 );
		for ( i = 0; i < 11; i ++ )
		{
			fileNameStore[i] = (alt_u8) IORD_8DIRECT(buffer_memory, fileOffset + i );
		}
		alt_u8 checkNum = 0;
		for ( i = 0; i < 11; i ++ )
		{
			checkNum = ((checkNum&0x1)?0x80:0x00) + (checkNum>>1) + fileNameStore[i];
		}

		//读取长文件
		file_counter -= 1;//从短文件目录的前一个开始读
		if ( file_counter < 0 )
		{
			file_counter = 15;
			sector_index -= 1;
		}


#define MAX_LONG_NAME_NUIT_NUM 8 //长文件名最大占8个目录的空间
#define LONG_NAME_STORE_SIZE (MAX_LONG_NAME_NUIT_NUM*26)

		alt_u8 longNameStore[LONG_NAME_STORE_SIZE]={0};//文件名临时存储空间

		int curLongNameUnitNum = 0;//最大为MAX_LONG_NAME_NUIT_NUM


		bool outWhileFlag = false;//用于调出两层while循环

		while( sector_index >= 0 )
		{
			//读取扇区
			status = Read_Sector_Data ( sector_index + boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors );
			//读取文件目录

			while( file_counter >= 0 && curLongNameUnitNum < MAX_LONG_NAME_NUIT_NUM )
			{

				fileOffset = ( file_counter << 5 );
				for ( i = 0; i < 32; i ++ )
				{
					fileNameStore[i] = (alt_u8) IORD_8DIRECT(buffer_memory, fileOffset + i );
				}
				alt_u8 unitID = fileNameStore[0];

				//如果有被删除的记号0xef，或者长文件标志不存在，或者校验和不匹配，就退出
				if ( unitID == 0xe5 || ( fileNameStore[11] != 0x0f ) || fileNameStore[13] != checkNum )
				{
					outWhileFlag = true;
					break;
				}

				int realUnitID = ( unitID & 0x1f ) - 1;
//				printf( "realUnitID=%d\n", realUnitID );
				if ( realUnitID >= 0 && realUnitID < MAX_LONG_NAME_NUIT_NUM )
				{
					curLongNameUnitNum = realUnitID;
				}

				int nameStoreIndex = curLongNameUnitNum * 26;
				//将有效的unicode值存入nameUCS2
				//第1~5个ucs2编码
				for ( i = 0; i < 10; i ++ )
				{
					longNameStore[nameStoreIndex+i] = fileNameStore[i+1];
				}
				//第6~11个ucs2编码
				for ( i = 10; i < 22; i ++ )
				{
					longNameStore[nameStoreIndex+i] = fileNameStore[i+4];
				}
				//第12~13个ucs2编码
				for ( i = 22; i < 26; i ++ )
				{
					longNameStore[nameStoreIndex+i] = fileNameStore[i+6];
				}

				//长文件名结束
//				printf( "unitID=%02x\n", unitID );
				if ( (unitID & 0x40) == 0x40 )
				{
					outWhileFlag = true;
					break;
				}

				file_counter --;
				curLongNameUnitNum ++;
			}//while of file_counter
			if ( outWhileFlag )
			{
				break;
			}

			file_counter = 15;

			sector_index--;
		}//while of sector_index



		//整理保存的unicode文件名
		int i_max = LONG_NAME_STORE_SIZE;
		for ( i = 0; i < i_max; i += 2 )
		{
			if ( longNameStore[i] == 0 && longNameStore[i+1] == 0 )
			{
				break;
			}
		}
		//获得文件名的字节数
		int textLen = i;

		longNameText.textLen = textLen;
		longNameText.text = malloc( textLen + 2 );

		char *tempStr = longNameText.text;
		for ( i = 0; i < textLen; i ++ )
		{
			tempStr[i] = longNameStore[i];
		}
		//结束标志：最后两个字节为0x00,0x00
		tempStr[textLen] = 0;
		tempStr[textLen+1] = 0;
	}

#undef LONG_NAME_STORE_SIZE
#undef MAX_LONG_NAME_NUIT_NUM


	return longNameText;
}
