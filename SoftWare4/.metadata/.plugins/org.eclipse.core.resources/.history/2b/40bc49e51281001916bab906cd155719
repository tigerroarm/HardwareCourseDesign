/*
 * tftflcd.c
 *
 *  Created on: 2019年5月28日
 *      Author: 12757
 */


#include "tftlcd.h"

//显示屏参数

TftLcdInfo lcddev;


//返回值:读到的数据
alt_u16 LCD_ReadReg(alt_u16 LCD_Reg)
{
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
	delay(1000);
	return LCD_RD_DATA();		//返回读到的值
}

void LCD_init()
{
	usleep(100000);
    alt_u8 data = 0x4 | 0x0 | 0x1;
    IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_BASE_CTRL_BASE, data);
    usleep(10000);
    data = 0x4 | 0x2 | 0x0;
    IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_BASE_CTRL_BASE, data);
    usleep(10000);


	IOWR_ALTERA_AVALON_PIO_DIRECTION(TFTLCD_BASE_CTRL_BASE, 0xffff); //默认设置out
	IOWR_ALTERA_AVALON_PIO_DIRECTION(TFTLCD_CMD_BASE, 0xffff); //默认设置out
	IOWR_ALTERA_AVALON_PIO_DIRECTION(TFTLCD_DATA_BASE , 0xffff); //默认设置out
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_CMD_BASE, 0x4|0x2|0x1); //写使能 读写命令

	usleep(50000);

	lcddev.id=LCD_ReadReg(0x0000);
	LCD_WR_REG(0xD4);
	lcddev.id=LCD_RD_DATA();	//dummy read
	lcddev.id=LCD_RD_DATA();	//读到0X00
	lcddev.id=LCD_RD_DATA();   	//读取93
	lcddev.id<<=8;
	lcddev.id|=LCD_RD_DATA();  	//读取41
	printf("id =  %x \n",lcddev.id);

	if ( lcddev.id == 0x5310 )
	{
		LCD5310_init();
	}

	LCD_Display_Dir(0);		 	//默认为竖屏

	LCD_Clear(0x1458);
}

//读数据
alt_u16 LCD_RD_DATA()
{
	IOWR_ALTERA_AVALON_PIO_DIRECTION(TFTLCD_DATA_BASE, 0x0000); //data设置为输入
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_CMD_BASE, 0x0|0x2|0x1); //读使能 来个低电平 读数据
	alt_u16 data =  IORD_ALTERA_AVALON_PIO_DATA(TFTLCD_DATA_BASE); //读出数据
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_CMD_BASE, 0x4|0x2|0x1); //读使能  读数据
	return data;
}

//写LCD数据
void LCD_WR_REG(alt_u16 cmd)
{
	IOWR_ALTERA_AVALON_PIO_DIRECTION(TFTLCD_DATA_BASE, 0xffff); //data设置为输出
	// 写RS
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_CMD_BASE, 0x4|0x0|0x0); //写使能 来个低电平 写命令
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_DATA_BASE, cmd); // 写命令
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_CMD_BASE, 0x4|0x0|0x1); //来个高电平送数据
}

void LCD_WR_DATA(alt_u16 data)
{
	IOWR_ALTERA_AVALON_PIO_DIRECTION(TFTLCD_DATA_BASE , 0xffff); //data设置为输出
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_CMD_BASE,0x4|0x2|0x0); //写使能 来个低电平 写数据
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_DATA_BASE, data); // 写数据
	IOWR_ALTERA_AVALON_PIO_DATA(TFTLCD_CMD_BASE, 0x4|0x2|0x1); //来个高电平送数据
}
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(alt_u16 LCD_Reg,alt_u16 LCD_RegValue)
{
	LCD_WR_REG(LCD_Reg);
	LCD_WR_DATA(LCD_RegValue);
}

void LCD5310_init()
{
	LCD_WR_REG(0xED);
	LCD_WR_DATA(0x01);
	LCD_WR_DATA(0xFE);

	LCD_WR_REG(0xEE);
	LCD_WR_DATA(0xDE);
	LCD_WR_DATA(0x21);

	LCD_WR_REG(0xF1);
	LCD_WR_DATA(0x01);
	LCD_WR_REG(0xDF);
	LCD_WR_DATA(0x10);

	//VCOMvoltage//
	LCD_WR_REG(0xC4);
	LCD_WR_DATA(0x8F);	  //5f

	LCD_WR_REG(0xC6);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xE2);
	LCD_WR_DATA(0xE2);
	LCD_WR_DATA(0xE2);
	LCD_WR_REG(0xBF);
	LCD_WR_DATA(0xAA);

	LCD_WR_REG(0xB0);
	LCD_WR_DATA(0x0D);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x0D);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x11);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x19);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x21);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x2D);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x3D);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x5D);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x5D);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xB1);
	LCD_WR_DATA(0x80);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x8B);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x96);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xB2);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x02);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x03);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xB3);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xB4);
	LCD_WR_DATA(0x8B);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x96);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA1);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xB5);
	LCD_WR_DATA(0x02);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x03);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x04);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xB6);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xB7);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x3F);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x5E);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x64);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x8C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xAC);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xDC);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x70);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x90);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xEB);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xDC);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xB8);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xBA);
	LCD_WR_DATA(0x24);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC1);
	LCD_WR_DATA(0x20);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x54);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xFF);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC2);
	LCD_WR_DATA(0x0A);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x04);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC3);
	LCD_WR_DATA(0x3C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x3A);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x39);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x37);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x3C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x36);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x32);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x2F);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x2C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x29);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x26);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x24);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x24);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x23);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x3C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x36);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x32);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x2F);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x2C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x29);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x26);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x24);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x24);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x23);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC4);
	LCD_WR_DATA(0x62);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x05);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x84);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xF0);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x18);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA4);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x18);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x50);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x0C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x17);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x95);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xF3);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xE6);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC5);
	LCD_WR_DATA(0x32);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x44);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x65);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x76);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x88);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC6);
	LCD_WR_DATA(0x20);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x17);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x01);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC7);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC8);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xC9);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xE0);
	LCD_WR_DATA(0x16);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x1C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x21);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x36);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x46);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x52);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x64);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x7A);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x8B);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x99);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA8);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xB9);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xC4);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xCA);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD2);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD9);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xE0);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xF3);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xE1);
	LCD_WR_DATA(0x16);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x1C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x22);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x36);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x45);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x52);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x64);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x7A);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x8B);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x99);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA8);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xB9);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xC4);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xCA);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD2);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD8);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xE0);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xF3);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xE2);
	LCD_WR_DATA(0x05);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x0B);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x1B);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x34);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x44);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x4F);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x61);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x79);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x88);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x97);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA6);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xB7);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xC2);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xC7);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD1);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD6);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xDD);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xF3);
	LCD_WR_DATA(0x00);
	LCD_WR_REG(0xE3);
	LCD_WR_DATA(0x05);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x1C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x33);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x44);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x50);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x62);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x78);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x88);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x97);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA6);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xB7);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xC2);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xC7);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD1);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD5);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xDD);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xF3);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xE4);
	LCD_WR_DATA(0x01);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x01);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x02);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x2A);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x3C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x4B);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x5D);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x74);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x84);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x93);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA2);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xB3);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xBE);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xC4);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xCD);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD3);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xDD);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xF3);
	LCD_WR_DATA(0x00);
	LCD_WR_REG(0xE5);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x02);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x29);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x3C);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x4B);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x5D);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x74);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x84);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x93);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xA2);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xB3);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xBE);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xC4);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xCD);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xD3);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xDC);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xF3);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xE6);
	LCD_WR_DATA(0x11);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x34);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x56);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x76);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x77);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x66);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x88);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x99);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xBB);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x99);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x66);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x55);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x55);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x45);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x43);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x44);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xE7);
	LCD_WR_DATA(0x32);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x55);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x76);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x66);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x67);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x67);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x87);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x99);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xBB);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x99);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x77);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x44);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x56);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x23);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x33);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x45);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xE8);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x99);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x87);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x88);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x77);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x66);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x88);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xAA);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0xBB);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x99);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x66);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x55);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x55);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x44);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x44);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x55);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xE9);
	LCD_WR_DATA(0xAA);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0x00);
	LCD_WR_DATA(0xAA);

	LCD_WR_REG(0xCF);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xF0);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x50);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xF3);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0xF9);
	LCD_WR_DATA(0x06);
	LCD_WR_DATA(0x10);
	LCD_WR_DATA(0x29);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0x3A);
	LCD_WR_DATA(0x55);	//66

	LCD_WR_REG(0x11);
	usleep(100000);
	LCD_WR_REG(0x29);
	LCD_WR_REG(0x35);
	LCD_WR_DATA(0x00);

	LCD_WR_REG(0x51);
	LCD_WR_DATA(0xFF);
	LCD_WR_REG(0x53);
	LCD_WR_DATA(0x2C);
	LCD_WR_REG(0x55);
	LCD_WR_DATA(0x82);
	LCD_WR_REG(0x2c);
}

//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
	{
		LCD_WR_REG(lcddev.setxcmd);
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
	}else if(lcddev.id==0X6804)
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
		LCD_WR_REG(lcddev.setxcmd);
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
	}else if(lcddev.id==0X1963)
	{
		if(lcddev.dir==0)//x坐标需要变换
		{
			Xpos=lcddev.width-1-Xpos;
			LCD_WR_REG(lcddev.setxcmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
		}
		LCD_WR_REG(lcddev.setycmd);
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);

	}else if(lcddev.id==0X5510)
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}else
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color)
{
	LCD_SetCursor(x,y);		//设置光标位置
	LCD_WriteRAM_Prepare();	//开始写入GRAM
	LCD_WR_DATA(color);
}

void LCD_Fast_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color)
{
	LCD_WR_REG(0x2a);
	LCD_WR_DATA(x>>8);
	LCD_WR_DATA(x&0xff);
	LCD_WR_REG(0x2b);
	LCD_WR_DATA(y>>8);
	LCD_WR_DATA(y&0xff);
	LCD_WriteRAM_Prepare();	//开始写入GRAM
	LCD_WR_DATA(color);
}

//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
	LCD_WR_REG(lcddev.wramcmd);
}
//LCD写GRAM
//RGB_Code:颜色值
void LCD_WriteRAM(alt_u16 RGB_Code)
{
	LCD_WR_DATA(RGB_Code);//写十六位GRAM
}

void LCD_DrawLine(alt_u16 x1, alt_u16 y1, alt_u16 x2, alt_u16 y2, alt_u16 color)
{
	alt_u16 t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //计算坐标增量
	delta_y=y2-y1;
	uRow=x1;
	uCol=y1;
	if(delta_x>0)incx=1; //设置单步方向
	else if(delta_x==0)incx=0;//垂直线
	else {incx=-1;delta_x=-delta_x;}
	if(delta_y>0)incy=1;
	else if(delta_y==0)incy=0;//水平线
	else{incy=-1;delta_y=-delta_y;}
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
	else distance=delta_y;
	for(t=0;t<=distance+1;t++ )//画线输出
	{
		LCD_DrawPoint(uRow,uCol, color);//画点
		xerr+=delta_x ;
		yerr+=delta_y ;
		if(xerr>distance)
		{
			xerr-=distance;
			uRow+=incx;
		}
		if(yerr>distance)
		{
			yerr-=distance;
			uCol+=incy;
		}
	}
}

//设置竖屏
void LCD_Display_Dir(alt_u8 dir)
{
	if(dir==0)			//竖屏
	{
		lcddev.dir=0;	//竖屏
		lcddev.width=320;
		lcddev.height=480;
		if(lcddev.id==0X5310)
		{
			lcddev.wramcmd=0X2C;
			lcddev.setxcmd=0X2A;
			lcddev.setycmd=0X2B;

			lcddev.width=320;
			lcddev.height=480;
		}
	}
	else 				//横屏
	{
		lcddev.dir=1;	//横屏
		lcddev.width=480;
		lcddev.height=320;
		if(lcddev.id==0X5310)
		{
			lcddev.wramcmd=0X2C;
			lcddev.setxcmd=0X2A;
			lcddev.setycmd=0X2B;

			lcddev.width=480;
			lcddev.height=320;
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
}

void LCD_Color_Fill(alt_u16 sx,alt_u16 sy,u16 ex,alt_u16 ey,alt_u16 *color)
{
	u16 height,width;
	u16 i,j;
	width=ex-sx+1; 			//得到填充的宽度
	height=ey-sy+1;			//高度
 	for(i=0;i<height;i++)
	{
 		LCD_SetCursor(sx,sy+i);   	//设置光标位置
		LCD_WriteRAM_Prepare();     //开始写入GRAM
		for(j=0;j<width;j++)LCD_WR_DATA(color[i*width+j]);//写入数据
	}
}


void delay(int time){
	int i;
	for(i=0; i<time; i++);
}

void LCD_Scan_Dir(alt_u8 dir)
{
	alt_u16 regval=0;
	alt_u16 dirreg=0;
	alt_u16 temp;
	if(lcddev.dir==1)//屏幕为横屏
	{
		switch(dir)//dir方向转换
		{
			case 0:dir=6;break;
			case 1:dir=7;break;
			case 2:dir=4;break;
			case 3:dir=5;break;
			case 4:dir=1;break;
			case 5:dir=0;break;
			case 6:dir=3;break;
			case 7:dir=2;break;
		}
	}
	if(lcddev.id==0X5310)//5310特殊处理
	{
		switch(dir)
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
				break;
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
				break;
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
				break;
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
				break;
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
				break;
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
				break;
		}

		dirreg=0X36;

		LCD_WriteReg(dirreg,regval);

		if(regval&0X20)
		{
			if(lcddev.width<lcddev.height)//交换X,Y
			{
				temp=lcddev.width;
				lcddev.width=lcddev.height;
				lcddev.height=temp;
			}
		}
		else
		{
			if(lcddev.width>lcddev.height)//交换X,Y
			{
				temp=lcddev.width;
				lcddev.width=lcddev.height;
				lcddev.height=temp;
			}
		}

		LCD_WR_REG(lcddev.setxcmd);
		LCD_WR_DATA(0);LCD_WR_DATA(0);
		LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
		LCD_WR_REG(lcddev.setycmd);
		LCD_WR_DATA(0);LCD_WR_DATA(0);
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
  	}
}

void LCD_Clear(alt_u16 color)
{
	alt_u32 index=0;
	alt_u32 totalpoint=lcddev.width;
	totalpoint*=lcddev.height; 			//得到总点数
	LCD_SetCursor(0x00,0x0000);	//设置光标位置
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
	for(index=0;index<totalpoint;index++)
	{
		LCD_WR_DATA(color);
	}
}

//设置窗口,并自动设置画点坐标到窗口左上角(sx,sy).
//sx,sy:窗口起始坐标(左上角)
//width,height:窗口宽度和高度,必须大于0!!
//窗体大小:width*height.
void LCD_Set_Window(alt_u16 sx,alt_u16 sy,alt_u16 width,alt_u16 height)
{
	alt_u8 hsareg,heareg,vsareg,veareg;
	alt_u16 hsaval,heaval,vsaval,veaval;
	alt_u16 twidth,theight;
	twidth=sx+width-1;
	theight=sy+height-1;
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X6804||(lcddev.dir==1&&lcddev.id==0X1963))
	{
		LCD_WR_REG(lcddev.setxcmd);
		LCD_WR_DATA(sx>>8);
		LCD_WR_DATA(sx&0XFF);
		LCD_WR_DATA(twidth>>8);
		LCD_WR_DATA(twidth&0XFF);
		LCD_WR_REG(lcddev.setycmd);
		LCD_WR_DATA(sy>>8);
		LCD_WR_DATA(sy&0XFF);
		LCD_WR_DATA(theight>>8);
		LCD_WR_DATA(theight&0XFF);
	}else if(lcddev.id==0X1963)//1963竖屏特殊处理
	{
		sx=lcddev.width-width-sx;
		height=sy+height-1;
		LCD_WR_REG(lcddev.setxcmd);
		LCD_WR_DATA(sx>>8);
		LCD_WR_DATA(sx&0XFF);
		LCD_WR_DATA((sx+width-1)>>8);
		LCD_WR_DATA((sx+width-1)&0XFF);
		LCD_WR_REG(lcddev.setycmd);
		LCD_WR_DATA(sy>>8);
		LCD_WR_DATA(sy&0XFF);
		LCD_WR_DATA(height>>8);
		LCD_WR_DATA(height&0XFF);
	}else if(lcddev.id==0X5510)
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(sx>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(sx&0XFF);
		LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA(twidth>>8);
		LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA(twidth&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(sy>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(sy&0XFF);
		LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA(theight>>8);
		LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA(theight&0XFF);
	}else	//其他驱动IC
	{
		if(lcddev.dir==1)//横屏
		{
			//窗口值
			hsaval=sy;
			heaval=theight;
			vsaval=lcddev.width-twidth-1;
			veaval=lcddev.width-sx-1;
		}else
		{
			hsaval=sx;
			heaval=twidth;
			vsaval=sy;
			veaval=theight;
		}
		hsareg=0X50;heareg=0X51;//水平方向窗口寄存器
		vsareg=0X52;veareg=0X53;//垂直方向窗口寄存器
		//设置寄存器值
		LCD_WriteReg(hsareg,hsaval);
		LCD_WriteReg(heareg,heaval);
		LCD_WriteReg(vsareg,vsaval);
		LCD_WriteReg(veareg,veaval);
		LCD_SetCursor(sx,sy);	//设置光标位置
	}
}
