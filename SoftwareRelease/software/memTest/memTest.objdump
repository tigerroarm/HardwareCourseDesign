
memTest.elf:     file format elf32-littlenios2
memTest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000240

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001eb04 memsz 0x0001ed6c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001bb5c  08000240  08000240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000116c  0801bd9c  0801bd9c  0001cd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c1c  0801cf08  0801cf08  0001df08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000268  0801eb24  0801eb24  0001fb24  2**2
                  ALLOC, SMALL_DATA
  6 .epcs         00000000  00000020  00000020  0001fb24  2**0
                  CONTENTS
  7 .sdram        00000000  0801ed8c  0801ed8c  0001fb24  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001fb24  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001120  00000000  00000000  0001fb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003764f  00000000  00000000  00020c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000d203  00000000  00000000  000582b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011095  00000000  00000000  000654ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000030cc  00000000  00000000  00076550  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004875  00000000  00000000  0007961c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00023a1e  00000000  00000000  0007de91  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000a18b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a60  00000000  00000000  000a18d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000a7404  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000a7407  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a740a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a740b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a740c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a7410  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a7414  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a7418  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a7421  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a742a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000a7433  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000036  00000000  00000000  000a743e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00074e3b  00000000  00000000  000a7474  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000240 l    d  .text	00000000 .text
0801bd9c l    d  .rodata	00000000 .rodata
0801cf08 l    d  .rwdata	00000000 .rwdata
0801eb24 l    d  .bss	00000000 .bss
00000020 l    d  .epcs	00000000 .epcs
0801ed8c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../memTest_bsp//obj/HAL/src/crt0.o
08000284 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 memtest.c
08000288 l     F .text	00000078 MenuHeader
08000300 l     F .text	00000054 MenuBegin
08000354 l     F .text	00000048 MenuItem
08000428 l     F .text	0000010c MenuEnd
0801eb24 l     O .bss	00000004 entry.3180
0801eb28 l     O .bss	00000001 ch.3181
08000534 l     F .text	00000124 MemGetAddressRange
08000658 l     F .text	00000074 MemTestDataBus
080006cc l     F .text	000001e0 MemTestAddressBus
080008ac l     F .text	00000220 MemTest8_16BitAccess
08000acc l     F .text	000001a4 MemTestDevice
08000c70 l     F .text	000001ac TestRam
08000e1c l     F .text	00000144 FlashCheckIfBlockErased
08000f60 l     F .text	00000384 FlashTestBlockWrite
080012e4 l     F .text	000002fc FlashTestReadWrite
080015e0 l     F .text	00000118 FlashTestBlockErase
080016f8 l     F .text	00000150 FlashRunTests
08001848 l     F .text	00000184 GetFlashName
080019cc l     F .text	0000038c FlashErase
08001d58 l     F .text	0000027c FlashFindErasedBlocks
08001fd4 l     F .text	000001d4 TestFlash
080021a8 l     F .text	00000178 TopMenu
00000000 l    df *ABS*	00000000 lib2-divmod.c
08002374 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0801cf08 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfscanf.c
0801c886 l     O .rodata	00000022 basefix.4082
00000000 l    df *ABS*	00000000 vfprintf.c
0801c8ea l     O .rodata	00000010 zeroes.4181
0801c8fa l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0801ca0b l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
08006d8c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800890c l     F .text	00000008 __fp_lock
08008914 l     F .text	00000008 __fp_unlock
08008928 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
0801d754 l     O .rwdata	00000020 lc_ctype_charset
0801d734 l     O .rwdata	00000020 lc_message_charset
0801d774 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0801cba8 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0800b68c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
0801d7c0 l     O .rwdata	00000014 fpi.2638
0801ccdc l     O .rodata	00000028 tinytens
0801d7ac l     O .rwdata	00000014 fpinan.2674
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfscanf.c
0801cd04 l     O .rodata	00000022 basefix.3580
00000000 l    df *ABS*	00000000 vfprintf.c
0801cd26 l     O .rodata	00000010 zeroes.4166
0801cd36 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
080111f4 l     F .text	000000fc __sprint_r.part.0
0801cd56 l     O .rodata	00000010 blanks.4125
0801cd46 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
08012c04 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801cd84 l     O .rodata	00000010 zeroes.4110
0801cd94 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0801831c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
080184b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08018594 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08018694 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
08018788 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08018964 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801eb14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08018bc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08018d08 l     F .text	00000038 alt_dev_reg
0801d97c l     O .rwdata	000000cc epcs
0801da48 l     O .rwdata	00001060 jtag_uart
0801eaa8 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
08018dec l     F .text	00000038 alt_flash_device_register
08018e78 l     F .text	000003f8 alt_epcs_flash_query
08019270 l     F .text	000000e8 alt_epcs_flash_memcmp
08019644 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08019b0c l     F .text	00000204 altera_avalon_jtag_uart_irq
08019d10 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801a330 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0801a488 l     F .text	00000038 epcs_test_wip
0801a4c0 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0801ab98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801b0a4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0801b1dc l     F .text	00000050 alt_get_errno
0801b22c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801eb60 g     O .bss	00000004 alt_instruction_exception_handler
08002f9c g     F .text	00000018 putchar
0800adb0 g     F .text	00000074 _mprec_log10
080195b8 g     F .text	0000008c alt_epcs_flash_get_info
0800ae9c g     F .text	0000008c __any_on
08013838 g     F .text	00000054 _isatty_r
0801cbb4 g     O .rodata	00000028 __mprec_tinytens
080188ac g     F .text	00000078 alt_main
08002fb4 g     F .text	000000b8 _puts_r
0801ec8c g     O .bss	00000100 alt_irq
080097e4 g     F .text	0000005c _lseek_r
08016cec g     F .text	00000084 .hidden __eqdf2
0801ed8c g       *ABS*	00000000 __alt_heap_start
08002f58 g     F .text	0000003c printf
08014b7c g     F .text	0000009c _wcrtomb_r
08003328 g     F .text	0000005c __sseek
08008c5c g     F .text	00000010 __sinit
08012688 g     F .text	00000154 __swbuf_r
08009704 g     F .text	0000007c _setlocale_r
08008ac8 g     F .text	00000064 __sfmoreglue
080111d8 g     F .text	0000001c ungetc
08018944 g     F .text	00000020 __malloc_unlock
0800baf4 g     F .text	00001540 _strtod_r
0800039c g     F .text	0000008c GetInputString
0800de54 g     F .text	000000f4 _sfread_r
08009d1c g     F .text	0000015c memmove
08008c44 g     F .text	00000018 _cleanup
08009f9c g     F .text	000000a8 _Balloc
08016d70 g     F .text	000000e0 .hidden __gtdf2
0801b5ec g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
0801a4f8 g     F .text	000000f8 epcs_sector_erase
00000000 g     F .entry	00000000 __reset
08012bac g     F .text	00000058 _fstat_r
0801eb38 g     O .bss	00000004 errno
080030f4 g     F .text	00000014 __srget
080032a4 g     F .text	00000008 __seofread
08013b14 g     F .text	00001068 ___svfiprintf_internal_r
0801eb4c g     O .bss	00000004 alt_argv
08026ad4 g       *ABS*	00000000 _gp
0801d7fc g     O .rwdata	00000180 alt_fd_list
080024a0 g     F .text	00000080 _getc_r
08002520 g     F .text	00000088 getc
08002f94 g     F .text	00000008 _putchar_r
0801a734 g     F .text	00000068 epcs_write_status_register
0801ad44 g     F .text	00000090 alt_find_dev
08002df4 g     F .text	00000138 memcpy
080135a4 g     F .text	00000294 __hexnan
0800891c g     F .text	0000000c _cleanup_r
08017fac g     F .text	000000d0 .hidden __floatsidf
0801b164 g     F .text	00000078 alt_io_redirect
08016e50 g     F .text	000000e0 .hidden __ltdf2
0801bd9c g       *ABS*	00000000 __DTOR_END__
0800306c g     F .text	00000014 puts
0801b9d8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08009aa4 g     F .text	000000f0 mbrtowc
0801974c g     F .text	00000100 alt_epcs_flash_write_block
0800b850 g     F .text	00000074 __fpclassifyd
0800ad0c g     F .text	000000a4 __ratio
08012664 g     F .text	00000024 __vfiprintf_internal
08019f0c g     F .text	0000020c altera_avalon_jtag_uart_read
080025a8 g     F .text	00000014 malloc
08002f2c g     F .text	0000002c _printf_r
08002490 g     F .text	00000008 .hidden __udivsi3
080186e4 g     F .text	000000a4 isatty
080096d4 g     F .text	00000030 iswspace
0801cc04 g     O .rodata	000000c8 __mprec_tens
08009780 g     F .text	0000000c __locale_charset
08015acc g     F .text	000000b8 .hidden __lesf2
08014ddc g     F .text	00000074 .hidden __fixunsdfsi
0801eb34 g     O .bss	00000004 __malloc_top_pad
0800dde4 g     F .text	00000070 __ssrefill_r
0800d974 g     F .text	00000024 strtoul
0801eae8 g     O .rwdata	00000004 __mb_cur_max
080097b0 g     F .text	0000000c _localeconv_r
0800d998 g     F .text	00000354 _strtoull_r
0800a39c g     F .text	0000003c __i2b
080090c0 g     F .text	000004a4 __sfvwrite_r
08003108 g     F .text	00000054 _sbrk_r
0800b090 g     F .text	0000005c _read_r
0801843c g     F .text	00000074 alt_dcache_flush
0801eb04 g     O .rwdata	00000004 alt_max_fd
080128bc g     F .text	00000100 _fclose_r
080088dc g     F .text	00000030 fflush
0801eb30 g     O .bss	00000004 __malloc_max_sbrked_mem
08003424 g     F .text	00001768 __ssvfscanf_r
08015b84 g     F .text	0000089c .hidden __adddf3
080159a0 g     F .text	00000074 .hidden __nesf2
080196d8 g     F .text	00000074 alt_epcs_flash_erase_block
0800aab4 g     F .text	0000011c __b2d
08015410 g     F .text	00000590 .hidden __umoddi3
080187d8 g     F .text	000000d4 lseek
0801ead4 g     O .rwdata	00000004 _global_impure_ptr
0801a9fc g     F .text	0000005c epcs_exit_4_bytes_mode
0800b0ec g     F .text	000005a0 _realloc_r
0801ed8c g       *ABS*	00000000 __bss_end
0801afb4 g     F .text	000000f0 alt_iic_isr_register
0801b4e8 g     F .text	00000104 alt_tick
0801eb8c g     O .bss	00000100 __hexdig
08014e50 g     F .text	000005c0 .hidden __udivdi3
080129d0 g     F .text	00000184 _fputwc_r
0801cbdc g     O .rodata	00000028 __mprec_bigtens
0800a180 g     F .text	00000104 __s2b
0801807c g     F .text	000000a4 .hidden __floatunsidf
0800a85c g     F .text	00000060 __mcmp
08008c7c g     F .text	00000018 __fp_lock_all
0801af68 g     F .text	0000004c alt_ic_irq_enabled
0801b450 g     F .text	00000098 alt_alarm_stop
0800d3b4 g     F .text	00000024 strtol
0801eb54 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d0 alt_irq_handler
0801d7d4 g     O .rwdata	00000028 alt_dev_null
0800a284 g     F .text	00000068 __hi0bits
08017f24 g     F .text	00000088 .hidden __fixdfsi
0800d034 g     F .text	0000001c strtod
0801eafc g     O .rwdata	00000008 alt_dev_list
08018c10 g     F .text	000000f8 write
0800af28 g     F .text	000000a0 _putc_r
08015a14 g     F .text	000000b8 .hidden __gtsf2
080185e4 g     F .text	000000b0 fstat
08016e50 g     F .text	000000e0 .hidden __ledf2
0800a5d4 g     F .text	00000140 __pow5mult
08011308 g     F .text	0000135c ___vfiprintf_internal_r
0801eb44 g     O .bss	00000004 __nlocale_changed
08002498 g     F .text	00000008 .hidden __umodsi3
0801a8b8 g     F .text	00000068 epcs_read_electronic_signature
0801ed8c g       *ABS*	00000000 end
08019a48 g     F .text	000000c4 altera_avalon_jtag_uart_init
080001cc g     F .exceptions	00000074 alt_instruction_exception_entry
0801bd9c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0801a3a4 g     F .text	00000088 alt_avalon_timer_sc_init
080182b8 g     F .text	00000064 .hidden __clzsi2
0801a118 g     F .text	00000218 altera_avalon_jtag_uart_write
08008c6c g     F .text	00000004 __sfp_lock_acquire
08009c34 g     F .text	000000e8 memchr
08004b8c g     F .text	00001ffc ___vfprintf_internal_r
0800b98c g     F .text	00000058 _sprintf_r
08008dd0 g     F .text	000002f0 _free_r
0800978c g     F .text	00000010 __locale_mb_cur_max
0801bbd4 g     F .text	00000194 __call_exitprocs
08003080 g     F .text	00000074 __srget_r
0800dcec g     F .text	000000f8 _sungetc_r
0801eb40 g     O .bss	00000004 __mlocale_changed
0801eadc g     O .rwdata	00000004 __malloc_sbrk_base
08000240 g     F .text	00000048 _start
0801eb58 g     O .bss	00000004 _alt_tick_rate
0800d3d8 g     F .text	00000314 _strtoll_r
0800a714 g     F .text	00000148 __lshift
0801b60c g     F .text	00000204 alt_avalon_spi_command
0801eb5c g     O .bss	00000004 _alt_nticks
080189b4 g     F .text	000000fc read
08018d74 g     F .text	00000078 alt_sys_init
0801394c g     F .text	000001c8 __ssprint_r
0801bac0 g     F .text	00000114 __register_exitproc
0801388c g     F .text	000000c0 strncmp
0800a3d8 g     F .text	000001fc __multiply
08019db8 g     F .text	00000068 altera_avalon_jtag_uart_close
0801eb64 g     O .bss	00000028 __malloc_current_mallinfo
080159a0 g     F .text	00000074 .hidden __eqsf2
0800abd0 g     F .text	0000013c __d2b
0801a42c g     F .text	0000005c epcs_read_status_register
080198e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800d6ec g     F .text	00000288 _strtoul_r
0801b924 g     F .text	000000b4 alt_get_fd
08006d38 g     F .text	00000054 _close_r
0801a920 g     F .text	00000080 epcs_read_device_id
08002d78 g     F .text	0000007c memcmp
080199a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801ed8c g       *ABS*	00000000 __alt_stack_base
080199f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800315c g     F .text	0000007c sscanf
08006c08 g     F .text	00000130 __swsetup_r
08016420 g     F .text	000008cc .hidden __divdf3
08008b2c g     F .text	00000118 __sfp
0800ae24 g     F .text	00000078 __copybits
0801d32c g     O .rwdata	00000408 __malloc_av_
08008c78 g     F .text	00000004 __sinit_lock_release
08016f30 g     F .text	00000724 .hidden __muldf3
08003250 g     F .text	00000054 __sread
0801b810 g     F .text	00000114 alt_find_file
0801abe8 g     F .text	000000a4 alt_dev_llist_insert
08018924 g     F .text	00000020 __malloc_lock
08018b10 g     F .text	000000b0 sbrk
0800efec g     F .text	00001f90 ___svfprintf_internal_r
080086b4 g     F .text	00000228 _fflush_r
080127f8 g     F .text	000000c4 _calloc_r
0801eb0c g     O .rwdata	00000008 alt_flash_dev_list
0801eb24 g       *ABS*	00000000 __bss_start
08009e78 g     F .text	00000124 memset
08002320 g     F .text	00000054 main
0801eb50 g     O .bss	00000004 alt_envp
0801eb2c g     O .bss	00000004 __malloc_max_total_mem
08019944 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080127dc g     F .text	0000001c __swbuf
08015acc g     F .text	000000b8 .hidden __ltsf2
08003384 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
080129bc g     F .text	00000014 fclose
0800d154 g     F .text	00000260 _strtol_r
08018120 g     F .text	00000198 .hidden __truncdfsf2
08006f8c g     F .text	00001728 _dtoa_r
080025d0 g     F .text	000007a8 _malloc_r
08014cf0 g     F .text	00000030 __ascii_wctomb
0801eb08 g     O .rwdata	00000004 alt_errno
08010f7c g     F .text	000000d4 __submore
08009564 g     F .text	000000b8 _fwalk
08009bd8 g     F .text	0000005c _mbtowc_r
0800afc8 g     F .text	000000c8 putc
080023e0 g     F .text	00000054 .hidden __divsi3
08008cac g     F .text	00000124 _malloc_trim_r
0801bd9c g       *ABS*	00000000 __CTOR_END__
08019358 g     F .text	00000260 alt_epcs_flash_write
0800ba50 g     F .text	000000a4 strcmp
0801bd9c g       *ABS*	00000000 __DTOR_LIST__
08016cec g     F .text	00000084 .hidden __nedf2
08018d40 g     F .text	00000034 alt_irq_init
08018ab0 g     F .text	00000060 alt_release_fd
0800b9e4 g     F .text	0000006c sprintf
0801cda4 g     O .rodata	00000100 .hidden __clz_tab
0801eb3c g     O .bss	00000004 _PathLocale
0800d050 g     F .text	00000104 strtof
0801ba74 g     F .text	00000014 atexit
08015a14 g     F .text	000000b8 .hidden __gesf2
08006bac g     F .text	0000005c _write_r
080097bc g     F .text	0000001c setlocale
0800b984 g     F .text	00000008 nanf
0801ead8 g     O .rwdata	00000004 _impure_ptr
0801eb48 g     O .bss	00000004 alt_argc
080099f8 g     F .text	000000ac _mbrtowc_r
0801ace8 g     F .text	0000005c _do_dtors
080097a8 g     F .text	00000008 __locale_cjk_lang
0800b6a8 g     F .text	000001a8 __srefill_r
08000020 g       .exceptions	00000000 alt_irq_entry
08009b94 g     F .text	00000044 __ascii_mbtowc
0800aa54 g     F .text	00000060 __ulp
08008c94 g     F .text	00000018 __fp_unlock_all
0801eaf4 g     O .rwdata	00000008 alt_fs_list
0800df48 g     F .text	000010a4 __ssvfiscanf_r
080097d8 g     F .text	0000000c localeconv
0801a5f0 g     F .text	000000f4 epcs_read_buffer
08018e24 g     F .text	00000054 alt_epcs_flash_init
0801add4 g     F .text	00000050 alt_ic_isr_register
08012d04 g     F .text	00000084 __hexdig_init
080031d8 g     F .text	00000078 _sscanf_r
0801eb24 g       *ABS*	00000000 _edata
0801ed8c g       *ABS*	00000000 _end
080184dc g     F .text	00000068 alt_flash_open_dev
08019e20 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0801aec4 g     F .text	000000a4 alt_ic_irq_disable
0801a9a0 g     F .text	0000005c epcs_enter_4_bytes_mode
080032ac g     F .text	0000007c __swrite
0801eae0 g     O .rwdata	00000004 __malloc_trim_threshold
0800979c g     F .text	0000000c __locale_msgcharset
0801ba88 g     F .text	00000038 exit
0800961c g     F .text	000000b8 _fwalk_reent
0800a8bc g     F .text	00000198 __mdiff
08018544 g     F .text	00000050 alt_flash_close_dev
08002434 g     F .text	0000005c .hidden __modsi3
0801eae4 g     O .rwdata	00000004 __ctype_ptr__
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08008c70 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800b8c4 g     F .text	000000c0 __sccl
0801c90a g     O .rodata	00000101 _ctype_
0801eaec g     O .rwdata	00000004 __mbtowc
0801bd68 g     F .text	00000034 _exit
0801aa58 g     F .text	00000140 alt_alarm_start
08014d7c g     F .text	00000060 .hidden __muldi3
08009840 g     F .text	000001b8 __smakebuf_r
0800338c g     F .text	00000098 strlen
0801a6e4 g     F .text	00000050 epcs_write_enable
0801b2f8 g     F .text	00000158 open
08016d70 g     F .text	000000e0 .hidden __gedf2
08012d88 g     F .text	0000081c __gethex
0801eaf0 g     O .rwdata	00000004 __wctomb
080112f0 g     F .text	00000018 __sprint_r
0801eb18 g     O .rwdata	00000004 alt_priority_mask
0801ae24 g     F .text	000000a0 alt_ic_irq_enable
08006b88 g     F .text	00000024 __vfprintf_internal
00000000 g       *ABS*	00000000 __alt_mem_epcs
08014d20 g     F .text	0000005c _wctomb_r
08017654 g     F .text	000008d0 .hidden __subdf3
0801984c g     F .text	00000098 alt_epcs_flash_read
0800a2ec g     F .text	000000b0 __lo0bits
0801eb1c g     O .rwdata	00000008 alt_alarm_list
08011050 g     F .text	00000188 _ungetc_r
0801ac8c g     F .text	0000005c _do_ctors
08014c18 g     F .text	000000d8 wcrtomb
0801836c g     F .text	000000d0 close
08012b54 g     F .text	00000058 fputwc
080025bc g     F .text	00000014 free
08008c74 g     F .text	00000004 __sinit_lock_acquire
0801a79c g     F .text	0000011c epcs_write_buffer
0800a06c g     F .text	00000114 __multadd
0800a044 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001cc0 	call	80001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10bb2304 	addi	r2,r2,-4980
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10bb2304 	addi	r2,r2,-4980
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	e037883a 	mov	sp,fp
 80001bc:	dfc00117 	ldw	ra,4(sp)
 80001c0:	df000017 	ldw	fp,0(sp)
 80001c4:	dec00204 	addi	sp,sp,8
 80001c8:	f800283a 	ret

080001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001cc:	defffb04 	addi	sp,sp,-20
 80001d0:	dfc00415 	stw	ra,16(sp)
 80001d4:	df000315 	stw	fp,12(sp)
 80001d8:	df000304 	addi	fp,sp,12
 80001dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e0:	000531fa 	rdctl	r2,exception
 80001e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001e8:	e0bffd17 	ldw	r2,-12(fp)
 80001ec:	10801f0c 	andi	r2,r2,124
 80001f0:	1004d0ba 	srli	r2,r2,2
 80001f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001f8:	0005333a 	rdctl	r2,badaddr
 80001fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000200:	d0a02317 	ldw	r2,-32628(gp)
 8000204:	10000726 	beq	r2,zero,8000224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 8000208:	d0a02317 	ldw	r2,-32628(gp)
 800020c:	e0fffd17 	ldw	r3,-12(fp)
 8000210:	1809883a 	mov	r4,r3
 8000214:	e17fff17 	ldw	r5,-4(fp)
 8000218:	e1bffe17 	ldw	r6,-8(fp)
 800021c:	103ee83a 	callr	r2
 8000220:	00000206 	br	800022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000228:	0005883a 	mov	r2,zero
}
 800022c:	e037883a 	mov	sp,fp
 8000230:	dfc00117 	ldw	ra,4(sp)
 8000234:	df000017 	ldw	fp,0(sp)
 8000238:	dec00204 	addi	sp,sp,8
 800023c:	f800283a 	ret

Disassembly of section .text:

08000240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800024c:	00bffd16 	blt	zero,r2,8000244 <__alt_data_end+0xf8000244>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000250:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000258:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800025c:	d69ab514 	ori	gp,gp,27348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000260:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000264:	10bac914 	ori	r2,r2,60196

    movhi r3, %hi(__bss_end)
 8000268:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800026c:	18fb6314 	ori	r3,r3,60812

    beq r2, r3, 1f
 8000270:	10c00326 	beq	r2,r3,8000280 <_start+0x40>

0:
    stw zero, (r2)
 8000274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800027c:	10fffd36 	bltu	r2,r3,8000274 <__alt_data_end+0xf8000274>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000280:	80188ac0 	call	80188ac <alt_main>

08000284 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000284:	003fff06 	br	8000284 <__alt_data_end+0xf8000284>

08000288 <MenuHeader>:
*
*  Purpose: Prints the menu header.
*
******************************************************************/
static void MenuHeader(void)
{
 8000288:	defffe04 	addi	sp,sp,-8
 800028c:	dfc00115 	stw	ra,4(sp)
 8000290:	df000015 	stw	fp,0(sp)
 8000294:	d839883a 	mov	fp,sp
  printf("\n\n");
 8000298:	010200b4 	movhi	r4,2050
 800029c:	212f6704 	addi	r4,r4,-16996
 80002a0:	800306c0 	call	800306c <puts>
  printf("             <---->   Nios II Memory Test.   <---->\n");
 80002a4:	010200b4 	movhi	r4,2050
 80002a8:	212f6804 	addi	r4,r4,-16992
 80002ac:	800306c0 	call	800306c <puts>
  printf("This software example tests the memory in your system to assure it\n");
 80002b0:	010200b4 	movhi	r4,2050
 80002b4:	212f7504 	addi	r4,r4,-16940
 80002b8:	800306c0 	call	800306c <puts>
  printf("is working properly.  This test is destructive to the contents of\n");
 80002bc:	010200b4 	movhi	r4,2050
 80002c0:	212f8604 	addi	r4,r4,-16872
 80002c4:	800306c0 	call	800306c <puts>
  printf("the memory it tests. Assure the memory being tested does not contain\n");
 80002c8:	010200b4 	movhi	r4,2050
 80002cc:	212f9704 	addi	r4,r4,-16804
 80002d0:	800306c0 	call	800306c <puts>
  printf("the executable or data sections of this code or the exception address\n");
 80002d4:	010200b4 	movhi	r4,2050
 80002d8:	212fa904 	addi	r4,r4,-16732
 80002dc:	800306c0 	call	800306c <puts>
  printf("of the system.\n");
 80002e0:	010200b4 	movhi	r4,2050
 80002e4:	212fbb04 	addi	r4,r4,-16660
 80002e8:	800306c0 	call	800306c <puts>
}
 80002ec:	e037883a 	mov	sp,fp
 80002f0:	dfc00117 	ldw	ra,4(sp)
 80002f4:	df000017 	ldw	fp,0(sp)
 80002f8:	dec00204 	addi	sp,sp,8
 80002fc:	f800283a 	ret

08000300 <MenuBegin>:
*
*  Purpose: Prints the top portion of the menu.
*
******************************************************************/
static void MenuBegin( char *title )
{
 8000300:	defffd04 	addi	sp,sp,-12
 8000304:	dfc00215 	stw	ra,8(sp)
 8000308:	df000115 	stw	fp,4(sp)
 800030c:	df000104 	addi	fp,sp,4
 8000310:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
 8000314:	010200b4 	movhi	r4,2050
 8000318:	212f6704 	addi	r4,r4,-16996
 800031c:	800306c0 	call	800306c <puts>
  printf("----------------------------------\n");
 8000320:	010200b4 	movhi	r4,2050
 8000324:	212fbf04 	addi	r4,r4,-16644
 8000328:	800306c0 	call	800306c <puts>
  printf("%s\n",title);
 800032c:	e13fff17 	ldw	r4,-4(fp)
 8000330:	800306c0 	call	800306c <puts>
  printf("----------------------------------\n");
 8000334:	010200b4 	movhi	r4,2050
 8000338:	212fbf04 	addi	r4,r4,-16644
 800033c:	800306c0 	call	800306c <puts>
}
 8000340:	e037883a 	mov	sp,fp
 8000344:	dfc00117 	ldw	ra,4(sp)
 8000348:	df000017 	ldw	fp,0(sp)
 800034c:	dec00204 	addi	sp,sp,8
 8000350:	f800283a 	ret

08000354 <MenuItem>:
*  Purpose: Prints selection items in the menu, enumerated by the 
*           specified letter.
*
******************************************************************/
static void MenuItem( char letter, char *name )
{
 8000354:	defffc04 	addi	sp,sp,-16
 8000358:	dfc00315 	stw	ra,12(sp)
 800035c:	df000215 	stw	fp,8(sp)
 8000360:	df000204 	addi	fp,sp,8
 8000364:	2005883a 	mov	r2,r4
 8000368:	e17fff15 	stw	r5,-4(fp)
 800036c:	e0bffe05 	stb	r2,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
 8000370:	e0bffe07 	ldb	r2,-8(fp)
 8000374:	010200b4 	movhi	r4,2050
 8000378:	212fc804 	addi	r4,r4,-16608
 800037c:	100b883a 	mov	r5,r2
 8000380:	e1bfff17 	ldw	r6,-4(fp)
 8000384:	8002f580 	call	8002f58 <printf>
}
 8000388:	e037883a 	mov	sp,fp
 800038c:	dfc00117 	ldw	ra,4(sp)
 8000390:	df000017 	ldw	fp,0(sp)
 8000394:	dec00204 	addi	sp,sp,8
 8000398:	f800283a 	ret

0800039c <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
 800039c:	defff904 	addi	sp,sp,-28
 80003a0:	dfc00615 	stw	ra,24(sp)
 80003a4:	df000515 	stw	fp,20(sp)
 80003a8:	df000504 	addi	fp,sp,20
 80003ac:	e13ffd15 	stw	r4,-12(fp)
 80003b0:	e17ffe15 	stw	r5,-8(fp)
 80003b4:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
 80003b8:	e03ffc15 	stw	zero,-16(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
 80003bc:	e03ffb15 	stw	zero,-20(fp)
 80003c0:	00000e06 	br	80003fc <GetInputString+0x60>
  {
    if( (ch = getc(stream)) != '\r')
 80003c4:	e13fff17 	ldw	r4,-4(fp)
 80003c8:	80025200 	call	8002520 <getc>
 80003cc:	e0bffc15 	stw	r2,-16(fp)
 80003d0:	e0bffc17 	ldw	r2,-16(fp)
 80003d4:	10800360 	cmpeqi	r2,r2,13
 80003d8:	1000081e 	bne	r2,zero,80003fc <GetInputString+0x60>
    {
      entry[i] = ch;
 80003dc:	e0bffb17 	ldw	r2,-20(fp)
 80003e0:	e0fffd17 	ldw	r3,-12(fp)
 80003e4:	1885883a 	add	r2,r3,r2
 80003e8:	e0fffc17 	ldw	r3,-16(fp)
 80003ec:	10c00005 	stb	r3,0(r2)
      i++;
 80003f0:	e0bffb17 	ldw	r2,-20(fp)
 80003f4:	10800044 	addi	r2,r2,1
 80003f8:	e0bffb15 	stw	r2,-20(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
 80003fc:	e0bffc17 	ldw	r2,-16(fp)
 8000400:	108002a0 	cmpeqi	r2,r2,10
 8000404:	1000031e 	bne	r2,zero,8000414 <GetInputString+0x78>
 8000408:	e0fffb17 	ldw	r3,-20(fp)
 800040c:	e0bffe17 	ldw	r2,-8(fp)
 8000410:	18bfec16 	blt	r3,r2,80003c4 <__alt_data_end+0xf80003c4>
    {
      entry[i] = ch;
      i++;
    }
  }
}
 8000414:	e037883a 	mov	sp,fp
 8000418:	dfc00117 	ldw	ra,4(sp)
 800041c:	df000017 	ldw	fp,0(sp)
 8000420:	dec00204 	addi	sp,sp,8
 8000424:	f800283a 	ret

08000428 <MenuEnd>:
*  Purpose: Prints the end of the menu, then captures and returns
*           the user's selection.
*
******************************************************************/
static int MenuEnd( char lowLetter, char highLetter )
{
 8000428:	defffc04 	addi	sp,sp,-16
 800042c:	dfc00315 	stw	ra,12(sp)
 8000430:	df000215 	stw	fp,8(sp)
 8000434:	df000204 	addi	fp,sp,8
 8000438:	2007883a 	mov	r3,r4
 800043c:	2805883a 	mov	r2,r5
 8000440:	e0fffe05 	stb	r3,-8(fp)
 8000444:	e0bfff05 	stb	r2,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
 8000448:	010200b4 	movhi	r4,2050
 800044c:	212fcc04 	addi	r4,r4,-16592
 8000450:	800306c0 	call	800306c <puts>
  printf("----------------------------------\n");
 8000454:	010200b4 	movhi	r4,2050
 8000458:	212fbf04 	addi	r4,r4,-16644
 800045c:	800306c0 	call	800306c <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
 8000460:	e0fffe07 	ldb	r3,-8(fp)
 8000464:	e0bfff07 	ldb	r2,-4(fp)
 8000468:	010200b4 	movhi	r4,2050
 800046c:	212fd004 	addi	r4,r4,-16576
 8000470:	180b883a 	mov	r5,r3
 8000474:	100d883a 	mov	r6,r2
 8000478:	8002f580 	call	8002f58 <printf>

  GetInputString( entry, sizeof(entry), stdin );
 800047c:	008200b4 	movhi	r2,2050
 8000480:	10bab604 	addi	r2,r2,-5416
 8000484:	10800017 	ldw	r2,0(r2)
 8000488:	10800117 	ldw	r2,4(r2)
 800048c:	d1201404 	addi	r4,gp,-32688
 8000490:	01400104 	movi	r5,4
 8000494:	100d883a 	mov	r6,r2
 8000498:	800039c0 	call	800039c <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
 800049c:	d1201404 	addi	r4,gp,-32688
 80004a0:	014200b4 	movhi	r5,2050
 80004a4:	296fdc04 	addi	r5,r5,-16528
 80004a8:	d1a01504 	addi	r6,gp,-32684
 80004ac:	800315c0 	call	800315c <sscanf>
 80004b0:	10001726 	beq	r2,zero,8000510 <MenuEnd+0xe8>
  {
    if( ch >= 'A' && ch <= 'Z' )
 80004b4:	d0a01503 	ldbu	r2,-32684(gp)
 80004b8:	10803fcc 	andi	r2,r2,255
 80004bc:	1080201c 	xori	r2,r2,128
 80004c0:	10bfe004 	addi	r2,r2,-128
 80004c4:	10801050 	cmplti	r2,r2,65
 80004c8:	1000091e 	bne	r2,zero,80004f0 <MenuEnd+0xc8>
 80004cc:	d0a01503 	ldbu	r2,-32684(gp)
 80004d0:	10803fcc 	andi	r2,r2,255
 80004d4:	1080201c 	xori	r2,r2,128
 80004d8:	10bfe004 	addi	r2,r2,-128
 80004dc:	108016c8 	cmpgei	r2,r2,91
 80004e0:	1000031e 	bne	r2,zero,80004f0 <MenuEnd+0xc8>
      ch += 'a' - 'A';
 80004e4:	d0a01503 	ldbu	r2,-32684(gp)
 80004e8:	10800804 	addi	r2,r2,32
 80004ec:	d0a01505 	stb	r2,-32684(gp)
    if( ch == 27 )
 80004f0:	d0a01503 	ldbu	r2,-32684(gp)
 80004f4:	10803fcc 	andi	r2,r2,255
 80004f8:	1080201c 	xori	r2,r2,128
 80004fc:	10bfe004 	addi	r2,r2,-128
 8000500:	108006d8 	cmpnei	r2,r2,27
 8000504:	1000021e 	bne	r2,zero,8000510 <MenuEnd+0xe8>
      ch = 'q';
 8000508:	00801c44 	movi	r2,113
 800050c:	d0a01505 	stb	r2,-32684(gp)
  }
  return ch;
 8000510:	d0a01503 	ldbu	r2,-32684(gp)
 8000514:	10803fcc 	andi	r2,r2,255
 8000518:	1080201c 	xori	r2,r2,128
 800051c:	10bfe004 	addi	r2,r2,-128
}
 8000520:	e037883a 	mov	sp,fp
 8000524:	dfc00117 	ldw	ra,4(sp)
 8000528:	df000017 	ldw	fp,0(sp)
 800052c:	dec00204 	addi	sp,sp,8
 8000530:	f800283a 	ret

08000534 <MemGetAddressRange>:
*
*  Purpose: Gathers a range of memory from the user.
*
******************************************************************/
static int MemGetAddressRange(int* base_address, int* end_address)
{
 8000534:	defff904 	addi	sp,sp,-28
 8000538:	dfc00615 	stw	ra,24(sp)
 800053c:	df000515 	stw	fp,20(sp)
 8000540:	df000504 	addi	fp,sp,20
 8000544:	e13ffe15 	stw	r4,-8(fp)
 8000548:	e17fff15 	stw	r5,-4(fp)
  char line[12];

  while(1)
  {
    /* Get the base address */
    printf("Base address to start memory test: (i.e. 0x800000)\n");
 800054c:	010200b4 	movhi	r4,2050
 8000550:	212fdd04 	addi	r4,r4,-16524
 8000554:	800306c0 	call	800306c <puts>
    printf(">");
 8000558:	01000f84 	movi	r4,62
 800055c:	8002f9c0 	call	8002f9c <putchar>

    GetInputString( line, sizeof(line), stdin );
 8000560:	008200b4 	movhi	r2,2050
 8000564:	10bab604 	addi	r2,r2,-5416
 8000568:	10800017 	ldw	r2,0(r2)
 800056c:	10800117 	ldw	r2,4(r2)
 8000570:	e13ffb04 	addi	r4,fp,-20
 8000574:	01400304 	movi	r5,12
 8000578:	100d883a 	mov	r6,r2
 800057c:	800039c0 	call	800039c <GetInputString>
   
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", base_address) != 1)
 8000580:	e13ffb04 	addi	r4,fp,-20
 8000584:	014200b4 	movhi	r5,2050
 8000588:	296fea04 	addi	r5,r5,-16472
 800058c:	e1bffe17 	ldw	r6,-8(fp)
 8000590:	800315c0 	call	800315c <sscanf>
 8000594:	10800060 	cmpeqi	r2,r2,1
 8000598:	1000061e 	bne	r2,zero,80005b4 <MemGetAddressRange+0x80>
    {
      printf("%s\n", line);
 800059c:	e13ffb04 	addi	r4,fp,-20
 80005a0:	800306c0 	call	800306c <puts>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
 80005a4:	010200b4 	movhi	r4,2050
 80005a8:	212fec04 	addi	r4,r4,-16464
 80005ac:	800306c0 	call	800306c <puts>
      continue;
 80005b0:	00002206 	br	800063c <MemGetAddressRange+0x108>
    }
    
    /* Get the end address */
    printf("End Address:\n");
 80005b4:	010200b4 	movhi	r4,2050
 80005b8:	21300004 	addi	r4,r4,-16384
 80005bc:	800306c0 	call	800306c <puts>
    printf(">");
 80005c0:	01000f84 	movi	r4,62
 80005c4:	8002f9c0 	call	8002f9c <putchar>

    GetInputString( line, sizeof(line), stdin );
 80005c8:	008200b4 	movhi	r2,2050
 80005cc:	10bab604 	addi	r2,r2,-5416
 80005d0:	10800017 	ldw	r2,0(r2)
 80005d4:	10800117 	ldw	r2,4(r2)
 80005d8:	e13ffb04 	addi	r4,fp,-20
 80005dc:	01400304 	movi	r5,12
 80005e0:	100d883a 	mov	r6,r2
 80005e4:	800039c0 	call	800039c <GetInputString>
    
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", end_address) != 1)
 80005e8:	e13ffb04 	addi	r4,fp,-20
 80005ec:	014200b4 	movhi	r5,2050
 80005f0:	296fea04 	addi	r5,r5,-16472
 80005f4:	e1bfff17 	ldw	r6,-4(fp)
 80005f8:	800315c0 	call	800315c <sscanf>
 80005fc:	10800060 	cmpeqi	r2,r2,1
 8000600:	1000041e 	bne	r2,zero,8000614 <MemGetAddressRange+0xe0>
    {
      printf(" -ERROR: Invalid end address entered.  Address must be in the form '0x8FFFFF'\n\n");
 8000604:	010200b4 	movhi	r4,2050
 8000608:	21300404 	addi	r4,r4,-16368
 800060c:	800306c0 	call	800306c <puts>
      continue;
 8000610:	00000a06 	br	800063c <MemGetAddressRange+0x108>
    }
    
    /* Make sure end address is greater than base address. */
    if (*end_address <= *base_address)
 8000614:	e0bfff17 	ldw	r2,-4(fp)
 8000618:	10800017 	ldw	r2,0(r2)
 800061c:	e0fffe17 	ldw	r3,-8(fp)
 8000620:	18c00017 	ldw	r3,0(r3)
 8000624:	18800416 	blt	r3,r2,8000638 <MemGetAddressRange+0x104>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");
 8000628:	010200b4 	movhi	r4,2050
 800062c:	21301804 	addi	r4,r4,-16288
 8000630:	800306c0 	call	800306c <puts>

      continue;
 8000634:	00000106 	br	800063c <MemGetAddressRange+0x108>
    }
    break;
 8000638:	00000106 	br	8000640 <MemGetAddressRange+0x10c>
  }
 800063c:	003fc306 	br	800054c <__alt_data_end+0xf800054c>

  return(0);
 8000640:	0005883a 	mov	r2,zero
}
 8000644:	e037883a 	mov	sp,fp
 8000648:	dfc00117 	ldw	ra,4(sp)
 800064c:	df000017 	ldw	fp,0(sp)
 8000650:	dec00204 	addi	sp,sp,8
 8000654:	f800283a 	ret

08000658 <MemTestDataBus>:
*  Purpose: Tests that the data bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestDataBus(unsigned int address)
{
 8000658:	defffc04 	addi	sp,sp,-16
 800065c:	df000315 	stw	fp,12(sp)
 8000660:	df000304 	addi	fp,sp,12
 8000664:	e13fff15 	stw	r4,-4(fp)
  unsigned int pattern;
  unsigned int ret_code = 0x0;
 8000668:	e03ffe15 	stw	zero,-8(fp)

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
 800066c:	00800044 	movi	r2,1
 8000670:	e0bffd15 	stw	r2,-12(fp)
 8000674:	00000e06 	br	80006b0 <MemTestDataBus+0x58>
  {
    /* Write the test pattern. */
    IOWR_32DIRECT(address, 0, pattern);
 8000678:	e0bfff17 	ldw	r2,-4(fp)
 800067c:	e0fffd17 	ldw	r3,-12(fp)
 8000680:	10c00035 	stwio	r3,0(r2)

    /* Read it back (immediately is okay for this test). */
    if (IORD_32DIRECT(address, 0) != pattern)
 8000684:	e0bfff17 	ldw	r2,-4(fp)
 8000688:	10800037 	ldwio	r2,0(r2)
 800068c:	1007883a 	mov	r3,r2
 8000690:	e0bffd17 	ldw	r2,-12(fp)
 8000694:	18800326 	beq	r3,r2,80006a4 <MemTestDataBus+0x4c>
    {
      ret_code = pattern;
 8000698:	e0bffd17 	ldw	r2,-12(fp)
 800069c:	e0bffe15 	stw	r2,-8(fp)
      break;
 80006a0:	00000506 	br	80006b8 <MemTestDataBus+0x60>
{
  unsigned int pattern;
  unsigned int ret_code = 0x0;

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
 80006a4:	e0bffd17 	ldw	r2,-12(fp)
 80006a8:	1085883a 	add	r2,r2,r2
 80006ac:	e0bffd15 	stw	r2,-12(fp)
 80006b0:	e0bffd17 	ldw	r2,-12(fp)
 80006b4:	103ff01e 	bne	r2,zero,8000678 <__alt_data_end+0xf8000678>
    {
      ret_code = pattern;
      break;
    }
  }
  return ret_code;
 80006b8:	e0bffe17 	ldw	r2,-8(fp)
}
 80006bc:	e037883a 	mov	sp,fp
 80006c0:	df000017 	ldw	fp,0(sp)
 80006c4:	dec00104 	addi	sp,sp,4
 80006c8:	f800283a 	ret

080006cc <MemTestAddressBus>:
*  Purpose: Tests that the address bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestAddressBus(unsigned int memory_base, unsigned int nBytes)
{
 80006cc:	defff704 	addi	sp,sp,-36
 80006d0:	df000815 	stw	fp,32(sp)
 80006d4:	df000804 	addi	fp,sp,32
 80006d8:	e13ffe15 	stw	r4,-8(fp)
 80006dc:	e17fff15 	stw	r5,-4(fp)
  unsigned int address_mask = (nBytes - 1);
 80006e0:	e0bfff17 	ldw	r2,-4(fp)
 80006e4:	10bfffc4 	addi	r2,r2,-1
 80006e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int offset;
  unsigned int test_offset;

  unsigned int pattern     = 0xAAAAAAAA;
 80006ec:	00aaaaf4 	movhi	r2,43691
 80006f0:	10aaaa84 	addi	r2,r2,-21846
 80006f4:	e0bffc15 	stw	r2,-16(fp)
  unsigned int antipattern  = 0x55555555;
 80006f8:	00955574 	movhi	r2,21845
 80006fc:	10955544 	addi	r2,r2,21845
 8000700:	e0bffd15 	stw	r2,-12(fp)

  unsigned int ret_code = 0x0;
 8000704:	e03ffa15 	stw	zero,-24(fp)

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
 8000708:	00800104 	movi	r2,4
 800070c:	e0bff815 	stw	r2,-32(fp)
 8000710:	00000906 	br	8000738 <MemTestAddressBus+0x6c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
 8000714:	e0fff817 	ldw	r3,-32(fp)
 8000718:	e0bffe17 	ldw	r2,-8(fp)
 800071c:	1885883a 	add	r2,r3,r2
 8000720:	1007883a 	mov	r3,r2
 8000724:	e0bffc17 	ldw	r2,-16(fp)
 8000728:	18800035 	stwio	r2,0(r3)
  unsigned int antipattern  = 0x55555555;

  unsigned int ret_code = 0x0;

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
 800072c:	e0bff817 	ldw	r2,-32(fp)
 8000730:	1085883a 	add	r2,r2,r2
 8000734:	e0bff815 	stw	r2,-32(fp)
 8000738:	e0fff817 	ldw	r3,-32(fp)
 800073c:	e0bffb17 	ldw	r2,-20(fp)
 8000740:	1884703a 	and	r2,r3,r2
 8000744:	103ff31e 	bne	r2,zero,8000714 <__alt_data_end+0xf8000714>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
 8000748:	e03ff915 	stw	zero,-28(fp)
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
 800074c:	e0fff917 	ldw	r3,-28(fp)
 8000750:	e0bffe17 	ldw	r2,-8(fp)
 8000754:	1885883a 	add	r2,r3,r2
 8000758:	1007883a 	mov	r3,r2
 800075c:	e0bffd17 	ldw	r2,-12(fp)
 8000760:	18800035 	stwio	r2,0(r3)
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
 8000764:	00800104 	movi	r2,4
 8000768:	e0bff815 	stw	r2,-32(fp)
 800076c:	00000f06 	br	80007ac <MemTestAddressBus+0xe0>
  {
     if (IORD_32DIRECT(memory_base, offset) != pattern)
 8000770:	e0fff817 	ldw	r3,-32(fp)
 8000774:	e0bffe17 	ldw	r2,-8(fp)
 8000778:	1885883a 	add	r2,r3,r2
 800077c:	10800037 	ldwio	r2,0(r2)
 8000780:	1007883a 	mov	r3,r2
 8000784:	e0bffc17 	ldw	r2,-16(fp)
 8000788:	18800526 	beq	r3,r2,80007a0 <MemTestAddressBus+0xd4>
     {
        ret_code = (memory_base+offset);
 800078c:	e0fffe17 	ldw	r3,-8(fp)
 8000790:	e0bff817 	ldw	r2,-32(fp)
 8000794:	1885883a 	add	r2,r3,r2
 8000798:	e0bffa15 	stw	r2,-24(fp)
        break;
 800079c:	00000706 	br	80007bc <MemTestAddressBus+0xf0>
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
 80007a0:	e0bff817 	ldw	r2,-32(fp)
 80007a4:	1085883a 	add	r2,r2,r2
 80007a8:	e0bff815 	stw	r2,-32(fp)
 80007ac:	e0fff817 	ldw	r3,-32(fp)
 80007b0:	e0bffb17 	ldw	r2,-20(fp)
 80007b4:	1884703a 	and	r2,r3,r2
 80007b8:	103fed1e 	bne	r2,zero,8000770 <__alt_data_end+0xf8000770>
        break;
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
 80007bc:	e0fff917 	ldw	r3,-28(fp)
 80007c0:	e0bffe17 	ldw	r2,-8(fp)
 80007c4:	1885883a 	add	r2,r3,r2
 80007c8:	1007883a 	mov	r3,r2
 80007cc:	e0bffc17 	ldw	r2,-16(fp)
 80007d0:	18800035 	stwio	r2,0(r3)
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
 80007d4:	00800104 	movi	r2,4
 80007d8:	e0bff915 	stw	r2,-28(fp)
 80007dc:	00002a06 	br	8000888 <MemTestAddressBus+0x1bc>
  {
    if (!ret_code)
 80007e0:	e0bffa17 	ldw	r2,-24(fp)
 80007e4:	1000251e 	bne	r2,zero,800087c <MemTestAddressBus+0x1b0>
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
 80007e8:	e0fff917 	ldw	r3,-28(fp)
 80007ec:	e0bffe17 	ldw	r2,-8(fp)
 80007f0:	1885883a 	add	r2,r3,r2
 80007f4:	1007883a 	mov	r3,r2
 80007f8:	e0bffd17 	ldw	r2,-12(fp)
 80007fc:	18800035 	stwio	r2,0(r3)
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
 8000800:	00800104 	movi	r2,4
 8000804:	e0bff815 	stw	r2,-32(fp)
 8000808:	00001206 	br	8000854 <MemTestAddressBus+0x188>
      {
        if ((IORD_32DIRECT(memory_base, offset) != pattern) && (offset != test_offset))
 800080c:	e0fff817 	ldw	r3,-32(fp)
 8000810:	e0bffe17 	ldw	r2,-8(fp)
 8000814:	1885883a 	add	r2,r3,r2
 8000818:	10800037 	ldwio	r2,0(r2)
 800081c:	1007883a 	mov	r3,r2
 8000820:	e0bffc17 	ldw	r2,-16(fp)
 8000824:	18800826 	beq	r3,r2,8000848 <MemTestAddressBus+0x17c>
 8000828:	e0fff817 	ldw	r3,-32(fp)
 800082c:	e0bff917 	ldw	r2,-28(fp)
 8000830:	18800526 	beq	r3,r2,8000848 <MemTestAddressBus+0x17c>
        {
          ret_code = (memory_base + test_offset);
 8000834:	e0fffe17 	ldw	r3,-8(fp)
 8000838:	e0bff917 	ldw	r2,-28(fp)
 800083c:	1885883a 	add	r2,r3,r2
 8000840:	e0bffa15 	stw	r2,-24(fp)
          break;
 8000844:	00000706 	br	8000864 <MemTestAddressBus+0x198>
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
  {
    if (!ret_code)
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
 8000848:	e0bff817 	ldw	r2,-32(fp)
 800084c:	1085883a 	add	r2,r2,r2
 8000850:	e0bff815 	stw	r2,-32(fp)
 8000854:	e0fff817 	ldw	r3,-32(fp)
 8000858:	e0bffb17 	ldw	r2,-20(fp)
 800085c:	1884703a 	and	r2,r3,r2
 8000860:	103fea1e 	bne	r2,zero,800080c <__alt_data_end+0xf800080c>
        {
          ret_code = (memory_base + test_offset);
          break;
        }
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
 8000864:	e0fff917 	ldw	r3,-28(fp)
 8000868:	e0bffe17 	ldw	r2,-8(fp)
 800086c:	1885883a 	add	r2,r3,r2
 8000870:	1007883a 	mov	r3,r2
 8000874:	e0bffc17 	ldw	r2,-16(fp)
 8000878:	18800035 	stwio	r2,0(r3)
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
 800087c:	e0bff917 	ldw	r2,-28(fp)
 8000880:	1085883a 	add	r2,r2,r2
 8000884:	e0bff915 	stw	r2,-28(fp)
 8000888:	e0fff917 	ldw	r3,-28(fp)
 800088c:	e0bffb17 	ldw	r2,-20(fp)
 8000890:	1884703a 	and	r2,r3,r2
 8000894:	103fd21e 	bne	r2,zero,80007e0 <__alt_data_end+0xf80007e0>
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
    }
  }

  return ret_code;
 8000898:	e0bffa17 	ldw	r2,-24(fp)
}
 800089c:	e037883a 	mov	sp,fp
 80008a0:	df000017 	ldw	fp,0(sp)
 80008a4:	dec00104 	addi	sp,sp,4
 80008a8:	f800283a 	ret

080008ac <MemTest8_16BitAccess>:
*           can be read and written in both byte and half-word 
*           modes.
*
******************************************************************/
static int MemTest8_16BitAccess(unsigned int memory_base)
{
 80008ac:	defffd04 	addi	sp,sp,-12
 80008b0:	df000215 	stw	fp,8(sp)
 80008b4:	df000204 	addi	fp,sp,8
 80008b8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0x0;
 80008bc:	e03ffe15 	stw	zero,-8(fp)

  /* Write 4 bytes */
  IOWR_8DIRECT(memory_base, 0, 0x0A);
 80008c0:	e0bfff17 	ldw	r2,-4(fp)
 80008c4:	00c00284 	movi	r3,10
 80008c8:	10c00025 	stbio	r3,0(r2)
  IOWR_8DIRECT(memory_base, 1, 0x05);
 80008cc:	e0bfff17 	ldw	r2,-4(fp)
 80008d0:	10800044 	addi	r2,r2,1
 80008d4:	1007883a 	mov	r3,r2
 80008d8:	00800144 	movi	r2,5
 80008dc:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 2, 0xA0);
 80008e0:	e0bfff17 	ldw	r2,-4(fp)
 80008e4:	10800084 	addi	r2,r2,2
 80008e8:	1007883a 	mov	r3,r2
 80008ec:	00bfe804 	movi	r2,-96
 80008f0:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 3, 0x50);
 80008f4:	e0bfff17 	ldw	r2,-4(fp)
 80008f8:	108000c4 	addi	r2,r2,3
 80008fc:	1007883a 	mov	r3,r2
 8000900:	00801404 	movi	r2,80
 8000904:	18800025 	stbio	r2,0(r3)

  /* Read it back as one word */
  if(IORD_32DIRECT(memory_base, 0) != 0x50A0050A)
 8000908:	e0bfff17 	ldw	r2,-4(fp)
 800090c:	10c00037 	ldwio	r3,0(r2)
 8000910:	00942834 	movhi	r2,20640
 8000914:	10814284 	addi	r2,r2,1290
 8000918:	18800226 	beq	r3,r2,8000924 <MemTest8_16BitAccess+0x78>
  {
    ret_code = memory_base;
 800091c:	e0bfff17 	ldw	r2,-4(fp)
 8000920:	e0bffe15 	stw	r2,-8(fp)
  }

  /* Read it back as two half-words */
  if (!ret_code)
 8000924:	e0bffe17 	ldw	r2,-8(fp)
 8000928:	10000d1e 	bne	r2,zero,8000960 <MemTest8_16BitAccess+0xb4>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
 800092c:	e0bfff17 	ldw	r2,-4(fp)
 8000930:	10800084 	addi	r2,r2,2
 8000934:	1080002b 	ldhuio	r2,0(r2)
 8000938:	10bfffcc 	andi	r2,r2,65535
 800093c:	10942818 	cmpnei	r2,r2,20640
 8000940:	1000051e 	bne	r2,zero,8000958 <MemTest8_16BitAccess+0xac>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
 8000944:	e0bfff17 	ldw	r2,-4(fp)
 8000948:	1080002b 	ldhuio	r2,0(r2)
 800094c:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
 8000950:	108142a0 	cmpeqi	r2,r2,1290
 8000954:	1000021e 	bne	r2,zero,8000960 <MemTest8_16BitAccess+0xb4>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
    {
      ret_code = memory_base;
 8000958:	e0bfff17 	ldw	r2,-4(fp)
 800095c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
 8000960:	e0bffe17 	ldw	r2,-8(fp)
 8000964:	1000191e 	bne	r2,zero,80009cc <MemTest8_16BitAccess+0x120>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
 8000968:	e0bfff17 	ldw	r2,-4(fp)
 800096c:	108000c4 	addi	r2,r2,3
 8000970:	10800023 	ldbuio	r2,0(r2)
 8000974:	10803fcc 	andi	r2,r2,255
 8000978:	10801418 	cmpnei	r2,r2,80
 800097c:	1000111e 	bne	r2,zero,80009c4 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
 8000980:	e0bfff17 	ldw	r2,-4(fp)
 8000984:	10800084 	addi	r2,r2,2
 8000988:	10800023 	ldbuio	r2,0(r2)
 800098c:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
 8000990:	10802818 	cmpnei	r2,r2,160
 8000994:	10000b1e 	bne	r2,zero,80009c4 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
 8000998:	e0bfff17 	ldw	r2,-4(fp)
 800099c:	10800044 	addi	r2,r2,1
 80009a0:	10800023 	ldbuio	r2,0(r2)
 80009a4:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
 80009a8:	10800158 	cmpnei	r2,r2,5
 80009ac:	1000051e 	bne	r2,zero,80009c4 <MemTest8_16BitAccess+0x118>
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
 80009b0:	e0bfff17 	ldw	r2,-4(fp)
 80009b4:	10800023 	ldbuio	r2,0(r2)
 80009b8:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
 80009bc:	108002a0 	cmpeqi	r2,r2,10
 80009c0:	1000021e 	bne	r2,zero,80009cc <MemTest8_16BitAccess+0x120>
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
    {
    ret_code = memory_base;
 80009c4:	e0bfff17 	ldw	r2,-4(fp)
 80009c8:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Write 2 half-words */
  if (!ret_code)
 80009cc:	e0bffe17 	ldw	r2,-8(fp)
 80009d0:	10000f1e 	bne	r2,zero,8000a10 <MemTest8_16BitAccess+0x164>
  {
    IOWR_16DIRECT(memory_base, 0, 0x50A0);
 80009d4:	e0bfff17 	ldw	r2,-4(fp)
 80009d8:	00d42804 	movi	r3,20640
 80009dc:	10c0002d 	sthio	r3,0(r2)
    IOWR_16DIRECT(memory_base, 2, 0x050A);
 80009e0:	e0bfff17 	ldw	r2,-4(fp)
 80009e4:	10800084 	addi	r2,r2,2
 80009e8:	1007883a 	mov	r3,r2
 80009ec:	00814284 	movi	r2,1290
 80009f0:	1880002d 	sthio	r2,0(r3)

    /* Read it back as one word */
    if(IORD_32DIRECT(memory_base, 0) != 0x050A50A0)
 80009f4:	e0bfff17 	ldw	r2,-4(fp)
 80009f8:	10c00037 	ldwio	r3,0(r2)
 80009fc:	008142b4 	movhi	r2,1290
 8000a00:	10942804 	addi	r2,r2,20640
 8000a04:	18800226 	beq	r3,r2,8000a10 <MemTest8_16BitAccess+0x164>
    {
      ret_code = memory_base;
 8000a08:	e0bfff17 	ldw	r2,-4(fp)
 8000a0c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as two half-words */
  if (!ret_code)
 8000a10:	e0bffe17 	ldw	r2,-8(fp)
 8000a14:	10000d1e 	bne	r2,zero,8000a4c <MemTest8_16BitAccess+0x1a0>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
 8000a18:	e0bfff17 	ldw	r2,-4(fp)
 8000a1c:	10800084 	addi	r2,r2,2
 8000a20:	1080002b 	ldhuio	r2,0(r2)
 8000a24:	10bfffcc 	andi	r2,r2,65535
 8000a28:	10814298 	cmpnei	r2,r2,1290
 8000a2c:	1000051e 	bne	r2,zero,8000a44 <MemTest8_16BitAccess+0x198>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
 8000a30:	e0bfff17 	ldw	r2,-4(fp)
 8000a34:	1080002b 	ldhuio	r2,0(r2)
 8000a38:	10bfffcc 	andi	r2,r2,65535
  }

  /* Read it back as two half-words */
  if (!ret_code)
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
 8000a3c:	10942820 	cmpeqi	r2,r2,20640
 8000a40:	1000021e 	bne	r2,zero,8000a4c <MemTest8_16BitAccess+0x1a0>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
    {
      ret_code = memory_base;
 8000a44:	e0bfff17 	ldw	r2,-4(fp)
 8000a48:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
 8000a4c:	e0bffe17 	ldw	r2,-8(fp)
 8000a50:	1000191e 	bne	r2,zero,8000ab8 <MemTest8_16BitAccess+0x20c>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
 8000a54:	e0bfff17 	ldw	r2,-4(fp)
 8000a58:	108000c4 	addi	r2,r2,3
 8000a5c:	10800023 	ldbuio	r2,0(r2)
 8000a60:	10803fcc 	andi	r2,r2,255
 8000a64:	10800158 	cmpnei	r2,r2,5
 8000a68:	1000111e 	bne	r2,zero,8000ab0 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
 8000a6c:	e0bfff17 	ldw	r2,-4(fp)
 8000a70:	10800084 	addi	r2,r2,2
 8000a74:	10800023 	ldbuio	r2,0(r2)
 8000a78:	10803fcc 	andi	r2,r2,255
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
 8000a7c:	10800298 	cmpnei	r2,r2,10
 8000a80:	10000b1e 	bne	r2,zero,8000ab0 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
 8000a84:	e0bfff17 	ldw	r2,-4(fp)
 8000a88:	10800044 	addi	r2,r2,1
 8000a8c:	10800023 	ldbuio	r2,0(r2)
 8000a90:	10803fcc 	andi	r2,r2,255

  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
 8000a94:	10801418 	cmpnei	r2,r2,80
 8000a98:	1000051e 	bne	r2,zero,8000ab0 <MemTest8_16BitAccess+0x204>
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
 8000a9c:	e0bfff17 	ldw	r2,-4(fp)
 8000aa0:	10800023 	ldbuio	r2,0(r2)
 8000aa4:	10803fcc 	andi	r2,r2,255
  /* Read it back as 4 bytes */
  if (!ret_code)
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
 8000aa8:	10802820 	cmpeqi	r2,r2,160
 8000aac:	1000021e 	bne	r2,zero,8000ab8 <MemTest8_16BitAccess+0x20c>
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
    {
      ret_code = memory_base;
 8000ab0:	e0bfff17 	ldw	r2,-4(fp)
 8000ab4:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return(ret_code);
 8000ab8:	e0bffe17 	ldw	r2,-8(fp)
}
 8000abc:	e037883a 	mov	sp,fp
 8000ac0:	df000017 	ldw	fp,0(sp)
 8000ac4:	dec00104 	addi	sp,sp,4
 8000ac8:	f800283a 	ret

08000acc <MemTestDevice>:
*  Purpose: Tests that every bit in the memory device within the 
*           specified address range can store both a '1' and a '0'.
*
******************************************************************/
static int MemTestDevice(unsigned int memory_base, unsigned int nBytes)
{
 8000acc:	defff804 	addi	sp,sp,-32
 8000ad0:	dfc00715 	stw	ra,28(sp)
 8000ad4:	df000615 	stw	fp,24(sp)
 8000ad8:	df000604 	addi	fp,sp,24
 8000adc:	e13ffe15 	stw	r4,-8(fp)
 8000ae0:	e17fff15 	stw	r5,-4(fp)
  unsigned int offset;
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;
 8000ae4:	e03ffc15 	stw	zero,-16(fp)

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
 8000ae8:	00800044 	movi	r2,1
 8000aec:	e0bffb15 	stw	r2,-20(fp)
 8000af0:	e03ffa15 	stw	zero,-24(fp)
 8000af4:	00000c06 	br	8000b28 <MemTestDevice+0x5c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
 8000af8:	e0fffa17 	ldw	r3,-24(fp)
 8000afc:	e0bffe17 	ldw	r2,-8(fp)
 8000b00:	1885883a 	add	r2,r3,r2
 8000b04:	1007883a 	mov	r3,r2
 8000b08:	e0bffb17 	ldw	r2,-20(fp)
 8000b0c:	18800035 	stwio	r2,0(r3)
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
 8000b10:	e0bffb17 	ldw	r2,-20(fp)
 8000b14:	10800044 	addi	r2,r2,1
 8000b18:	e0bffb15 	stw	r2,-20(fp)
 8000b1c:	e0bffa17 	ldw	r2,-24(fp)
 8000b20:	10800104 	addi	r2,r2,4
 8000b24:	e0bffa15 	stw	r2,-24(fp)
 8000b28:	e0fffa17 	ldw	r3,-24(fp)
 8000b2c:	e0bfff17 	ldw	r2,-4(fp)
 8000b30:	18bff136 	bltu	r3,r2,8000af8 <__alt_data_end+0xf8000af8>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  printf(" .");
 8000b34:	010200b4 	movhi	r4,2050
 8000b38:	21302804 	addi	r4,r4,-16224
 8000b3c:	8002f580 	call	8002f58 <printf>

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
 8000b40:	00800044 	movi	r2,1
 8000b44:	e0bffb15 	stw	r2,-20(fp)
 8000b48:	e03ffa15 	stw	zero,-24(fp)
 8000b4c:	00001b06 	br	8000bbc <MemTestDevice+0xf0>
  {
    if (IORD_32DIRECT(memory_base, offset) != pattern)
 8000b50:	e0fffa17 	ldw	r3,-24(fp)
 8000b54:	e0bffe17 	ldw	r2,-8(fp)
 8000b58:	1885883a 	add	r2,r3,r2
 8000b5c:	10800037 	ldwio	r2,0(r2)
 8000b60:	1007883a 	mov	r3,r2
 8000b64:	e0bffb17 	ldw	r2,-20(fp)
 8000b68:	18800526 	beq	r3,r2,8000b80 <MemTestDevice+0xb4>
    {
      ret_code = (memory_base + offset);
 8000b6c:	e0fffe17 	ldw	r3,-8(fp)
 8000b70:	e0bffa17 	ldw	r2,-24(fp)
 8000b74:	1885883a 	add	r2,r3,r2
 8000b78:	e0bffc15 	stw	r2,-16(fp)
      break;
 8000b7c:	00001206 	br	8000bc8 <MemTestDevice+0xfc>
    }
    antipattern = ~pattern;
 8000b80:	e0bffb17 	ldw	r2,-20(fp)
 8000b84:	0084303a 	nor	r2,zero,r2
 8000b88:	e0bffd15 	stw	r2,-12(fp)
    IOWR_32DIRECT(memory_base, offset, antipattern);
 8000b8c:	e0fffa17 	ldw	r3,-24(fp)
 8000b90:	e0bffe17 	ldw	r2,-8(fp)
 8000b94:	1885883a 	add	r2,r3,r2
 8000b98:	1007883a 	mov	r3,r2
 8000b9c:	e0bffd17 	ldw	r2,-12(fp)
 8000ba0:	18800035 	stwio	r2,0(r3)
  }

  printf(" .");

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
 8000ba4:	e0bffb17 	ldw	r2,-20(fp)
 8000ba8:	10800044 	addi	r2,r2,1
 8000bac:	e0bffb15 	stw	r2,-20(fp)
 8000bb0:	e0bffa17 	ldw	r2,-24(fp)
 8000bb4:	10800104 	addi	r2,r2,4
 8000bb8:	e0bffa15 	stw	r2,-24(fp)
 8000bbc:	e0fffa17 	ldw	r3,-24(fp)
 8000bc0:	e0bfff17 	ldw	r2,-4(fp)
 8000bc4:	18bfe236 	bltu	r3,r2,8000b50 <__alt_data_end+0xf8000b50>
    }
    antipattern = ~pattern;
    IOWR_32DIRECT(memory_base, offset, antipattern);
  }

  printf(" .");
 8000bc8:	010200b4 	movhi	r4,2050
 8000bcc:	21302804 	addi	r4,r4,-16224
 8000bd0:	8002f580 	call	8002f58 <printf>

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
 8000bd4:	00800044 	movi	r2,1
 8000bd8:	e0bffb15 	stw	r2,-20(fp)
 8000bdc:	e03ffa15 	stw	zero,-24(fp)
 8000be0:	00001a06 	br	8000c4c <MemTestDevice+0x180>
  {
    antipattern = ~pattern;
 8000be4:	e0bffb17 	ldw	r2,-20(fp)
 8000be8:	0084303a 	nor	r2,zero,r2
 8000bec:	e0bffd15 	stw	r2,-12(fp)
    if (IORD_32DIRECT(memory_base, offset) != antipattern)
 8000bf0:	e0fffa17 	ldw	r3,-24(fp)
 8000bf4:	e0bffe17 	ldw	r2,-8(fp)
 8000bf8:	1885883a 	add	r2,r3,r2
 8000bfc:	10800037 	ldwio	r2,0(r2)
 8000c00:	1007883a 	mov	r3,r2
 8000c04:	e0bffd17 	ldw	r2,-12(fp)
 8000c08:	18800526 	beq	r3,r2,8000c20 <MemTestDevice+0x154>
    {
      ret_code = (memory_base + offset);
 8000c0c:	e0fffe17 	ldw	r3,-8(fp)
 8000c10:	e0bffa17 	ldw	r2,-24(fp)
 8000c14:	1885883a 	add	r2,r3,r2
 8000c18:	e0bffc15 	stw	r2,-16(fp)
      break;
 8000c1c:	00000e06 	br	8000c58 <MemTestDevice+0x18c>
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
 8000c20:	e0fffa17 	ldw	r3,-24(fp)
 8000c24:	e0bffe17 	ldw	r2,-8(fp)
 8000c28:	1885883a 	add	r2,r3,r2
 8000c2c:	0007883a 	mov	r3,zero
 8000c30:	10c00035 	stwio	r3,0(r2)
  }

  printf(" .");

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
 8000c34:	e0bffb17 	ldw	r2,-20(fp)
 8000c38:	10800044 	addi	r2,r2,1
 8000c3c:	e0bffb15 	stw	r2,-20(fp)
 8000c40:	e0bffa17 	ldw	r2,-24(fp)
 8000c44:	10800104 	addi	r2,r2,4
 8000c48:	e0bffa15 	stw	r2,-24(fp)
 8000c4c:	e0fffa17 	ldw	r3,-24(fp)
 8000c50:	e0bfff17 	ldw	r2,-4(fp)
 8000c54:	18bfe336 	bltu	r3,r2,8000be4 <__alt_data_end+0xf8000be4>
      ret_code = (memory_base + offset);
      break;
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
  }
  return ret_code;
 8000c58:	e0bffc17 	ldw	r2,-16(fp)
}
 8000c5c:	e037883a 	mov	sp,fp
 8000c60:	dfc00117 	ldw	ra,4(sp)
 8000c64:	df000017 	ldw	fp,0(sp)
 8000c68:	dec00204 	addi	sp,sp,8
 8000c6c:	f800283a 	ret

08000c70 <TestRam>:
*             - MemTestDevice
*             - MemDMATest
*
******************************************************************/
static void TestRam(void)
{
 8000c70:	defffa04 	addi	sp,sp,-24
 8000c74:	dfc00515 	stw	ra,20(sp)
 8000c78:	df000415 	stw	fp,16(sp)
 8000c7c:	df000404 	addi	fp,sp,16
  
  int memory_base, memory_end, memory_size;
  int ret_code = 0x0;
 8000c80:	e03ffc15 	stw	zero,-16(fp)

  /* Find out what range of memory we are testing */
  MemGetAddressRange(&memory_base, &memory_end);
 8000c84:	e0fffe04 	addi	r3,fp,-8
 8000c88:	e0bfff04 	addi	r2,fp,-4
 8000c8c:	1809883a 	mov	r4,r3
 8000c90:	100b883a 	mov	r5,r2
 8000c94:	80005340 	call	8000534 <MemGetAddressRange>
  memory_size = (memory_end - memory_base);
 8000c98:	e0ffff17 	ldw	r3,-4(fp)
 8000c9c:	e0bffe17 	ldw	r2,-8(fp)
 8000ca0:	1885c83a 	sub	r2,r3,r2
 8000ca4:	e0bffd15 	stw	r2,-12(fp)

  printf("\n");
 8000ca8:	01000284 	movi	r4,10
 8000cac:	8002f9c0 	call	8002f9c <putchar>
  printf("Testing RAM from 0x%X to 0x%X\n", memory_base, (memory_base + memory_size));
 8000cb0:	e17ffe17 	ldw	r5,-8(fp)
 8000cb4:	e0fffe17 	ldw	r3,-8(fp)
 8000cb8:	e0bffd17 	ldw	r2,-12(fp)
 8000cbc:	1885883a 	add	r2,r3,r2
 8000cc0:	010200b4 	movhi	r4,2050
 8000cc4:	21302904 	addi	r4,r4,-16220
 8000cc8:	100d883a 	mov	r6,r2
 8000ccc:	8002f580 	call	8002f58 <printf>

  /* Test Data Bus. */
  ret_code = MemTestDataBus(memory_base);
 8000cd0:	e0bffe17 	ldw	r2,-8(fp)
 8000cd4:	1009883a 	mov	r4,r2
 8000cd8:	80006580 	call	8000658 <MemTestDataBus>
 8000cdc:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code)
 8000ce0:	e0bffc17 	ldw	r2,-16(fp)
 8000ce4:	10000526 	beq	r2,zero,8000cfc <TestRam+0x8c>
   printf(" -Data bus test failed at bit 0x%X", (int)ret_code);
 8000ce8:	010200b4 	movhi	r4,2050
 8000cec:	21303104 	addi	r4,r4,-16188
 8000cf0:	e17ffc17 	ldw	r5,-16(fp)
 8000cf4:	8002f580 	call	8002f58 <printf>
 8000cf8:	00000306 	br	8000d08 <TestRam+0x98>
  else
    printf(" -Data bus test passed\n");
 8000cfc:	010200b4 	movhi	r4,2050
 8000d00:	21303a04 	addi	r4,r4,-16152
 8000d04:	800306c0 	call	800306c <puts>

  /* Test Address Bus. */
  if (!ret_code)
 8000d08:	e0bffc17 	ldw	r2,-16(fp)
 8000d0c:	1000111e 	bne	r2,zero,8000d54 <TestRam+0xe4>
  {
    ret_code  = MemTestAddressBus(memory_base, memory_size);
 8000d10:	e0bffe17 	ldw	r2,-8(fp)
 8000d14:	1007883a 	mov	r3,r2
 8000d18:	e0bffd17 	ldw	r2,-12(fp)
 8000d1c:	1809883a 	mov	r4,r3
 8000d20:	100b883a 	mov	r5,r2
 8000d24:	80006cc0 	call	80006cc <MemTestAddressBus>
 8000d28:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
 8000d2c:	e0bffc17 	ldw	r2,-16(fp)
 8000d30:	10000526 	beq	r2,zero,8000d48 <TestRam+0xd8>
      printf(" -Address bus test failed at address 0x%X", (int)ret_code);
 8000d34:	010200b4 	movhi	r4,2050
 8000d38:	21304004 	addi	r4,r4,-16128
 8000d3c:	e17ffc17 	ldw	r5,-16(fp)
 8000d40:	8002f580 	call	8002f58 <printf>
 8000d44:	00000306 	br	8000d54 <TestRam+0xe4>
    else
      printf(" -Address bus test passed\n");
 8000d48:	010200b4 	movhi	r4,2050
 8000d4c:	21304b04 	addi	r4,r4,-16084
 8000d50:	800306c0 	call	800306c <puts>
  }

  /* Test byte and half-word access. */
  if (!ret_code)
 8000d54:	e0bffc17 	ldw	r2,-16(fp)
 8000d58:	10000e1e 	bne	r2,zero,8000d94 <TestRam+0x124>
  {
    ret_code = MemTest8_16BitAccess(memory_base);
 8000d5c:	e0bffe17 	ldw	r2,-8(fp)
 8000d60:	1009883a 	mov	r4,r2
 8000d64:	80008ac0 	call	80008ac <MemTest8_16BitAccess>
 8000d68:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
 8000d6c:	e0bffc17 	ldw	r2,-16(fp)
 8000d70:	10000526 	beq	r2,zero,8000d88 <TestRam+0x118>
      printf(" -Byte and half-word access test failed at address 0x%X", (int)ret_code);
 8000d74:	010200b4 	movhi	r4,2050
 8000d78:	21305204 	addi	r4,r4,-16056
 8000d7c:	e17ffc17 	ldw	r5,-16(fp)
 8000d80:	8002f580 	call	8002f58 <printf>
 8000d84:	00000306 	br	8000d94 <TestRam+0x124>
    else
      printf(" -Byte and half-word access test passed\n");
 8000d88:	010200b4 	movhi	r4,2050
 8000d8c:	21306004 	addi	r4,r4,-16000
 8000d90:	800306c0 	call	800306c <puts>
  }

  /* Test that each bit in the device can store both 1 and 0. */
  if (!ret_code)
 8000d94:	e0bffc17 	ldw	r2,-16(fp)
 8000d98:	1000141e 	bne	r2,zero,8000dec <TestRam+0x17c>
  {
    printf(" -Testing each bit in memory device.");
 8000d9c:	010200b4 	movhi	r4,2050
 8000da0:	21306a04 	addi	r4,r4,-15960
 8000da4:	8002f580 	call	8002f58 <printf>
    ret_code = MemTestDevice(memory_base, memory_size);
 8000da8:	e0bffe17 	ldw	r2,-8(fp)
 8000dac:	1007883a 	mov	r3,r2
 8000db0:	e0bffd17 	ldw	r2,-12(fp)
 8000db4:	1809883a 	mov	r4,r3
 8000db8:	100b883a 	mov	r5,r2
 8000dbc:	8000acc0 	call	8000acc <MemTestDevice>
 8000dc0:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
 8000dc4:	e0bffc17 	ldw	r2,-16(fp)
 8000dc8:	10000526 	beq	r2,zero,8000de0 <TestRam+0x170>
      printf("  failed at address 0x%X", (int)ret_code);
 8000dcc:	010200b4 	movhi	r4,2050
 8000dd0:	21307404 	addi	r4,r4,-15920
 8000dd4:	e17ffc17 	ldw	r5,-16(fp)
 8000dd8:	8002f580 	call	8002f58 <printf>
 8000ddc:	00000306 	br	8000dec <TestRam+0x17c>
    else
      printf("  passed\n");
 8000de0:	010200b4 	movhi	r4,2050
 8000de4:	21307b04 	addi	r4,r4,-15892
 8000de8:	800306c0 	call	800306c <puts>
    else
      printf("  passed\n");
  }
#endif /* DMA_NAME */
      
  if (!ret_code)
 8000dec:	e0bffc17 	ldw	r2,-16(fp)
 8000df0:	1000051e 	bne	r2,zero,8000e08 <TestRam+0x198>
    printf("Memory at 0x%X Okay\n", memory_base);
 8000df4:	e0bffe17 	ldw	r2,-8(fp)
 8000df8:	010200b4 	movhi	r4,2050
 8000dfc:	21307e04 	addi	r4,r4,-15880
 8000e00:	100b883a 	mov	r5,r2
 8000e04:	8002f580 	call	8002f58 <printf>
}
 8000e08:	e037883a 	mov	sp,fp
 8000e0c:	dfc00117 	ldw	ra,4(sp)
 8000e10:	df000017 	ldw	fp,0(sp)
 8000e14:	dec00204 	addi	sp,sp,8
 8000e18:	f800283a 	ret

08000e1c <FlashCheckIfBlockErased>:
*  Purpose: Checks the specified flash block to see if it is 
*           completely erased (all 0xFFFFFFFF).
*
******************************************************************/
static int FlashCheckIfBlockErased(alt_flash_fd* fd, int block, flash_region* regions)
{
 8000e1c:	defff204 	addi	sp,sp,-56
 8000e20:	dfc00d15 	stw	ra,52(sp)
 8000e24:	df000c15 	stw	fp,48(sp)
 8000e28:	df000c04 	addi	fp,sp,48
 8000e2c:	e13ffd15 	stw	r4,-12(fp)
 8000e30:	e17ffe15 	stw	r5,-8(fp)
 8000e34:	e1bfff15 	stw	r6,-4(fp)
  int i, j;
  int ret_code = 0x0;
 8000e38:	e03ff615 	stw	zero,-40(fp)
  char block_is_erased = 0x1;
 8000e3c:	00800044 	movi	r2,1
 8000e40:	e0bff705 	stb	r2,-36(fp)
  alt_u8 *data_read;
 
  /* Get a buffer */
  data_read = malloc(64);
 8000e44:	01001004 	movi	r4,64
 8000e48:	80025a80 	call	80025a8 <malloc>
 8000e4c:	e0bff815 	stw	r2,-32(fp)
  
  /* Initialize the flag */
  block_is_erased = 0x1;
 8000e50:	00800044 	movi	r2,1
 8000e54:	e0bff705 	stb	r2,-36(fp)

  for(i = 0; i < regions->block_size; i += 64)
 8000e58:	e03ff415 	stw	zero,-48(fp)
 8000e5c:	00002c06 	br	8000f10 <FlashCheckIfBlockErased+0xf4>
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);
 8000e60:	e0bfff17 	ldw	r2,-4(fp)
 8000e64:	10c00317 	ldw	r3,12(r2)
 8000e68:	e0bffe17 	ldw	r2,-8(fp)
 8000e6c:	1887383a 	mul	r3,r3,r2
 8000e70:	e0bff417 	ldw	r2,-48(fp)
 8000e74:	1885883a 	add	r2,r3,r2
 8000e78:	e0fffd17 	ldw	r3,-12(fp)
 8000e7c:	e0fff915 	stw	r3,-28(fp)
 8000e80:	e0bffa15 	stw	r2,-24(fp)
 8000e84:	e0bff817 	ldw	r2,-32(fp)
 8000e88:	e0bffb15 	stw	r2,-20(fp)
 8000e8c:	00801004 	movi	r2,64
 8000e90:	e0bffc15 	stw	r2,-16(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 8000e94:	e0bff917 	ldw	r2,-28(fp)
 8000e98:	10800617 	ldw	r2,24(r2)
 8000e9c:	e13ff917 	ldw	r4,-28(fp)
 8000ea0:	e17ffa17 	ldw	r5,-24(fp)
 8000ea4:	e1bffb17 	ldw	r6,-20(fp)
 8000ea8:	e1fffc17 	ldw	r7,-16(fp)
 8000eac:	103ee83a 	callr	r2
 8000eb0:	e0bff615 	stw	r2,-40(fp)

    for(j=0; j < 64; j+=1)
 8000eb4:	e03ff515 	stw	zero,-44(fp)
 8000eb8:	00000c06 	br	8000eec <FlashCheckIfBlockErased+0xd0>
    {
      if(*(data_read+j) != 0xFF)
 8000ebc:	e0bff517 	ldw	r2,-44(fp)
 8000ec0:	e0fff817 	ldw	r3,-32(fp)
 8000ec4:	1885883a 	add	r2,r3,r2
 8000ec8:	10800003 	ldbu	r2,0(r2)
 8000ecc:	10803fcc 	andi	r2,r2,255
 8000ed0:	10803fe0 	cmpeqi	r2,r2,255
 8000ed4:	1000021e 	bne	r2,zero,8000ee0 <FlashCheckIfBlockErased+0xc4>
      {
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
 8000ed8:	e03ff705 	stb	zero,-36(fp)
        break;
 8000edc:	00000606 	br	8000ef8 <FlashCheckIfBlockErased+0xdc>

  for(i = 0; i < regions->block_size; i += 64)
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);

    for(j=0; j < 64; j+=1)
 8000ee0:	e0bff517 	ldw	r2,-44(fp)
 8000ee4:	10800044 	addi	r2,r2,1
 8000ee8:	e0bff515 	stw	r2,-44(fp)
 8000eec:	e0bff517 	ldw	r2,-44(fp)
 8000ef0:	10801010 	cmplti	r2,r2,64
 8000ef4:	103ff11e 	bne	r2,zero,8000ebc <__alt_data_end+0xf8000ebc>
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
 8000ef8:	e0bff707 	ldb	r2,-36(fp)
 8000efc:	1000011e 	bne	r2,zero,8000f04 <FlashCheckIfBlockErased+0xe8>
      break;
 8000f00:	00000706 	br	8000f20 <FlashCheckIfBlockErased+0x104>
  data_read = malloc(64);
  
  /* Initialize the flag */
  block_is_erased = 0x1;

  for(i = 0; i < regions->block_size; i += 64)
 8000f04:	e0bff417 	ldw	r2,-48(fp)
 8000f08:	10801004 	addi	r2,r2,64
 8000f0c:	e0bff415 	stw	r2,-48(fp)
 8000f10:	e0bfff17 	ldw	r2,-4(fp)
 8000f14:	10800317 	ldw	r2,12(r2)
 8000f18:	e0fff417 	ldw	r3,-48(fp)
 8000f1c:	18bfd016 	blt	r3,r2,8000e60 <__alt_data_end+0xf8000e60>
    }
    if (block_is_erased == 0x0)
      break;
  }
  /* Block is erased if we indexed through all block locations */
  if(i == regions->block_size)
 8000f20:	e0bfff17 	ldw	r2,-4(fp)
 8000f24:	10c00317 	ldw	r3,12(r2)
 8000f28:	e0bff417 	ldw	r2,-48(fp)
 8000f2c:	1880031e 	bne	r3,r2,8000f3c <FlashCheckIfBlockErased+0x120>
    ret_code = 1;
 8000f30:	00800044 	movi	r2,1
 8000f34:	e0bff615 	stw	r2,-40(fp)
 8000f38:	00000106 	br	8000f40 <FlashCheckIfBlockErased+0x124>
  else
    ret_code = 0;
 8000f3c:	e03ff615 	stw	zero,-40(fp)
  
  free(data_read);
 8000f40:	e13ff817 	ldw	r4,-32(fp)
 8000f44:	80025bc0 	call	80025bc <free>
 
  return ret_code;
 8000f48:	e0bff617 	ldw	r2,-40(fp)
}
 8000f4c:	e037883a 	mov	sp,fp
 8000f50:	dfc00117 	ldw	ra,4(sp)
 8000f54:	df000017 	ldw	fp,0(sp)
 8000f58:	dec00204 	addi	sp,sp,8
 8000f5c:	f800283a 	ret

08000f60 <FlashTestBlockWrite>:
*  Purpose: Tests that the function alt_write_flash_block is
*           is working properly.
*
******************************************************************/
static int FlashTestBlockWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
 8000f60:	deffdc04 	addi	sp,sp,-144
 8000f64:	dfc02315 	stw	ra,140(sp)
 8000f68:	df002215 	stw	fp,136(sp)
 8000f6c:	df002204 	addi	fp,sp,136
 8000f70:	e13ffc15 	stw	r4,-16(fp)
 8000f74:	e17ffd15 	stw	r5,-12(fp)
 8000f78:	e1bffe15 	stw	r6,-8(fp)
 8000f7c:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
 8000f80:	e03fe015 	stw	zero,-128(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;


  /* Get a couple buffers for the test */
  data_written = malloc(100);
 8000f84:	01001904 	movi	r4,100
 8000f88:	80025a80 	call	80025a8 <malloc>
 8000f8c:	e0bfe115 	stw	r2,-124(fp)
  data_read = malloc(100);
 8000f90:	01001904 	movi	r4,100
 8000f94:	80025a80 	call	80025a8 <malloc>
 8000f98:	e0bfe215 	stw	r2,-120(fp)

  test_offset = (regions->offset + (block * regions->block_size));
 8000f9c:	e0bfff17 	ldw	r2,-4(fp)
 8000fa0:	10c00017 	ldw	r3,0(r2)
 8000fa4:	e0bfff17 	ldw	r2,-4(fp)
 8000fa8:	11000317 	ldw	r4,12(r2)
 8000fac:	e0bffc17 	ldw	r2,-16(fp)
 8000fb0:	2085383a 	mul	r2,r4,r2
 8000fb4:	1885883a 	add	r2,r3,r2
 8000fb8:	e0bfe315 	stw	r2,-116(fp)

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
 8000fbc:	e03fdf15 	stw	zero,-132(fp)
 8000fc0:	00000c06 	br	8000ff4 <FlashTestBlockWrite+0x94>
    *(data_written + i) = (i * 3);
 8000fc4:	e0bfdf17 	ldw	r2,-132(fp)
 8000fc8:	e0ffe117 	ldw	r3,-124(fp)
 8000fcc:	1887883a 	add	r3,r3,r2
 8000fd0:	e0bfdf17 	ldw	r2,-132(fp)
 8000fd4:	1009883a 	mov	r4,r2
 8000fd8:	2005883a 	mov	r2,r4
 8000fdc:	1085883a 	add	r2,r2,r2
 8000fe0:	1105883a 	add	r2,r2,r4
 8000fe4:	18800005 	stb	r2,0(r3)
  data_read = malloc(100);

  test_offset = (regions->offset + (block * regions->block_size));

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
 8000fe8:	e0bfdf17 	ldw	r2,-132(fp)
 8000fec:	10800044 	addi	r2,r2,1
 8000ff0:	e0bfdf15 	stw	r2,-132(fp)
 8000ff4:	e0bfdf17 	ldw	r2,-132(fp)
 8000ff8:	10801910 	cmplti	r2,r2,100
 8000ffc:	103ff11e 	bne	r2,zero,8000fc4 <__alt_data_end+0xf8000fc4>
    *(data_written + i) = (i * 3);

  /* Write the buffer to flash starting 0x40 bytes from the beginning of the block. */
  printf(" -Testing \"alt_write_flash_block\".");
 8001000:	010200b4 	movhi	r4,2050
 8001004:	21308404 	addi	r4,r4,-15856
 8001008:	8002f580 	call	8002f58 <printf>
  ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x40), data_written, 100);
 800100c:	e0bfe317 	ldw	r2,-116(fp)
 8001010:	10801004 	addi	r2,r2,64
 8001014:	e0fffe17 	ldw	r3,-8(fp)
 8001018:	e0ffe415 	stw	r3,-112(fp)
 800101c:	e0ffe317 	ldw	r3,-116(fp)
 8001020:	e0ffe515 	stw	r3,-108(fp)
 8001024:	e0bfe615 	stw	r2,-104(fp)
 8001028:	e0bfe117 	ldw	r2,-124(fp)
 800102c:	e0bfe715 	stw	r2,-100(fp)
 8001030:	00801904 	movi	r2,100
 8001034:	e0bfe815 	stw	r2,-96(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
 8001038:	e0bfe417 	ldw	r2,-112(fp)
 800103c:	10800917 	ldw	r2,36(r2)
 8001040:	e0ffe817 	ldw	r3,-96(fp)
 8001044:	d8c00015 	stw	r3,0(sp)
 8001048:	e13fe417 	ldw	r4,-112(fp)
 800104c:	e17fe517 	ldw	r5,-108(fp)
 8001050:	e1bfe617 	ldw	r6,-104(fp)
 8001054:	e1ffe717 	ldw	r7,-100(fp)
 8001058:	103ee83a 	callr	r2
 800105c:	e0bfe915 	stw	r2,-92(fp)

  if(!ret_code)
 8001060:	e0bfe917 	ldw	r2,-92(fp)
 8001064:	1000081e 	bne	r2,zero,8001088 <FlashTestBlockWrite+0x128>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
 8001068:	e0bfe417 	ldw	r2,-112(fp)
 800106c:	10c00a17 	ldw	r3,40(r2)
 8001070:	e0bfe617 	ldw	r2,-104(fp)
 8001074:	1887883a 	add	r3,r3,r2
 8001078:	e0bfe817 	ldw	r2,-96(fp)
 800107c:	1809883a 	mov	r4,r3
 8001080:	100b883a 	mov	r5,r2
 8001084:	801843c0 	call	801843c <alt_dcache_flush>

  return ret_code;
 8001088:	e0bfe917 	ldw	r2,-92(fp)
 800108c:	e0bfe015 	stw	r2,-128(fp)
  if (!ret_code)
 8001090:	e0bfe017 	ldw	r2,-128(fp)
 8001094:	1000241e 	bne	r2,zero,8001128 <FlashTestBlockWrite+0x1c8>
  {
    /* Now read it back into the read_buffer */
    ret_code = alt_read_flash(fd, (test_offset + 0x40), data_read, 100);
 8001098:	e0bfe317 	ldw	r2,-116(fp)
 800109c:	10801004 	addi	r2,r2,64
 80010a0:	e0fffe17 	ldw	r3,-8(fp)
 80010a4:	e0ffea15 	stw	r3,-88(fp)
 80010a8:	e0bfeb15 	stw	r2,-84(fp)
 80010ac:	e0bfe217 	ldw	r2,-120(fp)
 80010b0:	e0bfec15 	stw	r2,-80(fp)
 80010b4:	00801904 	movi	r2,100
 80010b8:	e0bfed15 	stw	r2,-76(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 80010bc:	e0bfea17 	ldw	r2,-88(fp)
 80010c0:	10800617 	ldw	r2,24(r2)
 80010c4:	e13fea17 	ldw	r4,-88(fp)
 80010c8:	e17feb17 	ldw	r5,-84(fp)
 80010cc:	e1bfec17 	ldw	r6,-80(fp)
 80010d0:	e1ffed17 	ldw	r7,-76(fp)
 80010d4:	103ee83a 	callr	r2
 80010d8:	e0bfe015 	stw	r2,-128(fp)
    if(!ret_code)
 80010dc:	e0bfe017 	ldw	r2,-128(fp)
 80010e0:	1000111e 	bne	r2,zero,8001128 <FlashTestBlockWrite+0x1c8>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, 100))
 80010e4:	e13fe117 	ldw	r4,-124(fp)
 80010e8:	e17fe217 	ldw	r5,-120(fp)
 80010ec:	01801904 	movi	r6,100
 80010f0:	8002d780 	call	8002d78 <memcmp>
 80010f4:	10000926 	beq	r2,zero,800111c <FlashTestBlockWrite+0x1bc>
      {
        printf("  FAILED.\n");
 80010f8:	010200b4 	movhi	r4,2050
 80010fc:	21308d04 	addi	r4,r4,-15820
 8001100:	800306c0 	call	800306c <puts>
        (*error)++;
 8001104:	e0bffd17 	ldw	r2,-12(fp)
 8001108:	10800017 	ldw	r2,0(r2)
 800110c:	10c00044 	addi	r3,r2,1
 8001110:	e0bffd17 	ldw	r2,-12(fp)
 8001114:	10c00015 	stw	r3,0(r2)
 8001118:	00000306 	br	8001128 <FlashTestBlockWrite+0x1c8>
      }
      else
        printf("  passed.\n");
 800111c:	010200b4 	movhi	r4,2050
 8001120:	21309004 	addi	r4,r4,-15808
 8001124:	800306c0 	call	800306c <puts>
    }
  }

  /* Test unaligned writes */
  if(!ret_code)
 8001128:	e0bfe017 	ldw	r2,-128(fp)
 800112c:	1000631e 	bne	r2,zero,80012bc <FlashTestBlockWrite+0x35c>
  {
    /* Erase the block */
    ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
 8001130:	e0bfff17 	ldw	r2,-4(fp)
 8001134:	10800317 	ldw	r2,12(r2)
 8001138:	e0fffe17 	ldw	r3,-8(fp)
 800113c:	e0ffee15 	stw	r3,-72(fp)
 8001140:	e0ffe317 	ldw	r3,-116(fp)
 8001144:	e0ffef15 	stw	r3,-68(fp)
 8001148:	e0bff015 	stw	r2,-64(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 800114c:	e0bfee17 	ldw	r2,-72(fp)
 8001150:	10800817 	ldw	r2,32(r2)
 8001154:	e13fee17 	ldw	r4,-72(fp)
 8001158:	e17fef17 	ldw	r5,-68(fp)
 800115c:	103ee83a 	callr	r2
 8001160:	e0bff115 	stw	r2,-60(fp)
  
  if(!ret_code)
 8001164:	e0bff117 	ldw	r2,-60(fp)
 8001168:	1000081e 	bne	r2,zero,800118c <FlashTestBlockWrite+0x22c>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 800116c:	e0bfee17 	ldw	r2,-72(fp)
 8001170:	10c00a17 	ldw	r3,40(r2)
 8001174:	e0bfef17 	ldw	r2,-68(fp)
 8001178:	1887883a 	add	r3,r3,r2
 800117c:	e0bff017 	ldw	r2,-64(fp)
 8001180:	1809883a 	mov	r4,r3
 8001184:	100b883a 	mov	r5,r2
 8001188:	801843c0 	call	801843c <alt_dcache_flush>

  return ret_code;
 800118c:	e0bff117 	ldw	r2,-60(fp)
 8001190:	e0bfe015 	stw	r2,-128(fp)
  
    /* Write the buffer to flash on an unaligned address. */
    printf(" -Testing unaligned writes.");
 8001194:	010200b4 	movhi	r4,2050
 8001198:	21309304 	addi	r4,r4,-15796
 800119c:	8002f580 	call	8002f58 <printf>
    ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x43), data_written, 100);
 80011a0:	e0bfe317 	ldw	r2,-116(fp)
 80011a4:	108010c4 	addi	r2,r2,67
 80011a8:	e0fffe17 	ldw	r3,-8(fp)
 80011ac:	e0fff215 	stw	r3,-56(fp)
 80011b0:	e0ffe317 	ldw	r3,-116(fp)
 80011b4:	e0fff315 	stw	r3,-52(fp)
 80011b8:	e0bff415 	stw	r2,-48(fp)
 80011bc:	e0bfe117 	ldw	r2,-124(fp)
 80011c0:	e0bff515 	stw	r2,-44(fp)
 80011c4:	00801904 	movi	r2,100
 80011c8:	e0bff615 	stw	r2,-40(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
 80011cc:	e0bff217 	ldw	r2,-56(fp)
 80011d0:	10800917 	ldw	r2,36(r2)
 80011d4:	e0fff617 	ldw	r3,-40(fp)
 80011d8:	d8c00015 	stw	r3,0(sp)
 80011dc:	e13ff217 	ldw	r4,-56(fp)
 80011e0:	e17ff317 	ldw	r5,-52(fp)
 80011e4:	e1bff417 	ldw	r6,-48(fp)
 80011e8:	e1fff517 	ldw	r7,-44(fp)
 80011ec:	103ee83a 	callr	r2
 80011f0:	e0bff715 	stw	r2,-36(fp)

  if(!ret_code)
 80011f4:	e0bff717 	ldw	r2,-36(fp)
 80011f8:	1000081e 	bne	r2,zero,800121c <FlashTestBlockWrite+0x2bc>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
 80011fc:	e0bff217 	ldw	r2,-56(fp)
 8001200:	10c00a17 	ldw	r3,40(r2)
 8001204:	e0bff417 	ldw	r2,-48(fp)
 8001208:	1887883a 	add	r3,r3,r2
 800120c:	e0bff617 	ldw	r2,-40(fp)
 8001210:	1809883a 	mov	r4,r3
 8001214:	100b883a 	mov	r5,r2
 8001218:	801843c0 	call	801843c <alt_dcache_flush>

  return ret_code;
 800121c:	e0bff717 	ldw	r2,-36(fp)
 8001220:	e0bfe015 	stw	r2,-128(fp)
    if (!ret_code)
 8001224:	e0bfe017 	ldw	r2,-128(fp)
 8001228:	1000241e 	bne	r2,zero,80012bc <FlashTestBlockWrite+0x35c>
    {
      /* Now read it back into the read_buffer */
      ret_code = alt_read_flash(fd, (test_offset + 0x43), data_read, 100);
 800122c:	e0bfe317 	ldw	r2,-116(fp)
 8001230:	108010c4 	addi	r2,r2,67
 8001234:	e0fffe17 	ldw	r3,-8(fp)
 8001238:	e0fff815 	stw	r3,-32(fp)
 800123c:	e0bff915 	stw	r2,-28(fp)
 8001240:	e0bfe217 	ldw	r2,-120(fp)
 8001244:	e0bffa15 	stw	r2,-24(fp)
 8001248:	00801904 	movi	r2,100
 800124c:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 8001250:	e0bff817 	ldw	r2,-32(fp)
 8001254:	10800617 	ldw	r2,24(r2)
 8001258:	e13ff817 	ldw	r4,-32(fp)
 800125c:	e17ff917 	ldw	r5,-28(fp)
 8001260:	e1bffa17 	ldw	r6,-24(fp)
 8001264:	e1fffb17 	ldw	r7,-20(fp)
 8001268:	103ee83a 	callr	r2
 800126c:	e0bfe015 	stw	r2,-128(fp)
      if(!ret_code)
 8001270:	e0bfe017 	ldw	r2,-128(fp)
 8001274:	1000111e 	bne	r2,zero,80012bc <FlashTestBlockWrite+0x35c>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, 100))
 8001278:	e13fe117 	ldw	r4,-124(fp)
 800127c:	e17fe217 	ldw	r5,-120(fp)
 8001280:	01801904 	movi	r6,100
 8001284:	8002d780 	call	8002d78 <memcmp>
 8001288:	10000926 	beq	r2,zero,80012b0 <FlashTestBlockWrite+0x350>
        {
          printf("  FAILED.\n");
 800128c:	010200b4 	movhi	r4,2050
 8001290:	21308d04 	addi	r4,r4,-15820
 8001294:	800306c0 	call	800306c <puts>
          (*error)++;
 8001298:	e0bffd17 	ldw	r2,-12(fp)
 800129c:	10800017 	ldw	r2,0(r2)
 80012a0:	10c00044 	addi	r3,r2,1
 80012a4:	e0bffd17 	ldw	r2,-12(fp)
 80012a8:	10c00015 	stw	r3,0(r2)
 80012ac:	00000306 	br	80012bc <FlashTestBlockWrite+0x35c>
        }
        else
          printf("  passed.\n");
 80012b0:	010200b4 	movhi	r4,2050
 80012b4:	21309004 	addi	r4,r4,-15808
 80012b8:	800306c0 	call	800306c <puts>
      }
    }
  }

  /* Free up the buffers we allocated. */
  free(data_written);
 80012bc:	e13fe117 	ldw	r4,-124(fp)
 80012c0:	80025bc0 	call	80025bc <free>
  free(data_read);
 80012c4:	e13fe217 	ldw	r4,-120(fp)
 80012c8:	80025bc0 	call	80025bc <free>
  
  return ret_code;
 80012cc:	e0bfe017 	ldw	r2,-128(fp)
}
 80012d0:	e037883a 	mov	sp,fp
 80012d4:	dfc00117 	ldw	ra,4(sp)
 80012d8:	df000017 	ldw	fp,0(sp)
 80012dc:	dec00204 	addi	sp,sp,8
 80012e0:	f800283a 	ret

080012e4 <FlashTestReadWrite>:
*           that every bit in the specified block can store both
*           a '1' and '0'.
*
******************************************************************/
static int FlashTestReadWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
 80012e4:	deffe504 	addi	sp,sp,-108
 80012e8:	dfc01a15 	stw	ra,104(sp)
 80012ec:	df001915 	stw	fp,100(sp)
 80012f0:	df001904 	addi	fp,sp,100
 80012f4:	e13ffc15 	stw	r4,-16(fp)
 80012f8:	e17ffd15 	stw	r5,-12(fp)
 80012fc:	e1bffe15 	stw	r6,-8(fp)
 8001300:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
 8001304:	e03fe815 	stw	zero,-96(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;
 

  /* Get a couple buffers for the tests */
  data_written = malloc(regions->block_size);
 8001308:	e0bfff17 	ldw	r2,-4(fp)
 800130c:	10800317 	ldw	r2,12(r2)
 8001310:	1009883a 	mov	r4,r2
 8001314:	80025a80 	call	80025a8 <malloc>
 8001318:	e0bfe915 	stw	r2,-92(fp)
  data_read = malloc(regions->block_size);
 800131c:	e0bfff17 	ldw	r2,-4(fp)
 8001320:	10800317 	ldw	r2,12(r2)
 8001324:	1009883a 	mov	r4,r2
 8001328:	80025a80 	call	80025a8 <malloc>
 800132c:	e0bfea15 	stw	r2,-88(fp)
 
  /* Calculate the offset at which the block lives */
  test_offset = (regions->offset + (block * regions->block_size));
 8001330:	e0bfff17 	ldw	r2,-4(fp)
 8001334:	10c00017 	ldw	r3,0(r2)
 8001338:	e0bfff17 	ldw	r2,-4(fp)
 800133c:	11000317 	ldw	r4,12(r2)
 8001340:	e0bffc17 	ldw	r2,-16(fp)
 8001344:	2085383a 	mul	r2,r4,r2
 8001348:	1885883a 	add	r2,r3,r2
 800134c:	e0bfeb15 	stw	r2,-84(fp)

  printf("\n -Starting Flash Test.\n");
 8001350:	010200b4 	movhi	r4,2050
 8001354:	21309a04 	addi	r4,r4,-15768
 8001358:	800306c0 	call	800306c <puts>
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
 800135c:	010200b4 	movhi	r4,2050
 8001360:	2130a004 	addi	r4,r4,-15744
 8001364:	800306c0 	call	800306c <puts>
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
 8001368:	e03fe715 	stw	zero,-100(fp)
 800136c:	00000806 	br	8001390 <FlashTestReadWrite+0xac>
    *(data_written + i) = i;
 8001370:	e0bfe717 	ldw	r2,-100(fp)
 8001374:	e0ffe917 	ldw	r3,-92(fp)
 8001378:	1885883a 	add	r2,r3,r2
 800137c:	e0ffe717 	ldw	r3,-100(fp)
 8001380:	10c00005 	stb	r3,0(r2)

  printf("\n -Starting Flash Test.\n");
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
 8001384:	e0bfe717 	ldw	r2,-100(fp)
 8001388:	10800044 	addi	r2,r2,1
 800138c:	e0bfe715 	stw	r2,-100(fp)
 8001390:	e0bfff17 	ldw	r2,-4(fp)
 8001394:	10800317 	ldw	r2,12(r2)
 8001398:	e0ffe717 	ldw	r3,-100(fp)
 800139c:	18bff416 	blt	r3,r2,8001370 <__alt_data_end+0xf8001370>
    *(data_written + i) = i;

  /* Write the buffer to flash block */
  ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
 80013a0:	e0bfff17 	ldw	r2,-4(fp)
 80013a4:	10800317 	ldw	r2,12(r2)
 80013a8:	e0fffe17 	ldw	r3,-8(fp)
 80013ac:	e0ffec15 	stw	r3,-80(fp)
 80013b0:	e0ffeb17 	ldw	r3,-84(fp)
 80013b4:	e0ffed15 	stw	r3,-76(fp)
 80013b8:	e0ffe917 	ldw	r3,-92(fp)
 80013bc:	e0ffee15 	stw	r3,-72(fp)
 80013c0:	e0bfef15 	stw	r2,-68(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
 80013c4:	e0bfec17 	ldw	r2,-80(fp)
 80013c8:	10800517 	ldw	r2,20(r2)
 80013cc:	e13fec17 	ldw	r4,-80(fp)
 80013d0:	e17fed17 	ldw	r5,-76(fp)
 80013d4:	e1bfee17 	ldw	r6,-72(fp)
 80013d8:	e1ffef17 	ldw	r7,-68(fp)
 80013dc:	103ee83a 	callr	r2
 80013e0:	e0bfe815 	stw	r2,-96(fp)
     
  if (!ret_code)
 80013e4:	e0bfe817 	ldw	r2,-96(fp)
 80013e8:	1000731e 	bne	r2,zero,80015b8 <FlashTestReadWrite+0x2d4>
  {
    /* Read flash block into read buffer */
    ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
 80013ec:	e0bfff17 	ldw	r2,-4(fp)
 80013f0:	10800317 	ldw	r2,12(r2)
 80013f4:	e0fffe17 	ldw	r3,-8(fp)
 80013f8:	e0fff015 	stw	r3,-64(fp)
 80013fc:	e0ffeb17 	ldw	r3,-84(fp)
 8001400:	e0fff115 	stw	r3,-60(fp)
 8001404:	e0ffea17 	ldw	r3,-88(fp)
 8001408:	e0fff215 	stw	r3,-56(fp)
 800140c:	e0bff315 	stw	r2,-52(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 8001410:	e0bff017 	ldw	r2,-64(fp)
 8001414:	10800617 	ldw	r2,24(r2)
 8001418:	e13ff017 	ldw	r4,-64(fp)
 800141c:	e17ff117 	ldw	r5,-60(fp)
 8001420:	e1bff217 	ldw	r6,-56(fp)
 8001424:	e1fff317 	ldw	r7,-52(fp)
 8001428:	103ee83a 	callr	r2
 800142c:	e0bfe815 	stw	r2,-96(fp)
    if(!ret_code)
 8001430:	e0bfe817 	ldw	r2,-96(fp)
 8001434:	1000131e 	bne	r2,zero,8001484 <FlashTestReadWrite+0x1a0>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, regions->block_size))
 8001438:	e0bfff17 	ldw	r2,-4(fp)
 800143c:	10800317 	ldw	r2,12(r2)
 8001440:	e13fe917 	ldw	r4,-92(fp)
 8001444:	e17fea17 	ldw	r5,-88(fp)
 8001448:	100d883a 	mov	r6,r2
 800144c:	8002d780 	call	8002d78 <memcmp>
 8001450:	10000926 	beq	r2,zero,8001478 <FlashTestReadWrite+0x194>
      {
        printf("    pass 1 - FAILED.\n");
 8001454:	010200b4 	movhi	r4,2050
 8001458:	2130ad04 	addi	r4,r4,-15692
 800145c:	800306c0 	call	800306c <puts>
        (*error)++;
 8001460:	e0bffd17 	ldw	r2,-12(fp)
 8001464:	10800017 	ldw	r2,0(r2)
 8001468:	10c00044 	addi	r3,r2,1
 800146c:	e0bffd17 	ldw	r2,-12(fp)
 8001470:	10c00015 	stw	r3,0(r2)
 8001474:	00000306 	br	8001484 <FlashTestReadWrite+0x1a0>
      }
      else
        printf("    pass 1 - passed.\n");
 8001478:	010200b4 	movhi	r4,2050
 800147c:	2130b304 	addi	r4,r4,-15668
 8001480:	800306c0 	call	800306c <puts>
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
 8001484:	e03fe715 	stw	zero,-100(fp)
 8001488:	00000906 	br	80014b0 <FlashTestReadWrite+0x1cc>
      *(data_written + i) = ~((alt_u8)(i));
 800148c:	e0bfe717 	ldw	r2,-100(fp)
 8001490:	e0ffe917 	ldw	r3,-92(fp)
 8001494:	1885883a 	add	r2,r3,r2
 8001498:	e0ffe717 	ldw	r3,-100(fp)
 800149c:	00c6303a 	nor	r3,zero,r3
 80014a0:	10c00005 	stb	r3,0(r2)
      else
        printf("    pass 1 - passed.\n");
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
 80014a4:	e0bfe717 	ldw	r2,-100(fp)
 80014a8:	10800044 	addi	r2,r2,1
 80014ac:	e0bfe715 	stw	r2,-100(fp)
 80014b0:	e0bfff17 	ldw	r2,-4(fp)
 80014b4:	10800317 	ldw	r2,12(r2)
 80014b8:	e0ffe717 	ldw	r3,-100(fp)
 80014bc:	18bff316 	blt	r3,r2,800148c <__alt_data_end+0xf800148c>
      *(data_written + i) = ~((alt_u8)(i));
 
    /* Write the buffer to flash block */
    ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
 80014c0:	e0bfff17 	ldw	r2,-4(fp)
 80014c4:	10800317 	ldw	r2,12(r2)
 80014c8:	e0fffe17 	ldw	r3,-8(fp)
 80014cc:	e0fff415 	stw	r3,-48(fp)
 80014d0:	e0ffeb17 	ldw	r3,-84(fp)
 80014d4:	e0fff515 	stw	r3,-44(fp)
 80014d8:	e0ffe917 	ldw	r3,-92(fp)
 80014dc:	e0fff615 	stw	r3,-40(fp)
 80014e0:	e0bff715 	stw	r2,-36(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
 80014e4:	e0bff417 	ldw	r2,-48(fp)
 80014e8:	10800517 	ldw	r2,20(r2)
 80014ec:	e13ff417 	ldw	r4,-48(fp)
 80014f0:	e17ff517 	ldw	r5,-44(fp)
 80014f4:	e1bff617 	ldw	r6,-40(fp)
 80014f8:	e1fff717 	ldw	r7,-36(fp)
 80014fc:	103ee83a 	callr	r2
 8001500:	e0bfe815 	stw	r2,-96(fp)
    
    if (!ret_code)
 8001504:	e0bfe817 	ldw	r2,-96(fp)
 8001508:	1000261e 	bne	r2,zero,80015a4 <FlashTestReadWrite+0x2c0>
    {
      /* Read flash block into read buffer */
      ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
 800150c:	e0bfff17 	ldw	r2,-4(fp)
 8001510:	10800317 	ldw	r2,12(r2)
 8001514:	e0fffe17 	ldw	r3,-8(fp)
 8001518:	e0fff815 	stw	r3,-32(fp)
 800151c:	e0ffeb17 	ldw	r3,-84(fp)
 8001520:	e0fff915 	stw	r3,-28(fp)
 8001524:	e0ffea17 	ldw	r3,-88(fp)
 8001528:	e0fffa15 	stw	r3,-24(fp)
 800152c:	e0bffb15 	stw	r2,-20(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
 8001530:	e0bff817 	ldw	r2,-32(fp)
 8001534:	10800617 	ldw	r2,24(r2)
 8001538:	e13ff817 	ldw	r4,-32(fp)
 800153c:	e17ff917 	ldw	r5,-28(fp)
 8001540:	e1bffa17 	ldw	r6,-24(fp)
 8001544:	e1fffb17 	ldw	r7,-20(fp)
 8001548:	103ee83a 	callr	r2
 800154c:	e0bfe815 	stw	r2,-96(fp)
      if(!ret_code)
 8001550:	e0bfe817 	ldw	r2,-96(fp)
 8001554:	1000131e 	bne	r2,zero,80015a4 <FlashTestReadWrite+0x2c0>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, regions->block_size))
 8001558:	e0bfff17 	ldw	r2,-4(fp)
 800155c:	10800317 	ldw	r2,12(r2)
 8001560:	e13fe917 	ldw	r4,-92(fp)
 8001564:	e17fea17 	ldw	r5,-88(fp)
 8001568:	100d883a 	mov	r6,r2
 800156c:	8002d780 	call	8002d78 <memcmp>
 8001570:	10000926 	beq	r2,zero,8001598 <FlashTestReadWrite+0x2b4>
        {
          printf("    pass 2 - FAILED.\n");
 8001574:	010200b4 	movhi	r4,2050
 8001578:	2130b904 	addi	r4,r4,-15644
 800157c:	800306c0 	call	800306c <puts>
          (*error)++;
 8001580:	e0bffd17 	ldw	r2,-12(fp)
 8001584:	10800017 	ldw	r2,0(r2)
 8001588:	10c00044 	addi	r3,r2,1
 800158c:	e0bffd17 	ldw	r2,-12(fp)
 8001590:	10c00015 	stw	r3,0(r2)
 8001594:	00000306 	br	80015a4 <FlashTestReadWrite+0x2c0>
        }
        else
          printf("    pass 2 - passed.\n");
 8001598:	010200b4 	movhi	r4,2050
 800159c:	2130bf04 	addi	r4,r4,-15620
 80015a0:	800306c0 	call	800306c <puts>
      }
    }
    if (*error)
 80015a4:	e0bffd17 	ldw	r2,-12(fp)
 80015a8:	10800017 	ldw	r2,0(r2)
 80015ac:	10000226 	beq	r2,zero,80015b8 <FlashTestReadWrite+0x2d4>
      ret_code = 1;
 80015b0:	00800044 	movi	r2,1
 80015b4:	e0bfe815 	stw	r2,-96(fp)
  }

  /* Free up the buffers we allocated */
  free(data_written);
 80015b8:	e13fe917 	ldw	r4,-92(fp)
 80015bc:	80025bc0 	call	80025bc <free>
  free(data_read);
 80015c0:	e13fea17 	ldw	r4,-88(fp)
 80015c4:	80025bc0 	call	80025bc <free>
  
  return ret_code;
 80015c8:	e0bfe817 	ldw	r2,-96(fp)
}
 80015cc:	e037883a 	mov	sp,fp
 80015d0:	dfc00117 	ldw	ra,4(sp)
 80015d4:	df000017 	ldw	fp,0(sp)
 80015d8:	dec00204 	addi	sp,sp,8
 80015dc:	f800283a 	ret

080015e0 <FlashTestBlockErase>:
*           flash block contains some non-0xFFFFFFFF data before
*           this function is called.
*
******************************************************************/
static int FlashTestBlockErase(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
 80015e0:	defff404 	addi	sp,sp,-48
 80015e4:	dfc00b15 	stw	ra,44(sp)
 80015e8:	df000a15 	stw	fp,40(sp)
 80015ec:	df000a04 	addi	fp,sp,40
 80015f0:	e13ffc15 	stw	r4,-16(fp)
 80015f4:	e17ffd15 	stw	r5,-12(fp)
 80015f8:	e1bffe15 	stw	r6,-8(fp)
 80015fc:	e1ffff15 	stw	r7,-4(fp)

  int ret_code = 0x0;
 8001600:	e03ff615 	stw	zero,-40(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
 8001604:	e0bfff17 	ldw	r2,-4(fp)
 8001608:	10c00017 	ldw	r3,0(r2)
 800160c:	e0bfff17 	ldw	r2,-4(fp)
 8001610:	11000317 	ldw	r4,12(r2)
 8001614:	e0bffc17 	ldw	r2,-16(fp)
 8001618:	2085383a 	mul	r2,r4,r2
 800161c:	1885883a 	add	r2,r3,r2
 8001620:	e0bff715 	stw	r2,-36(fp)

  printf(" -Testing \"alt_erase_flash_block\".");
 8001624:	010200b4 	movhi	r4,2050
 8001628:	2130c504 	addi	r4,r4,-15596
 800162c:	8002f580 	call	8002f58 <printf>
  ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
 8001630:	e0bfff17 	ldw	r2,-4(fp)
 8001634:	10800317 	ldw	r2,12(r2)
 8001638:	e0fffe17 	ldw	r3,-8(fp)
 800163c:	e0fff815 	stw	r3,-32(fp)
 8001640:	e0fff717 	ldw	r3,-36(fp)
 8001644:	e0fff915 	stw	r3,-28(fp)
 8001648:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 800164c:	e0bff817 	ldw	r2,-32(fp)
 8001650:	10800817 	ldw	r2,32(r2)
 8001654:	e13ff817 	ldw	r4,-32(fp)
 8001658:	e17ff917 	ldw	r5,-28(fp)
 800165c:	103ee83a 	callr	r2
 8001660:	e0bffb15 	stw	r2,-20(fp)
  
  if(!ret_code)
 8001664:	e0bffb17 	ldw	r2,-20(fp)
 8001668:	1000081e 	bne	r2,zero,800168c <FlashTestBlockErase+0xac>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 800166c:	e0bff817 	ldw	r2,-32(fp)
 8001670:	10c00a17 	ldw	r3,40(r2)
 8001674:	e0bff917 	ldw	r2,-28(fp)
 8001678:	1887883a 	add	r3,r3,r2
 800167c:	e0bffa17 	ldw	r2,-24(fp)
 8001680:	1809883a 	mov	r4,r3
 8001684:	100b883a 	mov	r5,r2
 8001688:	801843c0 	call	801843c <alt_dcache_flush>

  return ret_code;
 800168c:	e0bffb17 	ldw	r2,-20(fp)
 8001690:	e0bff615 	stw	r2,-40(fp)
  /* Check that the erase was successful. */
  if (!ret_code)
 8001694:	e0bff617 	ldw	r2,-40(fp)
 8001698:	1000111e 	bne	r2,zero,80016e0 <FlashTestBlockErase+0x100>
  {
    if(FlashCheckIfBlockErased(fd, block, regions))
 800169c:	e13ffe17 	ldw	r4,-8(fp)
 80016a0:	e17ffc17 	ldw	r5,-16(fp)
 80016a4:	e1bfff17 	ldw	r6,-4(fp)
 80016a8:	8000e1c0 	call	8000e1c <FlashCheckIfBlockErased>
 80016ac:	10000426 	beq	r2,zero,80016c0 <FlashTestBlockErase+0xe0>
      printf("  passed.\n");
 80016b0:	010200b4 	movhi	r4,2050
 80016b4:	21309004 	addi	r4,r4,-15808
 80016b8:	800306c0 	call	800306c <puts>
 80016bc:	00000806 	br	80016e0 <FlashTestBlockErase+0x100>
    else
    {
      printf("  FAILED\n");  
 80016c0:	010200b4 	movhi	r4,2050
 80016c4:	2130ce04 	addi	r4,r4,-15560
 80016c8:	800306c0 	call	800306c <puts>
      (*error)++;
 80016cc:	e0bffd17 	ldw	r2,-12(fp)
 80016d0:	10800017 	ldw	r2,0(r2)
 80016d4:	10c00044 	addi	r3,r2,1
 80016d8:	e0bffd17 	ldw	r2,-12(fp)
 80016dc:	10c00015 	stw	r3,0(r2)
    }
  }
  
  return ret_code;
 80016e0:	e0bff617 	ldw	r2,-40(fp)
}
 80016e4:	e037883a 	mov	sp,fp
 80016e8:	dfc00117 	ldw	ra,4(sp)
 80016ec:	df000017 	ldw	fp,0(sp)
 80016f0:	dec00204 	addi	sp,sp,8
 80016f4:	f800283a 	ret

080016f8 <FlashRunTests>:
*             - alt_erase_flash_block
*             - alt_write_flash_block
* 
******************************************************************/
static void FlashRunTests(alt_flash_fd* fd, int block, flash_region* regions)
{
 80016f8:	defff404 	addi	sp,sp,-48
 80016fc:	dfc00b15 	stw	ra,44(sp)
 8001700:	df000a15 	stw	fp,40(sp)
 8001704:	df000a04 	addi	fp,sp,40
 8001708:	e13ffd15 	stw	r4,-12(fp)
 800170c:	e17ffe15 	stw	r5,-8(fp)
 8001710:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0x0;
 8001714:	e03ff615 	stw	zero,-40(fp)
  int error = 0x0;
 8001718:	e03ffc15 	stw	zero,-16(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
 800171c:	e0bfff17 	ldw	r2,-4(fp)
 8001720:	10c00017 	ldw	r3,0(r2)
 8001724:	e0bfff17 	ldw	r2,-4(fp)
 8001728:	11000317 	ldw	r4,12(r2)
 800172c:	e0bffe17 	ldw	r2,-8(fp)
 8001730:	2085383a 	mul	r2,r4,r2
 8001734:	1885883a 	add	r2,r3,r2
 8001738:	e0bff715 	stw	r2,-36(fp)
  
  /* Test reading and writing functions */
  ret_code = FlashTestReadWrite(block, &error, fd, regions);
 800173c:	e0bffc04 	addi	r2,fp,-16
 8001740:	e13ffe17 	ldw	r4,-8(fp)
 8001744:	100b883a 	mov	r5,r2
 8001748:	e1bffd17 	ldw	r6,-12(fp)
 800174c:	e1ffff17 	ldw	r7,-4(fp)
 8001750:	80012e40 	call	80012e4 <FlashTestReadWrite>
 8001754:	e0bff615 	stw	r2,-40(fp)
 
  /* Test the erase function */
  if (!ret_code)
 8001758:	e0bff617 	ldw	r2,-40(fp)
 800175c:	1000071e 	bne	r2,zero,800177c <FlashRunTests+0x84>
  {
    ret_code = FlashTestBlockErase(block, &error, fd, regions);
 8001760:	e0bffc04 	addi	r2,fp,-16
 8001764:	e13ffe17 	ldw	r4,-8(fp)
 8001768:	100b883a 	mov	r5,r2
 800176c:	e1bffd17 	ldw	r6,-12(fp)
 8001770:	e1ffff17 	ldw	r7,-4(fp)
 8001774:	80015e00 	call	80015e0 <FlashTestBlockErase>
 8001778:	e0bff615 	stw	r2,-40(fp)
  }
  /* Test the block write function */
  if (!ret_code)
 800177c:	e0bff617 	ldw	r2,-40(fp)
 8001780:	1000071e 	bne	r2,zero,80017a0 <FlashRunTests+0xa8>
  {
    ret_code = FlashTestBlockWrite(block, &error, fd, regions);
 8001784:	e0bffc04 	addi	r2,fp,-16
 8001788:	e13ffe17 	ldw	r4,-8(fp)
 800178c:	100b883a 	mov	r5,r2
 8001790:	e1bffd17 	ldw	r6,-12(fp)
 8001794:	e1ffff17 	ldw	r7,-4(fp)
 8001798:	8000f600 	call	8000f60 <FlashTestBlockWrite>
 800179c:	e0bff615 	stw	r2,-40(fp)
  }

  /* Erase the block so we dont fill one up each time we run the test */
  printf(" -Returning block %d to its erased state.\n", block);
 80017a0:	010200b4 	movhi	r4,2050
 80017a4:	2130d104 	addi	r4,r4,-15548
 80017a8:	e17ffe17 	ldw	r5,-8(fp)
 80017ac:	8002f580 	call	8002f58 <printf>
  alt_erase_flash_block(fd, test_offset, regions->block_size);
 80017b0:	e0bfff17 	ldw	r2,-4(fp)
 80017b4:	10800317 	ldw	r2,12(r2)
 80017b8:	e0fffd17 	ldw	r3,-12(fp)
 80017bc:	e0fff815 	stw	r3,-32(fp)
 80017c0:	e0fff717 	ldw	r3,-36(fp)
 80017c4:	e0fff915 	stw	r3,-28(fp)
 80017c8:	e0bffa15 	stw	r2,-24(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 80017cc:	e0bff817 	ldw	r2,-32(fp)
 80017d0:	10800817 	ldw	r2,32(r2)
 80017d4:	e13ff817 	ldw	r4,-32(fp)
 80017d8:	e17ff917 	ldw	r5,-28(fp)
 80017dc:	103ee83a 	callr	r2
 80017e0:	e0bffb15 	stw	r2,-20(fp)
  
  if(!ret_code)
 80017e4:	e0bffb17 	ldw	r2,-20(fp)
 80017e8:	1000081e 	bne	r2,zero,800180c <FlashRunTests+0x114>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 80017ec:	e0bff817 	ldw	r2,-32(fp)
 80017f0:	10c00a17 	ldw	r3,40(r2)
 80017f4:	e0bff917 	ldw	r2,-28(fp)
 80017f8:	1887883a 	add	r3,r3,r2
 80017fc:	e0bffa17 	ldw	r2,-24(fp)
 8001800:	1809883a 	mov	r4,r3
 8001804:	100b883a 	mov	r5,r2
 8001808:	801843c0 	call	801843c <alt_dcache_flush>
 
  printf(" -Flash tests complete.\n");
 800180c:	010200b4 	movhi	r4,2050
 8001810:	2130dc04 	addi	r4,r4,-15504
 8001814:	800306c0 	call	800306c <puts>
  if(ret_code || error)
 8001818:	e0bff617 	ldw	r2,-40(fp)
 800181c:	1000021e 	bne	r2,zero,8001828 <FlashRunTests+0x130>
 8001820:	e0bffc17 	ldw	r2,-16(fp)
 8001824:	10000326 	beq	r2,zero,8001834 <FlashRunTests+0x13c>
  {
    printf(" -At least one test failed.\n\n");
 8001828:	010200b4 	movhi	r4,2050
 800182c:	2130e204 	addi	r4,r4,-15480
 8001830:	800306c0 	call	800306c <puts>
  }
}
 8001834:	e037883a 	mov	sp,fp
 8001838:	dfc00117 	ldw	ra,4(sp)
 800183c:	df000017 	ldw	fp,0(sp)
 8001840:	dec00204 	addi	sp,sp,8
 8001844:	f800283a 	ret

08001848 <GetFlashName>:
*           Defaults to "/dev/ext_flash", the name of the flash
*           component in the Nios II example designs.
* 
******************************************************************/
static int GetFlashName(char line[30], int flash_type)
{
 8001848:	defffa04 	addi	sp,sp,-24
 800184c:	dfc00515 	stw	ra,20(sp)
 8001850:	df000415 	stw	fp,16(sp)
 8001854:	df000404 	addi	fp,sp,16
 8001858:	e13ffe15 	stw	r4,-8(fp)
 800185c:	e17fff15 	stw	r5,-4(fp)

  char ch = 0x0;
 8001860:	e03ffc05 	stb	zero,-16(fp)
  int i;

  if (flash_type == CFI)
 8001864:	e0bfff17 	ldw	r2,-4(fp)
 8001868:	108000d8 	cmpnei	r2,r2,3
 800186c:	1000091e 	bne	r2,zero,8001894 <GetFlashName+0x4c>
  { 
    printf("\nEnter the name of the CFI flash device to be opened,\n");
 8001870:	010200b4 	movhi	r4,2050
 8001874:	2130ea04 	addi	r4,r4,-15448
 8001878:	800306c0 	call	800306c <puts>
    printf("or just press <enter> to open \"/dev/ext_flash\"\n");
 800187c:	010200b4 	movhi	r4,2050
 8001880:	2130f804 	addi	r4,r4,-15392
 8001884:	800306c0 	call	800306c <puts>
    printf(">");
 8001888:	01000f84 	movi	r4,62
 800188c:	8002f9c0 	call	8002f9c <putchar>
 8001890:	00000b06 	br	80018c0 <GetFlashName+0x78>
  }
  else if (flash_type == EPCS)
 8001894:	e0bfff17 	ldw	r2,-4(fp)
 8001898:	10800118 	cmpnei	r2,r2,4
 800189c:	1000081e 	bne	r2,zero,80018c0 <GetFlashName+0x78>
  {
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
 80018a0:	010200b4 	movhi	r4,2050
 80018a4:	21310404 	addi	r4,r4,-15344
 80018a8:	800306c0 	call	800306c <puts>
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
 80018ac:	010200b4 	movhi	r4,2050
 80018b0:	21311204 	addi	r4,r4,-15288
 80018b4:	800306c0 	call	800306c <puts>
    printf(">");
 80018b8:	01000f84 	movi	r4,62
 80018bc:	8002f9c0 	call	8002f9c <putchar>
  }
 
  for(i = 0; ch != '\n'; i++)
 80018c0:	e03ffd15 	stw	zero,-12(fp)
 80018c4:	00003806 	br	80019a8 <GetFlashName+0x160>
  {
    ch = getc(stdin);
 80018c8:	008200b4 	movhi	r2,2050
 80018cc:	10bab604 	addi	r2,r2,-5416
 80018d0:	10800017 	ldw	r2,0(r2)
 80018d4:	10800117 	ldw	r2,4(r2)
 80018d8:	1009883a 	mov	r4,r2
 80018dc:	80025200 	call	8002520 <getc>
 80018e0:	e0bffc05 	stb	r2,-16(fp)
    if(ch == '\r' || ch == '\n')
 80018e4:	e0bffc07 	ldb	r2,-16(fp)
 80018e8:	10800360 	cmpeqi	r2,r2,13
 80018ec:	1000031e 	bne	r2,zero,80018fc <GetFlashName+0xb4>
 80018f0:	e0bffc07 	ldb	r2,-16(fp)
 80018f4:	10800298 	cmpnei	r2,r2,10
 80018f8:	1000231e 	bne	r2,zero,8001988 <GetFlashName+0x140>
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
 80018fc:	e0bffd17 	ldw	r2,-12(fp)
 8001900:	10800088 	cmpgei	r2,r2,2
 8001904:	10001a1e 	bne	r2,zero,8001970 <GetFlashName+0x128>
      {
        if (flash_type == CFI)
 8001908:	e0bfff17 	ldw	r2,-4(fp)
 800190c:	108000d8 	cmpnei	r2,r2,3
 8001910:	10000a1e 	bne	r2,zero,800193c <GetFlashName+0xf4>
          strcpy(line, "/dev/ext_flash\0");
 8001914:	e0fffe17 	ldw	r3,-8(fp)
 8001918:	008200b4 	movhi	r2,2050
 800191c:	10b12004 	addi	r2,r2,-15232
 8001920:	1809883a 	mov	r4,r3
 8001924:	1007883a 	mov	r3,r2
 8001928:	008003c4 	movi	r2,15
 800192c:	180b883a 	mov	r5,r3
 8001930:	100d883a 	mov	r6,r2
 8001934:	8002df40 	call	8002df4 <memcpy>
 8001938:	00001206 	br	8001984 <GetFlashName+0x13c>
        else if (flash_type == EPCS)
 800193c:	e0bfff17 	ldw	r2,-4(fp)
 8001940:	10800118 	cmpnei	r2,r2,4
 8001944:	10000f1e 	bne	r2,zero,8001984 <GetFlashName+0x13c>
          strcpy(line, "/dev/epcs_controller\0");
 8001948:	e0fffe17 	ldw	r3,-8(fp)
 800194c:	008200b4 	movhi	r2,2050
 8001950:	10b12404 	addi	r2,r2,-15216
 8001954:	1809883a 	mov	r4,r3
 8001958:	1007883a 	mov	r3,r2
 800195c:	00800544 	movi	r2,21
 8001960:	180b883a 	mov	r5,r3
 8001964:	100d883a 	mov	r6,r2
 8001968:	8002df40 	call	8002df4 <memcpy>
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
 800196c:	00000b06 	br	800199c <GetFlashName+0x154>
          strcpy(line, "/dev/epcs_controller\0");
      }
         
      else
        /* Properly terminate the string. */
        line[i] = '\0';
 8001970:	e0bffd17 	ldw	r2,-12(fp)
 8001974:	e0fffe17 	ldw	r3,-8(fp)
 8001978:	1885883a 	add	r2,r3,r2
 800197c:	10000005 	stb	zero,0(r2)
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
 8001980:	00000606 	br	800199c <GetFlashName+0x154>
 8001984:	00000506 	br	800199c <GetFlashName+0x154>
      else
        /* Properly terminate the string. */
        line[i] = '\0';
    }
    else
     line[i] = ch;
 8001988:	e0bffd17 	ldw	r2,-12(fp)
 800198c:	e0fffe17 	ldw	r3,-8(fp)
 8001990:	1885883a 	add	r2,r3,r2
 8001994:	e0fffc03 	ldbu	r3,-16(fp)
 8001998:	10c00005 	stb	r3,0(r2)
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
    printf(">");
  }
 
  for(i = 0; ch != '\n'; i++)
 800199c:	e0bffd17 	ldw	r2,-12(fp)
 80019a0:	10800044 	addi	r2,r2,1
 80019a4:	e0bffd15 	stw	r2,-12(fp)
 80019a8:	e0bffc07 	ldb	r2,-16(fp)
 80019ac:	10800298 	cmpnei	r2,r2,10
 80019b0:	103fc51e 	bne	r2,zero,80018c8 <__alt_data_end+0xf80018c8>
    }
    else
     line[i] = ch;
  }
 
  return 0;
 80019b4:	0005883a 	mov	r2,zero
}
 80019b8:	e037883a 	mov	sp,fp
 80019bc:	dfc00117 	ldw	ra,4(sp)
 80019c0:	df000017 	ldw	fp,0(sp)
 80019c4:	dec00204 	addi	sp,sp,8
 80019c8:	f800283a 	ret

080019cc <FlashErase>:
*
*  Purpose: Erases 1 or all blocks in the specified flash device.
* 
******************************************************************/
static void FlashErase(int flash_type)
{
 80019cc:	deffe304 	addi	sp,sp,-116
 80019d0:	dfc01c15 	stw	ra,112(sp)
 80019d4:	df001b15 	stw	fp,108(sp)
 80019d8:	df001b04 	addi	fp,sp,108
 80019dc:	e13fff15 	stw	r4,-4(fp)
  char entry[4];
  char flashname[30];
  unsigned int block;
 
  /* Get the name of the flash we are erasing */
  ret_code = GetFlashName(flashname, flash_type);
 80019e0:	e0bff604 	addi	r2,fp,-40
 80019e4:	1009883a 	mov	r4,r2
 80019e8:	e17fff17 	ldw	r5,-4(fp)
 80019ec:	80018480 	call	8001848 <GetFlashName>
 80019f0:	e0bfe515 	stw	r2,-108(fp)
 
  fd = alt_flash_open_dev(flashname);
 80019f4:	e0bff604 	addi	r2,fp,-40
 80019f8:	1009883a 	mov	r4,r2
 80019fc:	80184dc0 	call	80184dc <alt_flash_open_dev>
 8001a00:	e0bfe615 	stw	r2,-104(fp)
  if (fd)
 8001a04:	e0bfe617 	ldw	r2,-104(fp)
 8001a08:	1000ce26 	beq	r2,zero,8001d44 <FlashErase+0x378>
 8001a0c:	e0bfe617 	ldw	r2,-104(fp)
 8001a10:	e0bfe815 	stw	r2,-96(fp)
 8001a14:	e0bff304 	addi	r2,fp,-52
 8001a18:	e0bfe915 	stw	r2,-92(fp)
 8001a1c:	e0bff404 	addi	r2,fp,-48
 8001a20:	e0bfea15 	stw	r2,-88(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 8001a24:	e0bfe817 	ldw	r2,-96(fp)
 8001a28:	10800717 	ldw	r2,28(r2)
 8001a2c:	e13fe817 	ldw	r4,-96(fp)
 8001a30:	e17fe917 	ldw	r5,-92(fp)
 8001a34:	e1bfea17 	ldw	r6,-88(fp)
 8001a38:	103ee83a 	callr	r2
  {
    /* Find out some useful stuff about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
 8001a3c:	e0bfe515 	stw	r2,-108(fp)
    if (!ret_code)
 8001a40:	e0bfe517 	ldw	r2,-108(fp)
 8001a44:	1000b81e 	bne	r2,zero,8001d28 <FlashErase+0x35c>
    {
      printf(" -Region has %d blocks.\n", regions->number_of_blocks);
 8001a48:	e0bff317 	ldw	r2,-52(fp)
 8001a4c:	10800217 	ldw	r2,8(r2)
 8001a50:	010200b4 	movhi	r4,2050
 8001a54:	21312a04 	addi	r4,r4,-15192
 8001a58:	100b883a 	mov	r5,r2
 8001a5c:	8002f580 	call	8002f58 <printf>
      printf(" -Which block would you like to erase?\n");
 8001a60:	010200b4 	movhi	r4,2050
 8001a64:	21313104 	addi	r4,r4,-15164
 8001a68:	800306c0 	call	800306c <puts>
      printf(" -> ");
 8001a6c:	010200b4 	movhi	r4,2050
 8001a70:	21313b04 	addi	r4,r4,-15124
 8001a74:	8002f580 	call	8002f58 <printf>
      
      GetInputString( entry, sizeof(entry), stdin );
 8001a78:	008200b4 	movhi	r2,2050
 8001a7c:	10bab604 	addi	r2,r2,-5416
 8001a80:	10800017 	ldw	r2,0(r2)
 8001a84:	10800117 	ldw	r2,4(r2)
 8001a88:	e0fff504 	addi	r3,fp,-44
 8001a8c:	1809883a 	mov	r4,r3
 8001a90:	01400104 	movi	r5,4
 8001a94:	100d883a 	mov	r6,r2
 8001a98:	800039c0 	call	800039c <GetInputString>

      if(entry[0] == 'a')
 8001a9c:	e0bff503 	ldbu	r2,-44(fp)
 8001aa0:	10803fcc 	andi	r2,r2,255
 8001aa4:	1080201c 	xori	r2,r2,128
 8001aa8:	10bfe004 	addi	r2,r2,-128
 8001aac:	10801858 	cmpnei	r2,r2,97
 8001ab0:	10005c1e 	bne	r2,zero,8001c24 <FlashErase+0x258>
      {
        printf(" -Erase ALL blocks? (y/n) ");
 8001ab4:	010200b4 	movhi	r4,2050
 8001ab8:	21313d04 	addi	r4,r4,-15116
 8001abc:	8002f580 	call	8002f58 <printf>

        GetInputString( entry, sizeof(entry), stdin );
 8001ac0:	008200b4 	movhi	r2,2050
 8001ac4:	10bab604 	addi	r2,r2,-5416
 8001ac8:	10800017 	ldw	r2,0(r2)
 8001acc:	10800117 	ldw	r2,4(r2)
 8001ad0:	e0fff504 	addi	r3,fp,-44
 8001ad4:	1809883a 	mov	r4,r3
 8001ad8:	01400104 	movi	r5,4
 8001adc:	100d883a 	mov	r6,r2
 8001ae0:	800039c0 	call	800039c <GetInputString>
        
        if(entry[0] == 'y')
 8001ae4:	e0bff503 	ldbu	r2,-44(fp)
 8001ae8:	10803fcc 	andi	r2,r2,255
 8001aec:	1080201c 	xori	r2,r2,128
 8001af0:	10bfe004 	addi	r2,r2,-128
 8001af4:	10801e58 	cmpnei	r2,r2,121
 8001af8:	1000471e 	bne	r2,zero,8001c18 <FlashErase+0x24c>
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
 8001afc:	e0bff317 	ldw	r2,-52(fp)
 8001b00:	10800217 	ldw	r2,8(r2)
 8001b04:	010200b4 	movhi	r4,2050
 8001b08:	21314404 	addi	r4,r4,-15088
 8001b0c:	100b883a 	mov	r5,r2
 8001b10:	8002f580 	call	8002f58 <printf>
          for(block = 0; block < regions->number_of_blocks; block++)
 8001b14:	e03ffe15 	stw	zero,-8(fp)
 8001b18:	00003606 	br	8001bf4 <FlashErase+0x228>
          {
            /* Dont erase it if it's already erased silly. */
            if ((FlashCheckIfBlockErased(fd, block, regions)) == 0)
 8001b1c:	e0bffe17 	ldw	r2,-8(fp)
 8001b20:	1007883a 	mov	r3,r2
 8001b24:	e0bff317 	ldw	r2,-52(fp)
 8001b28:	e13fe617 	ldw	r4,-104(fp)
 8001b2c:	180b883a 	mov	r5,r3
 8001b30:	100d883a 	mov	r6,r2
 8001b34:	8000e1c0 	call	8000e1c <FlashCheckIfBlockErased>
 8001b38:	1000211e 	bne	r2,zero,8001bc0 <FlashErase+0x1f4>
            {
              test_offset = (regions->offset + (block * regions->block_size));
 8001b3c:	e0bff317 	ldw	r2,-52(fp)
 8001b40:	10800017 	ldw	r2,0(r2)
 8001b44:	1007883a 	mov	r3,r2
 8001b48:	e0bff317 	ldw	r2,-52(fp)
 8001b4c:	10800317 	ldw	r2,12(r2)
 8001b50:	1009883a 	mov	r4,r2
 8001b54:	e0bffe17 	ldw	r2,-8(fp)
 8001b58:	2085383a 	mul	r2,r4,r2
 8001b5c:	1885883a 	add	r2,r3,r2
 8001b60:	e0bfe715 	stw	r2,-100(fp)
              alt_erase_flash_block(fd, test_offset, regions->block_size);
 8001b64:	e0bff317 	ldw	r2,-52(fp)
 8001b68:	10800317 	ldw	r2,12(r2)
 8001b6c:	e0ffe617 	ldw	r3,-104(fp)
 8001b70:	e0ffeb15 	stw	r3,-84(fp)
 8001b74:	e0ffe717 	ldw	r3,-100(fp)
 8001b78:	e0ffec15 	stw	r3,-80(fp)
 8001b7c:	e0bfed15 	stw	r2,-76(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 8001b80:	e0bfeb17 	ldw	r2,-84(fp)
 8001b84:	10800817 	ldw	r2,32(r2)
 8001b88:	e13feb17 	ldw	r4,-84(fp)
 8001b8c:	e17fec17 	ldw	r5,-80(fp)
 8001b90:	103ee83a 	callr	r2
 8001b94:	e0bfee15 	stw	r2,-72(fp)
  
  if(!ret_code)
 8001b98:	e0bfee17 	ldw	r2,-72(fp)
 8001b9c:	1000081e 	bne	r2,zero,8001bc0 <FlashErase+0x1f4>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 8001ba0:	e0bfeb17 	ldw	r2,-84(fp)
 8001ba4:	10c00a17 	ldw	r3,40(r2)
 8001ba8:	e0bfec17 	ldw	r2,-80(fp)
 8001bac:	1887883a 	add	r3,r3,r2
 8001bb0:	e0bfed17 	ldw	r2,-76(fp)
 8001bb4:	1809883a 	mov	r4,r3
 8001bb8:	100b883a 	mov	r5,r2
 8001bbc:	801843c0 	call	801843c <alt_dcache_flush>
            }
            /* Just a simple progress meter so we dont get bored waiting for the flash to erase. */
            printf(".");
 8001bc0:	01000b84 	movi	r4,46
 8001bc4:	8002f9c0 	call	8002f9c <putchar>
            if(((block + 1) % 80) == 0)
 8001bc8:	e0bffe17 	ldw	r2,-8(fp)
 8001bcc:	10800044 	addi	r2,r2,1
 8001bd0:	1009883a 	mov	r4,r2
 8001bd4:	01401404 	movi	r5,80
 8001bd8:	80024980 	call	8002498 <__umodsi3>
 8001bdc:	1000021e 	bne	r2,zero,8001be8 <FlashErase+0x21c>
            {
              printf("\n");
 8001be0:	01000284 	movi	r4,10
 8001be4:	8002f9c0 	call	8002f9c <putchar>
        
        if(entry[0] == 'y')
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
          for(block = 0; block < regions->number_of_blocks; block++)
 8001be8:	e0bffe17 	ldw	r2,-8(fp)
 8001bec:	10800044 	addi	r2,r2,1
 8001bf0:	e0bffe15 	stw	r2,-8(fp)
 8001bf4:	e0bff317 	ldw	r2,-52(fp)
 8001bf8:	10800217 	ldw	r2,8(r2)
 8001bfc:	1007883a 	mov	r3,r2
 8001c00:	e0bffe17 	ldw	r2,-8(fp)
 8001c04:	10ffc536 	bltu	r2,r3,8001b1c <__alt_data_end+0xf8001b1c>
            if(((block + 1) % 80) == 0)
            {
              printf("\n");
            }
          }
          printf("\n -All Blocks Erased.\n");
 8001c08:	010200b4 	movhi	r4,2050
 8001c0c:	21314d04 	addi	r4,r4,-15052
 8001c10:	800306c0 	call	800306c <puts>
 8001c14:	00000306 	br	8001c24 <FlashErase+0x258>
        }
        else
        {
          printf("Erased zero blocks.\n");
 8001c18:	010200b4 	movhi	r4,2050
 8001c1c:	21315304 	addi	r4,r4,-15028
 8001c20:	800306c0 	call	800306c <puts>
        }
      }
      /* Just erase one block */
      if(sscanf(entry, "%d\n", &block))
 8001c24:	e0fff504 	addi	r3,fp,-44
 8001c28:	e0bffe04 	addi	r2,fp,-8
 8001c2c:	1809883a 	mov	r4,r3
 8001c30:	014200b4 	movhi	r5,2050
 8001c34:	29715804 	addi	r5,r5,-15008
 8001c38:	100d883a 	mov	r6,r2
 8001c3c:	800315c0 	call	800315c <sscanf>
 8001c40:	10003926 	beq	r2,zero,8001d28 <FlashErase+0x35c>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
 8001c44:	e0bff317 	ldw	r2,-52(fp)
 8001c48:	10800217 	ldw	r2,8(r2)
 8001c4c:	10bfffc4 	addi	r2,r2,-1
 8001c50:	1007883a 	mov	r3,r2
 8001c54:	e0bffe17 	ldw	r2,-8(fp)
 8001c58:	18802736 	bltu	r3,r2,8001cf8 <FlashErase+0x32c>
        {
          test_offset = (regions->offset + (block * regions->block_size));
 8001c5c:	e0bff317 	ldw	r2,-52(fp)
 8001c60:	10800017 	ldw	r2,0(r2)
 8001c64:	1007883a 	mov	r3,r2
 8001c68:	e0bff317 	ldw	r2,-52(fp)
 8001c6c:	10800317 	ldw	r2,12(r2)
 8001c70:	1009883a 	mov	r4,r2
 8001c74:	e0bffe17 	ldw	r2,-8(fp)
 8001c78:	2085383a 	mul	r2,r4,r2
 8001c7c:	1885883a 	add	r2,r3,r2
 8001c80:	e0bfe715 	stw	r2,-100(fp)
          alt_erase_flash_block(fd, test_offset, regions->block_size);
 8001c84:	e0bff317 	ldw	r2,-52(fp)
 8001c88:	10800317 	ldw	r2,12(r2)
 8001c8c:	e0ffe617 	ldw	r3,-104(fp)
 8001c90:	e0ffef15 	stw	r3,-68(fp)
 8001c94:	e0ffe717 	ldw	r3,-100(fp)
 8001c98:	e0fff015 	stw	r3,-64(fp)
 8001c9c:	e0bff115 	stw	r2,-60(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
 8001ca0:	e0bfef17 	ldw	r2,-68(fp)
 8001ca4:	10800817 	ldw	r2,32(r2)
 8001ca8:	e13fef17 	ldw	r4,-68(fp)
 8001cac:	e17ff017 	ldw	r5,-64(fp)
 8001cb0:	103ee83a 	callr	r2
 8001cb4:	e0bff215 	stw	r2,-56(fp)
  
  if(!ret_code)
 8001cb8:	e0bff217 	ldw	r2,-56(fp)
 8001cbc:	1000081e 	bne	r2,zero,8001ce0 <FlashErase+0x314>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
 8001cc0:	e0bfef17 	ldw	r2,-68(fp)
 8001cc4:	10c00a17 	ldw	r3,40(r2)
 8001cc8:	e0bff017 	ldw	r2,-64(fp)
 8001ccc:	1887883a 	add	r3,r3,r2
 8001cd0:	e0bff117 	ldw	r2,-60(fp)
 8001cd4:	1809883a 	mov	r4,r3
 8001cd8:	100b883a 	mov	r5,r2
 8001cdc:	801843c0 	call	801843c <alt_dcache_flush>
          printf(" -Block %d erased.\n", block);
 8001ce0:	e0bffe17 	ldw	r2,-8(fp)
 8001ce4:	010200b4 	movhi	r4,2050
 8001ce8:	21315904 	addi	r4,r4,-15004
 8001cec:	100b883a 	mov	r5,r2
 8001cf0:	8002f580 	call	8002f58 <printf>
 8001cf4:	00000c06 	br	8001d28 <FlashErase+0x35c>
        }
        else
        {
          printf(" -Block number entered is %d\n", block);
 8001cf8:	e0bffe17 	ldw	r2,-8(fp)
 8001cfc:	010200b4 	movhi	r4,2050
 8001d00:	21315e04 	addi	r4,r4,-14984
 8001d04:	100b883a 	mov	r5,r2
 8001d08:	8002f580 	call	8002f58 <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
 8001d0c:	e0bff317 	ldw	r2,-52(fp)
 8001d10:	10800217 	ldw	r2,8(r2)
 8001d14:	10bfffc4 	addi	r2,r2,-1
 8001d18:	010200b4 	movhi	r4,2050
 8001d1c:	21316604 	addi	r4,r4,-14952
 8001d20:	100b883a 	mov	r5,r2
 8001d24:	8002f580 	call	8002f58 <printf>
        }
      }
    }
    printf(" -Closing flash \"%s\".\n", flashname);
 8001d28:	e0bff604 	addi	r2,fp,-40
 8001d2c:	010200b4 	movhi	r4,2050
 8001d30:	21317104 	addi	r4,r4,-14908
 8001d34:	100b883a 	mov	r5,r2
 8001d38:	8002f580 	call	8002f58 <printf>
    alt_flash_close_dev(fd);
 8001d3c:	e13fe617 	ldw	r4,-104(fp)
 8001d40:	80185440 	call	8018544 <alt_flash_close_dev>
  }
}
 8001d44:	e037883a 	mov	sp,fp
 8001d48:	dfc00117 	ldw	ra,4(sp)
 8001d4c:	df000017 	ldw	fp,0(sp)
 8001d50:	dec00204 	addi	sp,sp,8
 8001d54:	f800283a 	ret

08001d58 <FlashFindErasedBlocks>:
*           parameter is SHOWMAP, the function prints a list of 
*           all blocks, indicating which ones are erased.
* 
******************************************************************/
static int FlashFindErasedBlocks(alt_flash_fd* fd, flash_region* regions, int number_of_regions, int mode)
{ 
 8001d58:	defff404 	addi	sp,sp,-48
 8001d5c:	dfc00b15 	stw	ra,44(sp)
 8001d60:	df000a15 	stw	fp,40(sp)
 8001d64:	df000a04 	addi	fp,sp,40
 8001d68:	e13ffc15 	stw	r4,-16(fp)
 8001d6c:	e17ffd15 	stw	r5,-12(fp)
 8001d70:	e1bffe15 	stw	r6,-8(fp)
 8001d74:	e1ffff15 	stw	r7,-4(fp)
  int region_index, block_index;
  int block_erased = 0x0;
 8001d78:	e03ff815 	stw	zero,-32(fp)
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
 8001d7c:	e03ff615 	stw	zero,-40(fp)
 8001d80:	00008b06 	br	8001fb0 <FlashFindErasedBlocks+0x258>
  {
    printf(" -Checking Region %d for erased blocks.\n", region_index);
 8001d84:	010200b4 	movhi	r4,2050
 8001d88:	21317704 	addi	r4,r4,-14884
 8001d8c:	e17ff617 	ldw	r5,-40(fp)
 8001d90:	8002f580 	call	8002f58 <printf>
    /* SHOWMAP mode has a legend reminding us what little plus and minus signs mean */
    if(mode == SHOWMAP)
 8001d94:	e0bfff17 	ldw	r2,-4(fp)
 8001d98:	10800098 	cmpnei	r2,r2,2
 8001d9c:	1000061e 	bne	r2,zero,8001db8 <FlashFindErasedBlocks+0x60>
    {
      printf("            erased block = '-'\n");     
 8001da0:	010200b4 	movhi	r4,2050
 8001da4:	21318204 	addi	r4,r4,-14840
 8001da8:	800306c0 	call	800306c <puts>
      printf("          unerased block = '+'\n\n");     
 8001dac:	010200b4 	movhi	r4,2050
 8001db0:	21318a04 	addi	r4,r4,-14808
 8001db4:	800306c0 	call	800306c <puts>
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
 8001db8:	e03ff715 	stw	zero,-36(fp)
 8001dbc:	00003006 	br	8001e80 <FlashFindErasedBlocks+0x128>
    {
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
 8001dc0:	e13ffc17 	ldw	r4,-16(fp)
 8001dc4:	e17ff717 	ldw	r5,-36(fp)
 8001dc8:	e1bffd17 	ldw	r6,-12(fp)
 8001dcc:	8000e1c0 	call	8000e1c <FlashCheckIfBlockErased>
 8001dd0:	e0bff815 	stw	r2,-32(fp)
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
 8001dd4:	e0bff817 	ldw	r2,-32(fp)
 8001dd8:	10000326 	beq	r2,zero,8001de8 <FlashFindErasedBlocks+0x90>
 8001ddc:	e0bfff17 	ldw	r2,-4(fp)
 8001de0:	10800060 	cmpeqi	r2,r2,1
 8001de4:	10002a1e 	bne	r2,zero,8001e90 <FlashFindErasedBlocks+0x138>
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
 8001de8:	e0bff817 	ldw	r2,-32(fp)
 8001dec:	10001026 	beq	r2,zero,8001e30 <FlashFindErasedBlocks+0xd8>
 8001df0:	e0bfff17 	ldw	r2,-4(fp)
 8001df4:	10800098 	cmpnei	r2,r2,2
 8001df8:	10000d1e 	bne	r2,zero,8001e30 <FlashFindErasedBlocks+0xd8>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
 8001dfc:	e0bffd17 	ldw	r2,-12(fp)
 8001e00:	10c00017 	ldw	r3,0(r2)
 8001e04:	e0bffd17 	ldw	r2,-12(fp)
 8001e08:	11000317 	ldw	r4,12(r2)
 8001e0c:	e0bff717 	ldw	r2,-36(fp)
 8001e10:	2085383a 	mul	r2,r4,r2
 8001e14:	1885883a 	add	r2,r3,r2
 8001e18:	010200b4 	movhi	r4,2050
 8001e1c:	21319204 	addi	r4,r4,-14776
 8001e20:	e17ff717 	ldw	r5,-36(fp)
 8001e24:	100d883a 	mov	r6,r2
 8001e28:	8002f580 	call	8002f58 <printf>
 8001e2c:	00001106 	br	8001e74 <FlashFindErasedBlocks+0x11c>
      else if(!block_erased && (mode == SHOWMAP))
 8001e30:	e0bff817 	ldw	r2,-32(fp)
 8001e34:	10000f1e 	bne	r2,zero,8001e74 <FlashFindErasedBlocks+0x11c>
 8001e38:	e0bfff17 	ldw	r2,-4(fp)
 8001e3c:	10800098 	cmpnei	r2,r2,2
 8001e40:	10000c1e 	bne	r2,zero,8001e74 <FlashFindErasedBlocks+0x11c>
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
 8001e44:	e0bffd17 	ldw	r2,-12(fp)
 8001e48:	10c00017 	ldw	r3,0(r2)
 8001e4c:	e0bffd17 	ldw	r2,-12(fp)
 8001e50:	11000317 	ldw	r4,12(r2)
 8001e54:	e0bff717 	ldw	r2,-36(fp)
 8001e58:	2085383a 	mul	r2,r4,r2
 8001e5c:	1885883a 	add	r2,r3,r2
 8001e60:	010200b4 	movhi	r4,2050
 8001e64:	21319904 	addi	r4,r4,-14748
 8001e68:	e17ff717 	ldw	r5,-36(fp)
 8001e6c:	100d883a 	mov	r6,r2
 8001e70:	8002f580 	call	8002f58 <printf>
    {
      printf("            erased block = '-'\n");     
      printf("          unerased block = '+'\n\n");     
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
 8001e74:	e0bff717 	ldw	r2,-36(fp)
 8001e78:	10800044 	addi	r2,r2,1
 8001e7c:	e0bff715 	stw	r2,-36(fp)
 8001e80:	e0bffd17 	ldw	r2,-12(fp)
 8001e84:	10800217 	ldw	r2,8(r2)
 8001e88:	e0fff717 	ldw	r3,-36(fp)
 8001e8c:	18bfcc16 	blt	r3,r2,8001dc0 <__alt_data_end+0xf8001dc0>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
    }
    /* Special case if no blocks are erased (TEST mode only)*/
    if(( block_index == ( regions->number_of_blocks )) && ( mode == TEST ))
 8001e90:	e0bffd17 	ldw	r2,-12(fp)
 8001e94:	10c00217 	ldw	r3,8(r2)
 8001e98:	e0bff717 	ldw	r2,-36(fp)
 8001e9c:	18803b1e 	bne	r3,r2,8001f8c <FlashFindErasedBlocks+0x234>
 8001ea0:	e0bfff17 	ldw	r2,-4(fp)
 8001ea4:	10800058 	cmpnei	r2,r2,1
 8001ea8:	1000381e 	bne	r2,zero,8001f8c <FlashFindErasedBlocks+0x234>
    {
      printf(" -Found no erased blocks.  Please enter the number of the block\n");
 8001eac:	010200b4 	movhi	r4,2050
 8001eb0:	2131a004 	addi	r4,r4,-14720
 8001eb4:	800306c0 	call	800306c <puts>
      printf("  you would like to test.  Enter 'q' to quit without testing flash.\n");
 8001eb8:	010200b4 	movhi	r4,2050
 8001ebc:	2131b004 	addi	r4,r4,-14656
 8001ec0:	800306c0 	call	800306c <puts>
      printf(" -> ");
 8001ec4:	010200b4 	movhi	r4,2050
 8001ec8:	21313b04 	addi	r4,r4,-15124
 8001ecc:	8002f580 	call	8002f58 <printf>

      GetInputString( entry, sizeof(entry), stdin );
 8001ed0:	008200b4 	movhi	r2,2050
 8001ed4:	10bab604 	addi	r2,r2,-5416
 8001ed8:	10800017 	ldw	r2,0(r2)
 8001edc:	10800117 	ldw	r2,4(r2)
 8001ee0:	e0fff904 	addi	r3,fp,-28
 8001ee4:	1809883a 	mov	r4,r3
 8001ee8:	01400144 	movi	r5,5
 8001eec:	100d883a 	mov	r6,r2
 8001ef0:	800039c0 	call	800039c <GetInputString>

      if(entry[0] == 'q')
 8001ef4:	e0bff903 	ldbu	r2,-28(fp)
 8001ef8:	10803fcc 	andi	r2,r2,255
 8001efc:	1080201c 	xori	r2,r2,128
 8001f00:	10bfe004 	addi	r2,r2,-128
 8001f04:	10801c58 	cmpnei	r2,r2,113
 8001f08:	1000031e 	bne	r2,zero,8001f18 <FlashFindErasedBlocks+0x1c0>
      {
    		block_index = QUIT_WITHOUT_TESTING;
 8001f0c:	00bfffc4 	movi	r2,-1
 8001f10:	e0bff715 	stw	r2,-36(fp)
    		break;
 8001f14:	00002906 	br	8001fbc <FlashFindErasedBlocks+0x264>
    	}
      else if(sscanf(entry, "%d\n", &block))
 8001f18:	e0fff904 	addi	r3,fp,-28
 8001f1c:	e0bffb04 	addi	r2,fp,-20
 8001f20:	1809883a 	mov	r4,r3
 8001f24:	014200b4 	movhi	r5,2050
 8001f28:	29715804 	addi	r5,r5,-15008
 8001f2c:	100d883a 	mov	r6,r2
 8001f30:	800315c0 	call	800315c <sscanf>
 8001f34:	10001526 	beq	r2,zero,8001f8c <FlashFindErasedBlocks+0x234>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
 8001f38:	e0bffd17 	ldw	r2,-12(fp)
 8001f3c:	10800217 	ldw	r2,8(r2)
 8001f40:	10bfffc4 	addi	r2,r2,-1
 8001f44:	1007883a 	mov	r3,r2
 8001f48:	e0bffb17 	ldw	r2,-20(fp)
 8001f4c:	18800336 	bltu	r3,r2,8001f5c <FlashFindErasedBlocks+0x204>
        {
        	block_index = block;
 8001f50:	e0bffb17 	ldw	r2,-20(fp)
 8001f54:	e0bff715 	stw	r2,-36(fp)
        	break;
 8001f58:	00001806 	br	8001fbc <FlashFindErasedBlocks+0x264>
        }
        else 
        {
          printf(" -Block number entered is %d\n", block);
 8001f5c:	e0bffb17 	ldw	r2,-20(fp)
 8001f60:	010200b4 	movhi	r4,2050
 8001f64:	21315e04 	addi	r4,r4,-14984
 8001f68:	100b883a 	mov	r5,r2
 8001f6c:	8002f580 	call	8002f58 <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
 8001f70:	e0bffd17 	ldw	r2,-12(fp)
 8001f74:	10800217 	ldw	r2,8(r2)
 8001f78:	10bfffc4 	addi	r2,r2,-1
 8001f7c:	010200b4 	movhi	r4,2050
 8001f80:	21316604 	addi	r4,r4,-14952
 8001f84:	100b883a 	mov	r5,r2
 8001f88:	8002f580 	call	8002f58 <printf>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
 8001f8c:	e0bff817 	ldw	r2,-32(fp)
 8001f90:	10000426 	beq	r2,zero,8001fa4 <FlashFindErasedBlocks+0x24c>
 8001f94:	e0bfff17 	ldw	r2,-4(fp)
 8001f98:	10800058 	cmpnei	r2,r2,1
 8001f9c:	1000011e 	bne	r2,zero,8001fa4 <FlashFindErasedBlocks+0x24c>
      break;
 8001fa0:	00000606 	br	8001fbc <FlashFindErasedBlocks+0x264>
  char entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
 8001fa4:	e0bff617 	ldw	r2,-40(fp)
 8001fa8:	10800044 	addi	r2,r2,1
 8001fac:	e0bff615 	stw	r2,-40(fp)
 8001fb0:	e0fff617 	ldw	r3,-40(fp)
 8001fb4:	e0bffe17 	ldw	r2,-8(fp)
 8001fb8:	18bf7216 	blt	r3,r2,8001d84 <__alt_data_end+0xf8001d84>
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
      break;
  }

  return block_index;
 8001fbc:	e0bff717 	ldw	r2,-36(fp)
}
 8001fc0:	e037883a 	mov	sp,fp
 8001fc4:	dfc00117 	ldw	ra,4(sp)
 8001fc8:	df000017 	ldw	fp,0(sp)
 8001fcc:	dec00204 	addi	sp,sp,8
 8001fd0:	f800283a 	ret

08001fd4 <TestFlash>:
*           indicates which ones are erased.  The flash is closed
*           at the end of the function.
* 
******************************************************************/
static void TestFlash(int mode, int flash_type)
{
 8001fd4:	deffeb04 	addi	sp,sp,-84
 8001fd8:	dfc01415 	stw	ra,80(sp)
 8001fdc:	df001315 	stw	fp,76(sp)
 8001fe0:	df001304 	addi	fp,sp,76
 8001fe4:	e13ffe15 	stw	r4,-8(fp)
 8001fe8:	e17fff15 	stw	r5,-4(fp)
  alt_flash_fd* fd;
  int number_of_regions;
  int block;
  flash_region* regions;
  int ret_code = 0x0;
 8001fec:	e03fed15 	stw	zero,-76(fp)
  char entry[4];
  char flashname[30];
  
  ret_code = GetFlashName(flashname, flash_type);
 8001ff0:	e0bff604 	addi	r2,fp,-40
 8001ff4:	1009883a 	mov	r4,r2
 8001ff8:	e17fff17 	ldw	r5,-4(fp)
 8001ffc:	80018480 	call	8001848 <GetFlashName>
 8002000:	e0bfed15 	stw	r2,-76(fp)

  fd = alt_flash_open_dev(flashname);
 8002004:	e0bff604 	addi	r2,fp,-40
 8002008:	1009883a 	mov	r4,r2
 800200c:	80184dc0 	call	80184dc <alt_flash_open_dev>
 8002010:	e0bfee15 	stw	r2,-72(fp)
  if (fd)
 8002014:	e0bfee17 	ldw	r2,-72(fp)
 8002018:	10005926 	beq	r2,zero,8002180 <TestFlash+0x1ac>
  {
    printf(" -Successfully opened %s\n", flashname);
 800201c:	e0bff604 	addi	r2,fp,-40
 8002020:	010200b4 	movhi	r4,2050
 8002024:	2131c104 	addi	r4,r4,-14588
 8002028:	100b883a 	mov	r5,r2
 800202c:	8002f580 	call	8002f58 <printf>
 8002030:	e0bfee17 	ldw	r2,-72(fp)
 8002034:	e0bff015 	stw	r2,-64(fp)
 8002038:	e0bff404 	addi	r2,fp,-48
 800203c:	e0bff115 	stw	r2,-60(fp)
 8002040:	e0bff304 	addi	r2,fp,-52
 8002044:	e0bff215 	stw	r2,-56(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
 8002048:	e0bff017 	ldw	r2,-64(fp)
 800204c:	10800717 	ldw	r2,28(r2)
 8002050:	e13ff017 	ldw	r4,-64(fp)
 8002054:	e17ff117 	ldw	r5,-60(fp)
 8002058:	e1bff217 	ldw	r6,-56(fp)
 800205c:	103ee83a 	callr	r2
    
    /* Get some useful info about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
 8002060:	e0bfed15 	stw	r2,-76(fp)
      
    if (!ret_code)
 8002064:	e0bfed17 	ldw	r2,-76(fp)
 8002068:	10004a1e 	bne	r2,zero,8002194 <TestFlash+0x1c0>
    {
      printf(" -Region 0 contains %d blocks.\n", regions->number_of_blocks);
 800206c:	e0bff417 	ldw	r2,-48(fp)
 8002070:	10800217 	ldw	r2,8(r2)
 8002074:	010200b4 	movhi	r4,2050
 8002078:	2131c804 	addi	r4,r4,-14560
 800207c:	100b883a 	mov	r5,r2
 8002080:	8002f580 	call	8002f58 <printf>
      
      block = FlashFindErasedBlocks(fd, regions, number_of_regions, mode);
 8002084:	e0fff417 	ldw	r3,-48(fp)
 8002088:	e0bff317 	ldw	r2,-52(fp)
 800208c:	e13fee17 	ldw	r4,-72(fp)
 8002090:	180b883a 	mov	r5,r3
 8002094:	100d883a 	mov	r6,r2
 8002098:	e1fffe17 	ldw	r7,-8(fp)
 800209c:	8001d580 	call	8001d58 <FlashFindErasedBlocks>
 80020a0:	e0bfef15 	stw	r2,-68(fp)

      /* If we're in TEST mode, ask if this block is okay to test. */
      if(( mode == TEST ) && ( block != QUIT_WITHOUT_TESTING ))
 80020a4:	e0bffe17 	ldw	r2,-8(fp)
 80020a8:	10800058 	cmpnei	r2,r2,1
 80020ac:	1000391e 	bne	r2,zero,8002194 <TestFlash+0x1c0>
 80020b0:	e0bfef17 	ldw	r2,-68(fp)
 80020b4:	10bfffe0 	cmpeqi	r2,r2,-1
 80020b8:	1000361e 	bne	r2,zero,8002194 <TestFlash+0x1c0>
      {
        printf(" -Block %d, at address 0x%X identified.\n", block, (regions->offset + (block * regions->block_size)));
 80020bc:	e0bff417 	ldw	r2,-48(fp)
 80020c0:	10c00017 	ldw	r3,0(r2)
 80020c4:	e0bff417 	ldw	r2,-48(fp)
 80020c8:	11000317 	ldw	r4,12(r2)
 80020cc:	e0bfef17 	ldw	r2,-68(fp)
 80020d0:	2085383a 	mul	r2,r4,r2
 80020d4:	1885883a 	add	r2,r3,r2
 80020d8:	010200b4 	movhi	r4,2050
 80020dc:	2131d004 	addi	r4,r4,-14528
 80020e0:	e17fef17 	ldw	r5,-68(fp)
 80020e4:	100d883a 	mov	r6,r2
 80020e8:	8002f580 	call	8002f58 <printf>
        printf(" -Would you like to test this block? (y/n)");
 80020ec:	010200b4 	movhi	r4,2050
 80020f0:	2131db04 	addi	r4,r4,-14484
 80020f4:	8002f580 	call	8002f58 <printf>

        GetInputString(entry, sizeof(entry), stdin);
 80020f8:	008200b4 	movhi	r2,2050
 80020fc:	10bab604 	addi	r2,r2,-5416
 8002100:	10800017 	ldw	r2,0(r2)
 8002104:	10800117 	ldw	r2,4(r2)
 8002108:	e0fff504 	addi	r3,fp,-44
 800210c:	1809883a 	mov	r4,r3
 8002110:	01400104 	movi	r5,4
 8002114:	100d883a 	mov	r6,r2
 8002118:	800039c0 	call	800039c <GetInputString>

        if ( entry[0] == 'y' && entry[1] == '\n' )
 800211c:	e0bff503 	ldbu	r2,-44(fp)
 8002120:	10803fcc 	andi	r2,r2,255
 8002124:	1080201c 	xori	r2,r2,128
 8002128:	10bfe004 	addi	r2,r2,-128
 800212c:	10801e58 	cmpnei	r2,r2,121
 8002130:	1000181e 	bne	r2,zero,8002194 <TestFlash+0x1c0>
 8002134:	e0bff543 	ldbu	r2,-43(fp)
 8002138:	10803fcc 	andi	r2,r2,255
 800213c:	1080201c 	xori	r2,r2,128
 8002140:	10bfe004 	addi	r2,r2,-128
 8002144:	10800298 	cmpnei	r2,r2,10
 8002148:	1000121e 	bne	r2,zero,8002194 <TestFlash+0x1c0>
        {
          /* Test that Flash! */
          FlashRunTests(fd, block, regions);
 800214c:	e0bff417 	ldw	r2,-48(fp)
 8002150:	e13fee17 	ldw	r4,-72(fp)
 8002154:	e17fef17 	ldw	r5,-68(fp)
 8002158:	100d883a 	mov	r6,r2
 800215c:	80016f80 	call	80016f8 <FlashRunTests>
          printf(" -Closing flash device \"%s\".\n", flashname);
 8002160:	e0bff604 	addi	r2,fp,-40
 8002164:	010200b4 	movhi	r4,2050
 8002168:	2131e604 	addi	r4,r4,-14440
 800216c:	100b883a 	mov	r5,r2
 8002170:	8002f580 	call	8002f58 <printf>
          alt_flash_close_dev(fd);
 8002174:	e13fee17 	ldw	r4,-72(fp)
 8002178:	80185440 	call	8018544 <alt_flash_close_dev>
 800217c:	00000506 	br	8002194 <TestFlash+0x1c0>
      }
    }
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
 8002180:	e0bff604 	addi	r2,fp,-40
 8002184:	010200b4 	movhi	r4,2050
 8002188:	2131ee04 	addi	r4,r4,-14408
 800218c:	100b883a 	mov	r5,r2
 8002190:	8002f580 	call	8002f58 <printf>
  }
}
 8002194:	e037883a 	mov	sp,fp
 8002198:	dfc00117 	ldw	ra,4(sp)
 800219c:	df000017 	ldw	fp,0(sp)
 80021a0:	dec00204 	addi	sp,sp,8
 80021a4:	f800283a 	ret

080021a8 <TopMenu>:
*
*  Purpose: Generates the top level menu.
* 
******************************************************************/
static int TopMenu( void )
{
 80021a8:	defffd04 	addi	sp,sp,-12
 80021ac:	dfc00215 	stw	ra,8(sp)
 80021b0:	df000115 	stw	fp,4(sp)
 80021b4:	df000104 	addi	fp,sp,4
  char ch;

  /* Print the top-level menu to stdout */
  while (1)
  {
    MenuBegin("      Memory Test Main Menu");
 80021b8:	010200b4 	movhi	r4,2050
 80021bc:	2131f504 	addi	r4,r4,-14380
 80021c0:	80003000 	call	8000300 <MenuBegin>
    MenuItem( 'a', "Test RAM" );
 80021c4:	01001844 	movi	r4,97
 80021c8:	014200b4 	movhi	r5,2050
 80021cc:	2971fc04 	addi	r5,r5,-14352
 80021d0:	80003540 	call	8000354 <MenuItem>
    MenuItem( 'b', "Test Flash");
 80021d4:	01001884 	movi	r4,98
 80021d8:	014200b4 	movhi	r5,2050
 80021dc:	2971ff04 	addi	r5,r5,-14340
 80021e0:	80003540 	call	8000354 <MenuItem>
#ifdef EPCS_CONTROLLER_NAME    
    MenuItem( 'c', "Test EPCS Serial Flash");
    ch = MenuEnd( 'a', 'c' );    
#else
    ch = MenuEnd( 'a', 'b' );
 80021e4:	01001844 	movi	r4,97
 80021e8:	01401884 	movi	r5,98
 80021ec:	80004280 	call	8000428 <MenuEnd>
 80021f0:	e0bfff05 	stb	r2,-4(fp)
#endif /* EPCS_CONTROLLER_NAME */

    switch(ch)
 80021f4:	e0bfff07 	ldb	r2,-4(fp)
 80021f8:	10bfe7c4 	addi	r2,r2,-97
 80021fc:	10c00468 	cmpgeui	r3,r2,17
 8002200:	1800241e 	bne	r3,zero,8002294 <TopMenu+0xec>
 8002204:	100690ba 	slli	r3,r2,2
 8002208:	00820034 	movhi	r2,2048
 800220c:	10888704 	addi	r2,r2,8732
 8002210:	1885883a 	add	r2,r3,r2
 8002214:	10800017 	ldw	r2,0(r2)
 8002218:	1000683a 	jmp	r2
 800221c:	08002260 	cmpeqi	zero,at,137
 8002220:	08002268 	cmpgeui	zero,at,137
 8002224:	08002294 	ori	zero,at,138
 8002228:	08002294 	ori	zero,at,138
 800222c:	08002278 	rdprs	zero,at,137
 8002230:	08002294 	ori	zero,at,138
 8002234:	08002294 	ori	zero,at,138
 8002238:	08002294 	ori	zero,at,138
 800223c:	08002294 	ori	zero,at,138
 8002240:	08002294 	ori	zero,at,138
 8002244:	08002294 	ori	zero,at,138
 8002248:	08002294 	ori	zero,at,138
 800224c:	08002284 	addi	zero,at,138
 8002250:	08002294 	ori	zero,at,138
 8002254:	08002294 	ori	zero,at,138
 8002258:	08002294 	ori	zero,at,138
 800225c:	080022ac 	andhi	zero,at,138
    {
      MenuCase('a',TestRam());
 8002260:	8000c700 	call	8000c70 <TestRam>
 8002264:	00001206 	br	80022b0 <TopMenu+0x108>
      MenuCase('b',TestFlash(TEST, CFI));
 8002268:	01000044 	movi	r4,1
 800226c:	014000c4 	movi	r5,3
 8002270:	8001fd40 	call	8001fd4 <TestFlash>
 8002274:	00000e06 	br	80022b0 <TopMenu+0x108>
      MenuCase('e',FlashErase(CFI));       /* hidden option */
 8002278:	010000c4 	movi	r4,3
 800227c:	80019cc0 	call	80019cc <FlashErase>
 8002280:	00000b06 	br	80022b0 <TopMenu+0x108>
      MenuCase('m',TestFlash(SHOWMAP, CFI)); /* hidden option */
 8002284:	01000084 	movi	r4,2
 8002288:	014000c4 	movi	r5,3
 800228c:	8001fd40 	call	8001fd4 <TestFlash>
 8002290:	00000706 	br	80022b0 <TopMenu+0x108>
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
 8002294:	e0bfff07 	ldb	r2,-4(fp)
 8002298:	010200b4 	movhi	r4,2050
 800229c:	21320204 	addi	r4,r4,-14328
 80022a0:	100b883a 	mov	r5,r2
 80022a4:	8002f580 	call	8002f58 <printf>
 80022a8:	00000106 	br	80022b0 <TopMenu+0x108>
#ifdef EPCS_CONTROLLER_NAME    
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
 80022ac:	0001883a 	nop
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
    }
    if (ch == 'q')
 80022b0:	e0bfff07 	ldb	r2,-4(fp)
 80022b4:	10801c58 	cmpnei	r2,r2,113
 80022b8:	1000011e 	bne	r2,zero,80022c0 <TopMenu+0x118>
      break;
 80022bc:	00001206 	br	8002308 <TopMenu+0x160>
    printf("\nPress enter to continue...\n");
 80022c0:	010200b4 	movhi	r4,2050
 80022c4:	21321004 	addi	r4,r4,-14272
 80022c8:	800306c0 	call	800306c <puts>
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));
 80022cc:	0001883a 	nop
 80022d0:	008200b4 	movhi	r2,2050
 80022d4:	10bab604 	addi	r2,r2,-5416
 80022d8:	10800017 	ldw	r2,0(r2)
 80022dc:	10800117 	ldw	r2,4(r2)
 80022e0:	1009883a 	mov	r4,r2
 80022e4:	80025200 	call	8002520 <getc>
 80022e8:	e0bfff05 	stb	r2,-4(fp)
 80022ec:	e0bfff07 	ldb	r2,-4(fp)
 80022f0:	108002a0 	cmpeqi	r2,r2,10
 80022f4:	1000031e 	bne	r2,zero,8002304 <TopMenu+0x15c>
 80022f8:	e0bfff07 	ldb	r2,-4(fp)
 80022fc:	10bfffd8 	cmpnei	r2,r2,-1
 8002300:	103ff31e 	bne	r2,zero,80022d0 <__alt_data_end+0xf80022d0>

  }
 8002304:	003fac06 	br	80021b8 <__alt_data_end+0xf80021b8>
  return (ch);
 8002308:	e0bfff07 	ldb	r2,-4(fp)
}
 800230c:	e037883a 	mov	sp,fp
 8002310:	dfc00117 	ldw	ra,4(sp)
 8002314:	df000017 	ldw	fp,0(sp)
 8002318:	dec00204 	addi	sp,sp,8
 800231c:	f800283a 	ret

08002320 <main>:
*  Purpose: Continually prints the menu and performs the actions
*           requested by the user.
* 
******************************************************************/
int main(void)
{
 8002320:	defffd04 	addi	sp,sp,-12
 8002324:	dfc00215 	stw	ra,8(sp)
 8002328:	df000115 	stw	fp,4(sp)
 800232c:	df000104 	addi	fp,sp,4

  int ch;

  /* Print the Header */
  MenuHeader();
 8002330:	80002880 	call	8000288 <MenuHeader>
  /* Print the menu and do what the user requests, until they hit 'q' */
  while (1)
  {
    ch = TopMenu();
 8002334:	80021a80 	call	80021a8 <TopMenu>
 8002338:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
 800233c:	e0bfff17 	ldw	r2,-4(fp)
 8002340:	10801c58 	cmpnei	r2,r2,113
 8002344:	1000041e 	bne	r2,zero,8002358 <main+0x38>
    {
      printf( "\nExiting from Memory Test.\n");
 8002348:	010200b4 	movhi	r4,2050
 800234c:	21321704 	addi	r4,r4,-14244
 8002350:	800306c0 	call	800306c <puts>
      break;
 8002354:	00000106 	br	800235c <main+0x3c>
    }
  }
 8002358:	003ff606 	br	8002334 <__alt_data_end+0xf8002334>
  return (0);
 800235c:	0005883a 	mov	r2,zero
}
 8002360:	e037883a 	mov	sp,fp
 8002364:	dfc00117 	ldw	ra,4(sp)
 8002368:	df000017 	ldw	fp,0(sp)
 800236c:	dec00204 	addi	sp,sp,8
 8002370:	f800283a 	ret

08002374 <udivmodsi4>:
 8002374:	2900182e 	bgeu	r5,r4,80023d8 <udivmodsi4+0x64>
 8002378:	28001716 	blt	r5,zero,80023d8 <udivmodsi4+0x64>
 800237c:	00800804 	movi	r2,32
 8002380:	00c00044 	movi	r3,1
 8002384:	00000206 	br	8002390 <udivmodsi4+0x1c>
 8002388:	10001126 	beq	r2,zero,80023d0 <udivmodsi4+0x5c>
 800238c:	28000516 	blt	r5,zero,80023a4 <udivmodsi4+0x30>
 8002390:	294b883a 	add	r5,r5,r5
 8002394:	10bfffc4 	addi	r2,r2,-1
 8002398:	18c7883a 	add	r3,r3,r3
 800239c:	293ffa36 	bltu	r5,r4,8002388 <__alt_data_end+0xf8002388>
 80023a0:	18000b26 	beq	r3,zero,80023d0 <udivmodsi4+0x5c>
 80023a4:	0005883a 	mov	r2,zero
 80023a8:	21400236 	bltu	r4,r5,80023b4 <udivmodsi4+0x40>
 80023ac:	2149c83a 	sub	r4,r4,r5
 80023b0:	10c4b03a 	or	r2,r2,r3
 80023b4:	1806d07a 	srli	r3,r3,1
 80023b8:	280ad07a 	srli	r5,r5,1
 80023bc:	183ffa1e 	bne	r3,zero,80023a8 <__alt_data_end+0xf80023a8>
 80023c0:	3000011e 	bne	r6,zero,80023c8 <udivmodsi4+0x54>
 80023c4:	f800283a 	ret
 80023c8:	2005883a 	mov	r2,r4
 80023cc:	f800283a 	ret
 80023d0:	0005883a 	mov	r2,zero
 80023d4:	003ffa06 	br	80023c0 <__alt_data_end+0xf80023c0>
 80023d8:	00c00044 	movi	r3,1
 80023dc:	003ff106 	br	80023a4 <__alt_data_end+0xf80023a4>

080023e0 <__divsi3>:
 80023e0:	defffe04 	addi	sp,sp,-8
 80023e4:	dfc00115 	stw	ra,4(sp)
 80023e8:	dc000015 	stw	r16,0(sp)
 80023ec:	20000b16 	blt	r4,zero,800241c <__divsi3+0x3c>
 80023f0:	0021883a 	mov	r16,zero
 80023f4:	28000c16 	blt	r5,zero,8002428 <__divsi3+0x48>
 80023f8:	000d883a 	mov	r6,zero
 80023fc:	80023740 	call	8002374 <udivmodsi4>
 8002400:	0407c83a 	sub	r3,zero,r16
 8002404:	1884f03a 	xor	r2,r3,r2
 8002408:	1405883a 	add	r2,r2,r16
 800240c:	dfc00117 	ldw	ra,4(sp)
 8002410:	dc000017 	ldw	r16,0(sp)
 8002414:	dec00204 	addi	sp,sp,8
 8002418:	f800283a 	ret
 800241c:	0109c83a 	sub	r4,zero,r4
 8002420:	04000044 	movi	r16,1
 8002424:	283ff40e 	bge	r5,zero,80023f8 <__alt_data_end+0xf80023f8>
 8002428:	014bc83a 	sub	r5,zero,r5
 800242c:	8400005c 	xori	r16,r16,1
 8002430:	003ff106 	br	80023f8 <__alt_data_end+0xf80023f8>

08002434 <__modsi3>:
 8002434:	defffd04 	addi	sp,sp,-12
 8002438:	dfc00215 	stw	ra,8(sp)
 800243c:	dc400115 	stw	r17,4(sp)
 8002440:	dc000015 	stw	r16,0(sp)
 8002444:	20000c16 	blt	r4,zero,8002478 <__modsi3+0x44>
 8002448:	0023883a 	mov	r17,zero
 800244c:	0021883a 	mov	r16,zero
 8002450:	28000d16 	blt	r5,zero,8002488 <__modsi3+0x54>
 8002454:	01800044 	movi	r6,1
 8002458:	80023740 	call	8002374 <udivmodsi4>
 800245c:	1404f03a 	xor	r2,r2,r16
 8002460:	8885883a 	add	r2,r17,r2
 8002464:	dfc00217 	ldw	ra,8(sp)
 8002468:	dc400117 	ldw	r17,4(sp)
 800246c:	dc000017 	ldw	r16,0(sp)
 8002470:	dec00304 	addi	sp,sp,12
 8002474:	f800283a 	ret
 8002478:	0109c83a 	sub	r4,zero,r4
 800247c:	04400044 	movi	r17,1
 8002480:	043fffc4 	movi	r16,-1
 8002484:	283ff30e 	bge	r5,zero,8002454 <__alt_data_end+0xf8002454>
 8002488:	014bc83a 	sub	r5,zero,r5
 800248c:	003ff106 	br	8002454 <__alt_data_end+0xf8002454>

08002490 <__udivsi3>:
 8002490:	000d883a 	mov	r6,zero
 8002494:	80023741 	jmpi	8002374 <udivmodsi4>

08002498 <__umodsi3>:
 8002498:	01800044 	movi	r6,1
 800249c:	80023741 	jmpi	8002374 <udivmodsi4>

080024a0 <_getc_r>:
 80024a0:	defffd04 	addi	sp,sp,-12
 80024a4:	dc400115 	stw	r17,4(sp)
 80024a8:	dc000015 	stw	r16,0(sp)
 80024ac:	dfc00215 	stw	ra,8(sp)
 80024b0:	2023883a 	mov	r17,r4
 80024b4:	2821883a 	mov	r16,r5
 80024b8:	20000226 	beq	r4,zero,80024c4 <_getc_r+0x24>
 80024bc:	20800e17 	ldw	r2,56(r4)
 80024c0:	10001026 	beq	r2,zero,8002504 <_getc_r+0x64>
 80024c4:	8008c6c0 	call	8008c6c <__sfp_lock_acquire>
 80024c8:	80800117 	ldw	r2,4(r16)
 80024cc:	10bfffc4 	addi	r2,r2,-1
 80024d0:	80800115 	stw	r2,4(r16)
 80024d4:	10000d16 	blt	r2,zero,800250c <_getc_r+0x6c>
 80024d8:	80800017 	ldw	r2,0(r16)
 80024dc:	10c00044 	addi	r3,r2,1
 80024e0:	80c00015 	stw	r3,0(r16)
 80024e4:	14000003 	ldbu	r16,0(r2)
 80024e8:	8008c700 	call	8008c70 <__sfp_lock_release>
 80024ec:	8005883a 	mov	r2,r16
 80024f0:	dfc00217 	ldw	ra,8(sp)
 80024f4:	dc400117 	ldw	r17,4(sp)
 80024f8:	dc000017 	ldw	r16,0(sp)
 80024fc:	dec00304 	addi	sp,sp,12
 8002500:	f800283a 	ret
 8002504:	8008c5c0 	call	8008c5c <__sinit>
 8002508:	003fee06 	br	80024c4 <__alt_data_end+0xf80024c4>
 800250c:	800b883a 	mov	r5,r16
 8002510:	8809883a 	mov	r4,r17
 8002514:	80030800 	call	8003080 <__srget_r>
 8002518:	1021883a 	mov	r16,r2
 800251c:	003ff206 	br	80024e8 <__alt_data_end+0xf80024e8>

08002520 <getc>:
 8002520:	defffd04 	addi	sp,sp,-12
 8002524:	dc400115 	stw	r17,4(sp)
 8002528:	044200b4 	movhi	r17,2050
 800252c:	8c7ab604 	addi	r17,r17,-5416
 8002530:	dc000015 	stw	r16,0(sp)
 8002534:	2021883a 	mov	r16,r4
 8002538:	89000017 	ldw	r4,0(r17)
 800253c:	dfc00215 	stw	ra,8(sp)
 8002540:	20000226 	beq	r4,zero,800254c <getc+0x2c>
 8002544:	20800e17 	ldw	r2,56(r4)
 8002548:	10001026 	beq	r2,zero,800258c <getc+0x6c>
 800254c:	8008c6c0 	call	8008c6c <__sfp_lock_acquire>
 8002550:	80800117 	ldw	r2,4(r16)
 8002554:	10bfffc4 	addi	r2,r2,-1
 8002558:	80800115 	stw	r2,4(r16)
 800255c:	10000d16 	blt	r2,zero,8002594 <getc+0x74>
 8002560:	80800017 	ldw	r2,0(r16)
 8002564:	10c00044 	addi	r3,r2,1
 8002568:	80c00015 	stw	r3,0(r16)
 800256c:	14000003 	ldbu	r16,0(r2)
 8002570:	8008c700 	call	8008c70 <__sfp_lock_release>
 8002574:	8005883a 	mov	r2,r16
 8002578:	dfc00217 	ldw	ra,8(sp)
 800257c:	dc400117 	ldw	r17,4(sp)
 8002580:	dc000017 	ldw	r16,0(sp)
 8002584:	dec00304 	addi	sp,sp,12
 8002588:	f800283a 	ret
 800258c:	8008c5c0 	call	8008c5c <__sinit>
 8002590:	003fee06 	br	800254c <__alt_data_end+0xf800254c>
 8002594:	89000017 	ldw	r4,0(r17)
 8002598:	800b883a 	mov	r5,r16
 800259c:	80030800 	call	8003080 <__srget_r>
 80025a0:	1021883a 	mov	r16,r2
 80025a4:	003ff206 	br	8002570 <__alt_data_end+0xf8002570>

080025a8 <malloc>:
 80025a8:	008200b4 	movhi	r2,2050
 80025ac:	10bab604 	addi	r2,r2,-5416
 80025b0:	200b883a 	mov	r5,r4
 80025b4:	11000017 	ldw	r4,0(r2)
 80025b8:	80025d01 	jmpi	80025d0 <_malloc_r>

080025bc <free>:
 80025bc:	008200b4 	movhi	r2,2050
 80025c0:	10bab604 	addi	r2,r2,-5416
 80025c4:	200b883a 	mov	r5,r4
 80025c8:	11000017 	ldw	r4,0(r2)
 80025cc:	8008dd01 	jmpi	8008dd0 <_free_r>

080025d0 <_malloc_r>:
 80025d0:	defff504 	addi	sp,sp,-44
 80025d4:	dc800315 	stw	r18,12(sp)
 80025d8:	dfc00a15 	stw	ra,40(sp)
 80025dc:	df000915 	stw	fp,36(sp)
 80025e0:	ddc00815 	stw	r23,32(sp)
 80025e4:	dd800715 	stw	r22,28(sp)
 80025e8:	dd400615 	stw	r21,24(sp)
 80025ec:	dd000515 	stw	r20,20(sp)
 80025f0:	dcc00415 	stw	r19,16(sp)
 80025f4:	dc400215 	stw	r17,8(sp)
 80025f8:	dc000115 	stw	r16,4(sp)
 80025fc:	288002c4 	addi	r2,r5,11
 8002600:	00c00584 	movi	r3,22
 8002604:	2025883a 	mov	r18,r4
 8002608:	18802a2e 	bgeu	r3,r2,80026b4 <_malloc_r+0xe4>
 800260c:	047ffe04 	movi	r17,-8
 8002610:	1462703a 	and	r17,r2,r17
 8002614:	88009e16 	blt	r17,zero,8002890 <_malloc_r+0x2c0>
 8002618:	89409d36 	bltu	r17,r5,8002890 <_malloc_r+0x2c0>
 800261c:	80189240 	call	8018924 <__malloc_lock>
 8002620:	00807dc4 	movi	r2,503
 8002624:	14402736 	bltu	r2,r17,80026c4 <_malloc_r+0xf4>
 8002628:	8806d0fa 	srli	r3,r17,3
 800262c:	04c200b4 	movhi	r19,2050
 8002630:	9cf4cb04 	addi	r19,r19,-11476
 8002634:	18c5883a 	add	r2,r3,r3
 8002638:	1085883a 	add	r2,r2,r2
 800263c:	1085883a 	add	r2,r2,r2
 8002640:	9885883a 	add	r2,r19,r2
 8002644:	14000317 	ldw	r16,12(r2)
 8002648:	80814a26 	beq	r16,r2,8002b74 <_malloc_r+0x5a4>
 800264c:	80c00117 	ldw	r3,4(r16)
 8002650:	81000317 	ldw	r4,12(r16)
 8002654:	00bfff04 	movi	r2,-4
 8002658:	1884703a 	and	r2,r3,r2
 800265c:	81400217 	ldw	r5,8(r16)
 8002660:	8085883a 	add	r2,r16,r2
 8002664:	10c00117 	ldw	r3,4(r2)
 8002668:	29000315 	stw	r4,12(r5)
 800266c:	21400215 	stw	r5,8(r4)
 8002670:	18c00054 	ori	r3,r3,1
 8002674:	10c00115 	stw	r3,4(r2)
 8002678:	9009883a 	mov	r4,r18
 800267c:	80189440 	call	8018944 <__malloc_unlock>
 8002680:	80800204 	addi	r2,r16,8
 8002684:	dfc00a17 	ldw	ra,40(sp)
 8002688:	df000917 	ldw	fp,36(sp)
 800268c:	ddc00817 	ldw	r23,32(sp)
 8002690:	dd800717 	ldw	r22,28(sp)
 8002694:	dd400617 	ldw	r21,24(sp)
 8002698:	dd000517 	ldw	r20,20(sp)
 800269c:	dcc00417 	ldw	r19,16(sp)
 80026a0:	dc800317 	ldw	r18,12(sp)
 80026a4:	dc400217 	ldw	r17,8(sp)
 80026a8:	dc000117 	ldw	r16,4(sp)
 80026ac:	dec00b04 	addi	sp,sp,44
 80026b0:	f800283a 	ret
 80026b4:	04400404 	movi	r17,16
 80026b8:	89407536 	bltu	r17,r5,8002890 <_malloc_r+0x2c0>
 80026bc:	80189240 	call	8018924 <__malloc_lock>
 80026c0:	003fd906 	br	8002628 <__alt_data_end+0xf8002628>
 80026c4:	8806d27a 	srli	r3,r17,9
 80026c8:	18007526 	beq	r3,zero,80028a0 <_malloc_r+0x2d0>
 80026cc:	00800104 	movi	r2,4
 80026d0:	10c0ef36 	bltu	r2,r3,8002a90 <_malloc_r+0x4c0>
 80026d4:	8806d1ba 	srli	r3,r17,6
 80026d8:	19c00e04 	addi	r7,r3,56
 80026dc:	39cb883a 	add	r5,r7,r7
 80026e0:	04c200b4 	movhi	r19,2050
 80026e4:	294b883a 	add	r5,r5,r5
 80026e8:	9cf4cb04 	addi	r19,r19,-11476
 80026ec:	294b883a 	add	r5,r5,r5
 80026f0:	994b883a 	add	r5,r19,r5
 80026f4:	2c000317 	ldw	r16,12(r5)
 80026f8:	2c000e26 	beq	r5,r16,8002734 <_malloc_r+0x164>
 80026fc:	80800117 	ldw	r2,4(r16)
 8002700:	01bfff04 	movi	r6,-4
 8002704:	010003c4 	movi	r4,15
 8002708:	1184703a 	and	r2,r2,r6
 800270c:	1447c83a 	sub	r3,r2,r17
 8002710:	20c00716 	blt	r4,r3,8002730 <_malloc_r+0x160>
 8002714:	1800650e 	bge	r3,zero,80028ac <_malloc_r+0x2dc>
 8002718:	84000317 	ldw	r16,12(r16)
 800271c:	2c000526 	beq	r5,r16,8002734 <_malloc_r+0x164>
 8002720:	80800117 	ldw	r2,4(r16)
 8002724:	1184703a 	and	r2,r2,r6
 8002728:	1447c83a 	sub	r3,r2,r17
 800272c:	20fff90e 	bge	r4,r3,8002714 <__alt_data_end+0xf8002714>
 8002730:	39ffffc4 	addi	r7,r7,-1
 8002734:	38c00044 	addi	r3,r7,1
 8002738:	018200b4 	movhi	r6,2050
 800273c:	9c000417 	ldw	r16,16(r19)
 8002740:	31b4cb04 	addi	r6,r6,-11476
 8002744:	32400204 	addi	r9,r6,8
 8002748:	82410326 	beq	r16,r9,8002b58 <_malloc_r+0x588>
 800274c:	81000117 	ldw	r4,4(r16)
 8002750:	00bfff04 	movi	r2,-4
 8002754:	208e703a 	and	r7,r4,r2
 8002758:	3c45c83a 	sub	r2,r7,r17
 800275c:	010003c4 	movi	r4,15
 8002760:	2080ee16 	blt	r4,r2,8002b1c <_malloc_r+0x54c>
 8002764:	32400515 	stw	r9,20(r6)
 8002768:	32400415 	stw	r9,16(r6)
 800276c:	1000510e 	bge	r2,zero,80028b4 <_malloc_r+0x2e4>
 8002770:	00807fc4 	movi	r2,511
 8002774:	11c0ce36 	bltu	r2,r7,8002ab0 <_malloc_r+0x4e0>
 8002778:	3808d0fa 	srli	r4,r7,3
 800277c:	01c00044 	movi	r7,1
 8002780:	30800117 	ldw	r2,4(r6)
 8002784:	210b883a 	add	r5,r4,r4
 8002788:	294b883a 	add	r5,r5,r5
 800278c:	2009d0ba 	srai	r4,r4,2
 8002790:	294b883a 	add	r5,r5,r5
 8002794:	298b883a 	add	r5,r5,r6
 8002798:	2a000217 	ldw	r8,8(r5)
 800279c:	3908983a 	sll	r4,r7,r4
 80027a0:	81400315 	stw	r5,12(r16)
 80027a4:	82000215 	stw	r8,8(r16)
 80027a8:	2088b03a 	or	r4,r4,r2
 80027ac:	2c000215 	stw	r16,8(r5)
 80027b0:	31000115 	stw	r4,4(r6)
 80027b4:	44000315 	stw	r16,12(r8)
 80027b8:	1805d0ba 	srai	r2,r3,2
 80027bc:	01400044 	movi	r5,1
 80027c0:	288a983a 	sll	r5,r5,r2
 80027c4:	21404336 	bltu	r4,r5,80028d4 <_malloc_r+0x304>
 80027c8:	2144703a 	and	r2,r4,r5
 80027cc:	10000a1e 	bne	r2,zero,80027f8 <_malloc_r+0x228>
 80027d0:	00bfff04 	movi	r2,-4
 80027d4:	294b883a 	add	r5,r5,r5
 80027d8:	1886703a 	and	r3,r3,r2
 80027dc:	2144703a 	and	r2,r4,r5
 80027e0:	18c00104 	addi	r3,r3,4
 80027e4:	1000041e 	bne	r2,zero,80027f8 <_malloc_r+0x228>
 80027e8:	294b883a 	add	r5,r5,r5
 80027ec:	2144703a 	and	r2,r4,r5
 80027f0:	18c00104 	addi	r3,r3,4
 80027f4:	103ffc26 	beq	r2,zero,80027e8 <__alt_data_end+0xf80027e8>
 80027f8:	023fff04 	movi	r8,-4
 80027fc:	01c003c4 	movi	r7,15
 8002800:	18c5883a 	add	r2,r3,r3
 8002804:	1085883a 	add	r2,r2,r2
 8002808:	1085883a 	add	r2,r2,r2
 800280c:	9895883a 	add	r10,r19,r2
 8002810:	52c00304 	addi	r11,r10,12
 8002814:	1819883a 	mov	r12,r3
 8002818:	5c000017 	ldw	r16,0(r11)
 800281c:	59bffd04 	addi	r6,r11,-12
 8002820:	8180041e 	bne	r16,r6,8002834 <_malloc_r+0x264>
 8002824:	0000ce06 	br	8002b60 <_malloc_r+0x590>
 8002828:	2000d70e 	bge	r4,zero,8002b88 <_malloc_r+0x5b8>
 800282c:	84000317 	ldw	r16,12(r16)
 8002830:	8180cb26 	beq	r16,r6,8002b60 <_malloc_r+0x590>
 8002834:	80800117 	ldw	r2,4(r16)
 8002838:	1204703a 	and	r2,r2,r8
 800283c:	1449c83a 	sub	r4,r2,r17
 8002840:	393ff90e 	bge	r7,r4,8002828 <__alt_data_end+0xf8002828>
 8002844:	80800317 	ldw	r2,12(r16)
 8002848:	80c00217 	ldw	r3,8(r16)
 800284c:	89400054 	ori	r5,r17,1
 8002850:	81400115 	stw	r5,4(r16)
 8002854:	18800315 	stw	r2,12(r3)
 8002858:	10c00215 	stw	r3,8(r2)
 800285c:	8463883a 	add	r17,r16,r17
 8002860:	9c400515 	stw	r17,20(r19)
 8002864:	9c400415 	stw	r17,16(r19)
 8002868:	20800054 	ori	r2,r4,1
 800286c:	88800115 	stw	r2,4(r17)
 8002870:	8a400315 	stw	r9,12(r17)
 8002874:	8a400215 	stw	r9,8(r17)
 8002878:	8923883a 	add	r17,r17,r4
 800287c:	89000015 	stw	r4,0(r17)
 8002880:	9009883a 	mov	r4,r18
 8002884:	80189440 	call	8018944 <__malloc_unlock>
 8002888:	80800204 	addi	r2,r16,8
 800288c:	003f7d06 	br	8002684 <__alt_data_end+0xf8002684>
 8002890:	00800304 	movi	r2,12
 8002894:	90800015 	stw	r2,0(r18)
 8002898:	0005883a 	mov	r2,zero
 800289c:	003f7906 	br	8002684 <__alt_data_end+0xf8002684>
 80028a0:	01401f84 	movi	r5,126
 80028a4:	01c00fc4 	movi	r7,63
 80028a8:	003f8d06 	br	80026e0 <__alt_data_end+0xf80026e0>
 80028ac:	81000317 	ldw	r4,12(r16)
 80028b0:	003f6a06 	br	800265c <__alt_data_end+0xf800265c>
 80028b4:	81c5883a 	add	r2,r16,r7
 80028b8:	10c00117 	ldw	r3,4(r2)
 80028bc:	9009883a 	mov	r4,r18
 80028c0:	18c00054 	ori	r3,r3,1
 80028c4:	10c00115 	stw	r3,4(r2)
 80028c8:	80189440 	call	8018944 <__malloc_unlock>
 80028cc:	80800204 	addi	r2,r16,8
 80028d0:	003f6c06 	br	8002684 <__alt_data_end+0xf8002684>
 80028d4:	9c000217 	ldw	r16,8(r19)
 80028d8:	00bfff04 	movi	r2,-4
 80028dc:	85800117 	ldw	r22,4(r16)
 80028e0:	b0ac703a 	and	r22,r22,r2
 80028e4:	b4400336 	bltu	r22,r17,80028f4 <_malloc_r+0x324>
 80028e8:	b445c83a 	sub	r2,r22,r17
 80028ec:	00c003c4 	movi	r3,15
 80028f0:	18805d16 	blt	r3,r2,8002a68 <_malloc_r+0x498>
 80028f4:	05c200b4 	movhi	r23,2050
 80028f8:	008200b4 	movhi	r2,2050
 80028fc:	bdfab704 	addi	r23,r23,-5412
 8002900:	10bacd04 	addi	r2,r2,-5324
 8002904:	15400017 	ldw	r21,0(r2)
 8002908:	b9000017 	ldw	r4,0(r23)
 800290c:	00ffffc4 	movi	r3,-1
 8002910:	858d883a 	add	r6,r16,r22
 8002914:	8d6b883a 	add	r21,r17,r21
 8002918:	20c0e426 	beq	r4,r3,8002cac <_malloc_r+0x6dc>
 800291c:	ad4403c4 	addi	r21,r21,4111
 8002920:	00fc0004 	movi	r3,-4096
 8002924:	a8ea703a 	and	r21,r21,r3
 8002928:	9009883a 	mov	r4,r18
 800292c:	a80b883a 	mov	r5,r21
 8002930:	d9800015 	stw	r6,0(sp)
 8002934:	80031080 	call	8003108 <_sbrk_r>
 8002938:	00ffffc4 	movi	r3,-1
 800293c:	1029883a 	mov	r20,r2
 8002940:	d9800017 	ldw	r6,0(sp)
 8002944:	10c0a426 	beq	r2,r3,8002bd8 <_malloc_r+0x608>
 8002948:	1180a236 	bltu	r2,r6,8002bd4 <_malloc_r+0x604>
 800294c:	070200b4 	movhi	fp,2050
 8002950:	e73ad904 	addi	fp,fp,-5276
 8002954:	e0c00017 	ldw	r3,0(fp)
 8002958:	a8c7883a 	add	r3,r21,r3
 800295c:	e0c00015 	stw	r3,0(fp)
 8002960:	3500da26 	beq	r6,r20,8002ccc <_malloc_r+0x6fc>
 8002964:	b9000017 	ldw	r4,0(r23)
 8002968:	00bfffc4 	movi	r2,-1
 800296c:	2080e426 	beq	r4,r2,8002d00 <_malloc_r+0x730>
 8002970:	a185c83a 	sub	r2,r20,r6
 8002974:	1885883a 	add	r2,r3,r2
 8002978:	e0800015 	stw	r2,0(fp)
 800297c:	a0c001cc 	andi	r3,r20,7
 8002980:	1800b526 	beq	r3,zero,8002c58 <_malloc_r+0x688>
 8002984:	a0e9c83a 	sub	r20,r20,r3
 8002988:	00840204 	movi	r2,4104
 800298c:	a5000204 	addi	r20,r20,8
 8002990:	10c7c83a 	sub	r3,r2,r3
 8002994:	a545883a 	add	r2,r20,r21
 8002998:	1083ffcc 	andi	r2,r2,4095
 800299c:	18abc83a 	sub	r21,r3,r2
 80029a0:	9009883a 	mov	r4,r18
 80029a4:	a80b883a 	mov	r5,r21
 80029a8:	80031080 	call	8003108 <_sbrk_r>
 80029ac:	00ffffc4 	movi	r3,-1
 80029b0:	10c0d026 	beq	r2,r3,8002cf4 <_malloc_r+0x724>
 80029b4:	1507c83a 	sub	r3,r2,r20
 80029b8:	a8c7883a 	add	r3,r21,r3
 80029bc:	18c00054 	ori	r3,r3,1
 80029c0:	e0800017 	ldw	r2,0(fp)
 80029c4:	9d000215 	stw	r20,8(r19)
 80029c8:	a0c00115 	stw	r3,4(r20)
 80029cc:	a887883a 	add	r3,r21,r2
 80029d0:	e0c00015 	stw	r3,0(fp)
 80029d4:	84c00e26 	beq	r16,r19,8002a10 <_malloc_r+0x440>
 80029d8:	018003c4 	movi	r6,15
 80029dc:	3580a02e 	bgeu	r6,r22,8002c60 <_malloc_r+0x690>
 80029e0:	81400117 	ldw	r5,4(r16)
 80029e4:	013ffe04 	movi	r4,-8
 80029e8:	b0bffd04 	addi	r2,r22,-12
 80029ec:	1104703a 	and	r2,r2,r4
 80029f0:	2900004c 	andi	r4,r5,1
 80029f4:	1108b03a 	or	r4,r2,r4
 80029f8:	81000115 	stw	r4,4(r16)
 80029fc:	01400144 	movi	r5,5
 8002a00:	8089883a 	add	r4,r16,r2
 8002a04:	21400115 	stw	r5,4(r4)
 8002a08:	21400215 	stw	r5,8(r4)
 8002a0c:	3080c036 	bltu	r6,r2,8002d10 <_malloc_r+0x740>
 8002a10:	008200b4 	movhi	r2,2050
 8002a14:	10bacc04 	addi	r2,r2,-5328
 8002a18:	11000017 	ldw	r4,0(r2)
 8002a1c:	20c0012e 	bgeu	r4,r3,8002a24 <_malloc_r+0x454>
 8002a20:	10c00015 	stw	r3,0(r2)
 8002a24:	008200b4 	movhi	r2,2050
 8002a28:	10bacb04 	addi	r2,r2,-5332
 8002a2c:	11000017 	ldw	r4,0(r2)
 8002a30:	9c000217 	ldw	r16,8(r19)
 8002a34:	20c0012e 	bgeu	r4,r3,8002a3c <_malloc_r+0x46c>
 8002a38:	10c00015 	stw	r3,0(r2)
 8002a3c:	80c00117 	ldw	r3,4(r16)
 8002a40:	00bfff04 	movi	r2,-4
 8002a44:	1886703a 	and	r3,r3,r2
 8002a48:	1c45c83a 	sub	r2,r3,r17
 8002a4c:	1c400236 	bltu	r3,r17,8002a58 <_malloc_r+0x488>
 8002a50:	00c003c4 	movi	r3,15
 8002a54:	18800416 	blt	r3,r2,8002a68 <_malloc_r+0x498>
 8002a58:	9009883a 	mov	r4,r18
 8002a5c:	80189440 	call	8018944 <__malloc_unlock>
 8002a60:	0005883a 	mov	r2,zero
 8002a64:	003f0706 	br	8002684 <__alt_data_end+0xf8002684>
 8002a68:	88c00054 	ori	r3,r17,1
 8002a6c:	80c00115 	stw	r3,4(r16)
 8002a70:	8463883a 	add	r17,r16,r17
 8002a74:	10800054 	ori	r2,r2,1
 8002a78:	9c400215 	stw	r17,8(r19)
 8002a7c:	88800115 	stw	r2,4(r17)
 8002a80:	9009883a 	mov	r4,r18
 8002a84:	80189440 	call	8018944 <__malloc_unlock>
 8002a88:	80800204 	addi	r2,r16,8
 8002a8c:	003efd06 	br	8002684 <__alt_data_end+0xf8002684>
 8002a90:	00800504 	movi	r2,20
 8002a94:	10c0482e 	bgeu	r2,r3,8002bb8 <_malloc_r+0x5e8>
 8002a98:	00801504 	movi	r2,84
 8002a9c:	10c06836 	bltu	r2,r3,8002c40 <_malloc_r+0x670>
 8002aa0:	8806d33a 	srli	r3,r17,12
 8002aa4:	19c01b84 	addi	r7,r3,110
 8002aa8:	39cb883a 	add	r5,r7,r7
 8002aac:	003f0c06 	br	80026e0 <__alt_data_end+0xf80026e0>
 8002ab0:	3804d27a 	srli	r2,r7,9
 8002ab4:	01000104 	movi	r4,4
 8002ab8:	2080422e 	bgeu	r4,r2,8002bc4 <_malloc_r+0x5f4>
 8002abc:	01000504 	movi	r4,20
 8002ac0:	20807c36 	bltu	r4,r2,8002cb4 <_malloc_r+0x6e4>
 8002ac4:	110016c4 	addi	r4,r2,91
 8002ac8:	210b883a 	add	r5,r4,r4
 8002acc:	294b883a 	add	r5,r5,r5
 8002ad0:	294b883a 	add	r5,r5,r5
 8002ad4:	994b883a 	add	r5,r19,r5
 8002ad8:	28800217 	ldw	r2,8(r5)
 8002adc:	020200b4 	movhi	r8,2050
 8002ae0:	4234cb04 	addi	r8,r8,-11476
 8002ae4:	11406326 	beq	r2,r5,8002c74 <_malloc_r+0x6a4>
 8002ae8:	01bfff04 	movi	r6,-4
 8002aec:	11000117 	ldw	r4,4(r2)
 8002af0:	2188703a 	and	r4,r4,r6
 8002af4:	3900022e 	bgeu	r7,r4,8002b00 <_malloc_r+0x530>
 8002af8:	10800217 	ldw	r2,8(r2)
 8002afc:	28bffb1e 	bne	r5,r2,8002aec <__alt_data_end+0xf8002aec>
 8002b00:	11800317 	ldw	r6,12(r2)
 8002b04:	99000117 	ldw	r4,4(r19)
 8002b08:	81800315 	stw	r6,12(r16)
 8002b0c:	80800215 	stw	r2,8(r16)
 8002b10:	34000215 	stw	r16,8(r6)
 8002b14:	14000315 	stw	r16,12(r2)
 8002b18:	003f2706 	br	80027b8 <__alt_data_end+0xf80027b8>
 8002b1c:	88c00054 	ori	r3,r17,1
 8002b20:	80c00115 	stw	r3,4(r16)
 8002b24:	8463883a 	add	r17,r16,r17
 8002b28:	34400515 	stw	r17,20(r6)
 8002b2c:	34400415 	stw	r17,16(r6)
 8002b30:	10c00054 	ori	r3,r2,1
 8002b34:	8a400315 	stw	r9,12(r17)
 8002b38:	8a400215 	stw	r9,8(r17)
 8002b3c:	88c00115 	stw	r3,4(r17)
 8002b40:	88a3883a 	add	r17,r17,r2
 8002b44:	88800015 	stw	r2,0(r17)
 8002b48:	9009883a 	mov	r4,r18
 8002b4c:	80189440 	call	8018944 <__malloc_unlock>
 8002b50:	80800204 	addi	r2,r16,8
 8002b54:	003ecb06 	br	8002684 <__alt_data_end+0xf8002684>
 8002b58:	31000117 	ldw	r4,4(r6)
 8002b5c:	003f1606 	br	80027b8 <__alt_data_end+0xf80027b8>
 8002b60:	63000044 	addi	r12,r12,1
 8002b64:	608000cc 	andi	r2,r12,3
 8002b68:	5ac00204 	addi	r11,r11,8
 8002b6c:	103f2a1e 	bne	r2,zero,8002818 <__alt_data_end+0xf8002818>
 8002b70:	00002106 	br	8002bf8 <_malloc_r+0x628>
 8002b74:	80800204 	addi	r2,r16,8
 8002b78:	84000517 	ldw	r16,20(r16)
 8002b7c:	143eb31e 	bne	r2,r16,800264c <__alt_data_end+0xf800264c>
 8002b80:	18c00084 	addi	r3,r3,2
 8002b84:	003eec06 	br	8002738 <__alt_data_end+0xf8002738>
 8002b88:	8085883a 	add	r2,r16,r2
 8002b8c:	10c00117 	ldw	r3,4(r2)
 8002b90:	81000317 	ldw	r4,12(r16)
 8002b94:	81400217 	ldw	r5,8(r16)
 8002b98:	18c00054 	ori	r3,r3,1
 8002b9c:	10c00115 	stw	r3,4(r2)
 8002ba0:	29000315 	stw	r4,12(r5)
 8002ba4:	21400215 	stw	r5,8(r4)
 8002ba8:	9009883a 	mov	r4,r18
 8002bac:	80189440 	call	8018944 <__malloc_unlock>
 8002bb0:	80800204 	addi	r2,r16,8
 8002bb4:	003eb306 	br	8002684 <__alt_data_end+0xf8002684>
 8002bb8:	19c016c4 	addi	r7,r3,91
 8002bbc:	39cb883a 	add	r5,r7,r7
 8002bc0:	003ec706 	br	80026e0 <__alt_data_end+0xf80026e0>
 8002bc4:	3804d1ba 	srli	r2,r7,6
 8002bc8:	11000e04 	addi	r4,r2,56
 8002bcc:	210b883a 	add	r5,r4,r4
 8002bd0:	003fbe06 	br	8002acc <__alt_data_end+0xf8002acc>
 8002bd4:	84ff5d26 	beq	r16,r19,800294c <__alt_data_end+0xf800294c>
 8002bd8:	9c000217 	ldw	r16,8(r19)
 8002bdc:	00bfff04 	movi	r2,-4
 8002be0:	80c00117 	ldw	r3,4(r16)
 8002be4:	1886703a 	and	r3,r3,r2
 8002be8:	003f9706 	br	8002a48 <__alt_data_end+0xf8002a48>
 8002bec:	52800017 	ldw	r10,0(r10)
 8002bf0:	18ffffc4 	addi	r3,r3,-1
 8002bf4:	50805c1e 	bne	r10,r2,8002d68 <_malloc_r+0x798>
 8002bf8:	190000cc 	andi	r4,r3,3
 8002bfc:	50bffe04 	addi	r2,r10,-8
 8002c00:	203ffa1e 	bne	r4,zero,8002bec <__alt_data_end+0xf8002bec>
 8002c04:	98800117 	ldw	r2,4(r19)
 8002c08:	0146303a 	nor	r3,zero,r5
 8002c0c:	1884703a 	and	r2,r3,r2
 8002c10:	98800115 	stw	r2,4(r19)
 8002c14:	294b883a 	add	r5,r5,r5
 8002c18:	117f2e36 	bltu	r2,r5,80028d4 <__alt_data_end+0xf80028d4>
 8002c1c:	283f2d26 	beq	r5,zero,80028d4 <__alt_data_end+0xf80028d4>
 8002c20:	1146703a 	and	r3,r2,r5
 8002c24:	1800521e 	bne	r3,zero,8002d70 <_malloc_r+0x7a0>
 8002c28:	6007883a 	mov	r3,r12
 8002c2c:	294b883a 	add	r5,r5,r5
 8002c30:	1148703a 	and	r4,r2,r5
 8002c34:	18c00104 	addi	r3,r3,4
 8002c38:	203ffc26 	beq	r4,zero,8002c2c <__alt_data_end+0xf8002c2c>
 8002c3c:	003ef006 	br	8002800 <__alt_data_end+0xf8002800>
 8002c40:	00805504 	movi	r2,340
 8002c44:	10c01336 	bltu	r2,r3,8002c94 <_malloc_r+0x6c4>
 8002c48:	8806d3fa 	srli	r3,r17,15
 8002c4c:	19c01dc4 	addi	r7,r3,119
 8002c50:	39cb883a 	add	r5,r7,r7
 8002c54:	003ea206 	br	80026e0 <__alt_data_end+0xf80026e0>
 8002c58:	00c40004 	movi	r3,4096
 8002c5c:	003f4d06 	br	8002994 <__alt_data_end+0xf8002994>
 8002c60:	00800044 	movi	r2,1
 8002c64:	a0800115 	stw	r2,4(r20)
 8002c68:	a021883a 	mov	r16,r20
 8002c6c:	0007883a 	mov	r3,zero
 8002c70:	003f7506 	br	8002a48 <__alt_data_end+0xf8002a48>
 8002c74:	200bd0ba 	srai	r5,r4,2
 8002c78:	01800044 	movi	r6,1
 8002c7c:	41000117 	ldw	r4,4(r8)
 8002c80:	314a983a 	sll	r5,r6,r5
 8002c84:	100d883a 	mov	r6,r2
 8002c88:	2908b03a 	or	r4,r5,r4
 8002c8c:	41000115 	stw	r4,4(r8)
 8002c90:	003f9d06 	br	8002b08 <__alt_data_end+0xf8002b08>
 8002c94:	00815504 	movi	r2,1364
 8002c98:	10c01336 	bltu	r2,r3,8002ce8 <_malloc_r+0x718>
 8002c9c:	8806d4ba 	srli	r3,r17,18
 8002ca0:	19c01f04 	addi	r7,r3,124
 8002ca4:	39cb883a 	add	r5,r7,r7
 8002ca8:	003e8d06 	br	80026e0 <__alt_data_end+0xf80026e0>
 8002cac:	ad400404 	addi	r21,r21,16
 8002cb0:	003f1d06 	br	8002928 <__alt_data_end+0xf8002928>
 8002cb4:	01001504 	movi	r4,84
 8002cb8:	20801c36 	bltu	r4,r2,8002d2c <_malloc_r+0x75c>
 8002cbc:	3804d33a 	srli	r2,r7,12
 8002cc0:	11001b84 	addi	r4,r2,110
 8002cc4:	210b883a 	add	r5,r4,r4
 8002cc8:	003f8006 	br	8002acc <__alt_data_end+0xf8002acc>
 8002ccc:	3083ffcc 	andi	r2,r6,4095
 8002cd0:	103f241e 	bne	r2,zero,8002964 <__alt_data_end+0xf8002964>
 8002cd4:	99000217 	ldw	r4,8(r19)
 8002cd8:	ad85883a 	add	r2,r21,r22
 8002cdc:	10800054 	ori	r2,r2,1
 8002ce0:	20800115 	stw	r2,4(r4)
 8002ce4:	003f4a06 	br	8002a10 <__alt_data_end+0xf8002a10>
 8002ce8:	01403f04 	movi	r5,252
 8002cec:	01c01f84 	movi	r7,126
 8002cf0:	003e7b06 	br	80026e0 <__alt_data_end+0xf80026e0>
 8002cf4:	00c00044 	movi	r3,1
 8002cf8:	002b883a 	mov	r21,zero
 8002cfc:	003f3006 	br	80029c0 <__alt_data_end+0xf80029c0>
 8002d00:	008200b4 	movhi	r2,2050
 8002d04:	10bab704 	addi	r2,r2,-5412
 8002d08:	15000015 	stw	r20,0(r2)
 8002d0c:	003f1b06 	br	800297c <__alt_data_end+0xf800297c>
 8002d10:	9009883a 	mov	r4,r18
 8002d14:	81400204 	addi	r5,r16,8
 8002d18:	8008dd00 	call	8008dd0 <_free_r>
 8002d1c:	008200b4 	movhi	r2,2050
 8002d20:	10bad904 	addi	r2,r2,-5276
 8002d24:	10c00017 	ldw	r3,0(r2)
 8002d28:	003f3906 	br	8002a10 <__alt_data_end+0xf8002a10>
 8002d2c:	01005504 	movi	r4,340
 8002d30:	20800436 	bltu	r4,r2,8002d44 <_malloc_r+0x774>
 8002d34:	3804d3fa 	srli	r2,r7,15
 8002d38:	11001dc4 	addi	r4,r2,119
 8002d3c:	210b883a 	add	r5,r4,r4
 8002d40:	003f6206 	br	8002acc <__alt_data_end+0xf8002acc>
 8002d44:	01015504 	movi	r4,1364
 8002d48:	20800436 	bltu	r4,r2,8002d5c <_malloc_r+0x78c>
 8002d4c:	3804d4ba 	srli	r2,r7,18
 8002d50:	11001f04 	addi	r4,r2,124
 8002d54:	210b883a 	add	r5,r4,r4
 8002d58:	003f5c06 	br	8002acc <__alt_data_end+0xf8002acc>
 8002d5c:	01403f04 	movi	r5,252
 8002d60:	01001f84 	movi	r4,126
 8002d64:	003f5906 	br	8002acc <__alt_data_end+0xf8002acc>
 8002d68:	98800117 	ldw	r2,4(r19)
 8002d6c:	003fa906 	br	8002c14 <__alt_data_end+0xf8002c14>
 8002d70:	6007883a 	mov	r3,r12
 8002d74:	003ea206 	br	8002800 <__alt_data_end+0xf8002800>

08002d78 <memcmp>:
 8002d78:	01c000c4 	movi	r7,3
 8002d7c:	3980192e 	bgeu	r7,r6,8002de4 <memcmp+0x6c>
 8002d80:	2144b03a 	or	r2,r4,r5
 8002d84:	11c4703a 	and	r2,r2,r7
 8002d88:	10000f26 	beq	r2,zero,8002dc8 <memcmp+0x50>
 8002d8c:	20800003 	ldbu	r2,0(r4)
 8002d90:	28c00003 	ldbu	r3,0(r5)
 8002d94:	10c0151e 	bne	r2,r3,8002dec <memcmp+0x74>
 8002d98:	31bfff84 	addi	r6,r6,-2
 8002d9c:	01ffffc4 	movi	r7,-1
 8002da0:	00000406 	br	8002db4 <memcmp+0x3c>
 8002da4:	20800003 	ldbu	r2,0(r4)
 8002da8:	28c00003 	ldbu	r3,0(r5)
 8002dac:	31bfffc4 	addi	r6,r6,-1
 8002db0:	10c00e1e 	bne	r2,r3,8002dec <memcmp+0x74>
 8002db4:	21000044 	addi	r4,r4,1
 8002db8:	29400044 	addi	r5,r5,1
 8002dbc:	31fff91e 	bne	r6,r7,8002da4 <__alt_data_end+0xf8002da4>
 8002dc0:	0005883a 	mov	r2,zero
 8002dc4:	f800283a 	ret
 8002dc8:	20c00017 	ldw	r3,0(r4)
 8002dcc:	28800017 	ldw	r2,0(r5)
 8002dd0:	1880041e 	bne	r3,r2,8002de4 <memcmp+0x6c>
 8002dd4:	31bfff04 	addi	r6,r6,-4
 8002dd8:	21000104 	addi	r4,r4,4
 8002ddc:	29400104 	addi	r5,r5,4
 8002de0:	39bff936 	bltu	r7,r6,8002dc8 <__alt_data_end+0xf8002dc8>
 8002de4:	303fe91e 	bne	r6,zero,8002d8c <__alt_data_end+0xf8002d8c>
 8002de8:	003ff506 	br	8002dc0 <__alt_data_end+0xf8002dc0>
 8002dec:	10c5c83a 	sub	r2,r2,r3
 8002df0:	f800283a 	ret

08002df4 <memcpy>:
 8002df4:	deffff04 	addi	sp,sp,-4
 8002df8:	dc000015 	stw	r16,0(sp)
 8002dfc:	00c003c4 	movi	r3,15
 8002e00:	2005883a 	mov	r2,r4
 8002e04:	1980432e 	bgeu	r3,r6,8002f14 <memcpy+0x120>
 8002e08:	2146b03a 	or	r3,r4,r5
 8002e0c:	18c000cc 	andi	r3,r3,3
 8002e10:	1800421e 	bne	r3,zero,8002f1c <memcpy+0x128>
 8002e14:	343ffc04 	addi	r16,r6,-16
 8002e18:	8020d13a 	srli	r16,r16,4
 8002e1c:	28c00104 	addi	r3,r5,4
 8002e20:	23400104 	addi	r13,r4,4
 8002e24:	801e913a 	slli	r15,r16,4
 8002e28:	2b000204 	addi	r12,r5,8
 8002e2c:	22c00204 	addi	r11,r4,8
 8002e30:	7bc00504 	addi	r15,r15,20
 8002e34:	2a800304 	addi	r10,r5,12
 8002e38:	22400304 	addi	r9,r4,12
 8002e3c:	2bdf883a 	add	r15,r5,r15
 8002e40:	2811883a 	mov	r8,r5
 8002e44:	200f883a 	mov	r7,r4
 8002e48:	41000017 	ldw	r4,0(r8)
 8002e4c:	39c00404 	addi	r7,r7,16
 8002e50:	18c00404 	addi	r3,r3,16
 8002e54:	393ffc15 	stw	r4,-16(r7)
 8002e58:	1bbffc17 	ldw	r14,-16(r3)
 8002e5c:	6b400404 	addi	r13,r13,16
 8002e60:	5ac00404 	addi	r11,r11,16
 8002e64:	6bbffc15 	stw	r14,-16(r13)
 8002e68:	63800017 	ldw	r14,0(r12)
 8002e6c:	4a400404 	addi	r9,r9,16
 8002e70:	42000404 	addi	r8,r8,16
 8002e74:	5bbffc15 	stw	r14,-16(r11)
 8002e78:	53800017 	ldw	r14,0(r10)
 8002e7c:	63000404 	addi	r12,r12,16
 8002e80:	52800404 	addi	r10,r10,16
 8002e84:	4bbffc15 	stw	r14,-16(r9)
 8002e88:	1bffef1e 	bne	r3,r15,8002e48 <__alt_data_end+0xf8002e48>
 8002e8c:	81c00044 	addi	r7,r16,1
 8002e90:	380e913a 	slli	r7,r7,4
 8002e94:	310003cc 	andi	r4,r6,15
 8002e98:	02c000c4 	movi	r11,3
 8002e9c:	11c7883a 	add	r3,r2,r7
 8002ea0:	29cb883a 	add	r5,r5,r7
 8002ea4:	59001f2e 	bgeu	r11,r4,8002f24 <memcpy+0x130>
 8002ea8:	1813883a 	mov	r9,r3
 8002eac:	2811883a 	mov	r8,r5
 8002eb0:	200f883a 	mov	r7,r4
 8002eb4:	42800017 	ldw	r10,0(r8)
 8002eb8:	4a400104 	addi	r9,r9,4
 8002ebc:	39ffff04 	addi	r7,r7,-4
 8002ec0:	4abfff15 	stw	r10,-4(r9)
 8002ec4:	42000104 	addi	r8,r8,4
 8002ec8:	59fffa36 	bltu	r11,r7,8002eb4 <__alt_data_end+0xf8002eb4>
 8002ecc:	213fff04 	addi	r4,r4,-4
 8002ed0:	2008d0ba 	srli	r4,r4,2
 8002ed4:	318000cc 	andi	r6,r6,3
 8002ed8:	21000044 	addi	r4,r4,1
 8002edc:	2109883a 	add	r4,r4,r4
 8002ee0:	2109883a 	add	r4,r4,r4
 8002ee4:	1907883a 	add	r3,r3,r4
 8002ee8:	290b883a 	add	r5,r5,r4
 8002eec:	30000626 	beq	r6,zero,8002f08 <memcpy+0x114>
 8002ef0:	198d883a 	add	r6,r3,r6
 8002ef4:	29c00003 	ldbu	r7,0(r5)
 8002ef8:	18c00044 	addi	r3,r3,1
 8002efc:	29400044 	addi	r5,r5,1
 8002f00:	19ffffc5 	stb	r7,-1(r3)
 8002f04:	19bffb1e 	bne	r3,r6,8002ef4 <__alt_data_end+0xf8002ef4>
 8002f08:	dc000017 	ldw	r16,0(sp)
 8002f0c:	dec00104 	addi	sp,sp,4
 8002f10:	f800283a 	ret
 8002f14:	2007883a 	mov	r3,r4
 8002f18:	003ff406 	br	8002eec <__alt_data_end+0xf8002eec>
 8002f1c:	2007883a 	mov	r3,r4
 8002f20:	003ff306 	br	8002ef0 <__alt_data_end+0xf8002ef0>
 8002f24:	200d883a 	mov	r6,r4
 8002f28:	003ff006 	br	8002eec <__alt_data_end+0xf8002eec>

08002f2c <_printf_r>:
 8002f2c:	defffd04 	addi	sp,sp,-12
 8002f30:	dfc00015 	stw	ra,0(sp)
 8002f34:	d9800115 	stw	r6,4(sp)
 8002f38:	d9c00215 	stw	r7,8(sp)
 8002f3c:	280d883a 	mov	r6,r5
 8002f40:	21400217 	ldw	r5,8(r4)
 8002f44:	d9c00104 	addi	r7,sp,4
 8002f48:	8004b8c0 	call	8004b8c <___vfprintf_internal_r>
 8002f4c:	dfc00017 	ldw	ra,0(sp)
 8002f50:	dec00304 	addi	sp,sp,12
 8002f54:	f800283a 	ret

08002f58 <printf>:
 8002f58:	defffc04 	addi	sp,sp,-16
 8002f5c:	dfc00015 	stw	ra,0(sp)
 8002f60:	d9400115 	stw	r5,4(sp)
 8002f64:	d9800215 	stw	r6,8(sp)
 8002f68:	d9c00315 	stw	r7,12(sp)
 8002f6c:	008200b4 	movhi	r2,2050
 8002f70:	10bab604 	addi	r2,r2,-5416
 8002f74:	10800017 	ldw	r2,0(r2)
 8002f78:	200b883a 	mov	r5,r4
 8002f7c:	d9800104 	addi	r6,sp,4
 8002f80:	11000217 	ldw	r4,8(r2)
 8002f84:	8006b880 	call	8006b88 <__vfprintf_internal>
 8002f88:	dfc00017 	ldw	ra,0(sp)
 8002f8c:	dec00404 	addi	sp,sp,16
 8002f90:	f800283a 	ret

08002f94 <_putchar_r>:
 8002f94:	21800217 	ldw	r6,8(r4)
 8002f98:	800af281 	jmpi	800af28 <_putc_r>

08002f9c <putchar>:
 8002f9c:	008200b4 	movhi	r2,2050
 8002fa0:	10bab604 	addi	r2,r2,-5416
 8002fa4:	200b883a 	mov	r5,r4
 8002fa8:	11000017 	ldw	r4,0(r2)
 8002fac:	21800217 	ldw	r6,8(r4)
 8002fb0:	800af281 	jmpi	800af28 <_putc_r>

08002fb4 <_puts_r>:
 8002fb4:	defff604 	addi	sp,sp,-40
 8002fb8:	dc000715 	stw	r16,28(sp)
 8002fbc:	2021883a 	mov	r16,r4
 8002fc0:	2809883a 	mov	r4,r5
 8002fc4:	dc400815 	stw	r17,32(sp)
 8002fc8:	dfc00915 	stw	ra,36(sp)
 8002fcc:	2823883a 	mov	r17,r5
 8002fd0:	800338c0 	call	800338c <strlen>
 8002fd4:	00c200b4 	movhi	r3,2050
 8002fd8:	18fab604 	addi	r3,r3,-5416
 8002fdc:	18c00017 	ldw	r3,0(r3)
 8002fe0:	11000044 	addi	r4,r2,1
 8002fe4:	d8800115 	stw	r2,4(sp)
 8002fe8:	18c00217 	ldw	r3,8(r3)
 8002fec:	014200b4 	movhi	r5,2050
 8002ff0:	29721f04 	addi	r5,r5,-14212
 8002ff4:	1880030b 	ldhu	r2,12(r3)
 8002ff8:	d9400215 	stw	r5,8(sp)
 8002ffc:	d9000615 	stw	r4,24(sp)
 8003000:	01400044 	movi	r5,1
 8003004:	01000084 	movi	r4,2
 8003008:	d9000515 	stw	r4,20(sp)
 800300c:	dc400015 	stw	r17,0(sp)
 8003010:	d9400315 	stw	r5,12(sp)
 8003014:	dec00415 	stw	sp,16(sp)
 8003018:	1108000c 	andi	r4,r2,8192
 800301c:	2000061e 	bne	r4,zero,8003038 <_puts_r+0x84>
 8003020:	19401917 	ldw	r5,100(r3)
 8003024:	0137ffc4 	movi	r4,-8193
 8003028:	10880014 	ori	r2,r2,8192
 800302c:	2908703a 	and	r4,r5,r4
 8003030:	1880030d 	sth	r2,12(r3)
 8003034:	19001915 	stw	r4,100(r3)
 8003038:	81400217 	ldw	r5,8(r16)
 800303c:	8009883a 	mov	r4,r16
 8003040:	d9800404 	addi	r6,sp,16
 8003044:	80090c00 	call	80090c0 <__sfvwrite_r>
 8003048:	1000061e 	bne	r2,zero,8003064 <_puts_r+0xb0>
 800304c:	00800284 	movi	r2,10
 8003050:	dfc00917 	ldw	ra,36(sp)
 8003054:	dc400817 	ldw	r17,32(sp)
 8003058:	dc000717 	ldw	r16,28(sp)
 800305c:	dec00a04 	addi	sp,sp,40
 8003060:	f800283a 	ret
 8003064:	00bfffc4 	movi	r2,-1
 8003068:	003ff906 	br	8003050 <__alt_data_end+0xf8003050>

0800306c <puts>:
 800306c:	008200b4 	movhi	r2,2050
 8003070:	10bab604 	addi	r2,r2,-5416
 8003074:	200b883a 	mov	r5,r4
 8003078:	11000017 	ldw	r4,0(r2)
 800307c:	8002fb41 	jmpi	8002fb4 <_puts_r>

08003080 <__srget_r>:
 8003080:	defffd04 	addi	sp,sp,-12
 8003084:	dc400115 	stw	r17,4(sp)
 8003088:	dc000015 	stw	r16,0(sp)
 800308c:	dfc00215 	stw	ra,8(sp)
 8003090:	2023883a 	mov	r17,r4
 8003094:	2821883a 	mov	r16,r5
 8003098:	20000226 	beq	r4,zero,80030a4 <__srget_r+0x24>
 800309c:	20800e17 	ldw	r2,56(r4)
 80030a0:	10001026 	beq	r2,zero,80030e4 <__srget_r+0x64>
 80030a4:	8809883a 	mov	r4,r17
 80030a8:	800b883a 	mov	r5,r16
 80030ac:	800b6a80 	call	800b6a8 <__srefill_r>
 80030b0:	10000e1e 	bne	r2,zero,80030ec <__srget_r+0x6c>
 80030b4:	80c00017 	ldw	r3,0(r16)
 80030b8:	80800117 	ldw	r2,4(r16)
 80030bc:	19000044 	addi	r4,r3,1
 80030c0:	10bfffc4 	addi	r2,r2,-1
 80030c4:	80800115 	stw	r2,4(r16)
 80030c8:	81000015 	stw	r4,0(r16)
 80030cc:	18800003 	ldbu	r2,0(r3)
 80030d0:	dfc00217 	ldw	ra,8(sp)
 80030d4:	dc400117 	ldw	r17,4(sp)
 80030d8:	dc000017 	ldw	r16,0(sp)
 80030dc:	dec00304 	addi	sp,sp,12
 80030e0:	f800283a 	ret
 80030e4:	8008c5c0 	call	8008c5c <__sinit>
 80030e8:	003fee06 	br	80030a4 <__alt_data_end+0xf80030a4>
 80030ec:	00bfffc4 	movi	r2,-1
 80030f0:	003ff706 	br	80030d0 <__alt_data_end+0xf80030d0>

080030f4 <__srget>:
 80030f4:	008200b4 	movhi	r2,2050
 80030f8:	10bab604 	addi	r2,r2,-5416
 80030fc:	200b883a 	mov	r5,r4
 8003100:	11000017 	ldw	r4,0(r2)
 8003104:	80030801 	jmpi	8003080 <__srget_r>

08003108 <_sbrk_r>:
 8003108:	defffd04 	addi	sp,sp,-12
 800310c:	dc000015 	stw	r16,0(sp)
 8003110:	040200b4 	movhi	r16,2050
 8003114:	dc400115 	stw	r17,4(sp)
 8003118:	843ace04 	addi	r16,r16,-5320
 800311c:	2023883a 	mov	r17,r4
 8003120:	2809883a 	mov	r4,r5
 8003124:	dfc00215 	stw	ra,8(sp)
 8003128:	80000015 	stw	zero,0(r16)
 800312c:	8018b100 	call	8018b10 <sbrk>
 8003130:	00ffffc4 	movi	r3,-1
 8003134:	10c00526 	beq	r2,r3,800314c <_sbrk_r+0x44>
 8003138:	dfc00217 	ldw	ra,8(sp)
 800313c:	dc400117 	ldw	r17,4(sp)
 8003140:	dc000017 	ldw	r16,0(sp)
 8003144:	dec00304 	addi	sp,sp,12
 8003148:	f800283a 	ret
 800314c:	80c00017 	ldw	r3,0(r16)
 8003150:	183ff926 	beq	r3,zero,8003138 <__alt_data_end+0xf8003138>
 8003154:	88c00015 	stw	r3,0(r17)
 8003158:	003ff706 	br	8003138 <__alt_data_end+0xf8003138>

0800315c <sscanf>:
 800315c:	deffe204 	addi	sp,sp,-120
 8003160:	dfc01b15 	stw	ra,108(sp)
 8003164:	dc001a15 	stw	r16,104(sp)
 8003168:	d9801c15 	stw	r6,112(sp)
 800316c:	d9c01d15 	stw	r7,116(sp)
 8003170:	00c08104 	movi	r3,516
 8003174:	2821883a 	mov	r16,r5
 8003178:	d8c0030d 	sth	r3,12(sp)
 800317c:	d9000015 	stw	r4,0(sp)
 8003180:	d9000415 	stw	r4,16(sp)
 8003184:	800338c0 	call	800338c <strlen>
 8003188:	00c200b4 	movhi	r3,2050
 800318c:	18fab604 	addi	r3,r3,-5416
 8003190:	d8800115 	stw	r2,4(sp)
 8003194:	d8800515 	stw	r2,20(sp)
 8003198:	19000017 	ldw	r4,0(r3)
 800319c:	00820034 	movhi	r2,2048
 80031a0:	108ca904 	addi	r2,r2,12964
 80031a4:	d8800815 	stw	r2,32(sp)
 80031a8:	d80b883a 	mov	r5,sp
 80031ac:	800d883a 	mov	r6,r16
 80031b0:	d9c01c04 	addi	r7,sp,112
 80031b4:	00bfffc4 	movi	r2,-1
 80031b8:	d8000c15 	stw	zero,48(sp)
 80031bc:	d8001115 	stw	zero,68(sp)
 80031c0:	d880038d 	sth	r2,14(sp)
 80031c4:	80034240 	call	8003424 <__ssvfscanf_r>
 80031c8:	dfc01b17 	ldw	ra,108(sp)
 80031cc:	dc001a17 	ldw	r16,104(sp)
 80031d0:	dec01e04 	addi	sp,sp,120
 80031d4:	f800283a 	ret

080031d8 <_sscanf_r>:
 80031d8:	deffe204 	addi	sp,sp,-120
 80031dc:	dc001b15 	stw	r16,108(sp)
 80031e0:	2021883a 	mov	r16,r4
 80031e4:	dfc01c15 	stw	ra,112(sp)
 80031e8:	d9c01d15 	stw	r7,116(sp)
 80031ec:	00808104 	movi	r2,516
 80031f0:	2809883a 	mov	r4,r5
 80031f4:	d9400015 	stw	r5,0(sp)
 80031f8:	d9400415 	stw	r5,16(sp)
 80031fc:	d9801a15 	stw	r6,104(sp)
 8003200:	d880030d 	sth	r2,12(sp)
 8003204:	800338c0 	call	800338c <strlen>
 8003208:	d8800115 	stw	r2,4(sp)
 800320c:	d8800515 	stw	r2,20(sp)
 8003210:	d9801a17 	ldw	r6,104(sp)
 8003214:	00820034 	movhi	r2,2048
 8003218:	108ca904 	addi	r2,r2,12964
 800321c:	d8800815 	stw	r2,32(sp)
 8003220:	8009883a 	mov	r4,r16
 8003224:	d80b883a 	mov	r5,sp
 8003228:	d9c01d04 	addi	r7,sp,116
 800322c:	00bfffc4 	movi	r2,-1
 8003230:	d8000c15 	stw	zero,48(sp)
 8003234:	d8001115 	stw	zero,68(sp)
 8003238:	d880038d 	sth	r2,14(sp)
 800323c:	80034240 	call	8003424 <__ssvfscanf_r>
 8003240:	dfc01c17 	ldw	ra,112(sp)
 8003244:	dc001b17 	ldw	r16,108(sp)
 8003248:	dec01e04 	addi	sp,sp,120
 800324c:	f800283a 	ret

08003250 <__sread>:
 8003250:	defffe04 	addi	sp,sp,-8
 8003254:	dc000015 	stw	r16,0(sp)
 8003258:	2821883a 	mov	r16,r5
 800325c:	2940038f 	ldh	r5,14(r5)
 8003260:	dfc00115 	stw	ra,4(sp)
 8003264:	800b0900 	call	800b090 <_read_r>
 8003268:	10000716 	blt	r2,zero,8003288 <__sread+0x38>
 800326c:	80c01417 	ldw	r3,80(r16)
 8003270:	1887883a 	add	r3,r3,r2
 8003274:	80c01415 	stw	r3,80(r16)
 8003278:	dfc00117 	ldw	ra,4(sp)
 800327c:	dc000017 	ldw	r16,0(sp)
 8003280:	dec00204 	addi	sp,sp,8
 8003284:	f800283a 	ret
 8003288:	80c0030b 	ldhu	r3,12(r16)
 800328c:	18fbffcc 	andi	r3,r3,61439
 8003290:	80c0030d 	sth	r3,12(r16)
 8003294:	dfc00117 	ldw	ra,4(sp)
 8003298:	dc000017 	ldw	r16,0(sp)
 800329c:	dec00204 	addi	sp,sp,8
 80032a0:	f800283a 	ret

080032a4 <__seofread>:
 80032a4:	0005883a 	mov	r2,zero
 80032a8:	f800283a 	ret

080032ac <__swrite>:
 80032ac:	2880030b 	ldhu	r2,12(r5)
 80032b0:	defffb04 	addi	sp,sp,-20
 80032b4:	dcc00315 	stw	r19,12(sp)
 80032b8:	dc800215 	stw	r18,8(sp)
 80032bc:	dc400115 	stw	r17,4(sp)
 80032c0:	dc000015 	stw	r16,0(sp)
 80032c4:	dfc00415 	stw	ra,16(sp)
 80032c8:	10c0400c 	andi	r3,r2,256
 80032cc:	2821883a 	mov	r16,r5
 80032d0:	2027883a 	mov	r19,r4
 80032d4:	3025883a 	mov	r18,r6
 80032d8:	3823883a 	mov	r17,r7
 80032dc:	18000526 	beq	r3,zero,80032f4 <__swrite+0x48>
 80032e0:	2940038f 	ldh	r5,14(r5)
 80032e4:	000d883a 	mov	r6,zero
 80032e8:	01c00084 	movi	r7,2
 80032ec:	80097e40 	call	80097e4 <_lseek_r>
 80032f0:	8080030b 	ldhu	r2,12(r16)
 80032f4:	8140038f 	ldh	r5,14(r16)
 80032f8:	10bbffcc 	andi	r2,r2,61439
 80032fc:	9809883a 	mov	r4,r19
 8003300:	900d883a 	mov	r6,r18
 8003304:	880f883a 	mov	r7,r17
 8003308:	8080030d 	sth	r2,12(r16)
 800330c:	dfc00417 	ldw	ra,16(sp)
 8003310:	dcc00317 	ldw	r19,12(sp)
 8003314:	dc800217 	ldw	r18,8(sp)
 8003318:	dc400117 	ldw	r17,4(sp)
 800331c:	dc000017 	ldw	r16,0(sp)
 8003320:	dec00504 	addi	sp,sp,20
 8003324:	8006bac1 	jmpi	8006bac <_write_r>

08003328 <__sseek>:
 8003328:	defffe04 	addi	sp,sp,-8
 800332c:	dc000015 	stw	r16,0(sp)
 8003330:	2821883a 	mov	r16,r5
 8003334:	2940038f 	ldh	r5,14(r5)
 8003338:	dfc00115 	stw	ra,4(sp)
 800333c:	80097e40 	call	80097e4 <_lseek_r>
 8003340:	00ffffc4 	movi	r3,-1
 8003344:	10c00826 	beq	r2,r3,8003368 <__sseek+0x40>
 8003348:	80c0030b 	ldhu	r3,12(r16)
 800334c:	80801415 	stw	r2,80(r16)
 8003350:	18c40014 	ori	r3,r3,4096
 8003354:	80c0030d 	sth	r3,12(r16)
 8003358:	dfc00117 	ldw	ra,4(sp)
 800335c:	dc000017 	ldw	r16,0(sp)
 8003360:	dec00204 	addi	sp,sp,8
 8003364:	f800283a 	ret
 8003368:	80c0030b 	ldhu	r3,12(r16)
 800336c:	18fbffcc 	andi	r3,r3,61439
 8003370:	80c0030d 	sth	r3,12(r16)
 8003374:	dfc00117 	ldw	ra,4(sp)
 8003378:	dc000017 	ldw	r16,0(sp)
 800337c:	dec00204 	addi	sp,sp,8
 8003380:	f800283a 	ret

08003384 <__sclose>:
 8003384:	2940038f 	ldh	r5,14(r5)
 8003388:	8006d381 	jmpi	8006d38 <_close_r>

0800338c <strlen>:
 800338c:	208000cc 	andi	r2,r4,3
 8003390:	10002026 	beq	r2,zero,8003414 <strlen+0x88>
 8003394:	20800007 	ldb	r2,0(r4)
 8003398:	10002026 	beq	r2,zero,800341c <strlen+0x90>
 800339c:	2005883a 	mov	r2,r4
 80033a0:	00000206 	br	80033ac <strlen+0x20>
 80033a4:	10c00007 	ldb	r3,0(r2)
 80033a8:	18001826 	beq	r3,zero,800340c <strlen+0x80>
 80033ac:	10800044 	addi	r2,r2,1
 80033b0:	10c000cc 	andi	r3,r2,3
 80033b4:	183ffb1e 	bne	r3,zero,80033a4 <__alt_data_end+0xf80033a4>
 80033b8:	10c00017 	ldw	r3,0(r2)
 80033bc:	01ffbff4 	movhi	r7,65279
 80033c0:	39ffbfc4 	addi	r7,r7,-257
 80033c4:	00ca303a 	nor	r5,zero,r3
 80033c8:	01a02074 	movhi	r6,32897
 80033cc:	19c7883a 	add	r3,r3,r7
 80033d0:	31a02004 	addi	r6,r6,-32640
 80033d4:	1946703a 	and	r3,r3,r5
 80033d8:	1986703a 	and	r3,r3,r6
 80033dc:	1800091e 	bne	r3,zero,8003404 <strlen+0x78>
 80033e0:	10800104 	addi	r2,r2,4
 80033e4:	10c00017 	ldw	r3,0(r2)
 80033e8:	19cb883a 	add	r5,r3,r7
 80033ec:	00c6303a 	nor	r3,zero,r3
 80033f0:	28c6703a 	and	r3,r5,r3
 80033f4:	1986703a 	and	r3,r3,r6
 80033f8:	183ff926 	beq	r3,zero,80033e0 <__alt_data_end+0xf80033e0>
 80033fc:	00000106 	br	8003404 <strlen+0x78>
 8003400:	10800044 	addi	r2,r2,1
 8003404:	10c00007 	ldb	r3,0(r2)
 8003408:	183ffd1e 	bne	r3,zero,8003400 <__alt_data_end+0xf8003400>
 800340c:	1105c83a 	sub	r2,r2,r4
 8003410:	f800283a 	ret
 8003414:	2005883a 	mov	r2,r4
 8003418:	003fe706 	br	80033b8 <__alt_data_end+0xf80033b8>
 800341c:	0005883a 	mov	r2,zero
 8003420:	f800283a 	ret

08003424 <__ssvfscanf_r>:
 8003424:	deff4b04 	addi	sp,sp,-724
 8003428:	df00b315 	stw	fp,716(sp)
 800342c:	dd80b115 	stw	r22,708(sp)
 8003430:	dc40ac15 	stw	r17,688(sp)
 8003434:	2839883a 	mov	fp,r5
 8003438:	dfc0b415 	stw	ra,720(sp)
 800343c:	ddc0b215 	stw	r23,712(sp)
 8003440:	dd40b015 	stw	r21,704(sp)
 8003444:	dd00af15 	stw	r20,700(sp)
 8003448:	dcc0ae15 	stw	r19,696(sp)
 800344c:	dc80ad15 	stw	r18,692(sp)
 8003450:	dc00ab15 	stw	r16,684(sp)
 8003454:	202d883a 	mov	r22,r4
 8003458:	3023883a 	mov	r17,r6
 800345c:	d9c09c15 	stw	r7,624(sp)
 8003460:	8008c6c0 	call	8008c6c <__sfp_lock_acquire>
 8003464:	e080030b 	ldhu	r2,12(fp)
 8003468:	10c8000c 	andi	r3,r2,8192
 800346c:	1800061e 	bne	r3,zero,8003488 <__ssvfscanf_r+0x64>
 8003470:	e1001917 	ldw	r4,100(fp)
 8003474:	00f7ffc4 	movi	r3,-8193
 8003478:	10880014 	ori	r2,r2,8192
 800347c:	20c6703a 	and	r3,r4,r3
 8003480:	e080030d 	sth	r2,12(fp)
 8003484:	e0c01915 	stw	r3,100(fp)
 8003488:	88800007 	ldb	r2,0(r17)
 800348c:	0029883a 	mov	r20,zero
 8003490:	054200b4 	movhi	r21,2050
 8003494:	d800a015 	stw	zero,640(sp)
 8003498:	d8009e15 	stw	zero,632(sp)
 800349c:	d8009f15 	stw	zero,636(sp)
 80034a0:	d8809b15 	stw	r2,620(sp)
 80034a4:	ad7ab904 	addi	r21,r21,-5404
 80034a8:	a027883a 	mov	r19,r20
 80034ac:	e02f883a 	mov	r23,fp
 80034b0:	8c800044 	addi	r18,r17,1
 80034b4:	10001e26 	beq	r2,zero,8003530 <__ssvfscanf_r+0x10c>
 80034b8:	a9000017 	ldw	r4,0(r21)
 80034bc:	2087883a 	add	r3,r4,r2
 80034c0:	18c00043 	ldbu	r3,1(r3)
 80034c4:	18c0020c 	andi	r3,r3,8
 80034c8:	18001c26 	beq	r3,zero,800353c <__ssvfscanf_r+0x118>
 80034cc:	b8800117 	ldw	r2,4(r23)
 80034d0:	00800e0e 	bge	zero,r2,800350c <__ssvfscanf_r+0xe8>
 80034d4:	b8c00017 	ldw	r3,0(r23)
 80034d8:	a9000017 	ldw	r4,0(r21)
 80034dc:	18800003 	ldbu	r2,0(r3)
 80034e0:	2085883a 	add	r2,r4,r2
 80034e4:	10800043 	ldbu	r2,1(r2)
 80034e8:	1080020c 	andi	r2,r2,8
 80034ec:	10000b26 	beq	r2,zero,800351c <__ssvfscanf_r+0xf8>
 80034f0:	b8800117 	ldw	r2,4(r23)
 80034f4:	18c00044 	addi	r3,r3,1
 80034f8:	b8c00015 	stw	r3,0(r23)
 80034fc:	10bfffc4 	addi	r2,r2,-1
 8003500:	b8800115 	stw	r2,4(r23)
 8003504:	9cc00044 	addi	r19,r19,1
 8003508:	00bff216 	blt	zero,r2,80034d4 <__alt_data_end+0xf80034d4>
 800350c:	b009883a 	mov	r4,r22
 8003510:	b80b883a 	mov	r5,r23
 8003514:	800dde40 	call	800dde4 <__ssrefill_r>
 8003518:	103fee26 	beq	r2,zero,80034d4 <__alt_data_end+0xf80034d4>
 800351c:	9023883a 	mov	r17,r18
 8003520:	88800007 	ldb	r2,0(r17)
 8003524:	8c800044 	addi	r18,r17,1
 8003528:	d8809b15 	stw	r2,620(sp)
 800352c:	103fe21e 	bne	r2,zero,80034b8 <__alt_data_end+0xf80034b8>
 8003530:	8008c700 	call	8008c70 <__sfp_lock_release>
 8003534:	d8809f17 	ldw	r2,636(sp)
 8003538:	00021906 	br	8003da0 <__ssvfscanf_r+0x97c>
 800353c:	00c00944 	movi	r3,37
 8003540:	10c0881e 	bne	r2,r3,8003764 <__ssvfscanf_r+0x340>
 8003544:	88c00043 	ldbu	r3,1(r17)
 8003548:	0021883a 	mov	r16,zero
 800354c:	0023883a 	mov	r17,zero
 8003550:	01801e04 	movi	r6,120
 8003554:	01c01b04 	movi	r7,108
 8003558:	18803fcc 	andi	r2,r3,255
 800355c:	91400044 	addi	r5,r18,1
 8003560:	3081ef36 	bltu	r6,r2,8003d20 <__ssvfscanf_r+0x8fc>
 8003564:	100490ba 	slli	r2,r2,2
 8003568:	02020034 	movhi	r8,2048
 800356c:	420d5f04 	addi	r8,r8,13692
 8003570:	1205883a 	add	r2,r2,r8
 8003574:	10800017 	ldw	r2,0(r2)
 8003578:	1000683a 	jmp	r2
 800357c:	08003d98 	cmpnei	zero,at,246
 8003580:	08003d20 	cmpeqi	zero,at,244
 8003584:	08003d20 	cmpeqi	zero,at,244
 8003588:	08003d20 	cmpeqi	zero,at,244
 800358c:	08003d20 	cmpeqi	zero,at,244
 8003590:	08003d20 	cmpeqi	zero,at,244
 8003594:	08003d20 	cmpeqi	zero,at,244
 8003598:	08003d20 	cmpeqi	zero,at,244
 800359c:	08003d20 	cmpeqi	zero,at,244
 80035a0:	08003d20 	cmpeqi	zero,at,244
 80035a4:	08003d20 	cmpeqi	zero,at,244
 80035a8:	08003d20 	cmpeqi	zero,at,244
 80035ac:	08003d20 	cmpeqi	zero,at,244
 80035b0:	08003d20 	cmpeqi	zero,at,244
 80035b4:	08003d20 	cmpeqi	zero,at,244
 80035b8:	08003d20 	cmpeqi	zero,at,244
 80035bc:	08003d20 	cmpeqi	zero,at,244
 80035c0:	08003d20 	cmpeqi	zero,at,244
 80035c4:	08003d20 	cmpeqi	zero,at,244
 80035c8:	08003d20 	cmpeqi	zero,at,244
 80035cc:	08003d20 	cmpeqi	zero,at,244
 80035d0:	08003d20 	cmpeqi	zero,at,244
 80035d4:	08003d20 	cmpeqi	zero,at,244
 80035d8:	08003d20 	cmpeqi	zero,at,244
 80035dc:	08003d20 	cmpeqi	zero,at,244
 80035e0:	08003d20 	cmpeqi	zero,at,244
 80035e4:	08003d20 	cmpeqi	zero,at,244
 80035e8:	08003d20 	cmpeqi	zero,at,244
 80035ec:	08003d20 	cmpeqi	zero,at,244
 80035f0:	08003d20 	cmpeqi	zero,at,244
 80035f4:	08003d20 	cmpeqi	zero,at,244
 80035f8:	08003d20 	cmpeqi	zero,at,244
 80035fc:	08003d20 	cmpeqi	zero,at,244
 8003600:	08003d20 	cmpeqi	zero,at,244
 8003604:	08003d20 	cmpeqi	zero,at,244
 8003608:	08003d20 	cmpeqi	zero,at,244
 800360c:	08003d20 	cmpeqi	zero,at,244
 8003610:	08003760 	cmpeqi	zero,at,221
 8003614:	08003d20 	cmpeqi	zero,at,244
 8003618:	08003d20 	cmpeqi	zero,at,244
 800361c:	08003d20 	cmpeqi	zero,at,244
 8003620:	08003d20 	cmpeqi	zero,at,244
 8003624:	08003d08 	cmpgei	zero,at,244
 8003628:	08003d20 	cmpeqi	zero,at,244
 800362c:	08003d20 	cmpeqi	zero,at,244
 8003630:	08003d20 	cmpeqi	zero,at,244
 8003634:	08003d20 	cmpeqi	zero,at,244
 8003638:	08003d20 	cmpeqi	zero,at,244
 800363c:	08003e18 	cmpnei	zero,at,248
 8003640:	08003e18 	cmpnei	zero,at,248
 8003644:	08003e18 	cmpnei	zero,at,248
 8003648:	08003e18 	cmpnei	zero,at,248
 800364c:	08003e18 	cmpnei	zero,at,248
 8003650:	08003e18 	cmpnei	zero,at,248
 8003654:	08003e18 	cmpnei	zero,at,248
 8003658:	08003e18 	cmpnei	zero,at,248
 800365c:	08003e18 	cmpnei	zero,at,248
 8003660:	08003e18 	cmpnei	zero,at,248
 8003664:	08003d20 	cmpeqi	zero,at,244
 8003668:	08003d20 	cmpeqi	zero,at,244
 800366c:	08003d20 	cmpeqi	zero,at,244
 8003670:	08003d20 	cmpeqi	zero,at,244
 8003674:	08003d20 	cmpeqi	zero,at,244
 8003678:	08003d20 	cmpeqi	zero,at,244
 800367c:	08003d20 	cmpeqi	zero,at,244
 8003680:	08003d20 	cmpeqi	zero,at,244
 8003684:	08003d20 	cmpeqi	zero,at,244
 8003688:	08003d20 	cmpeqi	zero,at,244
 800368c:	08003df0 	cmpltui	zero,at,247
 8003690:	08003de0 	cmpeqi	zero,at,247
 8003694:	08003d20 	cmpeqi	zero,at,244
 8003698:	08003de0 	cmpeqi	zero,at,247
 800369c:	08003d20 	cmpeqi	zero,at,244
 80036a0:	08003d20 	cmpeqi	zero,at,244
 80036a4:	08003d20 	cmpeqi	zero,at,244
 80036a8:	08003d20 	cmpeqi	zero,at,244
 80036ac:	08003dd0 	cmplti	zero,at,247
 80036b0:	08003d20 	cmpeqi	zero,at,244
 80036b4:	08003d20 	cmpeqi	zero,at,244
 80036b8:	08003f5c 	xori	zero,at,253
 80036bc:	08003d20 	cmpeqi	zero,at,244
 80036c0:	08003d20 	cmpeqi	zero,at,244
 80036c4:	08003d20 	cmpeqi	zero,at,244
 80036c8:	08003d20 	cmpeqi	zero,at,244
 80036cc:	08003d20 	cmpeqi	zero,at,244
 80036d0:	08003d20 	cmpeqi	zero,at,244
 80036d4:	08003d20 	cmpeqi	zero,at,244
 80036d8:	08003d20 	cmpeqi	zero,at,244
 80036dc:	08003f50 	cmplti	zero,at,253
 80036e0:	08003d20 	cmpeqi	zero,at,244
 80036e4:	08003d20 	cmpeqi	zero,at,244
 80036e8:	08003f34 	orhi	zero,at,252
 80036ec:	08003d20 	cmpeqi	zero,at,244
 80036f0:	08003d20 	cmpeqi	zero,at,244
 80036f4:	08003d20 	cmpeqi	zero,at,244
 80036f8:	08003d20 	cmpeqi	zero,at,244
 80036fc:	08003d20 	cmpeqi	zero,at,244
 8003700:	08003d20 	cmpeqi	zero,at,244
 8003704:	08003d20 	cmpeqi	zero,at,244
 8003708:	08003f20 	cmpeqi	zero,at,252
 800370c:	08003f18 	cmpnei	zero,at,252
 8003710:	08003de0 	cmpeqi	zero,at,247
 8003714:	08003de0 	cmpeqi	zero,at,247
 8003718:	08003de0 	cmpeqi	zero,at,247
 800371c:	08003f08 	cmpgei	zero,at,252
 8003720:	0800379c 	xori	zero,at,222
 8003724:	08003d20 	cmpeqi	zero,at,244
 8003728:	08003d20 	cmpeqi	zero,at,244
 800372c:	08003ee8 	cmpgeui	zero,at,251
 8003730:	08003d20 	cmpeqi	zero,at,244
 8003734:	08003ebc 	xorhi	zero,at,250
 8003738:	08003e98 	cmpnei	zero,at,250
 800373c:	08003e70 	cmpltui	zero,at,249
 8003740:	08003d20 	cmpeqi	zero,at,244
 8003744:	08003d20 	cmpeqi	zero,at,244
 8003748:	08003e60 	cmpeqi	zero,at,249
 800374c:	08003d20 	cmpeqi	zero,at,244
 8003750:	08003e3c 	xorhi	zero,at,248
 8003754:	08003d20 	cmpeqi	zero,at,244
 8003758:	08003d20 	cmpeqi	zero,at,244
 800375c:	08003f50 	cmplti	zero,at,253
 8003760:	2825883a 	mov	r18,r5
 8003764:	b8800117 	ldw	r2,4(r23)
 8003768:	00844f0e 	bge	zero,r2,80048a8 <__ssvfscanf_r+0x1484>
 800376c:	b8800017 	ldw	r2,0(r23)
 8003770:	90ffffc3 	ldbu	r3,-1(r18)
 8003774:	11000003 	ldbu	r4,0(r2)
 8003778:	20ff6d1e 	bne	r4,r3,8003530 <__alt_data_end+0xf8003530>
 800377c:	b8c00117 	ldw	r3,4(r23)
 8003780:	10800044 	addi	r2,r2,1
 8003784:	b8800015 	stw	r2,0(r23)
 8003788:	18bfffc4 	addi	r2,r3,-1
 800378c:	b8800115 	stw	r2,4(r23)
 8003790:	9cc00044 	addi	r19,r19,1
 8003794:	9023883a 	mov	r17,r18
 8003798:	003f6106 	br	8003520 <__alt_data_end+0xf8003520>
 800379c:	02c20074 	movhi	r11,2049
 80037a0:	5af45504 	addi	r11,r11,-11948
 80037a4:	8839883a 	mov	fp,r17
 80037a8:	2825883a 	mov	r18,r5
 80037ac:	dac0a015 	stw	r11,640(sp)
 80037b0:	d8009e15 	stw	zero,632(sp)
 80037b4:	050000c4 	movi	r20,3
 80037b8:	b8800117 	ldw	r2,4(r23)
 80037bc:	00816a0e 	bge	zero,r2,8003d68 <__ssvfscanf_r+0x944>
 80037c0:	8080100c 	andi	r2,r16,64
 80037c4:	10007a26 	beq	r2,zero,80039b0 <__ssvfscanf_r+0x58c>
 80037c8:	00800084 	movi	r2,2
 80037cc:	a0820a26 	beq	r20,r2,8003ff8 <__ssvfscanf_r+0xbd4>
 80037d0:	1501e70e 	bge	r2,r20,8003f70 <__ssvfscanf_r+0xb4c>
 80037d4:	008000c4 	movi	r2,3
 80037d8:	a0823f26 	beq	r20,r2,80040d8 <__ssvfscanf_r+0xcb4>
 80037dc:	00800104 	movi	r2,4
 80037e0:	a082221e 	bne	r20,r2,800406c <__ssvfscanf_r+0xc48>
 80037e4:	88bfffc4 	addi	r2,r17,-1
 80037e8:	01005704 	movi	r4,348
 80037ec:	20830e2e 	bgeu	r4,r2,8004428 <__ssvfscanf_r+0x1004>
 80037f0:	8c7fa8c4 	addi	r17,r17,-349
 80037f4:	dc40a315 	stw	r17,652(sp)
 80037f8:	07005744 	movi	fp,349
 80037fc:	8401e014 	ori	r16,r16,1920
 8003800:	0023883a 	mov	r17,zero
 8003804:	d9c00104 	addi	r7,sp,4
 8003808:	9011883a 	mov	r8,r18
 800380c:	d800a415 	stw	zero,656(sp)
 8003810:	8825883a 	mov	r18,r17
 8003814:	d800a215 	stw	zero,648(sp)
 8003818:	8023883a 	mov	r17,r16
 800381c:	d8009d15 	stw	zero,628(sp)
 8003820:	e021883a 	mov	r16,fp
 8003824:	d800a115 	stw	zero,644(sp)
 8003828:	0029883a 	mov	r20,zero
 800382c:	02c01384 	movi	r11,78
 8003830:	00fe1fc4 	movi	r3,-1921
 8003834:	3839883a 	mov	fp,r7
 8003838:	b9800017 	ldw	r6,0(r23)
 800383c:	31000003 	ldbu	r4,0(r6)
 8003840:	20bff544 	addi	r2,r4,-43
 8003844:	10803fcc 	andi	r2,r2,255
 8003848:	58807b36 	bltu	r11,r2,8003a38 <__ssvfscanf_r+0x614>
 800384c:	100490ba 	slli	r2,r2,2
 8003850:	01420034 	movhi	r5,2048
 8003854:	294e1904 	addi	r5,r5,14436
 8003858:	1145883a 	add	r2,r2,r5
 800385c:	10800017 	ldw	r2,0(r2)
 8003860:	1000683a 	jmp	r2
 8003864:	08003bc8 	cmpgei	zero,at,239
 8003868:	08003a38 	rdprs	zero,at,232
 800386c:	08003bc8 	cmpgei	zero,at,239
 8003870:	08003bac 	andhi	zero,at,238
 8003874:	08003a38 	rdprs	zero,at,232
 8003878:	08003cd4 	ori	zero,at,243
 800387c:	080039f0 	cmpltui	zero,at,231
 8003880:	080039f0 	cmpltui	zero,at,231
 8003884:	080039f0 	cmpltui	zero,at,231
 8003888:	080039f0 	cmpltui	zero,at,231
 800388c:	080039f0 	cmpltui	zero,at,231
 8003890:	080039f0 	cmpltui	zero,at,231
 8003894:	080039f0 	cmpltui	zero,at,231
 8003898:	080039f0 	cmpltui	zero,at,231
 800389c:	080039f0 	cmpltui	zero,at,231
 80038a0:	08003a38 	rdprs	zero,at,232
 80038a4:	08003a38 	rdprs	zero,at,232
 80038a8:	08003a38 	rdprs	zero,at,232
 80038ac:	08003a38 	rdprs	zero,at,232
 80038b0:	08003a38 	rdprs	zero,at,232
 80038b4:	08003a38 	rdprs	zero,at,232
 80038b8:	08003a38 	rdprs	zero,at,232
 80038bc:	08003cc4 	addi	zero,at,243
 80038c0:	08003a38 	rdprs	zero,at,232
 80038c4:	08003a38 	rdprs	zero,at,232
 80038c8:	08003a38 	rdprs	zero,at,232
 80038cc:	08003c7c 	xorhi	zero,at,241
 80038d0:	08003c60 	cmpeqi	zero,at,241
 80038d4:	08003a38 	rdprs	zero,at,232
 80038d8:	08003a38 	rdprs	zero,at,232
 80038dc:	08003c28 	cmpgeui	zero,at,240
 80038e0:	08003a38 	rdprs	zero,at,232
 80038e4:	08003a38 	rdprs	zero,at,232
 80038e8:	08003a38 	rdprs	zero,at,232
 80038ec:	08003a38 	rdprs	zero,at,232
 80038f0:	08003bf8 	rdprs	zero,at,239
 80038f4:	08003a38 	rdprs	zero,at,232
 80038f8:	08003a38 	rdprs	zero,at,232
 80038fc:	08003a38 	rdprs	zero,at,232
 8003900:	08003a38 	rdprs	zero,at,232
 8003904:	08003a38 	rdprs	zero,at,232
 8003908:	08003bdc 	xori	zero,at,239
 800390c:	08003a38 	rdprs	zero,at,232
 8003910:	08003a38 	rdprs	zero,at,232
 8003914:	08003a38 	rdprs	zero,at,232
 8003918:	08003a38 	rdprs	zero,at,232
 800391c:	08003b90 	cmplti	zero,at,238
 8003920:	08003a38 	rdprs	zero,at,232
 8003924:	08003a38 	rdprs	zero,at,232
 8003928:	08003a38 	rdprs	zero,at,232
 800392c:	08003a38 	rdprs	zero,at,232
 8003930:	08003a38 	rdprs	zero,at,232
 8003934:	08003a38 	rdprs	zero,at,232
 8003938:	08003a38 	rdprs	zero,at,232
 800393c:	08003cc4 	addi	zero,at,243
 8003940:	08003a38 	rdprs	zero,at,232
 8003944:	08003a38 	rdprs	zero,at,232
 8003948:	08003a38 	rdprs	zero,at,232
 800394c:	08003c7c 	xorhi	zero,at,241
 8003950:	08003c60 	cmpeqi	zero,at,241
 8003954:	08003a38 	rdprs	zero,at,232
 8003958:	08003a38 	rdprs	zero,at,232
 800395c:	08003c28 	cmpgeui	zero,at,240
 8003960:	08003a38 	rdprs	zero,at,232
 8003964:	08003a38 	rdprs	zero,at,232
 8003968:	08003a38 	rdprs	zero,at,232
 800396c:	08003a38 	rdprs	zero,at,232
 8003970:	08003bf8 	rdprs	zero,at,239
 8003974:	08003a38 	rdprs	zero,at,232
 8003978:	08003a38 	rdprs	zero,at,232
 800397c:	08003a38 	rdprs	zero,at,232
 8003980:	08003a38 	rdprs	zero,at,232
 8003984:	08003a38 	rdprs	zero,at,232
 8003988:	08003bdc 	xori	zero,at,239
 800398c:	08003a38 	rdprs	zero,at,232
 8003990:	08003a38 	rdprs	zero,at,232
 8003994:	08003a38 	rdprs	zero,at,232
 8003998:	08003a38 	rdprs	zero,at,232
 800399c:	08003b90 	cmplti	zero,at,238
 80039a0:	b009883a 	mov	r4,r22
 80039a4:	b80b883a 	mov	r5,r23
 80039a8:	800dde40 	call	800dde4 <__ssrefill_r>
 80039ac:	1000f21e 	bne	r2,zero,8003d78 <__ssvfscanf_r+0x954>
 80039b0:	a9400017 	ldw	r5,0(r21)
 80039b4:	b9000017 	ldw	r4,0(r23)
 80039b8:	00000206 	br	80039c4 <__ssvfscanf_r+0x5a0>
 80039bc:	21000044 	addi	r4,r4,1
 80039c0:	b9000015 	stw	r4,0(r23)
 80039c4:	20800003 	ldbu	r2,0(r4)
 80039c8:	2885883a 	add	r2,r5,r2
 80039cc:	10800043 	ldbu	r2,1(r2)
 80039d0:	1080020c 	andi	r2,r2,8
 80039d4:	103f7c26 	beq	r2,zero,80037c8 <__alt_data_end+0xf80037c8>
 80039d8:	b8800117 	ldw	r2,4(r23)
 80039dc:	9cc00044 	addi	r19,r19,1
 80039e0:	10bfffc4 	addi	r2,r2,-1
 80039e4:	b8800115 	stw	r2,4(r23)
 80039e8:	00bff416 	blt	zero,r2,80039bc <__alt_data_end+0xf80039bc>
 80039ec:	003fec06 	br	80039a0 <__alt_data_end+0xf80039a0>
 80039f0:	90803fcc 	andi	r2,r18,255
 80039f4:	1080201c 	xori	r2,r2,128
 80039f8:	10bfe004 	addi	r2,r2,-128
 80039fc:	a085883a 	add	r2,r20,r2
 8003a00:	10000d1e 	bne	r2,zero,8003a38 <__ssvfscanf_r+0x614>
 8003a04:	00bf9fc4 	movi	r2,-385
 8003a08:	88a2703a 	and	r17,r17,r2
 8003a0c:	e1000005 	stb	r4,0(fp)
 8003a10:	e7000044 	addi	fp,fp,1
 8003a14:	b8800117 	ldw	r2,4(r23)
 8003a18:	843fffc4 	addi	r16,r16,-1
 8003a1c:	9cc00044 	addi	r19,r19,1
 8003a20:	10bfffc4 	addi	r2,r2,-1
 8003a24:	b8800115 	stw	r2,4(r23)
 8003a28:	00826e0e 	bge	zero,r2,80043e4 <__ssvfscanf_r+0xfc0>
 8003a2c:	31800044 	addi	r6,r6,1
 8003a30:	b9800015 	stw	r6,0(r23)
 8003a34:	803f801e 	bne	r16,zero,8003838 <__alt_data_end+0xf8003838>
 8003a38:	d8c09d17 	ldw	r3,628(sp)
 8003a3c:	8821883a 	mov	r16,r17
 8003a40:	e00f883a 	mov	r7,fp
 8003a44:	9023883a 	mov	r17,r18
 8003a48:	4025883a 	mov	r18,r8
 8003a4c:	1802711e 	bne	r3,zero,8004414 <__ssvfscanf_r+0xff0>
 8003a50:	a33fffc4 	addi	r12,r20,-1
 8003a54:	00800044 	movi	r2,1
 8003a58:	1304262e 	bgeu	r2,r12,8004af4 <__ssvfscanf_r+0x16d0>
 8003a5c:	88803fcc 	andi	r2,r17,255
 8003a60:	1080201c 	xori	r2,r2,128
 8003a64:	10bfe004 	addi	r2,r2,-128
 8003a68:	10ffffc4 	addi	r3,r2,-1
 8003a6c:	01000184 	movi	r4,6
 8003a70:	20c01336 	bltu	r4,r3,8003ac0 <__ssvfscanf_r+0x69c>
 8003a74:	00c00084 	movi	r3,2
 8003a78:	18842a0e 	bge	r3,r2,8004b24 <__ssvfscanf_r+0x1700>
 8003a7c:	050000c4 	movi	r20,3
 8003a80:	8839883a 	mov	fp,r17
 8003a84:	15000e26 	beq	r2,r20,8003ac0 <__ssvfscanf_r+0x69c>
 8003a88:	3823883a 	mov	r17,r7
 8003a8c:	99e7c83a 	sub	r19,r19,r7
 8003a90:	8c7fffc4 	addi	r17,r17,-1
 8003a94:	89400007 	ldb	r5,0(r17)
 8003a98:	b009883a 	mov	r4,r22
 8003a9c:	b80d883a 	mov	r6,r23
 8003aa0:	800dcec0 	call	800dcec <_sungetc_r>
 8003aa4:	e0bfffc4 	addi	r2,fp,-1
 8003aa8:	10c03fcc 	andi	r3,r2,255
 8003aac:	8cd3883a 	add	r9,r17,r19
 8003ab0:	1039883a 	mov	fp,r2
 8003ab4:	a0fff636 	bltu	r20,r3,8003a90 <__alt_data_end+0xf8003a90>
 8003ab8:	4827883a 	mov	r19,r9
 8003abc:	880f883a 	mov	r7,r17
 8003ac0:	8080400c 	andi	r2,r16,256
 8003ac4:	10001626 	beq	r2,zero,8003b20 <__ssvfscanf_r+0x6fc>
 8003ac8:	8081000c 	andi	r2,r16,1024
 8003acc:	1004211e 	bne	r2,zero,8004b54 <__ssvfscanf_r+0x1730>
 8003ad0:	397fffc7 	ldb	r5,-1(r7)
 8003ad4:	00801944 	movi	r2,101
 8003ad8:	3c7fffc4 	addi	r17,r7,-1
 8003adc:	9d3fffc4 	addi	r20,r19,-1
 8003ae0:	28800a26 	beq	r5,r2,8003b0c <__ssvfscanf_r+0x6e8>
 8003ae4:	00801144 	movi	r2,69
 8003ae8:	28800826 	beq	r5,r2,8003b0c <__ssvfscanf_r+0x6e8>
 8003aec:	b009883a 	mov	r4,r22
 8003af0:	b80d883a 	mov	r6,r23
 8003af4:	d9c0a815 	stw	r7,672(sp)
 8003af8:	800dcec0 	call	800dcec <_sungetc_r>
 8003afc:	d9c0a817 	ldw	r7,672(sp)
 8003b00:	9d3fff84 	addi	r20,r19,-2
 8003b04:	397fff87 	ldb	r5,-2(r7)
 8003b08:	3c7fff84 	addi	r17,r7,-2
 8003b0c:	b009883a 	mov	r4,r22
 8003b10:	b80d883a 	mov	r6,r23
 8003b14:	800dcec0 	call	800dcec <_sungetc_r>
 8003b18:	a027883a 	mov	r19,r20
 8003b1c:	880f883a 	mov	r7,r17
 8003b20:	8080040c 	andi	r2,r16,16
 8003b24:	103e7d1e 	bne	r2,zero,800351c <__alt_data_end+0xf800351c>
 8003b28:	38000005 	stb	zero,0(r7)
 8003b2c:	80c1800c 	andi	r3,r16,1536
 8003b30:	00810004 	movi	r2,1024
 8003b34:	18836b26 	beq	r3,r2,80048e4 <__ssvfscanf_r+0x14c0>
 8003b38:	d8c0a217 	ldw	r3,648(sp)
 8003b3c:	1803221e 	bne	r3,zero,80047c8 <__ssvfscanf_r+0x13a4>
 8003b40:	b009883a 	mov	r4,r22
 8003b44:	d9400104 	addi	r5,sp,4
 8003b48:	000d883a 	mov	r6,zero
 8003b4c:	800baf40 	call	800baf4 <_strtod_r>
 8003b50:	1023883a 	mov	r17,r2
 8003b54:	8080004c 	andi	r2,r16,1
 8003b58:	1002eb1e 	bne	r2,zero,8004708 <__ssvfscanf_r+0x12e4>
 8003b5c:	8280008c 	andi	r10,r16,2
 8003b60:	50038e26 	beq	r10,zero,800499c <__ssvfscanf_r+0x1578>
 8003b64:	dac09c17 	ldw	r11,624(sp)
 8003b68:	58800017 	ldw	r2,0(r11)
 8003b6c:	5ac00104 	addi	r11,r11,4
 8003b70:	dac09c15 	stw	r11,624(sp)
 8003b74:	14400015 	stw	r17,0(r2)
 8003b78:	10c00115 	stw	r3,4(r2)
 8003b7c:	dac09f17 	ldw	r11,636(sp)
 8003b80:	9023883a 	mov	r17,r18
 8003b84:	5ac00044 	addi	r11,r11,1
 8003b88:	dac09f15 	stw	r11,636(sp)
 8003b8c:	003e6406 	br	8003520 <__alt_data_end+0xf8003520>
 8003b90:	90803fcc 	andi	r2,r18,255
 8003b94:	1080201c 	xori	r2,r2,128
 8003b98:	10bfe004 	addi	r2,r2,-128
 8003b9c:	014001c4 	movi	r5,7
 8003ba0:	117fa51e 	bne	r2,r5,8003a38 <__alt_data_end+0xf8003a38>
 8003ba4:	04800204 	movi	r18,8
 8003ba8:	003f9806 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8003bac:	8880800c 	andi	r2,r17,512
 8003bb0:	103fa126 	beq	r2,zero,8003a38 <__alt_data_end+0xf8003a38>
 8003bb4:	d9409d17 	ldw	r5,628(sp)
 8003bb8:	00bf5fc4 	movi	r2,-641
 8003bbc:	88a2703a 	and	r17,r17,r2
 8003bc0:	d940a115 	stw	r5,644(sp)
 8003bc4:	003f9106 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8003bc8:	8880200c 	andi	r2,r17,128
 8003bcc:	103f9a26 	beq	r2,zero,8003a38 <__alt_data_end+0xf8003a38>
 8003bd0:	00bfdfc4 	movi	r2,-129
 8003bd4:	88a2703a 	and	r17,r17,r2
 8003bd8:	003f8c06 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8003bdc:	91403fcc 	andi	r5,r18,255
 8003be0:	2940201c 	xori	r5,r5,128
 8003be4:	297fe004 	addi	r5,r5,-128
 8003be8:	00800184 	movi	r2,6
 8003bec:	28bf921e 	bne	r5,r2,8003a38 <__alt_data_end+0xf8003a38>
 8003bf0:	048001c4 	movi	r18,7
 8003bf4:	003f8506 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8003bf8:	a0025c1e 	bne	r20,zero,800456c <__ssvfscanf_r+0x1148>
 8003bfc:	d9409d17 	ldw	r5,628(sp)
 8003c00:	2802d226 	beq	r5,zero,800474c <__ssvfscanf_r+0x1328>
 8003c04:	90803fcc 	andi	r2,r18,255
 8003c08:	1080201c 	xori	r2,r2,128
 8003c0c:	10bfe004 	addi	r2,r2,-128
 8003c10:	01400044 	movi	r5,1
 8003c14:	11400226 	beq	r2,r5,8003c20 <__ssvfscanf_r+0x7fc>
 8003c18:	01400104 	movi	r5,4
 8003c1c:	117f861e 	bne	r2,r5,8003a38 <__alt_data_end+0xf8003a38>
 8003c20:	94800044 	addi	r18,r18,1
 8003c24:	003f7906 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8003c28:	90803fcc 	andi	r2,r18,255
 8003c2c:	1080201c 	xori	r2,r2,128
 8003c30:	10bfe004 	addi	r2,r2,-128
 8003c34:	1002481e 	bne	r2,zero,8004558 <__ssvfscanf_r+0x1134>
 8003c38:	d8809d17 	ldw	r2,628(sp)
 8003c3c:	1002bc1e 	bne	r2,zero,8004730 <__ssvfscanf_r+0x130c>
 8003c40:	8941c00c 	andi	r5,r17,1792
 8003c44:	0081c004 	movi	r2,1792
 8003c48:	28838f26 	beq	r5,r2,8004a88 <__ssvfscanf_r+0x1664>
 8003c4c:	8821883a 	mov	r16,r17
 8003c50:	e00f883a 	mov	r7,fp
 8003c54:	9023883a 	mov	r17,r18
 8003c58:	4025883a 	mov	r18,r8
 8003c5c:	003f7c06 	br	8003a50 <__alt_data_end+0xf8003a50>
 8003c60:	91403fcc 	andi	r5,r18,255
 8003c64:	2940201c 	xori	r5,r5,128
 8003c68:	297fe004 	addi	r5,r5,-128
 8003c6c:	00800084 	movi	r2,2
 8003c70:	28bf711e 	bne	r5,r2,8003a38 <__alt_data_end+0xf8003a38>
 8003c74:	048000c4 	movi	r18,3
 8003c78:	003f6406 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8003c7c:	8881400c 	andi	r2,r17,1280
 8003c80:	01410004 	movi	r5,1024
 8003c84:	11400426 	beq	r2,r5,8003c98 <__ssvfscanf_r+0x874>
 8003c88:	8944703a 	and	r2,r17,r5
 8003c8c:	103f6a26 	beq	r2,zero,8003a38 <__alt_data_end+0xf8003a38>
 8003c90:	d8809d17 	ldw	r2,628(sp)
 8003c94:	103fed26 	beq	r2,zero,8003c4c <__alt_data_end+0xf8003c4c>
 8003c98:	8880800c 	andi	r2,r17,512
 8003c9c:	1000051e 	bne	r2,zero,8003cb4 <__ssvfscanf_r+0x890>
 8003ca0:	d9409d17 	ldw	r5,628(sp)
 8003ca4:	d880a117 	ldw	r2,644(sp)
 8003ca8:	df00a415 	stw	fp,656(sp)
 8003cac:	288bc83a 	sub	r5,r5,r2
 8003cb0:	d940a215 	stw	r5,648(sp)
 8003cb4:	88e2703a 	and	r17,r17,r3
 8003cb8:	8c406014 	ori	r17,r17,384
 8003cbc:	d8009d15 	stw	zero,628(sp)
 8003cc0:	003f5206 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8003cc4:	00800044 	movi	r2,1
 8003cc8:	a0bf5b1e 	bne	r20,r2,8003a38 <__alt_data_end+0xf8003a38>
 8003ccc:	05000084 	movi	r20,2
 8003cd0:	003f4e06 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8003cd4:	8880400c 	andi	r2,r17,256
 8003cd8:	103f4526 	beq	r2,zero,80039f0 <__alt_data_end+0xf80039f0>
 8003cdc:	00bfdfc4 	movi	r2,-129
 8003ce0:	88a2703a 	and	r17,r17,r2
 8003ce4:	d8809d17 	ldw	r2,628(sp)
 8003ce8:	d900a317 	ldw	r4,652(sp)
 8003cec:	10800044 	addi	r2,r2,1
 8003cf0:	d8809d15 	stw	r2,628(sp)
 8003cf4:	203f4726 	beq	r4,zero,8003a14 <__alt_data_end+0xf8003a14>
 8003cf8:	213fffc4 	addi	r4,r4,-1
 8003cfc:	d900a315 	stw	r4,652(sp)
 8003d00:	84000044 	addi	r16,r16,1
 8003d04:	003f4306 	br	8003a14 <__alt_data_end+0xf8003a14>
 8003d08:	90c00043 	ldbu	r3,1(r18)
 8003d0c:	2825883a 	mov	r18,r5
 8003d10:	84000414 	ori	r16,r16,16
 8003d14:	18803fcc 	andi	r2,r3,255
 8003d18:	91400044 	addi	r5,r18,1
 8003d1c:	30be112e 	bgeu	r6,r2,8003564 <__alt_data_end+0xf8003564>
 8003d20:	18c03fcc 	andi	r3,r3,255
 8003d24:	18c0201c 	xori	r3,r3,128
 8003d28:	18ffe004 	addi	r3,r3,-128
 8003d2c:	20c9883a 	add	r4,r4,r3
 8003d30:	20800043 	ldbu	r2,1(r4)
 8003d34:	00c00044 	movi	r3,1
 8003d38:	2825883a 	mov	r18,r5
 8003d3c:	108000cc 	andi	r2,r2,3
 8003d40:	10c2ee26 	beq	r2,r3,80048fc <__ssvfscanf_r+0x14d8>
 8003d44:	00820074 	movhi	r2,2049
 8003d48:	10b45504 	addi	r2,r2,-11948
 8003d4c:	d880a015 	stw	r2,640(sp)
 8003d50:	b8800117 	ldw	r2,4(r23)
 8003d54:	02000284 	movi	r8,10
 8003d58:	da009e15 	stw	r8,632(sp)
 8003d5c:	8839883a 	mov	fp,r17
 8003d60:	050000c4 	movi	r20,3
 8003d64:	00be9616 	blt	zero,r2,80037c0 <__alt_data_end+0xf80037c0>
 8003d68:	b009883a 	mov	r4,r22
 8003d6c:	b80b883a 	mov	r5,r23
 8003d70:	800dde40 	call	800dde4 <__ssrefill_r>
 8003d74:	103e9226 	beq	r2,zero,80037c0 <__alt_data_end+0xf80037c0>
 8003d78:	8008c700 	call	8008c70 <__sfp_lock_release>
 8003d7c:	da009f17 	ldw	r8,636(sp)
 8003d80:	40007926 	beq	r8,zero,8003f68 <__ssvfscanf_r+0xb44>
 8003d84:	b880030b 	ldhu	r2,12(r23)
 8003d88:	1080100c 	andi	r2,r2,64
 8003d8c:	1000761e 	bne	r2,zero,8003f68 <__ssvfscanf_r+0xb44>
 8003d90:	4005883a 	mov	r2,r8
 8003d94:	00000206 	br	8003da0 <__ssvfscanf_r+0x97c>
 8003d98:	8008c700 	call	8008c70 <__sfp_lock_release>
 8003d9c:	00bfffc4 	movi	r2,-1
 8003da0:	dfc0b417 	ldw	ra,720(sp)
 8003da4:	df00b317 	ldw	fp,716(sp)
 8003da8:	ddc0b217 	ldw	r23,712(sp)
 8003dac:	dd80b117 	ldw	r22,708(sp)
 8003db0:	dd40b017 	ldw	r21,704(sp)
 8003db4:	dd00af17 	ldw	r20,700(sp)
 8003db8:	dcc0ae17 	ldw	r19,696(sp)
 8003dbc:	dc80ad17 	ldw	r18,692(sp)
 8003dc0:	dc40ac17 	ldw	r17,688(sp)
 8003dc4:	dc00ab17 	ldw	r16,684(sp)
 8003dc8:	dec0b504 	addi	sp,sp,724
 8003dcc:	f800283a 	ret
 8003dd0:	90c00043 	ldbu	r3,1(r18)
 8003dd4:	84000094 	ori	r16,r16,2
 8003dd8:	2825883a 	mov	r18,r5
 8003ddc:	003dde06 	br	8003558 <__alt_data_end+0xf8003558>
 8003de0:	2825883a 	mov	r18,r5
 8003de4:	8839883a 	mov	fp,r17
 8003de8:	05000104 	movi	r20,4
 8003dec:	003e7206 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003df0:	2825883a 	mov	r18,r5
 8003df4:	84000054 	ori	r16,r16,1
 8003df8:	02c20074 	movhi	r11,2049
 8003dfc:	5af45504 	addi	r11,r11,-11948
 8003e00:	02000284 	movi	r8,10
 8003e04:	8839883a 	mov	fp,r17
 8003e08:	dac0a015 	stw	r11,640(sp)
 8003e0c:	da009e15 	stw	r8,632(sp)
 8003e10:	050000c4 	movi	r20,3
 8003e14:	003e6806 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003e18:	18803fcc 	andi	r2,r3,255
 8003e1c:	8c4002a4 	muli	r17,r17,10
 8003e20:	1080201c 	xori	r2,r2,128
 8003e24:	10bfe004 	addi	r2,r2,-128
 8003e28:	88a3883a 	add	r17,r17,r2
 8003e2c:	90c00043 	ldbu	r3,1(r18)
 8003e30:	8c7ff404 	addi	r17,r17,-48
 8003e34:	2825883a 	mov	r18,r5
 8003e38:	003dc706 	br	8003558 <__alt_data_end+0xf8003558>
 8003e3c:	02c20074 	movhi	r11,2049
 8003e40:	5af5bb04 	addi	r11,r11,-10516
 8003e44:	02000284 	movi	r8,10
 8003e48:	2825883a 	mov	r18,r5
 8003e4c:	8839883a 	mov	fp,r17
 8003e50:	dac0a015 	stw	r11,640(sp)
 8003e54:	da009e15 	stw	r8,632(sp)
 8003e58:	050000c4 	movi	r20,3
 8003e5c:	003e5606 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003e60:	2825883a 	mov	r18,r5
 8003e64:	8839883a 	mov	fp,r17
 8003e68:	05000084 	movi	r20,2
 8003e6c:	003e5206 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003e70:	2825883a 	mov	r18,r5
 8003e74:	84008814 	ori	r16,r16,544
 8003e78:	02c20074 	movhi	r11,2049
 8003e7c:	5af5bb04 	addi	r11,r11,-10516
 8003e80:	02000404 	movi	r8,16
 8003e84:	8839883a 	mov	fp,r17
 8003e88:	dac0a015 	stw	r11,640(sp)
 8003e8c:	da009e15 	stw	r8,632(sp)
 8003e90:	050000c4 	movi	r20,3
 8003e94:	003e4806 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003e98:	2825883a 	mov	r18,r5
 8003e9c:	02c20074 	movhi	r11,2049
 8003ea0:	5af5bb04 	addi	r11,r11,-10516
 8003ea4:	02000204 	movi	r8,8
 8003ea8:	8839883a 	mov	fp,r17
 8003eac:	dac0a015 	stw	r11,640(sp)
 8003eb0:	da009e15 	stw	r8,632(sp)
 8003eb4:	050000c4 	movi	r20,3
 8003eb8:	003e3f06 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003ebc:	8080040c 	andi	r2,r16,16
 8003ec0:	2825883a 	mov	r18,r5
 8003ec4:	103d951e 	bne	r2,zero,800351c <__alt_data_end+0xf800351c>
 8003ec8:	8080010c 	andi	r2,r16,4
 8003ecc:	10028d26 	beq	r2,zero,8004904 <__ssvfscanf_r+0x14e0>
 8003ed0:	dac09c17 	ldw	r11,624(sp)
 8003ed4:	58800017 	ldw	r2,0(r11)
 8003ed8:	5ac00104 	addi	r11,r11,4
 8003edc:	dac09c15 	stw	r11,624(sp)
 8003ee0:	14c0000d 	sth	r19,0(r2)
 8003ee4:	003d8d06 	br	800351c <__alt_data_end+0xf800351c>
 8003ee8:	90c00043 	ldbu	r3,1(r18)
 8003eec:	18803fcc 	andi	r2,r3,255
 8003ef0:	1080201c 	xori	r2,r2,128
 8003ef4:	10bfe004 	addi	r2,r2,-128
 8003ef8:	11c27626 	beq	r2,r7,80048d4 <__ssvfscanf_r+0x14b0>
 8003efc:	84000054 	ori	r16,r16,1
 8003f00:	2825883a 	mov	r18,r5
 8003f04:	003d9406 	br	8003558 <__alt_data_end+0xf8003558>
 8003f08:	90c00043 	ldbu	r3,1(r18)
 8003f0c:	84000114 	ori	r16,r16,4
 8003f10:	2825883a 	mov	r18,r5
 8003f14:	003d9006 	br	8003558 <__alt_data_end+0xf8003558>
 8003f18:	2825883a 	mov	r18,r5
 8003f1c:	003fb606 	br	8003df8 <__alt_data_end+0xf8003df8>
 8003f20:	2825883a 	mov	r18,r5
 8003f24:	84001014 	ori	r16,r16,64
 8003f28:	8839883a 	mov	fp,r17
 8003f2c:	0029883a 	mov	r20,zero
 8003f30:	003e2106 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003f34:	d9005884 	addi	r4,sp,354
 8003f38:	800b8c40 	call	800b8c4 <__sccl>
 8003f3c:	1025883a 	mov	r18,r2
 8003f40:	84001014 	ori	r16,r16,64
 8003f44:	8839883a 	mov	fp,r17
 8003f48:	05000044 	movi	r20,1
 8003f4c:	003e1a06 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003f50:	2825883a 	mov	r18,r5
 8003f54:	84008014 	ori	r16,r16,512
 8003f58:	003fc706 	br	8003e78 <__alt_data_end+0xf8003e78>
 8003f5c:	2825883a 	mov	r18,r5
 8003f60:	84000054 	ori	r16,r16,1
 8003f64:	003fcd06 	br	8003e9c <__alt_data_end+0xf8003e9c>
 8003f68:	00bfffc4 	movi	r2,-1
 8003f6c:	003f8c06 	br	8003da0 <__alt_data_end+0xf8003da0>
 8003f70:	00800044 	movi	r2,1
 8003f74:	a0803d1e 	bne	r20,r2,800406c <__ssvfscanf_r+0xc48>
 8003f78:	8800011e 	bne	r17,zero,8003f80 <__ssvfscanf_r+0xb5c>
 8003f7c:	073fffc4 	movi	fp,-1
 8003f80:	8400040c 	andi	r16,r16,16
 8003f84:	80012a26 	beq	r16,zero,8004430 <__ssvfscanf_r+0x100c>
 8003f88:	b9000017 	ldw	r4,0(r23)
 8003f8c:	0021883a 	mov	r16,zero
 8003f90:	dc405884 	addi	r17,sp,354
 8003f94:	20800003 	ldbu	r2,0(r4)
 8003f98:	8885883a 	add	r2,r17,r2
 8003f9c:	10800007 	ldb	r2,0(r2)
 8003fa0:	10001126 	beq	r2,zero,8003fe8 <__ssvfscanf_r+0xbc4>
 8003fa4:	b8800117 	ldw	r2,4(r23)
 8003fa8:	21000044 	addi	r4,r4,1
 8003fac:	84000044 	addi	r16,r16,1
 8003fb0:	10bfffc4 	addi	r2,r2,-1
 8003fb4:	b8800115 	stw	r2,4(r23)
 8003fb8:	b9000015 	stw	r4,0(r23)
 8003fbc:	e4000b26 	beq	fp,r16,8003fec <__ssvfscanf_r+0xbc8>
 8003fc0:	00bff416 	blt	zero,r2,8003f94 <__alt_data_end+0xf8003f94>
 8003fc4:	b009883a 	mov	r4,r22
 8003fc8:	b80b883a 	mov	r5,r23
 8003fcc:	800dde40 	call	800dde4 <__ssrefill_r>
 8003fd0:	1000061e 	bne	r2,zero,8003fec <__ssvfscanf_r+0xbc8>
 8003fd4:	b9000017 	ldw	r4,0(r23)
 8003fd8:	20800003 	ldbu	r2,0(r4)
 8003fdc:	8885883a 	add	r2,r17,r2
 8003fe0:	10800007 	ldb	r2,0(r2)
 8003fe4:	103fef1e 	bne	r2,zero,8003fa4 <__alt_data_end+0xf8003fa4>
 8003fe8:	803d5126 	beq	r16,zero,8003530 <__alt_data_end+0xf8003530>
 8003fec:	9c27883a 	add	r19,r19,r16
 8003ff0:	9023883a 	mov	r17,r18
 8003ff4:	003d4a06 	br	8003520 <__alt_data_end+0xf8003520>
 8003ff8:	8800011e 	bne	r17,zero,8004000 <__ssvfscanf_r+0xbdc>
 8003ffc:	073fffc4 	movi	fp,-1
 8004000:	8080004c 	andi	r2,r16,1
 8004004:	10016f1e 	bne	r2,zero,80045c4 <__ssvfscanf_r+0x11a0>
 8004008:	8400040c 	andi	r16,r16,16
 800400c:	80012a26 	beq	r16,zero,80044b8 <__ssvfscanf_r+0x1094>
 8004010:	a9400017 	ldw	r5,0(r21)
 8004014:	b9000017 	ldw	r4,0(r23)
 8004018:	0021883a 	mov	r16,zero
 800401c:	20800003 	ldbu	r2,0(r4)
 8004020:	2885883a 	add	r2,r5,r2
 8004024:	10800043 	ldbu	r2,1(r2)
 8004028:	1080020c 	andi	r2,r2,8
 800402c:	103fef1e 	bne	r2,zero,8003fec <__alt_data_end+0xf8003fec>
 8004030:	b8800117 	ldw	r2,4(r23)
 8004034:	21000044 	addi	r4,r4,1
 8004038:	84000044 	addi	r16,r16,1
 800403c:	10bfffc4 	addi	r2,r2,-1
 8004040:	b8800115 	stw	r2,4(r23)
 8004044:	b9000015 	stw	r4,0(r23)
 8004048:	e43fe826 	beq	fp,r16,8003fec <__alt_data_end+0xf8003fec>
 800404c:	00bff316 	blt	zero,r2,800401c <__alt_data_end+0xf800401c>
 8004050:	b009883a 	mov	r4,r22
 8004054:	b80b883a 	mov	r5,r23
 8004058:	800dde40 	call	800dde4 <__ssrefill_r>
 800405c:	103fe31e 	bne	r2,zero,8003fec <__alt_data_end+0xf8003fec>
 8004060:	a9400017 	ldw	r5,0(r21)
 8004064:	b9000017 	ldw	r4,0(r23)
 8004068:	003fec06 	br	800401c <__alt_data_end+0xf800401c>
 800406c:	8800011e 	bne	r17,zero,8004074 <__ssvfscanf_r+0xc50>
 8004070:	07000044 	movi	fp,1
 8004074:	8080004c 	andi	r2,r16,1
 8004078:	1001701e 	bne	r2,zero,800463c <__ssvfscanf_r+0x1218>
 800407c:	8400040c 	andi	r16,r16,16
 8004080:	8001f626 	beq	r16,zero,800485c <__ssvfscanf_r+0x1438>
 8004084:	0021883a 	mov	r16,zero
 8004088:	00000906 	br	80040b0 <__ssvfscanf_r+0xc8c>
 800408c:	b8c00017 	ldw	r3,0(r23)
 8004090:	b009883a 	mov	r4,r22
 8004094:	b80b883a 	mov	r5,r23
 8004098:	1887883a 	add	r3,r3,r2
 800409c:	b8c00015 	stw	r3,0(r23)
 80040a0:	80a1883a 	add	r16,r16,r2
 80040a4:	e0b9c83a 	sub	fp,fp,r2
 80040a8:	800dde40 	call	800dde4 <__ssrefill_r>
 80040ac:	1001e81e 	bne	r2,zero,8004850 <__ssvfscanf_r+0x142c>
 80040b0:	b8800117 	ldw	r2,4(r23)
 80040b4:	173ff516 	blt	r2,fp,800408c <__alt_data_end+0xf800408c>
 80040b8:	b9000017 	ldw	r4,0(r23)
 80040bc:	1705c83a 	sub	r2,r2,fp
 80040c0:	e421883a 	add	r16,fp,r16
 80040c4:	2707883a 	add	r3,r4,fp
 80040c8:	b8800115 	stw	r2,4(r23)
 80040cc:	b8c00015 	stw	r3,0(r23)
 80040d0:	9c27883a 	add	r19,r19,r16
 80040d4:	003fc606 	br	8003ff0 <__alt_data_end+0xf8003ff0>
 80040d8:	88bfffc4 	addi	r2,r17,-1
 80040dc:	01005704 	movi	r4,348
 80040e0:	2080cf2e 	bgeu	r4,r2,8004420 <__ssvfscanf_r+0xffc>
 80040e4:	89ffa8c4 	addi	r7,r17,-349
 80040e8:	07005744 	movi	fp,349
 80040ec:	84436014 	ori	r17,r16,3456
 80040f0:	0021883a 	mov	r16,zero
 80040f4:	9013883a 	mov	r9,r18
 80040f8:	8025883a 	mov	r18,r16
 80040fc:	dc009e17 	ldw	r16,632(sp)
 8004100:	dd000104 	addi	r20,sp,4
 8004104:	02001344 	movi	r8,77
 8004108:	02808004 	movi	r10,512
 800410c:	01bf7fc4 	movi	r6,-513
 8004110:	00ffdfc4 	movi	r3,-129
 8004114:	b9000017 	ldw	r4,0(r23)
 8004118:	21400003 	ldbu	r5,0(r4)
 800411c:	28bff544 	addi	r2,r5,-43
 8004120:	10803fcc 	andi	r2,r2,255
 8004124:	40806336 	bltu	r8,r2,80042b4 <__ssvfscanf_r+0xe90>
 8004128:	100490ba 	slli	r2,r2,2
 800412c:	02c20034 	movhi	r11,2048
 8004130:	5ad05004 	addi	r11,r11,16704
 8004134:	12c5883a 	add	r2,r2,r11
 8004138:	10800017 	ldw	r2,0(r2)
 800413c:	1000683a 	jmp	r2
 8004140:	080043d4 	ori	zero,at,271
 8004144:	080042b4 	orhi	zero,at,266
 8004148:	080043d4 	ori	zero,at,271
 800414c:	080042b4 	orhi	zero,at,266
 8004150:	080042b4 	orhi	zero,at,266
 8004154:	0800434c 	andi	zero,at,269
 8004158:	0800432c 	andhi	zero,at,268
 800415c:	0800432c 	andhi	zero,at,268
 8004160:	0800432c 	andhi	zero,at,268
 8004164:	0800432c 	andhi	zero,at,268
 8004168:	0800432c 	andhi	zero,at,268
 800416c:	0800432c 	andhi	zero,at,268
 8004170:	0800432c 	andhi	zero,at,268
 8004174:	0800430c 	andi	zero,at,268
 8004178:	0800430c 	andi	zero,at,268
 800417c:	080042b4 	orhi	zero,at,266
 8004180:	080042b4 	orhi	zero,at,266
 8004184:	080042b4 	orhi	zero,at,266
 8004188:	080042b4 	orhi	zero,at,266
 800418c:	080042b4 	orhi	zero,at,266
 8004190:	080042b4 	orhi	zero,at,266
 8004194:	080042b4 	orhi	zero,at,266
 8004198:	080042f8 	rdprs	zero,at,267
 800419c:	080042f8 	rdprs	zero,at,267
 80041a0:	080042f8 	rdprs	zero,at,267
 80041a4:	080042f8 	rdprs	zero,at,267
 80041a8:	080042f8 	rdprs	zero,at,267
 80041ac:	080042f8 	rdprs	zero,at,267
 80041b0:	080042b4 	orhi	zero,at,266
 80041b4:	080042b4 	orhi	zero,at,266
 80041b8:	080042b4 	orhi	zero,at,266
 80041bc:	080042b4 	orhi	zero,at,266
 80041c0:	080042b4 	orhi	zero,at,266
 80041c4:	080042b4 	orhi	zero,at,266
 80041c8:	080042b4 	orhi	zero,at,266
 80041cc:	080042b4 	orhi	zero,at,266
 80041d0:	080042b4 	orhi	zero,at,266
 80041d4:	080042b4 	orhi	zero,at,266
 80041d8:	080042b4 	orhi	zero,at,266
 80041dc:	080042b4 	orhi	zero,at,266
 80041e0:	080042b4 	orhi	zero,at,266
 80041e4:	080042b4 	orhi	zero,at,266
 80041e8:	080042b4 	orhi	zero,at,266
 80041ec:	080042b4 	orhi	zero,at,266
 80041f0:	080042b4 	orhi	zero,at,266
 80041f4:	08004278 	rdprs	zero,at,265
 80041f8:	080042b4 	orhi	zero,at,266
 80041fc:	080042b4 	orhi	zero,at,266
 8004200:	080042b4 	orhi	zero,at,266
 8004204:	080042b4 	orhi	zero,at,266
 8004208:	080042b4 	orhi	zero,at,266
 800420c:	080042b4 	orhi	zero,at,266
 8004210:	080042b4 	orhi	zero,at,266
 8004214:	080042b4 	orhi	zero,at,266
 8004218:	080042f8 	rdprs	zero,at,267
 800421c:	080042f8 	rdprs	zero,at,267
 8004220:	080042f8 	rdprs	zero,at,267
 8004224:	080042f8 	rdprs	zero,at,267
 8004228:	080042f8 	rdprs	zero,at,267
 800422c:	080042f8 	rdprs	zero,at,267
 8004230:	080042b4 	orhi	zero,at,266
 8004234:	080042b4 	orhi	zero,at,266
 8004238:	080042b4 	orhi	zero,at,266
 800423c:	080042b4 	orhi	zero,at,266
 8004240:	080042b4 	orhi	zero,at,266
 8004244:	080042b4 	orhi	zero,at,266
 8004248:	080042b4 	orhi	zero,at,266
 800424c:	080042b4 	orhi	zero,at,266
 8004250:	080042b4 	orhi	zero,at,266
 8004254:	080042b4 	orhi	zero,at,266
 8004258:	080042b4 	orhi	zero,at,266
 800425c:	080042b4 	orhi	zero,at,266
 8004260:	080042b4 	orhi	zero,at,266
 8004264:	080042b4 	orhi	zero,at,266
 8004268:	080042b4 	orhi	zero,at,266
 800426c:	080042b4 	orhi	zero,at,266
 8004270:	080042b4 	orhi	zero,at,266
 8004274:	08004278 	rdprs	zero,at,265
 8004278:	8881800c 	andi	r2,r17,1536
 800427c:	12800d1e 	bne	r2,r10,80042b4 <__ssvfscanf_r+0xe90>
 8004280:	89a2703a 	and	r17,r17,r6
 8004284:	8c414014 	ori	r17,r17,1280
 8004288:	04000404 	movi	r16,16
 800428c:	b8800117 	ldw	r2,4(r23)
 8004290:	a1400005 	stb	r5,0(r20)
 8004294:	a5000044 	addi	r20,r20,1
 8004298:	10bfffc4 	addi	r2,r2,-1
 800429c:	b8800115 	stw	r2,4(r23)
 80042a0:	00803b0e 	bge	zero,r2,8004390 <__ssvfscanf_r+0xf6c>
 80042a4:	21000044 	addi	r4,r4,1
 80042a8:	b9000015 	stw	r4,0(r23)
 80042ac:	e73fffc4 	addi	fp,fp,-1
 80042b0:	e03f981e 	bne	fp,zero,8004114 <__alt_data_end+0xf8004114>
 80042b4:	dc009e15 	stw	r16,632(sp)
 80042b8:	8880400c 	andi	r2,r17,256
 80042bc:	9021883a 	mov	r16,r18
 80042c0:	4825883a 	mov	r18,r9
 80042c4:	10000426 	beq	r2,zero,80042d8 <__ssvfscanf_r+0xeb4>
 80042c8:	d8800104 	addi	r2,sp,4
 80042cc:	15017b36 	bltu	r2,r20,80048bc <__ssvfscanf_r+0x1498>
 80042d0:	d8c00104 	addi	r3,sp,4
 80042d4:	1d3c9626 	beq	r3,r20,8003530 <__alt_data_end+0xf8003530>
 80042d8:	8880040c 	andi	r2,r17,16
 80042dc:	1000a726 	beq	r2,zero,800457c <__ssvfscanf_r+0x1158>
 80042e0:	dac00104 	addi	r11,sp,4
 80042e4:	a2e9c83a 	sub	r20,r20,r11
 80042e8:	a429883a 	add	r20,r20,r16
 80042ec:	9d27883a 	add	r19,r19,r20
 80042f0:	9023883a 	mov	r17,r18
 80042f4:	003c8a06 	br	8003520 <__alt_data_end+0xf8003520>
 80042f8:	00800284 	movi	r2,10
 80042fc:	143fed0e 	bge	r2,r16,80042b4 <__alt_data_end+0xf80042b4>
 8004300:	00bd1fc4 	movi	r2,-2945
 8004304:	88a2703a 	and	r17,r17,r2
 8004308:	003fe006 	br	800428c <__alt_data_end+0xf800428c>
 800430c:	02c200b4 	movhi	r11,2050
 8004310:	8421883a 	add	r16,r16,r16
 8004314:	5af22184 	addi	r11,r11,-14202
 8004318:	5c05883a 	add	r2,r11,r16
 800431c:	1400000f 	ldh	r16,0(r2)
 8004320:	00800204 	movi	r2,8
 8004324:	143ff616 	blt	r2,r16,8004300 <__alt_data_end+0xf8004300>
 8004328:	003fe206 	br	80042b4 <__alt_data_end+0xf80042b4>
 800432c:	02c200b4 	movhi	r11,2050
 8004330:	8421883a 	add	r16,r16,r16
 8004334:	5af22184 	addi	r11,r11,-14202
 8004338:	5c05883a 	add	r2,r11,r16
 800433c:	1400000f 	ldh	r16,0(r2)
 8004340:	00bd1fc4 	movi	r2,-2945
 8004344:	88a2703a 	and	r17,r17,r2
 8004348:	003fd006 	br	800428c <__alt_data_end+0xf800428c>
 800434c:	8882000c 	andi	r2,r17,2048
 8004350:	103fce26 	beq	r2,zero,800428c <__alt_data_end+0xf800428c>
 8004354:	8000021e 	bne	r16,zero,8004360 <__ssvfscanf_r+0xf3c>
 8004358:	8c408014 	ori	r17,r17,512
 800435c:	04000204 	movi	r16,8
 8004360:	8881000c 	andi	r2,r17,1024
 8004364:	1000ef1e 	bne	r2,zero,8004724 <__ssvfscanf_r+0x1300>
 8004368:	00bf1fc4 	movi	r2,-897
 800436c:	88a2703a 	and	r17,r17,r2
 8004370:	38000226 	beq	r7,zero,800437c <__ssvfscanf_r+0xf58>
 8004374:	39ffffc4 	addi	r7,r7,-1
 8004378:	e7000044 	addi	fp,fp,1
 800437c:	b8800117 	ldw	r2,4(r23)
 8004380:	94800044 	addi	r18,r18,1
 8004384:	10bfffc4 	addi	r2,r2,-1
 8004388:	b8800115 	stw	r2,4(r23)
 800438c:	00bfc516 	blt	zero,r2,80042a4 <__alt_data_end+0xf80042a4>
 8004390:	b009883a 	mov	r4,r22
 8004394:	b80b883a 	mov	r5,r23
 8004398:	d8c0aa15 	stw	r3,680(sp)
 800439c:	d980a615 	stw	r6,664(sp)
 80043a0:	d9c0a815 	stw	r7,672(sp)
 80043a4:	da00a915 	stw	r8,676(sp)
 80043a8:	da40a715 	stw	r9,668(sp)
 80043ac:	da80a515 	stw	r10,660(sp)
 80043b0:	800dde40 	call	800dde4 <__ssrefill_r>
 80043b4:	d8c0aa17 	ldw	r3,680(sp)
 80043b8:	d980a617 	ldw	r6,664(sp)
 80043bc:	d9c0a817 	ldw	r7,672(sp)
 80043c0:	da00a917 	ldw	r8,676(sp)
 80043c4:	da40a717 	ldw	r9,668(sp)
 80043c8:	da80a517 	ldw	r10,660(sp)
 80043cc:	103fb726 	beq	r2,zero,80042ac <__alt_data_end+0xf80042ac>
 80043d0:	003fb806 	br	80042b4 <__alt_data_end+0xf80042b4>
 80043d4:	8880200c 	andi	r2,r17,128
 80043d8:	103fb626 	beq	r2,zero,80042b4 <__alt_data_end+0xf80042b4>
 80043dc:	88e2703a 	and	r17,r17,r3
 80043e0:	003faa06 	br	800428c <__alt_data_end+0xf800428c>
 80043e4:	b009883a 	mov	r4,r22
 80043e8:	b80b883a 	mov	r5,r23
 80043ec:	d8c0aa15 	stw	r3,680(sp)
 80043f0:	da00a915 	stw	r8,676(sp)
 80043f4:	dac0a515 	stw	r11,660(sp)
 80043f8:	800dde40 	call	800dde4 <__ssrefill_r>
 80043fc:	d8c0aa17 	ldw	r3,680(sp)
 8004400:	da00a917 	ldw	r8,676(sp)
 8004404:	dac0a517 	ldw	r11,660(sp)
 8004408:	103d8b1e 	bne	r2,zero,8003a38 <__alt_data_end+0xf8003a38>
 800440c:	803d0a1e 	bne	r16,zero,8003838 <__alt_data_end+0xf8003838>
 8004410:	003d8906 	br	8003a38 <__alt_data_end+0xf8003a38>
 8004414:	00bfbfc4 	movi	r2,-257
 8004418:	80a0703a 	and	r16,r16,r2
 800441c:	003d8c06 	br	8003a50 <__alt_data_end+0xf8003a50>
 8004420:	000f883a 	mov	r7,zero
 8004424:	003f3106 	br	80040ec <__alt_data_end+0xf80040ec>
 8004428:	d800a315 	stw	zero,652(sp)
 800442c:	003cf306 	br	80037fc <__alt_data_end+0xf80037fc>
 8004430:	dac09c17 	ldw	r11,624(sp)
 8004434:	e0ffffc4 	addi	r3,fp,-1
 8004438:	dc405884 	addi	r17,sp,354
 800443c:	5c000017 	ldw	r16,0(r11)
 8004440:	5a000104 	addi	r8,r11,4
 8004444:	da009c15 	stw	r8,624(sp)
 8004448:	800b883a 	mov	r5,r16
 800444c:	80e9883a 	add	r20,r16,r3
 8004450:	00000106 	br	8004458 <__ssvfscanf_r+0x1034>
 8004454:	e00b883a 	mov	r5,fp
 8004458:	b8c00017 	ldw	r3,0(r23)
 800445c:	280d883a 	mov	r6,r5
 8004460:	18800003 	ldbu	r2,0(r3)
 8004464:	8885883a 	add	r2,r17,r2
 8004468:	10800007 	ldb	r2,0(r2)
 800446c:	1000f626 	beq	r2,zero,8004848 <__ssvfscanf_r+0x1424>
 8004470:	b8800117 	ldw	r2,4(r23)
 8004474:	19c00044 	addi	r7,r3,1
 8004478:	b9c00015 	stw	r7,0(r23)
 800447c:	10bfffc4 	addi	r2,r2,-1
 8004480:	b8800115 	stw	r2,4(r23)
 8004484:	18800003 	ldbu	r2,0(r3)
 8004488:	37000044 	addi	fp,r6,1
 800448c:	28800005 	stb	r2,0(r5)
 8004490:	3500e426 	beq	r6,r20,8004824 <__ssvfscanf_r+0x1400>
 8004494:	b8800117 	ldw	r2,4(r23)
 8004498:	00bfee16 	blt	zero,r2,8004454 <__alt_data_end+0xf8004454>
 800449c:	b009883a 	mov	r4,r22
 80044a0:	b80b883a 	mov	r5,r23
 80044a4:	800dde40 	call	800dde4 <__ssrefill_r>
 80044a8:	103fea26 	beq	r2,zero,8004454 <__alt_data_end+0xf8004454>
 80044ac:	e009883a 	mov	r4,fp
 80044b0:	8700dd1e 	bne	r16,fp,8004828 <__ssvfscanf_r+0x1404>
 80044b4:	003e3006 	br	8003d78 <__alt_data_end+0xf8003d78>
 80044b8:	da009c17 	ldw	r8,624(sp)
 80044bc:	e0ffffc4 	addi	r3,fp,-1
 80044c0:	44400017 	ldw	r17,0(r8)
 80044c4:	42c00104 	addi	r11,r8,4
 80044c8:	dac09c15 	stw	r11,624(sp)
 80044cc:	88e9883a 	add	r20,r17,r3
 80044d0:	880b883a 	mov	r5,r17
 80044d4:	00000106 	br	80044dc <__ssvfscanf_r+0x10b8>
 80044d8:	800b883a 	mov	r5,r16
 80044dc:	b8c00017 	ldw	r3,0(r23)
 80044e0:	a9800017 	ldw	r6,0(r21)
 80044e4:	18800003 	ldbu	r2,0(r3)
 80044e8:	3085883a 	add	r2,r6,r2
 80044ec:	10800043 	ldbu	r2,1(r2)
 80044f0:	1080020c 	andi	r2,r2,8
 80044f4:	1000ea1e 	bne	r2,zero,80048a0 <__ssvfscanf_r+0x147c>
 80044f8:	b8800117 	ldw	r2,4(r23)
 80044fc:	19800044 	addi	r6,r3,1
 8004500:	b9800015 	stw	r6,0(r23)
 8004504:	10bfffc4 	addi	r2,r2,-1
 8004508:	b8800115 	stw	r2,4(r23)
 800450c:	18800003 	ldbu	r2,0(r3)
 8004510:	2c000044 	addi	r16,r5,1
 8004514:	8039883a 	mov	fp,r16
 8004518:	28800005 	stb	r2,0(r5)
 800451c:	2d000626 	beq	r5,r20,8004538 <__ssvfscanf_r+0x1114>
 8004520:	b8800117 	ldw	r2,4(r23)
 8004524:	00bfec16 	blt	zero,r2,80044d8 <__alt_data_end+0xf80044d8>
 8004528:	b009883a 	mov	r4,r22
 800452c:	b80b883a 	mov	r5,r23
 8004530:	800dde40 	call	800dde4 <__ssrefill_r>
 8004534:	103fe826 	beq	r2,zero,80044d8 <__alt_data_end+0xf80044d8>
 8004538:	da009f17 	ldw	r8,636(sp)
 800453c:	e463c83a 	sub	r17,fp,r17
 8004540:	9c67883a 	add	r19,r19,r17
 8004544:	42000044 	addi	r8,r8,1
 8004548:	e0000005 	stb	zero,0(fp)
 800454c:	da009f15 	stw	r8,636(sp)
 8004550:	9023883a 	mov	r17,r18
 8004554:	003bf206 	br	8003520 <__alt_data_end+0xf8003520>
 8004558:	014000c4 	movi	r5,3
 800455c:	117db026 	beq	r2,r5,8003c20 <__alt_data_end+0xf8003c20>
 8004560:	01400144 	movi	r5,5
 8004564:	117dae26 	beq	r2,r5,8003c20 <__alt_data_end+0xf8003c20>
 8004568:	003d3306 	br	8003a38 <__alt_data_end+0xf8003a38>
 800456c:	00800084 	movi	r2,2
 8004570:	a0bda41e 	bne	r20,r2,8003c04 <__alt_data_end+0xf8003c04>
 8004574:	050000c4 	movi	r20,3
 8004578:	003d2406 	br	8003a0c <__alt_data_end+0xf8003a0c>
 800457c:	d9c09e17 	ldw	r7,632(sp)
 8004580:	da00a017 	ldw	r8,640(sp)
 8004584:	b009883a 	mov	r4,r22
 8004588:	d9400104 	addi	r5,sp,4
 800458c:	000d883a 	mov	r6,zero
 8004590:	a0000005 	stb	zero,0(r20)
 8004594:	403ee83a 	callr	r8
 8004598:	88c0080c 	andi	r3,r17,32
 800459c:	18008226 	beq	r3,zero,80047a8 <__ssvfscanf_r+0x1384>
 80045a0:	dac09c17 	ldw	r11,624(sp)
 80045a4:	58c00017 	ldw	r3,0(r11)
 80045a8:	5ac00104 	addi	r11,r11,4
 80045ac:	dac09c15 	stw	r11,624(sp)
 80045b0:	18800015 	stw	r2,0(r3)
 80045b4:	da009f17 	ldw	r8,636(sp)
 80045b8:	42000044 	addi	r8,r8,1
 80045bc:	da009f15 	stw	r8,636(sp)
 80045c0:	003f4706 	br	80042e0 <__alt_data_end+0xf80042e0>
 80045c4:	d8c09904 	addi	r3,sp,612
 80045c8:	8400040c 	andi	r16,r16,16
 80045cc:	1809883a 	mov	r4,r3
 80045d0:	000b883a 	mov	r5,zero
 80045d4:	01800204 	movi	r6,8
 80045d8:	d8c09d15 	stw	r3,628(sp)
 80045dc:	8009e780 	call	8009e78 <memset>
 80045e0:	80006c26 	beq	r16,zero,8004794 <__ssvfscanf_r+0x1370>
 80045e4:	dc409b04 	addi	r17,sp,620
 80045e8:	0007883a 	mov	r3,zero
 80045ec:	dc80a115 	stw	r18,644(sp)
 80045f0:	8025883a 	mov	r18,r16
 80045f4:	1821883a 	mov	r16,r3
 80045f8:	b8800017 	ldw	r2,0(r23)
 80045fc:	a8c00017 	ldw	r3,0(r21)
 8004600:	10800003 	ldbu	r2,0(r2)
 8004604:	1885883a 	add	r2,r3,r2
 8004608:	10800043 	ldbu	r2,1(r2)
 800460c:	1080020c 	andi	r2,r2,8
 8004610:	1000011e 	bne	r2,zero,8004618 <__ssvfscanf_r+0x11f4>
 8004614:	e000f51e 	bne	fp,zero,80049ec <__ssvfscanf_r+0x15c8>
 8004618:	9021883a 	mov	r16,r18
 800461c:	dc80a117 	ldw	r18,644(sp)
 8004620:	803bbe1e 	bne	r16,zero,800351c <__alt_data_end+0xf800351c>
 8004624:	dac09f17 	ldw	r11,636(sp)
 8004628:	88000015 	stw	zero,0(r17)
 800462c:	9023883a 	mov	r17,r18
 8004630:	5ac00044 	addi	r11,r11,1
 8004634:	dac09f15 	stw	r11,636(sp)
 8004638:	003bb906 	br	8003520 <__alt_data_end+0xf8003520>
 800463c:	dac09904 	addi	r11,sp,612
 8004640:	8400040c 	andi	r16,r16,16
 8004644:	5809883a 	mov	r4,r11
 8004648:	000b883a 	mov	r5,zero
 800464c:	01800204 	movi	r6,8
 8004650:	dc00a115 	stw	r16,644(sp)
 8004654:	dac09d15 	stw	r11,628(sp)
 8004658:	8009e780 	call	8009e78 <memset>
 800465c:	dc00a117 	ldw	r16,644(sp)
 8004660:	80004726 	beq	r16,zero,8004780 <__ssvfscanf_r+0x135c>
 8004664:	0023883a 	mov	r17,zero
 8004668:	dc00a117 	ldw	r16,644(sp)
 800466c:	0029883a 	mov	r20,zero
 8004670:	dc80a215 	stw	r18,648(sp)
 8004674:	800978c0 	call	800978c <__locale_mb_cur_max>
 8004678:	153dbf26 	beq	r2,r20,8003d78 <__alt_data_end+0xf8003d78>
 800467c:	b8800017 	ldw	r2,0(r23)
 8004680:	b9000117 	ldw	r4,4(r23)
 8004684:	d8c09d17 	ldw	r3,628(sp)
 8004688:	12400003 	ldbu	r9,0(r2)
 800468c:	213fffc4 	addi	r4,r4,-1
 8004690:	10800044 	addi	r2,r2,1
 8004694:	dac00104 	addi	r11,sp,4
 8004698:	b9000115 	stw	r4,4(r23)
 800469c:	b8800015 	stw	r2,0(r23)
 80046a0:	a4800044 	addi	r18,r20,1
 80046a4:	d8c00015 	stw	r3,0(sp)
 80046a8:	5d29883a 	add	r20,r11,r20
 80046ac:	b009883a 	mov	r4,r22
 80046b0:	880b883a 	mov	r5,r17
 80046b4:	580d883a 	mov	r6,r11
 80046b8:	900f883a 	mov	r7,r18
 80046bc:	a2400005 	stb	r9,0(r20)
 80046c0:	80099f80 	call	80099f8 <_mbrtowc_r>
 80046c4:	013fffc4 	movi	r4,-1
 80046c8:	113dab26 	beq	r2,r4,8003d78 <__alt_data_end+0xf8003d78>
 80046cc:	10004f1e 	bne	r2,zero,800480c <__ssvfscanf_r+0x13e8>
 80046d0:	8000011e 	bne	r16,zero,80046d8 <__ssvfscanf_r+0x12b4>
 80046d4:	88000015 	stw	zero,0(r17)
 80046d8:	9ca7883a 	add	r19,r19,r18
 80046dc:	e73fffc4 	addi	fp,fp,-1
 80046e0:	80004e1e 	bne	r16,zero,800481c <__ssvfscanf_r+0x13f8>
 80046e4:	8c400104 	addi	r17,r17,4
 80046e8:	0029883a 	mov	r20,zero
 80046ec:	b8800117 	ldw	r2,4(r23)
 80046f0:	00801c0e 	bge	zero,r2,8004764 <__ssvfscanf_r+0x1340>
 80046f4:	e03fdf1e 	bne	fp,zero,8004674 <__alt_data_end+0xf8004674>
 80046f8:	dc80a217 	ldw	r18,648(sp)
 80046fc:	da00a117 	ldw	r8,644(sp)
 8004700:	403d1e26 	beq	r8,zero,8003b7c <__alt_data_end+0xf8003b7c>
 8004704:	003b8506 	br	800351c <__alt_data_end+0xf800351c>
 8004708:	da009c17 	ldw	r8,624(sp)
 800470c:	40800017 	ldw	r2,0(r8)
 8004710:	42000104 	addi	r8,r8,4
 8004714:	da009c15 	stw	r8,624(sp)
 8004718:	14400015 	stw	r17,0(r2)
 800471c:	10c00115 	stw	r3,4(r2)
 8004720:	003d1606 	br	8003b7c <__alt_data_end+0xf8003b7c>
 8004724:	00be9fc4 	movi	r2,-1409
 8004728:	88a2703a 	and	r17,r17,r2
 800472c:	003ed706 	br	800428c <__alt_data_end+0xf800428c>
 8004730:	8821883a 	mov	r16,r17
 8004734:	00bfbfc4 	movi	r2,-257
 8004738:	9023883a 	mov	r17,r18
 800473c:	e00f883a 	mov	r7,fp
 8004740:	4025883a 	mov	r18,r8
 8004744:	80a0703a 	and	r16,r16,r2
 8004748:	003cc106 	br	8003a50 <__alt_data_end+0xf8003a50>
 800474c:	8941c00c 	andi	r5,r17,1792
 8004750:	0081c004 	movi	r2,1792
 8004754:	28bd2b1e 	bne	r5,r2,8003c04 <__alt_data_end+0xf8003c04>
 8004758:	88e2703a 	and	r17,r17,r3
 800475c:	05000044 	movi	r20,1
 8004760:	003caa06 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8004764:	b009883a 	mov	r4,r22
 8004768:	b80b883a 	mov	r5,r23
 800476c:	800dde40 	call	800dde4 <__ssrefill_r>
 8004770:	103fe026 	beq	r2,zero,80046f4 <__alt_data_end+0xf80046f4>
 8004774:	dc80a217 	ldw	r18,648(sp)
 8004778:	a03fe026 	beq	r20,zero,80046fc <__alt_data_end+0xf80046fc>
 800477c:	003d7e06 	br	8003d78 <__alt_data_end+0xf8003d78>
 8004780:	da009c17 	ldw	r8,624(sp)
 8004784:	44400017 	ldw	r17,0(r8)
 8004788:	42000104 	addi	r8,r8,4
 800478c:	da009c15 	stw	r8,624(sp)
 8004790:	003fb506 	br	8004668 <__alt_data_end+0xf8004668>
 8004794:	da009c17 	ldw	r8,624(sp)
 8004798:	44400017 	ldw	r17,0(r8)
 800479c:	42000104 	addi	r8,r8,4
 80047a0:	da009c15 	stw	r8,624(sp)
 80047a4:	003f9006 	br	80045e8 <__alt_data_end+0xf80045e8>
 80047a8:	88c0010c 	andi	r3,r17,4
 80047ac:	18006726 	beq	r3,zero,800494c <__ssvfscanf_r+0x1528>
 80047b0:	da009c17 	ldw	r8,624(sp)
 80047b4:	40c00017 	ldw	r3,0(r8)
 80047b8:	42000104 	addi	r8,r8,4
 80047bc:	da009c15 	stw	r8,624(sp)
 80047c0:	1880000d 	sth	r2,0(r3)
 80047c4:	003f7b06 	br	80045b4 <__alt_data_end+0xf80045b4>
 80047c8:	da00a417 	ldw	r8,656(sp)
 80047cc:	000d883a 	mov	r6,zero
 80047d0:	01c00284 	movi	r7,10
 80047d4:	b009883a 	mov	r4,r22
 80047d8:	41400044 	addi	r5,r8,1
 80047dc:	800d1540 	call	800d154 <_strtol_r>
 80047e0:	dac0a217 	ldw	r11,648(sp)
 80047e4:	d9c0a417 	ldw	r7,656(sp)
 80047e8:	12cdc83a 	sub	r6,r2,r11
 80047ec:	d88055c4 	addi	r2,sp,343
 80047f0:	38800136 	bltu	r7,r2,80047f8 <__ssvfscanf_r+0x13d4>
 80047f4:	d9c05584 	addi	r7,sp,342
 80047f8:	014200b4 	movhi	r5,2050
 80047fc:	29722004 	addi	r5,r5,-14208
 8004800:	3809883a 	mov	r4,r7
 8004804:	800b9e40 	call	800b9e4 <sprintf>
 8004808:	003ccd06 	br	8003b40 <__alt_data_end+0xf8003b40>
 800480c:	017fff84 	movi	r5,-2
 8004810:	117fb11e 	bne	r2,r5,80046d8 <__alt_data_end+0xf80046d8>
 8004814:	9029883a 	mov	r20,r18
 8004818:	003fb406 	br	80046ec <__alt_data_end+0xf80046ec>
 800481c:	0029883a 	mov	r20,zero
 8004820:	003fb206 	br	80046ec <__alt_data_end+0xf80046ec>
 8004824:	e009883a 	mov	r4,fp
 8004828:	2421c83a 	sub	r16,r4,r16
 800482c:	803b4026 	beq	r16,zero,8003530 <__alt_data_end+0xf8003530>
 8004830:	dac09f17 	ldw	r11,636(sp)
 8004834:	20000005 	stb	zero,0(r4)
 8004838:	9c27883a 	add	r19,r19,r16
 800483c:	5ac00044 	addi	r11,r11,1
 8004840:	dac09f15 	stw	r11,636(sp)
 8004844:	003dea06 	br	8003ff0 <__alt_data_end+0xf8003ff0>
 8004848:	2809883a 	mov	r4,r5
 800484c:	003ff606 	br	8004828 <__alt_data_end+0xf8004828>
 8004850:	803d4926 	beq	r16,zero,8003d78 <__alt_data_end+0xf8003d78>
 8004854:	9c27883a 	add	r19,r19,r16
 8004858:	003de506 	br	8003ff0 <__alt_data_end+0xf8003ff0>
 800485c:	da009c17 	ldw	r8,624(sp)
 8004860:	ddc00015 	stw	r23,0(sp)
 8004864:	b009883a 	mov	r4,r22
 8004868:	41400017 	ldw	r5,0(r8)
 800486c:	01800044 	movi	r6,1
 8004870:	e00f883a 	mov	r7,fp
 8004874:	800de540 	call	800de54 <_sfread_r>
 8004878:	dac09c17 	ldw	r11,624(sp)
 800487c:	58c00104 	addi	r3,r11,4
 8004880:	103d3d26 	beq	r2,zero,8003d78 <__alt_data_end+0xf8003d78>
 8004884:	da009f17 	ldw	r8,636(sp)
 8004888:	14e7883a 	add	r19,r2,r19
 800488c:	d8c09c15 	stw	r3,624(sp)
 8004890:	42000044 	addi	r8,r8,1
 8004894:	da009f15 	stw	r8,636(sp)
 8004898:	9023883a 	mov	r17,r18
 800489c:	003b2006 	br	8003520 <__alt_data_end+0xf8003520>
 80048a0:	2839883a 	mov	fp,r5
 80048a4:	003f2406 	br	8004538 <__alt_data_end+0xf8004538>
 80048a8:	b009883a 	mov	r4,r22
 80048ac:	b80b883a 	mov	r5,r23
 80048b0:	800dde40 	call	800dde4 <__ssrefill_r>
 80048b4:	103bad26 	beq	r2,zero,800376c <__alt_data_end+0xf800376c>
 80048b8:	003d2f06 	br	8003d78 <__alt_data_end+0xf8003d78>
 80048bc:	a17fffc7 	ldb	r5,-1(r20)
 80048c0:	b009883a 	mov	r4,r22
 80048c4:	b80d883a 	mov	r6,r23
 80048c8:	a53fffc4 	addi	r20,r20,-1
 80048cc:	800dcec0 	call	800dcec <_sungetc_r>
 80048d0:	003e7f06 	br	80042d0 <__alt_data_end+0xf80042d0>
 80048d4:	90c00083 	ldbu	r3,2(r18)
 80048d8:	84000094 	ori	r16,r16,2
 80048dc:	94800084 	addi	r18,r18,2
 80048e0:	003b1d06 	br	8003558 <__alt_data_end+0xf8003558>
 80048e4:	da009d17 	ldw	r8,628(sp)
 80048e8:	dac0a117 	ldw	r11,644(sp)
 80048ec:	42c5c83a 	sub	r2,r8,r11
 80048f0:	008dc83a 	sub	r6,zero,r2
 80048f4:	103fbd1e 	bne	r2,zero,80047ec <__alt_data_end+0xf80047ec>
 80048f8:	003c9106 	br	8003b40 <__alt_data_end+0xf8003b40>
 80048fc:	80e0b03a 	or	r16,r16,r3
 8004900:	003d3d06 	br	8003df8 <__alt_data_end+0xf8003df8>
 8004904:	8080004c 	andi	r2,r16,1
 8004908:	10000a1e 	bne	r2,zero,8004934 <__ssvfscanf_r+0x1510>
 800490c:	8400008c 	andi	r16,r16,2
 8004910:	80000826 	beq	r16,zero,8004934 <__ssvfscanf_r+0x1510>
 8004914:	dac09c17 	ldw	r11,624(sp)
 8004918:	9807d7fa 	srai	r3,r19,31
 800491c:	58800017 	ldw	r2,0(r11)
 8004920:	5ac00104 	addi	r11,r11,4
 8004924:	dac09c15 	stw	r11,624(sp)
 8004928:	14c00015 	stw	r19,0(r2)
 800492c:	10c00115 	stw	r3,4(r2)
 8004930:	003afa06 	br	800351c <__alt_data_end+0xf800351c>
 8004934:	da009c17 	ldw	r8,624(sp)
 8004938:	40800017 	ldw	r2,0(r8)
 800493c:	42000104 	addi	r8,r8,4
 8004940:	da009c15 	stw	r8,624(sp)
 8004944:	14c00015 	stw	r19,0(r2)
 8004948:	003af406 	br	800351c <__alt_data_end+0xf800351c>
 800494c:	88c0004c 	andi	r3,r17,1
 8004950:	183f131e 	bne	r3,zero,80045a0 <__alt_data_end+0xf80045a0>
 8004954:	88c0008c 	andi	r3,r17,2
 8004958:	183f1126 	beq	r3,zero,80045a0 <__alt_data_end+0xf80045a0>
 800495c:	da00a017 	ldw	r8,640(sp)
 8004960:	02c20074 	movhi	r11,2049
 8004964:	5af5bb04 	addi	r11,r11,-10516
 8004968:	b009883a 	mov	r4,r22
 800496c:	d9400104 	addi	r5,sp,4
 8004970:	000d883a 	mov	r6,zero
 8004974:	d9c09e17 	ldw	r7,632(sp)
 8004978:	42c08226 	beq	r8,r11,8004b84 <__ssvfscanf_r+0x1760>
 800497c:	800d3d80 	call	800d3d8 <_strtoll_r>
 8004980:	da009c17 	ldw	r8,624(sp)
 8004984:	41000017 	ldw	r4,0(r8)
 8004988:	42000104 	addi	r8,r8,4
 800498c:	da009c15 	stw	r8,624(sp)
 8004990:	20800015 	stw	r2,0(r4)
 8004994:	20c00115 	stw	r3,4(r4)
 8004998:	003f0606 	br	80045b4 <__alt_data_end+0xf80045b4>
 800499c:	da009c17 	ldw	r8,624(sp)
 80049a0:	180b883a 	mov	r5,r3
 80049a4:	8809883a 	mov	r4,r17
 80049a8:	45000017 	ldw	r20,0(r8)
 80049ac:	44000104 	addi	r16,r8,4
 80049b0:	d8c0aa15 	stw	r3,680(sp)
 80049b4:	800b8500 	call	800b850 <__fpclassifyd>
 80049b8:	d8c0aa17 	ldw	r3,680(sp)
 80049bc:	10000626 	beq	r2,zero,80049d8 <__ssvfscanf_r+0x15b4>
 80049c0:	8809883a 	mov	r4,r17
 80049c4:	180b883a 	mov	r5,r3
 80049c8:	80181200 	call	8018120 <__truncdfsf2>
 80049cc:	a0800015 	stw	r2,0(r20)
 80049d0:	dc009c15 	stw	r16,624(sp)
 80049d4:	003c6906 	br	8003b7c <__alt_data_end+0xf8003b7c>
 80049d8:	0009883a 	mov	r4,zero
 80049dc:	800b9840 	call	800b984 <nanf>
 80049e0:	a0800015 	stw	r2,0(r20)
 80049e4:	dc009c15 	stw	r16,624(sp)
 80049e8:	003c6406 	br	8003b7c <__alt_data_end+0xf8003b7c>
 80049ec:	800978c0 	call	800978c <__locale_mb_cur_max>
 80049f0:	143ce126 	beq	r2,r16,8003d78 <__alt_data_end+0xf8003d78>
 80049f4:	b8800017 	ldw	r2,0(r23)
 80049f8:	b9000117 	ldw	r4,4(r23)
 80049fc:	d8c09d17 	ldw	r3,628(sp)
 8004a00:	12000003 	ldbu	r8,0(r2)
 8004a04:	213fffc4 	addi	r4,r4,-1
 8004a08:	10800044 	addi	r2,r2,1
 8004a0c:	dac00104 	addi	r11,sp,4
 8004a10:	b9000115 	stw	r4,4(r23)
 8004a14:	b8800015 	stw	r2,0(r23)
 8004a18:	85000044 	addi	r20,r16,1
 8004a1c:	d8c00015 	stw	r3,0(sp)
 8004a20:	5c21883a 	add	r16,r11,r16
 8004a24:	b009883a 	mov	r4,r22
 8004a28:	880b883a 	mov	r5,r17
 8004a2c:	580d883a 	mov	r6,r11
 8004a30:	a00f883a 	mov	r7,r20
 8004a34:	82000005 	stb	r8,0(r16)
 8004a38:	80099f80 	call	80099f8 <_mbrtowc_r>
 8004a3c:	013fffc4 	movi	r4,-1
 8004a40:	113ccd26 	beq	r2,r4,8003d78 <__alt_data_end+0xf8003d78>
 8004a44:	1000131e 	bne	r2,zero,8004a94 <__ssvfscanf_r+0x1670>
 8004a48:	88000015 	stw	zero,0(r17)
 8004a4c:	0009883a 	mov	r4,zero
 8004a50:	80096d40 	call	80096d4 <iswspace>
 8004a54:	10001d26 	beq	r2,zero,8004acc <__ssvfscanf_r+0x16a8>
 8004a58:	9021883a 	mov	r16,r18
 8004a5c:	dc80a117 	ldw	r18,644(sp)
 8004a60:	a03eef26 	beq	r20,zero,8004620 <__alt_data_end+0xf8004620>
 8004a64:	a53fffc4 	addi	r20,r20,-1
 8004a68:	da000104 	addi	r8,sp,4
 8004a6c:	4505883a 	add	r2,r8,r20
 8004a70:	11400003 	ldbu	r5,0(r2)
 8004a74:	b009883a 	mov	r4,r22
 8004a78:	b80d883a 	mov	r6,r23
 8004a7c:	800dcec0 	call	800dcec <_sungetc_r>
 8004a80:	a03ff81e 	bne	r20,zero,8004a64 <__alt_data_end+0xf8004a64>
 8004a84:	003ee606 	br	8004620 <__alt_data_end+0xf8004620>
 8004a88:	88e2703a 	and	r17,r17,r3
 8004a8c:	04800044 	movi	r18,1
 8004a90:	003bde06 	br	8003a0c <__alt_data_end+0xf8003a0c>
 8004a94:	017fff84 	movi	r5,-2
 8004a98:	1140121e 	bne	r2,r5,8004ae4 <__ssvfscanf_r+0x16c0>
 8004a9c:	a021883a 	mov	r16,r20
 8004aa0:	b8800117 	ldw	r2,4(r23)
 8004aa4:	00bed416 	blt	zero,r2,80045f8 <__alt_data_end+0xf80045f8>
 8004aa8:	b009883a 	mov	r4,r22
 8004aac:	b80b883a 	mov	r5,r23
 8004ab0:	800dde40 	call	800dde4 <__ssrefill_r>
 8004ab4:	103ed026 	beq	r2,zero,80045f8 <__alt_data_end+0xf80045f8>
 8004ab8:	8007883a 	mov	r3,r16
 8004abc:	9021883a 	mov	r16,r18
 8004ac0:	dc80a117 	ldw	r18,644(sp)
 8004ac4:	183cac1e 	bne	r3,zero,8003d78 <__alt_data_end+0xf8003d78>
 8004ac8:	003ed506 	br	8004620 <__alt_data_end+0xf8004620>
 8004acc:	9d27883a 	add	r19,r19,r20
 8004ad0:	e73fffc4 	addi	fp,fp,-1
 8004ad4:	9000051e 	bne	r18,zero,8004aec <__ssvfscanf_r+0x16c8>
 8004ad8:	8c400104 	addi	r17,r17,4
 8004adc:	0021883a 	mov	r16,zero
 8004ae0:	003fef06 	br	8004aa0 <__alt_data_end+0xf8004aa0>
 8004ae4:	89000017 	ldw	r4,0(r17)
 8004ae8:	003fd906 	br	8004a50 <__alt_data_end+0xf8004a50>
 8004aec:	0021883a 	mov	r16,zero
 8004af0:	003feb06 	br	8004aa0 <__alt_data_end+0xf8004aa0>
 8004af4:	d9000104 	addi	r4,sp,4
 8004af8:	b839883a 	mov	fp,r23
 8004afc:	3821883a 	mov	r16,r7
 8004b00:	21fa8b2e 	bgeu	r4,r7,8003530 <__alt_data_end+0xf8003530>
 8004b04:	843fffc4 	addi	r16,r16,-1
 8004b08:	81400007 	ldb	r5,0(r16)
 8004b0c:	b009883a 	mov	r4,r22
 8004b10:	e00d883a 	mov	r6,fp
 8004b14:	800dcec0 	call	800dcec <_sungetc_r>
 8004b18:	d9400104 	addi	r5,sp,4
 8004b1c:	817ff91e 	bne	r16,r5,8004b04 <__alt_data_end+0xf8004b04>
 8004b20:	003a8306 	br	8003530 <__alt_data_end+0xf8003530>
 8004b24:	da000104 	addi	r8,sp,4
 8004b28:	b839883a 	mov	fp,r23
 8004b2c:	3821883a 	mov	r16,r7
 8004b30:	41fa7f2e 	bgeu	r8,r7,8003530 <__alt_data_end+0xf8003530>
 8004b34:	843fffc4 	addi	r16,r16,-1
 8004b38:	81400007 	ldb	r5,0(r16)
 8004b3c:	b009883a 	mov	r4,r22
 8004b40:	e00d883a 	mov	r6,fp
 8004b44:	800dcec0 	call	800dcec <_sungetc_r>
 8004b48:	dac00104 	addi	r11,sp,4
 8004b4c:	82fff91e 	bne	r16,r11,8004b34 <__alt_data_end+0xf8004b34>
 8004b50:	003a7706 	br	8003530 <__alt_data_end+0xf8003530>
 8004b54:	d8800104 	addi	r2,sp,4
 8004b58:	b839883a 	mov	fp,r23
 8004b5c:	382f883a 	mov	r23,r7
 8004b60:	11fa732e 	bgeu	r2,r7,8003530 <__alt_data_end+0xf8003530>
 8004b64:	bdffffc4 	addi	r23,r23,-1
 8004b68:	b9400007 	ldb	r5,0(r23)
 8004b6c:	b009883a 	mov	r4,r22
 8004b70:	e00d883a 	mov	r6,fp
 8004b74:	800dcec0 	call	800dcec <_sungetc_r>
 8004b78:	d8c00104 	addi	r3,sp,4
 8004b7c:	b8fff91e 	bne	r23,r3,8004b64 <__alt_data_end+0xf8004b64>
 8004b80:	003a6b06 	br	8003530 <__alt_data_end+0xf8003530>
 8004b84:	800d9980 	call	800d998 <_strtoull_r>
 8004b88:	003f7d06 	br	8004980 <__alt_data_end+0xf8004980>

08004b8c <___vfprintf_internal_r>:
 8004b8c:	defeb604 	addi	sp,sp,-1320
 8004b90:	dfc14915 	stw	ra,1316(sp)
 8004b94:	ddc14715 	stw	r23,1308(sp)
 8004b98:	dd814615 	stw	r22,1304(sp)
 8004b9c:	282f883a 	mov	r23,r5
 8004ba0:	202d883a 	mov	r22,r4
 8004ba4:	d9812a15 	stw	r6,1192(sp)
 8004ba8:	d9c12d15 	stw	r7,1204(sp)
 8004bac:	df014815 	stw	fp,1312(sp)
 8004bb0:	dd414515 	stw	r21,1300(sp)
 8004bb4:	dd014415 	stw	r20,1296(sp)
 8004bb8:	dcc14315 	stw	r19,1292(sp)
 8004bbc:	dc814215 	stw	r18,1288(sp)
 8004bc0:	dc414115 	stw	r17,1284(sp)
 8004bc4:	dc014015 	stw	r16,1280(sp)
 8004bc8:	80097b00 	call	80097b0 <_localeconv_r>
 8004bcc:	10800017 	ldw	r2,0(r2)
 8004bd0:	1009883a 	mov	r4,r2
 8004bd4:	d8813515 	stw	r2,1236(sp)
 8004bd8:	800338c0 	call	800338c <strlen>
 8004bdc:	d8813815 	stw	r2,1248(sp)
 8004be0:	b0000226 	beq	r22,zero,8004bec <___vfprintf_internal_r+0x60>
 8004be4:	b0800e17 	ldw	r2,56(r22)
 8004be8:	10010426 	beq	r2,zero,8004ffc <___vfprintf_internal_r+0x470>
 8004bec:	b8c0030b 	ldhu	r3,12(r23)
 8004bf0:	1908000c 	andi	r4,r3,8192
 8004bf4:	1805883a 	mov	r2,r3
 8004bf8:	2000071e 	bne	r4,zero,8004c18 <___vfprintf_internal_r+0x8c>
 8004bfc:	b9001917 	ldw	r4,100(r23)
 8004c00:	18880014 	ori	r2,r3,8192
 8004c04:	00f7ffc4 	movi	r3,-8193
 8004c08:	20c8703a 	and	r4,r4,r3
 8004c0c:	b880030d 	sth	r2,12(r23)
 8004c10:	1007883a 	mov	r3,r2
 8004c14:	b9001915 	stw	r4,100(r23)
 8004c18:	1100020c 	andi	r4,r2,8
 8004c1c:	2000a726 	beq	r4,zero,8004ebc <___vfprintf_internal_r+0x330>
 8004c20:	b9000417 	ldw	r4,16(r23)
 8004c24:	2000a526 	beq	r4,zero,8004ebc <___vfprintf_internal_r+0x330>
 8004c28:	1080068c 	andi	r2,r2,26
 8004c2c:	01000284 	movi	r4,10
 8004c30:	1100ab26 	beq	r2,r4,8004ee0 <___vfprintf_internal_r+0x354>
 8004c34:	dac10e04 	addi	r11,sp,1080
 8004c38:	db010dc4 	addi	r12,sp,1079
 8004c3c:	d8800404 	addi	r2,sp,16
 8004c40:	050200b4 	movhi	r20,2050
 8004c44:	dac12815 	stw	r11,1184(sp)
 8004c48:	5b17c83a 	sub	r11,r11,r12
 8004c4c:	a5323a84 	addi	r20,r20,-14102
 8004c50:	db012915 	stw	r12,1188(sp)
 8004c54:	d8811e15 	stw	r2,1144(sp)
 8004c58:	d8012015 	stw	zero,1152(sp)
 8004c5c:	d8011f15 	stw	zero,1148(sp)
 8004c60:	d8013315 	stw	zero,1228(sp)
 8004c64:	d8013715 	stw	zero,1244(sp)
 8004c68:	d8013915 	stw	zero,1252(sp)
 8004c6c:	d8013b15 	stw	zero,1260(sp)
 8004c70:	d8013a15 	stw	zero,1256(sp)
 8004c74:	d8012f15 	stw	zero,1212(sp)
 8004c78:	1011883a 	mov	r8,r2
 8004c7c:	dac13c15 	stw	r11,1264(sp)
 8004c80:	db012a17 	ldw	r12,1192(sp)
 8004c84:	60800007 	ldb	r2,0(r12)
 8004c88:	1000df26 	beq	r2,zero,8005008 <___vfprintf_internal_r+0x47c>
 8004c8c:	00c00944 	movi	r3,37
 8004c90:	10c0dd26 	beq	r2,r3,8005008 <___vfprintf_internal_r+0x47c>
 8004c94:	6021883a 	mov	r16,r12
 8004c98:	00000106 	br	8004ca0 <___vfprintf_internal_r+0x114>
 8004c9c:	10c08426 	beq	r2,r3,8004eb0 <___vfprintf_internal_r+0x324>
 8004ca0:	84000044 	addi	r16,r16,1
 8004ca4:	80800007 	ldb	r2,0(r16)
 8004ca8:	103ffc1e 	bne	r2,zero,8004c9c <__alt_data_end+0xf8004c9c>
 8004cac:	dac12a17 	ldw	r11,1192(sp)
 8004cb0:	82e3c83a 	sub	r17,r16,r11
 8004cb4:	88000f26 	beq	r17,zero,8004cf4 <___vfprintf_internal_r+0x168>
 8004cb8:	d8c12017 	ldw	r3,1152(sp)
 8004cbc:	d8811f17 	ldw	r2,1148(sp)
 8004cc0:	dac12a17 	ldw	r11,1192(sp)
 8004cc4:	1c47883a 	add	r3,r3,r17
 8004cc8:	10800044 	addi	r2,r2,1
 8004ccc:	d8c12015 	stw	r3,1152(sp)
 8004cd0:	42c00015 	stw	r11,0(r8)
 8004cd4:	44400115 	stw	r17,4(r8)
 8004cd8:	d8811f15 	stw	r2,1148(sp)
 8004cdc:	00c001c4 	movi	r3,7
 8004ce0:	1880b416 	blt	r3,r2,8004fb4 <___vfprintf_internal_r+0x428>
 8004ce4:	42000204 	addi	r8,r8,8
 8004ce8:	db012f17 	ldw	r12,1212(sp)
 8004cec:	6459883a 	add	r12,r12,r17
 8004cf0:	db012f15 	stw	r12,1212(sp)
 8004cf4:	80800007 	ldb	r2,0(r16)
 8004cf8:	1000b526 	beq	r2,zero,8004fd0 <___vfprintf_internal_r+0x444>
 8004cfc:	80800044 	addi	r2,r16,1
 8004d00:	84000047 	ldb	r16,1(r16)
 8004d04:	d8012785 	stb	zero,1182(sp)
 8004d08:	000d883a 	mov	r6,zero
 8004d0c:	027fffc4 	movi	r9,-1
 8004d10:	d8012e15 	stw	zero,1208(sp)
 8004d14:	0023883a 	mov	r17,zero
 8004d18:	01001604 	movi	r4,88
 8004d1c:	01400244 	movi	r5,9
 8004d20:	02800a84 	movi	r10,42
 8004d24:	01c01b04 	movi	r7,108
 8004d28:	10c00044 	addi	r3,r2,1
 8004d2c:	80bff804 	addi	r2,r16,-32
 8004d30:	2082f236 	bltu	r4,r2,80058fc <___vfprintf_internal_r+0xd70>
 8004d34:	100490ba 	slli	r2,r2,2
 8004d38:	02c20034 	movhi	r11,2048
 8004d3c:	5ad35304 	addi	r11,r11,19788
 8004d40:	12c5883a 	add	r2,r2,r11
 8004d44:	10800017 	ldw	r2,0(r2)
 8004d48:	1000683a 	jmp	r2
 8004d4c:	08005744 	addi	zero,at,349
 8004d50:	080058fc 	xorhi	zero,at,355
 8004d54:	080058fc 	xorhi	zero,at,355
 8004d58:	08005764 	muli	zero,at,349
 8004d5c:	080058fc 	xorhi	zero,at,355
 8004d60:	080058fc 	xorhi	zero,at,355
 8004d64:	080058fc 	xorhi	zero,at,355
 8004d68:	080058fc 	xorhi	zero,at,355
 8004d6c:	080058fc 	xorhi	zero,at,355
 8004d70:	080058fc 	xorhi	zero,at,355
 8004d74:	080058c0 	call	80058c <__alt_mem_epcs+0x80058c>
 8004d78:	080058ec 	andhi	zero,at,355
 8004d7c:	080058fc 	xorhi	zero,at,355
 8004d80:	08005010 	cmplti	zero,at,320
 8004d84:	08005020 	cmpeqi	zero,at,320
 8004d88:	080058fc 	xorhi	zero,at,355
 8004d8c:	08005060 	cmpeqi	zero,at,321
 8004d90:	08005554 	ori	zero,at,341
 8004d94:	08005554 	ori	zero,at,341
 8004d98:	08005554 	ori	zero,at,341
 8004d9c:	08005554 	ori	zero,at,341
 8004da0:	08005554 	ori	zero,at,341
 8004da4:	08005554 	ori	zero,at,341
 8004da8:	08005554 	ori	zero,at,341
 8004dac:	08005554 	ori	zero,at,341
 8004db0:	08005554 	ori	zero,at,341
 8004db4:	080058fc 	xorhi	zero,at,355
 8004db8:	080058fc 	xorhi	zero,at,355
 8004dbc:	080058fc 	xorhi	zero,at,355
 8004dc0:	080058fc 	xorhi	zero,at,355
 8004dc4:	080058fc 	xorhi	zero,at,355
 8004dc8:	080058fc 	xorhi	zero,at,355
 8004dcc:	080058fc 	xorhi	zero,at,355
 8004dd0:	080058fc 	xorhi	zero,at,355
 8004dd4:	080058fc 	xorhi	zero,at,355
 8004dd8:	080058fc 	xorhi	zero,at,355
 8004ddc:	08005588 	cmpgei	zero,at,342
 8004de0:	08005070 	cmpltui	zero,at,321
 8004de4:	080058fc 	xorhi	zero,at,355
 8004de8:	08005070 	cmpltui	zero,at,321
 8004dec:	080058fc 	xorhi	zero,at,355
 8004df0:	080058fc 	xorhi	zero,at,355
 8004df4:	080058fc 	xorhi	zero,at,355
 8004df8:	080058fc 	xorhi	zero,at,355
 8004dfc:	08005114 	ori	zero,at,324
 8004e00:	080058fc 	xorhi	zero,at,355
 8004e04:	080058fc 	xorhi	zero,at,355
 8004e08:	08005124 	muli	zero,at,324
 8004e0c:	080058fc 	xorhi	zero,at,355
 8004e10:	080058fc 	xorhi	zero,at,355
 8004e14:	080058fc 	xorhi	zero,at,355
 8004e18:	080058fc 	xorhi	zero,at,355
 8004e1c:	080058fc 	xorhi	zero,at,355
 8004e20:	08005520 	cmpeqi	zero,at,340
 8004e24:	080058fc 	xorhi	zero,at,355
 8004e28:	080058fc 	xorhi	zero,at,355
 8004e2c:	080055d0 	cmplti	zero,at,343
 8004e30:	080058fc 	xorhi	zero,at,355
 8004e34:	080058fc 	xorhi	zero,at,355
 8004e38:	080058fc 	xorhi	zero,at,355
 8004e3c:	080058fc 	xorhi	zero,at,355
 8004e40:	080058fc 	xorhi	zero,at,355
 8004e44:	080058fc 	xorhi	zero,at,355
 8004e48:	080058fc 	xorhi	zero,at,355
 8004e4c:	080058fc 	xorhi	zero,at,355
 8004e50:	080058fc 	xorhi	zero,at,355
 8004e54:	080058fc 	xorhi	zero,at,355
 8004e58:	080057c4 	addi	zero,at,351
 8004e5c:	08005774 	orhi	zero,at,349
 8004e60:	08005070 	cmpltui	zero,at,321
 8004e64:	08005070 	cmpltui	zero,at,321
 8004e68:	08005070 	cmpltui	zero,at,321
 8004e6c:	080057b4 	orhi	zero,at,350
 8004e70:	08005774 	orhi	zero,at,349
 8004e74:	080058fc 	xorhi	zero,at,355
 8004e78:	080058fc 	xorhi	zero,at,355
 8004e7c:	080056bc 	xorhi	zero,at,346
 8004e80:	080058fc 	xorhi	zero,at,355
 8004e84:	080056d0 	cmplti	zero,at,347
 8004e88:	08005704 	addi	zero,at,348
 8004e8c:	08005804 	addi	zero,at,352
 8004e90:	0800562c 	andhi	zero,at,344
 8004e94:	080058fc 	xorhi	zero,at,355
 8004e98:	0800584c 	andi	zero,at,353
 8004e9c:	080058fc 	xorhi	zero,at,355
 8004ea0:	0800563c 	xorhi	zero,at,344
 8004ea4:	080058fc 	xorhi	zero,at,355
 8004ea8:	080058fc 	xorhi	zero,at,355
 8004eac:	0800567c 	xorhi	zero,at,345
 8004eb0:	db012a17 	ldw	r12,1192(sp)
 8004eb4:	8323c83a 	sub	r17,r16,r12
 8004eb8:	003f7e06 	br	8004cb4 <__alt_data_end+0xf8004cb4>
 8004ebc:	b009883a 	mov	r4,r22
 8004ec0:	b80b883a 	mov	r5,r23
 8004ec4:	8006c080 	call	8006c08 <__swsetup_r>
 8004ec8:	10002d1e 	bne	r2,zero,8004f80 <___vfprintf_internal_r+0x3f4>
 8004ecc:	b8c0030b 	ldhu	r3,12(r23)
 8004ed0:	01000284 	movi	r4,10
 8004ed4:	1805883a 	mov	r2,r3
 8004ed8:	1080068c 	andi	r2,r2,26
 8004edc:	113f551e 	bne	r2,r4,8004c34 <__alt_data_end+0xf8004c34>
 8004ee0:	b880038b 	ldhu	r2,14(r23)
 8004ee4:	113fffcc 	andi	r4,r2,65535
 8004ee8:	2120001c 	xori	r4,r4,32768
 8004eec:	21200004 	addi	r4,r4,-32768
 8004ef0:	203f5016 	blt	r4,zero,8004c34 <__alt_data_end+0xf8004c34>
 8004ef4:	bac01917 	ldw	r11,100(r23)
 8004ef8:	ba800717 	ldw	r10,28(r23)
 8004efc:	ba400917 	ldw	r9,36(r23)
 8004f00:	d9812a17 	ldw	r6,1192(sp)
 8004f04:	d9c12d17 	ldw	r7,1204(sp)
 8004f08:	02010004 	movi	r8,1024
 8004f0c:	18ffff4c 	andi	r3,r3,65533
 8004f10:	d881078d 	sth	r2,1054(sp)
 8004f14:	b009883a 	mov	r4,r22
 8004f18:	d8800404 	addi	r2,sp,16
 8004f1c:	d9410404 	addi	r5,sp,1040
 8004f20:	d8c1070d 	sth	r3,1052(sp)
 8004f24:	dac11d15 	stw	r11,1140(sp)
 8004f28:	da810b15 	stw	r10,1068(sp)
 8004f2c:	da410d15 	stw	r9,1076(sp)
 8004f30:	d8810415 	stw	r2,1040(sp)
 8004f34:	d8810815 	stw	r2,1056(sp)
 8004f38:	da010615 	stw	r8,1048(sp)
 8004f3c:	da010915 	stw	r8,1060(sp)
 8004f40:	d8010a15 	stw	zero,1064(sp)
 8004f44:	8004b8c0 	call	8004b8c <___vfprintf_internal_r>
 8004f48:	1021883a 	mov	r16,r2
 8004f4c:	10000416 	blt	r2,zero,8004f60 <___vfprintf_internal_r+0x3d4>
 8004f50:	b009883a 	mov	r4,r22
 8004f54:	d9410404 	addi	r5,sp,1040
 8004f58:	80086b40 	call	80086b4 <_fflush_r>
 8004f5c:	1006ee1e 	bne	r2,zero,8006b18 <___vfprintf_internal_r+0x1f8c>
 8004f60:	d881070b 	ldhu	r2,1052(sp)
 8004f64:	1080100c 	andi	r2,r2,64
 8004f68:	10000326 	beq	r2,zero,8004f78 <___vfprintf_internal_r+0x3ec>
 8004f6c:	b880030b 	ldhu	r2,12(r23)
 8004f70:	10801014 	ori	r2,r2,64
 8004f74:	b880030d 	sth	r2,12(r23)
 8004f78:	8005883a 	mov	r2,r16
 8004f7c:	00000106 	br	8004f84 <___vfprintf_internal_r+0x3f8>
 8004f80:	00bfffc4 	movi	r2,-1
 8004f84:	dfc14917 	ldw	ra,1316(sp)
 8004f88:	df014817 	ldw	fp,1312(sp)
 8004f8c:	ddc14717 	ldw	r23,1308(sp)
 8004f90:	dd814617 	ldw	r22,1304(sp)
 8004f94:	dd414517 	ldw	r21,1300(sp)
 8004f98:	dd014417 	ldw	r20,1296(sp)
 8004f9c:	dcc14317 	ldw	r19,1292(sp)
 8004fa0:	dc814217 	ldw	r18,1288(sp)
 8004fa4:	dc414117 	ldw	r17,1284(sp)
 8004fa8:	dc014017 	ldw	r16,1280(sp)
 8004fac:	dec14a04 	addi	sp,sp,1320
 8004fb0:	f800283a 	ret
 8004fb4:	b009883a 	mov	r4,r22
 8004fb8:	b80b883a 	mov	r5,r23
 8004fbc:	d9811e04 	addi	r6,sp,1144
 8004fc0:	80112f00 	call	80112f0 <__sprint_r>
 8004fc4:	1000081e 	bne	r2,zero,8004fe8 <___vfprintf_internal_r+0x45c>
 8004fc8:	da000404 	addi	r8,sp,16
 8004fcc:	003f4606 	br	8004ce8 <__alt_data_end+0xf8004ce8>
 8004fd0:	d8812017 	ldw	r2,1152(sp)
 8004fd4:	10000426 	beq	r2,zero,8004fe8 <___vfprintf_internal_r+0x45c>
 8004fd8:	b009883a 	mov	r4,r22
 8004fdc:	b80b883a 	mov	r5,r23
 8004fe0:	d9811e04 	addi	r6,sp,1144
 8004fe4:	80112f00 	call	80112f0 <__sprint_r>
 8004fe8:	b880030b 	ldhu	r2,12(r23)
 8004fec:	1080100c 	andi	r2,r2,64
 8004ff0:	103fe31e 	bne	r2,zero,8004f80 <__alt_data_end+0xf8004f80>
 8004ff4:	d8812f17 	ldw	r2,1212(sp)
 8004ff8:	003fe206 	br	8004f84 <__alt_data_end+0xf8004f84>
 8004ffc:	b009883a 	mov	r4,r22
 8005000:	8008c5c0 	call	8008c5c <__sinit>
 8005004:	003ef906 	br	8004bec <__alt_data_end+0xf8004bec>
 8005008:	dc012a17 	ldw	r16,1192(sp)
 800500c:	003f3906 	br	8004cf4 <__alt_data_end+0xf8004cf4>
 8005010:	1805883a 	mov	r2,r3
 8005014:	8c400114 	ori	r17,r17,4
 8005018:	1c000007 	ldb	r16,0(r3)
 800501c:	003f4206 	br	8004d28 <__alt_data_end+0xf8004d28>
 8005020:	1c000007 	ldb	r16,0(r3)
 8005024:	18800044 	addi	r2,r3,1
 8005028:	8286b326 	beq	r16,r10,8006af8 <___vfprintf_internal_r+0x1f6c>
 800502c:	82fff404 	addi	r11,r16,-48
 8005030:	1007883a 	mov	r3,r2
 8005034:	0013883a 	mov	r9,zero
 8005038:	2aff3c36 	bltu	r5,r11,8004d2c <__alt_data_end+0xf8004d2c>
 800503c:	1c000007 	ldb	r16,0(r3)
 8005040:	4a4002a4 	muli	r9,r9,10
 8005044:	18c00044 	addi	r3,r3,1
 8005048:	5a53883a 	add	r9,r11,r9
 800504c:	82fff404 	addi	r11,r16,-48
 8005050:	2afffa2e 	bgeu	r5,r11,800503c <__alt_data_end+0xf800503c>
 8005054:	483f350e 	bge	r9,zero,8004d2c <__alt_data_end+0xf8004d2c>
 8005058:	027fffc4 	movi	r9,-1
 800505c:	003f3306 	br	8004d2c <__alt_data_end+0xf8004d2c>
 8005060:	8c402014 	ori	r17,r17,128
 8005064:	1805883a 	mov	r2,r3
 8005068:	1c000007 	ldb	r16,0(r3)
 800506c:	003f2e06 	br	8004d28 <__alt_data_end+0xf8004d28>
 8005070:	db012d17 	ldw	r12,1204(sp)
 8005074:	dac12d17 	ldw	r11,1204(sp)
 8005078:	d8c12a15 	stw	r3,1192(sp)
 800507c:	63000017 	ldw	r12,0(r12)
 8005080:	5ac00117 	ldw	r11,4(r11)
 8005084:	d9812785 	stb	r6,1182(sp)
 8005088:	6009883a 	mov	r4,r12
 800508c:	580b883a 	mov	r5,r11
 8005090:	db013715 	stw	r12,1244(sp)
 8005094:	da013f15 	stw	r8,1276(sp)
 8005098:	da413e15 	stw	r9,1272(sp)
 800509c:	dac13915 	stw	r11,1252(sp)
 80050a0:	800b8500 	call	800b850 <__fpclassifyd>
 80050a4:	db012d17 	ldw	r12,1204(sp)
 80050a8:	04800044 	movi	r18,1
 80050ac:	da013f17 	ldw	r8,1276(sp)
 80050b0:	64c00204 	addi	r19,r12,8
 80050b4:	da413e17 	ldw	r9,1272(sp)
 80050b8:	d9013717 	ldw	r4,1244(sp)
 80050bc:	d9413917 	ldw	r5,1252(sp)
 80050c0:	1484581e 	bne	r2,r18,8006224 <___vfprintf_internal_r+0x1698>
 80050c4:	000d883a 	mov	r6,zero
 80050c8:	000f883a 	mov	r7,zero
 80050cc:	8016e500 	call	8016e50 <__ledf2>
 80050d0:	da013f17 	ldw	r8,1276(sp)
 80050d4:	1005ef16 	blt	r2,zero,8006894 <___vfprintf_internal_r+0x1d08>
 80050d8:	dd412783 	ldbu	r21,1182(sp)
 80050dc:	008011c4 	movi	r2,71
 80050e0:	14053b0e 	bge	r2,r16,80065d0 <___vfprintf_internal_r+0x1a44>
 80050e4:	00c200b4 	movhi	r3,2050
 80050e8:	18f22b04 	addi	r3,r3,-14164
 80050ec:	d8c13115 	stw	r3,1220(sp)
 80050f0:	02c000c4 	movi	r11,3
 80050f4:	00bfdfc4 	movi	r2,-129
 80050f8:	dac12b15 	stw	r11,1196(sp)
 80050fc:	88a2703a 	and	r17,r17,r2
 8005100:	dcc12d15 	stw	r19,1204(sp)
 8005104:	5825883a 	mov	r18,r11
 8005108:	d8013215 	stw	zero,1224(sp)
 800510c:	d8013415 	stw	zero,1232(sp)
 8005110:	00003206 	br	80051dc <___vfprintf_internal_r+0x650>
 8005114:	8c400214 	ori	r17,r17,8
 8005118:	1805883a 	mov	r2,r3
 800511c:	1c000007 	ldb	r16,0(r3)
 8005120:	003f0106 	br	8004d28 <__alt_data_end+0xf8004d28>
 8005124:	8c400414 	ori	r17,r17,16
 8005128:	d8c12a15 	stw	r3,1192(sp)
 800512c:	88c0080c 	andi	r3,r17,32
 8005130:	d8812d17 	ldw	r2,1204(sp)
 8005134:	18017726 	beq	r3,zero,8005714 <___vfprintf_internal_r+0xb88>
 8005138:	db012d17 	ldw	r12,1204(sp)
 800513c:	14c00017 	ldw	r19,0(r2)
 8005140:	17000117 	ldw	fp,4(r2)
 8005144:	63000204 	addi	r12,r12,8
 8005148:	db012d15 	stw	r12,1204(sp)
 800514c:	0005883a 	mov	r2,zero
 8005150:	9f06b03a 	or	r3,r19,fp
 8005154:	d8012785 	stb	zero,1182(sp)
 8005158:	da413215 	stw	r9,1224(sp)
 800515c:	002b883a 	mov	r21,zero
 8005160:	48000216 	blt	r9,zero,800516c <___vfprintf_internal_r+0x5e0>
 8005164:	013fdfc4 	movi	r4,-129
 8005168:	8922703a 	and	r17,r17,r4
 800516c:	1801ed1e 	bne	r3,zero,8005924 <___vfprintf_internal_r+0xd98>
 8005170:	4802e026 	beq	r9,zero,8005cf4 <___vfprintf_internal_r+0x1168>
 8005174:	10803fcc 	andi	r2,r2,255
 8005178:	00c00044 	movi	r3,1
 800517c:	10c20f26 	beq	r2,r3,80059bc <___vfprintf_internal_r+0xe30>
 8005180:	00c00084 	movi	r3,2
 8005184:	10c2fd26 	beq	r2,r3,8005d7c <___vfprintf_internal_r+0x11f0>
 8005188:	d8c10e04 	addi	r3,sp,1080
 800518c:	9808d0fa 	srli	r4,r19,3
 8005190:	e00a977a 	slli	r5,fp,29
 8005194:	e038d0fa 	srli	fp,fp,3
 8005198:	9cc001cc 	andi	r19,r19,7
 800519c:	98800c04 	addi	r2,r19,48
 80051a0:	18ffffc4 	addi	r3,r3,-1
 80051a4:	2926b03a 	or	r19,r5,r4
 80051a8:	18800005 	stb	r2,0(r3)
 80051ac:	9f08b03a 	or	r4,r19,fp
 80051b0:	203ff61e 	bne	r4,zero,800518c <__alt_data_end+0xf800518c>
 80051b4:	8900004c 	andi	r4,r17,1
 80051b8:	d8c13115 	stw	r3,1220(sp)
 80051bc:	2003791e 	bne	r4,zero,8005fa4 <___vfprintf_internal_r+0x1418>
 80051c0:	dac12817 	ldw	r11,1184(sp)
 80051c4:	58e5c83a 	sub	r18,r11,r3
 80051c8:	9005883a 	mov	r2,r18
 80051cc:	9240010e 	bge	r18,r9,80051d4 <___vfprintf_internal_r+0x648>
 80051d0:	4805883a 	mov	r2,r9
 80051d4:	d8812b15 	stw	r2,1196(sp)
 80051d8:	d8013415 	stw	zero,1232(sp)
 80051dc:	a8803fcc 	andi	r2,r21,255
 80051e0:	1080201c 	xori	r2,r2,128
 80051e4:	10bfe004 	addi	r2,r2,-128
 80051e8:	10000326 	beq	r2,zero,80051f8 <___vfprintf_internal_r+0x66c>
 80051ec:	db012b17 	ldw	r12,1196(sp)
 80051f0:	63000044 	addi	r12,r12,1
 80051f4:	db012b15 	stw	r12,1196(sp)
 80051f8:	88c0008c 	andi	r3,r17,2
 80051fc:	d8c12c15 	stw	r3,1200(sp)
 8005200:	18000326 	beq	r3,zero,8005210 <___vfprintf_internal_r+0x684>
 8005204:	dac12b17 	ldw	r11,1196(sp)
 8005208:	5ac00084 	addi	r11,r11,2
 800520c:	dac12b15 	stw	r11,1196(sp)
 8005210:	8b00210c 	andi	r12,r17,132
 8005214:	db013015 	stw	r12,1216(sp)
 8005218:	6001c01e 	bne	r12,zero,800591c <___vfprintf_internal_r+0xd90>
 800521c:	dac12e17 	ldw	r11,1208(sp)
 8005220:	db012b17 	ldw	r12,1196(sp)
 8005224:	5b39c83a 	sub	fp,r11,r12
 8005228:	0701bc0e 	bge	zero,fp,800591c <___vfprintf_internal_r+0xd90>
 800522c:	02400404 	movi	r9,16
 8005230:	d8c12017 	ldw	r3,1152(sp)
 8005234:	d8811f17 	ldw	r2,1148(sp)
 8005238:	4f05220e 	bge	r9,fp,80066c4 <___vfprintf_internal_r+0x1b38>
 800523c:	014200b4 	movhi	r5,2050
 8005240:	29723e84 	addi	r5,r5,-14086
 8005244:	d9413615 	stw	r5,1240(sp)
 8005248:	482b883a 	mov	r21,r9
 800524c:	04c001c4 	movi	r19,7
 8005250:	00000306 	br	8005260 <___vfprintf_internal_r+0x6d4>
 8005254:	e73ffc04 	addi	fp,fp,-16
 8005258:	42000204 	addi	r8,r8,8
 800525c:	af00130e 	bge	r21,fp,80052ac <___vfprintf_internal_r+0x720>
 8005260:	02c200b4 	movhi	r11,2050
 8005264:	18c00404 	addi	r3,r3,16
 8005268:	10800044 	addi	r2,r2,1
 800526c:	5af23e84 	addi	r11,r11,-14086
 8005270:	42c00015 	stw	r11,0(r8)
 8005274:	45400115 	stw	r21,4(r8)
 8005278:	d8c12015 	stw	r3,1152(sp)
 800527c:	d8811f15 	stw	r2,1148(sp)
 8005280:	98bff40e 	bge	r19,r2,8005254 <__alt_data_end+0xf8005254>
 8005284:	b009883a 	mov	r4,r22
 8005288:	b80b883a 	mov	r5,r23
 800528c:	d9811e04 	addi	r6,sp,1144
 8005290:	80112f00 	call	80112f0 <__sprint_r>
 8005294:	103f541e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005298:	e73ffc04 	addi	fp,fp,-16
 800529c:	d8c12017 	ldw	r3,1152(sp)
 80052a0:	d8811f17 	ldw	r2,1148(sp)
 80052a4:	da000404 	addi	r8,sp,16
 80052a8:	af3fed16 	blt	r21,fp,8005260 <__alt_data_end+0xf8005260>
 80052ac:	db013617 	ldw	r12,1240(sp)
 80052b0:	e0c7883a 	add	r3,fp,r3
 80052b4:	10800044 	addi	r2,r2,1
 80052b8:	43000015 	stw	r12,0(r8)
 80052bc:	47000115 	stw	fp,4(r8)
 80052c0:	d8c12015 	stw	r3,1152(sp)
 80052c4:	d8811f15 	stw	r2,1148(sp)
 80052c8:	010001c4 	movi	r4,7
 80052cc:	2082f416 	blt	r4,r2,8005ea0 <___vfprintf_internal_r+0x1314>
 80052d0:	d8812787 	ldb	r2,1182(sp)
 80052d4:	42000204 	addi	r8,r8,8
 80052d8:	10000c26 	beq	r2,zero,800530c <___vfprintf_internal_r+0x780>
 80052dc:	d8811f17 	ldw	r2,1148(sp)
 80052e0:	d9012784 	addi	r4,sp,1182
 80052e4:	18c00044 	addi	r3,r3,1
 80052e8:	10800044 	addi	r2,r2,1
 80052ec:	41000015 	stw	r4,0(r8)
 80052f0:	01000044 	movi	r4,1
 80052f4:	41000115 	stw	r4,4(r8)
 80052f8:	d8c12015 	stw	r3,1152(sp)
 80052fc:	d8811f15 	stw	r2,1148(sp)
 8005300:	010001c4 	movi	r4,7
 8005304:	20828d16 	blt	r4,r2,8005d3c <___vfprintf_internal_r+0x11b0>
 8005308:	42000204 	addi	r8,r8,8
 800530c:	dac12c17 	ldw	r11,1200(sp)
 8005310:	58000c26 	beq	r11,zero,8005344 <___vfprintf_internal_r+0x7b8>
 8005314:	d8811f17 	ldw	r2,1148(sp)
 8005318:	d9012704 	addi	r4,sp,1180
 800531c:	18c00084 	addi	r3,r3,2
 8005320:	10800044 	addi	r2,r2,1
 8005324:	41000015 	stw	r4,0(r8)
 8005328:	01000084 	movi	r4,2
 800532c:	41000115 	stw	r4,4(r8)
 8005330:	d8c12015 	stw	r3,1152(sp)
 8005334:	d8811f15 	stw	r2,1148(sp)
 8005338:	010001c4 	movi	r4,7
 800533c:	20828716 	blt	r4,r2,8005d5c <___vfprintf_internal_r+0x11d0>
 8005340:	42000204 	addi	r8,r8,8
 8005344:	db013017 	ldw	r12,1216(sp)
 8005348:	00802004 	movi	r2,128
 800534c:	6081e926 	beq	r12,r2,8005af4 <___vfprintf_internal_r+0xf68>
 8005350:	db013217 	ldw	r12,1224(sp)
 8005354:	64abc83a 	sub	r21,r12,r18
 8005358:	0540260e 	bge	zero,r21,80053f4 <___vfprintf_internal_r+0x868>
 800535c:	07000404 	movi	fp,16
 8005360:	d8811f17 	ldw	r2,1148(sp)
 8005364:	e5443d0e 	bge	fp,r21,800645c <___vfprintf_internal_r+0x18d0>
 8005368:	014200b4 	movhi	r5,2050
 800536c:	29723a84 	addi	r5,r5,-14102
 8005370:	d9412c15 	stw	r5,1200(sp)
 8005374:	04c001c4 	movi	r19,7
 8005378:	00000306 	br	8005388 <___vfprintf_internal_r+0x7fc>
 800537c:	ad7ffc04 	addi	r21,r21,-16
 8005380:	42000204 	addi	r8,r8,8
 8005384:	e540110e 	bge	fp,r21,80053cc <___vfprintf_internal_r+0x840>
 8005388:	18c00404 	addi	r3,r3,16
 800538c:	10800044 	addi	r2,r2,1
 8005390:	45000015 	stw	r20,0(r8)
 8005394:	47000115 	stw	fp,4(r8)
 8005398:	d8c12015 	stw	r3,1152(sp)
 800539c:	d8811f15 	stw	r2,1148(sp)
 80053a0:	98bff60e 	bge	r19,r2,800537c <__alt_data_end+0xf800537c>
 80053a4:	b009883a 	mov	r4,r22
 80053a8:	b80b883a 	mov	r5,r23
 80053ac:	d9811e04 	addi	r6,sp,1144
 80053b0:	80112f00 	call	80112f0 <__sprint_r>
 80053b4:	103f0c1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80053b8:	ad7ffc04 	addi	r21,r21,-16
 80053bc:	d8c12017 	ldw	r3,1152(sp)
 80053c0:	d8811f17 	ldw	r2,1148(sp)
 80053c4:	da000404 	addi	r8,sp,16
 80053c8:	e57fef16 	blt	fp,r21,8005388 <__alt_data_end+0xf8005388>
 80053cc:	dac12c17 	ldw	r11,1200(sp)
 80053d0:	1d47883a 	add	r3,r3,r21
 80053d4:	10800044 	addi	r2,r2,1
 80053d8:	42c00015 	stw	r11,0(r8)
 80053dc:	45400115 	stw	r21,4(r8)
 80053e0:	d8c12015 	stw	r3,1152(sp)
 80053e4:	d8811f15 	stw	r2,1148(sp)
 80053e8:	010001c4 	movi	r4,7
 80053ec:	20824b16 	blt	r4,r2,8005d1c <___vfprintf_internal_r+0x1190>
 80053f0:	42000204 	addi	r8,r8,8
 80053f4:	8880400c 	andi	r2,r17,256
 80053f8:	1001761e 	bne	r2,zero,80059d4 <___vfprintf_internal_r+0xe48>
 80053fc:	d8811f17 	ldw	r2,1148(sp)
 8005400:	db013117 	ldw	r12,1220(sp)
 8005404:	1c87883a 	add	r3,r3,r18
 8005408:	10800044 	addi	r2,r2,1
 800540c:	43000015 	stw	r12,0(r8)
 8005410:	44800115 	stw	r18,4(r8)
 8005414:	d8c12015 	stw	r3,1152(sp)
 8005418:	d8811f15 	stw	r2,1148(sp)
 800541c:	010001c4 	movi	r4,7
 8005420:	20822616 	blt	r4,r2,8005cbc <___vfprintf_internal_r+0x1130>
 8005424:	42000204 	addi	r8,r8,8
 8005428:	8c40010c 	andi	r17,r17,4
 800542c:	88003126 	beq	r17,zero,80054f4 <___vfprintf_internal_r+0x968>
 8005430:	db012e17 	ldw	r12,1208(sp)
 8005434:	dac12b17 	ldw	r11,1196(sp)
 8005438:	62e1c83a 	sub	r16,r12,r11
 800543c:	04002d0e 	bge	zero,r16,80054f4 <___vfprintf_internal_r+0x968>
 8005440:	04400404 	movi	r17,16
 8005444:	d8811f17 	ldw	r2,1148(sp)
 8005448:	8c04df0e 	bge	r17,r16,80067c8 <___vfprintf_internal_r+0x1c3c>
 800544c:	010200b4 	movhi	r4,2050
 8005450:	21323e84 	addi	r4,r4,-14086
 8005454:	d9013615 	stw	r4,1240(sp)
 8005458:	048001c4 	movi	r18,7
 800545c:	00000306 	br	800546c <___vfprintf_internal_r+0x8e0>
 8005460:	843ffc04 	addi	r16,r16,-16
 8005464:	42000204 	addi	r8,r8,8
 8005468:	8c00130e 	bge	r17,r16,80054b8 <___vfprintf_internal_r+0x92c>
 800546c:	014200b4 	movhi	r5,2050
 8005470:	18c00404 	addi	r3,r3,16
 8005474:	10800044 	addi	r2,r2,1
 8005478:	29723e84 	addi	r5,r5,-14086
 800547c:	41400015 	stw	r5,0(r8)
 8005480:	44400115 	stw	r17,4(r8)
 8005484:	d8c12015 	stw	r3,1152(sp)
 8005488:	d8811f15 	stw	r2,1148(sp)
 800548c:	90bff40e 	bge	r18,r2,8005460 <__alt_data_end+0xf8005460>
 8005490:	b009883a 	mov	r4,r22
 8005494:	b80b883a 	mov	r5,r23
 8005498:	d9811e04 	addi	r6,sp,1144
 800549c:	80112f00 	call	80112f0 <__sprint_r>
 80054a0:	103ed11e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80054a4:	843ffc04 	addi	r16,r16,-16
 80054a8:	d8c12017 	ldw	r3,1152(sp)
 80054ac:	d8811f17 	ldw	r2,1148(sp)
 80054b0:	da000404 	addi	r8,sp,16
 80054b4:	8c3fed16 	blt	r17,r16,800546c <__alt_data_end+0xf800546c>
 80054b8:	dac13617 	ldw	r11,1240(sp)
 80054bc:	1c07883a 	add	r3,r3,r16
 80054c0:	10800044 	addi	r2,r2,1
 80054c4:	42c00015 	stw	r11,0(r8)
 80054c8:	44000115 	stw	r16,4(r8)
 80054cc:	d8c12015 	stw	r3,1152(sp)
 80054d0:	d8811f15 	stw	r2,1148(sp)
 80054d4:	010001c4 	movi	r4,7
 80054d8:	2080060e 	bge	r4,r2,80054f4 <___vfprintf_internal_r+0x968>
 80054dc:	b009883a 	mov	r4,r22
 80054e0:	b80b883a 	mov	r5,r23
 80054e4:	d9811e04 	addi	r6,sp,1144
 80054e8:	80112f00 	call	80112f0 <__sprint_r>
 80054ec:	103ebe1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80054f0:	d8c12017 	ldw	r3,1152(sp)
 80054f4:	d8812b17 	ldw	r2,1196(sp)
 80054f8:	db012e17 	ldw	r12,1208(sp)
 80054fc:	1300010e 	bge	r2,r12,8005504 <___vfprintf_internal_r+0x978>
 8005500:	6005883a 	mov	r2,r12
 8005504:	dac12f17 	ldw	r11,1212(sp)
 8005508:	5897883a 	add	r11,r11,r2
 800550c:	dac12f15 	stw	r11,1212(sp)
 8005510:	1801f21e 	bne	r3,zero,8005cdc <___vfprintf_internal_r+0x1150>
 8005514:	d8011f15 	stw	zero,1148(sp)
 8005518:	da000404 	addi	r8,sp,16
 800551c:	003dd806 	br	8004c80 <__alt_data_end+0xf8004c80>
 8005520:	8c400414 	ori	r17,r17,16
 8005524:	d8c12a15 	stw	r3,1192(sp)
 8005528:	88c0080c 	andi	r3,r17,32
 800552c:	d8812d17 	ldw	r2,1204(sp)
 8005530:	18004626 	beq	r3,zero,800564c <___vfprintf_internal_r+0xac0>
 8005534:	dac12d17 	ldw	r11,1204(sp)
 8005538:	14c00017 	ldw	r19,0(r2)
 800553c:	17000117 	ldw	fp,4(r2)
 8005540:	5ac00204 	addi	r11,r11,8
 8005544:	dac12d15 	stw	r11,1204(sp)
 8005548:	00800044 	movi	r2,1
 800554c:	9f06b03a 	or	r3,r19,fp
 8005550:	003f0006 	br	8005154 <__alt_data_end+0xf8005154>
 8005554:	1805883a 	mov	r2,r3
 8005558:	d8012e15 	stw	zero,1208(sp)
 800555c:	82fff404 	addi	r11,r16,-48
 8005560:	0019883a 	mov	r12,zero
 8005564:	14000007 	ldb	r16,0(r2)
 8005568:	630002a4 	muli	r12,r12,10
 800556c:	18c00044 	addi	r3,r3,1
 8005570:	1805883a 	mov	r2,r3
 8005574:	62d9883a 	add	r12,r12,r11
 8005578:	82fff404 	addi	r11,r16,-48
 800557c:	2afff92e 	bgeu	r5,r11,8005564 <__alt_data_end+0xf8005564>
 8005580:	db012e15 	stw	r12,1208(sp)
 8005584:	003de906 	br	8004d2c <__alt_data_end+0xf8004d2c>
 8005588:	8c400414 	ori	r17,r17,16
 800558c:	d8c12a15 	stw	r3,1192(sp)
 8005590:	d9812785 	stb	r6,1182(sp)
 8005594:	8880080c 	andi	r2,r17,32
 8005598:	d8c12d17 	ldw	r3,1204(sp)
 800559c:	10007a26 	beq	r2,zero,8005788 <___vfprintf_internal_r+0xbfc>
 80055a0:	db012d17 	ldw	r12,1204(sp)
 80055a4:	18800117 	ldw	r2,4(r3)
 80055a8:	1cc00017 	ldw	r19,0(r3)
 80055ac:	63000204 	addi	r12,r12,8
 80055b0:	db012d15 	stw	r12,1204(sp)
 80055b4:	1039883a 	mov	fp,r2
 80055b8:	10031016 	blt	r2,zero,80061fc <___vfprintf_internal_r+0x1670>
 80055bc:	dd412783 	ldbu	r21,1182(sp)
 80055c0:	da413215 	stw	r9,1224(sp)
 80055c4:	00800044 	movi	r2,1
 80055c8:	9f06b03a 	or	r3,r19,fp
 80055cc:	003ee406 	br	8005160 <__alt_data_end+0xf8005160>
 80055d0:	030200b4 	movhi	r12,2050
 80055d4:	63322e04 	addi	r12,r12,-14152
 80055d8:	d8c12a15 	stw	r3,1192(sp)
 80055dc:	d9812785 	stb	r6,1182(sp)
 80055e0:	db013b15 	stw	r12,1260(sp)
 80055e4:	88c0080c 	andi	r3,r17,32
 80055e8:	d8812d17 	ldw	r2,1204(sp)
 80055ec:	18002b26 	beq	r3,zero,800569c <___vfprintf_internal_r+0xb10>
 80055f0:	dac12d17 	ldw	r11,1204(sp)
 80055f4:	14c00017 	ldw	r19,0(r2)
 80055f8:	17000117 	ldw	fp,4(r2)
 80055fc:	5ac00204 	addi	r11,r11,8
 8005600:	dac12d15 	stw	r11,1204(sp)
 8005604:	8880004c 	andi	r2,r17,1
 8005608:	10025b26 	beq	r2,zero,8005f78 <___vfprintf_internal_r+0x13ec>
 800560c:	9f06b03a 	or	r3,r19,fp
 8005610:	18037026 	beq	r3,zero,80063d4 <___vfprintf_internal_r+0x1848>
 8005614:	00800c04 	movi	r2,48
 8005618:	d8812705 	stb	r2,1180(sp)
 800561c:	dc012745 	stb	r16,1181(sp)
 8005620:	8c400094 	ori	r17,r17,2
 8005624:	00800084 	movi	r2,2
 8005628:	003eca06 	br	8005154 <__alt_data_end+0xf8005154>
 800562c:	8c400814 	ori	r17,r17,32
 8005630:	1805883a 	mov	r2,r3
 8005634:	1c000007 	ldb	r16,0(r3)
 8005638:	003dbb06 	br	8004d28 <__alt_data_end+0xf8004d28>
 800563c:	d8c12a15 	stw	r3,1192(sp)
 8005640:	88c0080c 	andi	r3,r17,32
 8005644:	d8812d17 	ldw	r2,1204(sp)
 8005648:	183fba1e 	bne	r3,zero,8005534 <__alt_data_end+0xf8005534>
 800564c:	88c0040c 	andi	r3,r17,16
 8005650:	18024c1e 	bne	r3,zero,8005f84 <___vfprintf_internal_r+0x13f8>
 8005654:	88c0100c 	andi	r3,r17,64
 8005658:	18024a26 	beq	r3,zero,8005f84 <___vfprintf_internal_r+0x13f8>
 800565c:	dac12d17 	ldw	r11,1204(sp)
 8005660:	14c0000b 	ldhu	r19,0(r2)
 8005664:	0039883a 	mov	fp,zero
 8005668:	5ac00104 	addi	r11,r11,4
 800566c:	dac12d15 	stw	r11,1204(sp)
 8005670:	00800044 	movi	r2,1
 8005674:	9807883a 	mov	r3,r19
 8005678:	003eb606 	br	8005154 <__alt_data_end+0xf8005154>
 800567c:	008200b4 	movhi	r2,2050
 8005680:	10b23304 	addi	r2,r2,-14132
 8005684:	d8c12a15 	stw	r3,1192(sp)
 8005688:	d8813b15 	stw	r2,1260(sp)
 800568c:	d9812785 	stb	r6,1182(sp)
 8005690:	88c0080c 	andi	r3,r17,32
 8005694:	d8812d17 	ldw	r2,1204(sp)
 8005698:	183fd51e 	bne	r3,zero,80055f0 <__alt_data_end+0xf80055f0>
 800569c:	88c0040c 	andi	r3,r17,16
 80056a0:	18034126 	beq	r3,zero,80063a8 <___vfprintf_internal_r+0x181c>
 80056a4:	db012d17 	ldw	r12,1204(sp)
 80056a8:	14c00017 	ldw	r19,0(r2)
 80056ac:	0039883a 	mov	fp,zero
 80056b0:	63000104 	addi	r12,r12,4
 80056b4:	db012d15 	stw	r12,1204(sp)
 80056b8:	003fd206 	br	8005604 <__alt_data_end+0xf8005604>
 80056bc:	1c000007 	ldb	r16,0(r3)
 80056c0:	81c3d626 	beq	r16,r7,800661c <___vfprintf_internal_r+0x1a90>
 80056c4:	8c400414 	ori	r17,r17,16
 80056c8:	1805883a 	mov	r2,r3
 80056cc:	003d9606 	br	8004d28 <__alt_data_end+0xf8004d28>
 80056d0:	d8c12a15 	stw	r3,1192(sp)
 80056d4:	d9812785 	stb	r6,1182(sp)
 80056d8:	8880080c 	andi	r2,r17,32
 80056dc:	10033f26 	beq	r2,zero,80063dc <___vfprintf_internal_r+0x1850>
 80056e0:	db012d17 	ldw	r12,1204(sp)
 80056e4:	dac12f17 	ldw	r11,1212(sp)
 80056e8:	60800017 	ldw	r2,0(r12)
 80056ec:	5807d7fa 	srai	r3,r11,31
 80056f0:	63000104 	addi	r12,r12,4
 80056f4:	db012d15 	stw	r12,1204(sp)
 80056f8:	12c00015 	stw	r11,0(r2)
 80056fc:	10c00115 	stw	r3,4(r2)
 8005700:	003d5f06 	br	8004c80 <__alt_data_end+0xf8004c80>
 8005704:	d8c12a15 	stw	r3,1192(sp)
 8005708:	88c0080c 	andi	r3,r17,32
 800570c:	d8812d17 	ldw	r2,1204(sp)
 8005710:	183e891e 	bne	r3,zero,8005138 <__alt_data_end+0xf8005138>
 8005714:	88c0040c 	andi	r3,r17,16
 8005718:	1801ea1e 	bne	r3,zero,8005ec4 <___vfprintf_internal_r+0x1338>
 800571c:	88c0100c 	andi	r3,r17,64
 8005720:	1801e826 	beq	r3,zero,8005ec4 <___vfprintf_internal_r+0x1338>
 8005724:	db012d17 	ldw	r12,1204(sp)
 8005728:	14c0000b 	ldhu	r19,0(r2)
 800572c:	0039883a 	mov	fp,zero
 8005730:	63000104 	addi	r12,r12,4
 8005734:	db012d15 	stw	r12,1204(sp)
 8005738:	0005883a 	mov	r2,zero
 800573c:	9807883a 	mov	r3,r19
 8005740:	003e8406 	br	8005154 <__alt_data_end+0xf8005154>
 8005744:	30803fcc 	andi	r2,r6,255
 8005748:	1080201c 	xori	r2,r2,128
 800574c:	10bfe004 	addi	r2,r2,-128
 8005750:	10031d1e 	bne	r2,zero,80063c8 <___vfprintf_internal_r+0x183c>
 8005754:	1805883a 	mov	r2,r3
 8005758:	01800804 	movi	r6,32
 800575c:	1c000007 	ldb	r16,0(r3)
 8005760:	003d7106 	br	8004d28 <__alt_data_end+0xf8004d28>
 8005764:	8c400054 	ori	r17,r17,1
 8005768:	1805883a 	mov	r2,r3
 800576c:	1c000007 	ldb	r16,0(r3)
 8005770:	003d6d06 	br	8004d28 <__alt_data_end+0xf8004d28>
 8005774:	d8c12a15 	stw	r3,1192(sp)
 8005778:	d9812785 	stb	r6,1182(sp)
 800577c:	8880080c 	andi	r2,r17,32
 8005780:	d8c12d17 	ldw	r3,1204(sp)
 8005784:	103f861e 	bne	r2,zero,80055a0 <__alt_data_end+0xf80055a0>
 8005788:	8880040c 	andi	r2,r17,16
 800578c:	1001f31e 	bne	r2,zero,8005f5c <___vfprintf_internal_r+0x13d0>
 8005790:	8880100c 	andi	r2,r17,64
 8005794:	1001f126 	beq	r2,zero,8005f5c <___vfprintf_internal_r+0x13d0>
 8005798:	1cc0000f 	ldh	r19,0(r3)
 800579c:	db012d17 	ldw	r12,1204(sp)
 80057a0:	9839d7fa 	srai	fp,r19,31
 80057a4:	63000104 	addi	r12,r12,4
 80057a8:	db012d15 	stw	r12,1204(sp)
 80057ac:	e005883a 	mov	r2,fp
 80057b0:	003f8106 	br	80055b8 <__alt_data_end+0xf80055b8>
 80057b4:	8c401014 	ori	r17,r17,64
 80057b8:	1805883a 	mov	r2,r3
 80057bc:	1c000007 	ldb	r16,0(r3)
 80057c0:	003d5906 	br	8004d28 <__alt_data_end+0xf8004d28>
 80057c4:	db012d17 	ldw	r12,1204(sp)
 80057c8:	d8c12a15 	stw	r3,1192(sp)
 80057cc:	00c00044 	movi	r3,1
 80057d0:	60800017 	ldw	r2,0(r12)
 80057d4:	63000104 	addi	r12,r12,4
 80057d8:	d8c12b15 	stw	r3,1196(sp)
 80057dc:	d8012785 	stb	zero,1182(sp)
 80057e0:	d8810405 	stb	r2,1040(sp)
 80057e4:	db012d15 	stw	r12,1204(sp)
 80057e8:	dac10404 	addi	r11,sp,1040
 80057ec:	1825883a 	mov	r18,r3
 80057f0:	d8013215 	stw	zero,1224(sp)
 80057f4:	d8013415 	stw	zero,1232(sp)
 80057f8:	dac13115 	stw	r11,1220(sp)
 80057fc:	0005883a 	mov	r2,zero
 8005800:	003e7d06 	br	80051f8 <__alt_data_end+0xf80051f8>
 8005804:	db012d17 	ldw	r12,1204(sp)
 8005808:	00800c04 	movi	r2,48
 800580c:	d8812705 	stb	r2,1180(sp)
 8005810:	64c00017 	ldw	r19,0(r12)
 8005814:	00801e04 	movi	r2,120
 8005818:	d8812745 	stb	r2,1181(sp)
 800581c:	008200b4 	movhi	r2,2050
 8005820:	10b23304 	addi	r2,r2,-14132
 8005824:	63000104 	addi	r12,r12,4
 8005828:	d8c12a15 	stw	r3,1192(sp)
 800582c:	d8813b15 	stw	r2,1260(sp)
 8005830:	0039883a 	mov	fp,zero
 8005834:	8c400094 	ori	r17,r17,2
 8005838:	db012d15 	stw	r12,1204(sp)
 800583c:	00800084 	movi	r2,2
 8005840:	04001e04 	movi	r16,120
 8005844:	9807883a 	mov	r3,r19
 8005848:	003e4206 	br	8005154 <__alt_data_end+0xf8005154>
 800584c:	dac12d17 	ldw	r11,1204(sp)
 8005850:	db012d17 	ldw	r12,1204(sp)
 8005854:	d8c12a15 	stw	r3,1192(sp)
 8005858:	5ac00017 	ldw	r11,0(r11)
 800585c:	d8012785 	stb	zero,1182(sp)
 8005860:	64c00104 	addi	r19,r12,4
 8005864:	dac13115 	stw	r11,1220(sp)
 8005868:	5803e826 	beq	r11,zero,800680c <___vfprintf_internal_r+0x1c80>
 800586c:	d9013117 	ldw	r4,1220(sp)
 8005870:	48037a16 	blt	r9,zero,800665c <___vfprintf_internal_r+0x1ad0>
 8005874:	480d883a 	mov	r6,r9
 8005878:	000b883a 	mov	r5,zero
 800587c:	da013f15 	stw	r8,1276(sp)
 8005880:	da413e15 	stw	r9,1272(sp)
 8005884:	8009c340 	call	8009c34 <memchr>
 8005888:	da013f17 	ldw	r8,1276(sp)
 800588c:	da413e17 	ldw	r9,1272(sp)
 8005890:	10044426 	beq	r2,zero,80069a4 <___vfprintf_internal_r+0x1e18>
 8005894:	d8c13117 	ldw	r3,1220(sp)
 8005898:	10e5c83a 	sub	r18,r2,r3
 800589c:	4c834416 	blt	r9,r18,80065b0 <___vfprintf_internal_r+0x1a24>
 80058a0:	9005883a 	mov	r2,r18
 80058a4:	90037216 	blt	r18,zero,8006670 <___vfprintf_internal_r+0x1ae4>
 80058a8:	dd412783 	ldbu	r21,1182(sp)
 80058ac:	d8812b15 	stw	r2,1196(sp)
 80058b0:	dcc12d15 	stw	r19,1204(sp)
 80058b4:	d8013215 	stw	zero,1224(sp)
 80058b8:	d8013415 	stw	zero,1232(sp)
 80058bc:	003e4706 	br	80051dc <__alt_data_end+0xf80051dc>
 80058c0:	dac12d17 	ldw	r11,1204(sp)
 80058c4:	db012d17 	ldw	r12,1204(sp)
 80058c8:	5ac00017 	ldw	r11,0(r11)
 80058cc:	dac12e15 	stw	r11,1208(sp)
 80058d0:	62c00104 	addi	r11,r12,4
 80058d4:	db012e17 	ldw	r12,1208(sp)
 80058d8:	60034a16 	blt	r12,zero,8006604 <___vfprintf_internal_r+0x1a78>
 80058dc:	dac12d15 	stw	r11,1204(sp)
 80058e0:	1805883a 	mov	r2,r3
 80058e4:	1c000007 	ldb	r16,0(r3)
 80058e8:	003d0f06 	br	8004d28 <__alt_data_end+0xf8004d28>
 80058ec:	1805883a 	mov	r2,r3
 80058f0:	01800ac4 	movi	r6,43
 80058f4:	1c000007 	ldb	r16,0(r3)
 80058f8:	003d0b06 	br	8004d28 <__alt_data_end+0xf8004d28>
 80058fc:	d8c12a15 	stw	r3,1192(sp)
 8005900:	d9812785 	stb	r6,1182(sp)
 8005904:	803db226 	beq	r16,zero,8004fd0 <__alt_data_end+0xf8004fd0>
 8005908:	00c00044 	movi	r3,1
 800590c:	d8c12b15 	stw	r3,1196(sp)
 8005910:	dc010405 	stb	r16,1040(sp)
 8005914:	d8012785 	stb	zero,1182(sp)
 8005918:	003fb306 	br	80057e8 <__alt_data_end+0xf80057e8>
 800591c:	d8c12017 	ldw	r3,1152(sp)
 8005920:	003e6d06 	br	80052d8 <__alt_data_end+0xf80052d8>
 8005924:	10803fcc 	andi	r2,r2,255
 8005928:	00c00044 	movi	r3,1
 800592c:	10fe141e 	bne	r2,r3,8005180 <__alt_data_end+0xf8005180>
 8005930:	e000021e 	bne	fp,zero,800593c <___vfprintf_internal_r+0xdb0>
 8005934:	00800244 	movi	r2,9
 8005938:	14c0202e 	bgeu	r2,r19,80059bc <___vfprintf_internal_r+0xe30>
 800593c:	dc012b15 	stw	r16,1196(sp)
 8005940:	dc412c15 	stw	r17,1200(sp)
 8005944:	9821883a 	mov	r16,r19
 8005948:	e023883a 	mov	r17,fp
 800594c:	dc810e04 	addi	r18,sp,1080
 8005950:	4027883a 	mov	r19,r8
 8005954:	4839883a 	mov	fp,r9
 8005958:	8009883a 	mov	r4,r16
 800595c:	880b883a 	mov	r5,r17
 8005960:	01800284 	movi	r6,10
 8005964:	000f883a 	mov	r7,zero
 8005968:	80154100 	call	8015410 <__umoddi3>
 800596c:	10800c04 	addi	r2,r2,48
 8005970:	94bfffc4 	addi	r18,r18,-1
 8005974:	8009883a 	mov	r4,r16
 8005978:	880b883a 	mov	r5,r17
 800597c:	01800284 	movi	r6,10
 8005980:	000f883a 	mov	r7,zero
 8005984:	90800005 	stb	r2,0(r18)
 8005988:	8014e500 	call	8014e50 <__udivdi3>
 800598c:	1021883a 	mov	r16,r2
 8005990:	10c4b03a 	or	r2,r2,r3
 8005994:	1823883a 	mov	r17,r3
 8005998:	103fef1e 	bne	r2,zero,8005958 <__alt_data_end+0xf8005958>
 800599c:	dac12817 	ldw	r11,1184(sp)
 80059a0:	dc813115 	stw	r18,1220(sp)
 80059a4:	dc012b17 	ldw	r16,1196(sp)
 80059a8:	9811883a 	mov	r8,r19
 80059ac:	dc412c17 	ldw	r17,1200(sp)
 80059b0:	e013883a 	mov	r9,fp
 80059b4:	5ca5c83a 	sub	r18,r11,r18
 80059b8:	003e0306 	br	80051c8 <__alt_data_end+0xf80051c8>
 80059bc:	9cc00c04 	addi	r19,r19,48
 80059c0:	d8c10dc4 	addi	r3,sp,1079
 80059c4:	dcc10dc5 	stb	r19,1079(sp)
 80059c8:	dc813c17 	ldw	r18,1264(sp)
 80059cc:	d8c13115 	stw	r3,1220(sp)
 80059d0:	003dfd06 	br	80051c8 <__alt_data_end+0xf80051c8>
 80059d4:	00801944 	movi	r2,101
 80059d8:	1400710e 	bge	r2,r16,8005ba0 <___vfprintf_internal_r+0x1014>
 80059dc:	d9013717 	ldw	r4,1244(sp)
 80059e0:	d9413917 	ldw	r5,1252(sp)
 80059e4:	000d883a 	mov	r6,zero
 80059e8:	000f883a 	mov	r7,zero
 80059ec:	d8c13d15 	stw	r3,1268(sp)
 80059f0:	da013f15 	stw	r8,1276(sp)
 80059f4:	8016cec0 	call	8016cec <__eqdf2>
 80059f8:	d8c13d17 	ldw	r3,1268(sp)
 80059fc:	da013f17 	ldw	r8,1276(sp)
 8005a00:	1000ef1e 	bne	r2,zero,8005dc0 <___vfprintf_internal_r+0x1234>
 8005a04:	d8811f17 	ldw	r2,1148(sp)
 8005a08:	010200b4 	movhi	r4,2050
 8005a0c:	21323a04 	addi	r4,r4,-14104
 8005a10:	18c00044 	addi	r3,r3,1
 8005a14:	10800044 	addi	r2,r2,1
 8005a18:	41000015 	stw	r4,0(r8)
 8005a1c:	01000044 	movi	r4,1
 8005a20:	41000115 	stw	r4,4(r8)
 8005a24:	d8c12015 	stw	r3,1152(sp)
 8005a28:	d8811f15 	stw	r2,1148(sp)
 8005a2c:	010001c4 	movi	r4,7
 8005a30:	20828e16 	blt	r4,r2,800646c <___vfprintf_internal_r+0x18e0>
 8005a34:	42000204 	addi	r8,r8,8
 8005a38:	d8812617 	ldw	r2,1176(sp)
 8005a3c:	dac13317 	ldw	r11,1228(sp)
 8005a40:	12c00216 	blt	r2,r11,8005a4c <___vfprintf_internal_r+0xec0>
 8005a44:	8880004c 	andi	r2,r17,1
 8005a48:	103e7726 	beq	r2,zero,8005428 <__alt_data_end+0xf8005428>
 8005a4c:	db013817 	ldw	r12,1248(sp)
 8005a50:	d8811f17 	ldw	r2,1148(sp)
 8005a54:	dac13517 	ldw	r11,1236(sp)
 8005a58:	1b07883a 	add	r3,r3,r12
 8005a5c:	10800044 	addi	r2,r2,1
 8005a60:	42c00015 	stw	r11,0(r8)
 8005a64:	43000115 	stw	r12,4(r8)
 8005a68:	d8c12015 	stw	r3,1152(sp)
 8005a6c:	d8811f15 	stw	r2,1148(sp)
 8005a70:	010001c4 	movi	r4,7
 8005a74:	2082ed16 	blt	r4,r2,800662c <___vfprintf_internal_r+0x1aa0>
 8005a78:	42000204 	addi	r8,r8,8
 8005a7c:	db013317 	ldw	r12,1228(sp)
 8005a80:	643fffc4 	addi	r16,r12,-1
 8005a84:	043e680e 	bge	zero,r16,8005428 <__alt_data_end+0xf8005428>
 8005a88:	04800404 	movi	r18,16
 8005a8c:	d8811f17 	ldw	r2,1148(sp)
 8005a90:	94007e0e 	bge	r18,r16,8005c8c <___vfprintf_internal_r+0x1100>
 8005a94:	014200b4 	movhi	r5,2050
 8005a98:	29723a84 	addi	r5,r5,-14102
 8005a9c:	d9412c15 	stw	r5,1200(sp)
 8005aa0:	054001c4 	movi	r21,7
 8005aa4:	00000306 	br	8005ab4 <___vfprintf_internal_r+0xf28>
 8005aa8:	42000204 	addi	r8,r8,8
 8005aac:	843ffc04 	addi	r16,r16,-16
 8005ab0:	9400790e 	bge	r18,r16,8005c98 <___vfprintf_internal_r+0x110c>
 8005ab4:	18c00404 	addi	r3,r3,16
 8005ab8:	10800044 	addi	r2,r2,1
 8005abc:	45000015 	stw	r20,0(r8)
 8005ac0:	44800115 	stw	r18,4(r8)
 8005ac4:	d8c12015 	stw	r3,1152(sp)
 8005ac8:	d8811f15 	stw	r2,1148(sp)
 8005acc:	a8bff60e 	bge	r21,r2,8005aa8 <__alt_data_end+0xf8005aa8>
 8005ad0:	b009883a 	mov	r4,r22
 8005ad4:	b80b883a 	mov	r5,r23
 8005ad8:	d9811e04 	addi	r6,sp,1144
 8005adc:	80112f00 	call	80112f0 <__sprint_r>
 8005ae0:	103d411e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005ae4:	d8c12017 	ldw	r3,1152(sp)
 8005ae8:	d8811f17 	ldw	r2,1148(sp)
 8005aec:	da000404 	addi	r8,sp,16
 8005af0:	003fee06 	br	8005aac <__alt_data_end+0xf8005aac>
 8005af4:	dac12e17 	ldw	r11,1208(sp)
 8005af8:	db012b17 	ldw	r12,1196(sp)
 8005afc:	5b2bc83a 	sub	r21,r11,r12
 8005b00:	057e130e 	bge	zero,r21,8005350 <__alt_data_end+0xf8005350>
 8005b04:	07000404 	movi	fp,16
 8005b08:	d8811f17 	ldw	r2,1148(sp)
 8005b0c:	e543640e 	bge	fp,r21,80068a0 <___vfprintf_internal_r+0x1d14>
 8005b10:	014200b4 	movhi	r5,2050
 8005b14:	29723a84 	addi	r5,r5,-14102
 8005b18:	d9412c15 	stw	r5,1200(sp)
 8005b1c:	04c001c4 	movi	r19,7
 8005b20:	00000306 	br	8005b30 <___vfprintf_internal_r+0xfa4>
 8005b24:	ad7ffc04 	addi	r21,r21,-16
 8005b28:	42000204 	addi	r8,r8,8
 8005b2c:	e540110e 	bge	fp,r21,8005b74 <___vfprintf_internal_r+0xfe8>
 8005b30:	18c00404 	addi	r3,r3,16
 8005b34:	10800044 	addi	r2,r2,1
 8005b38:	45000015 	stw	r20,0(r8)
 8005b3c:	47000115 	stw	fp,4(r8)
 8005b40:	d8c12015 	stw	r3,1152(sp)
 8005b44:	d8811f15 	stw	r2,1148(sp)
 8005b48:	98bff60e 	bge	r19,r2,8005b24 <__alt_data_end+0xf8005b24>
 8005b4c:	b009883a 	mov	r4,r22
 8005b50:	b80b883a 	mov	r5,r23
 8005b54:	d9811e04 	addi	r6,sp,1144
 8005b58:	80112f00 	call	80112f0 <__sprint_r>
 8005b5c:	103d221e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005b60:	ad7ffc04 	addi	r21,r21,-16
 8005b64:	d8c12017 	ldw	r3,1152(sp)
 8005b68:	d8811f17 	ldw	r2,1148(sp)
 8005b6c:	da000404 	addi	r8,sp,16
 8005b70:	e57fef16 	blt	fp,r21,8005b30 <__alt_data_end+0xf8005b30>
 8005b74:	dac12c17 	ldw	r11,1200(sp)
 8005b78:	1d47883a 	add	r3,r3,r21
 8005b7c:	10800044 	addi	r2,r2,1
 8005b80:	42c00015 	stw	r11,0(r8)
 8005b84:	45400115 	stw	r21,4(r8)
 8005b88:	d8c12015 	stw	r3,1152(sp)
 8005b8c:	d8811f15 	stw	r2,1148(sp)
 8005b90:	010001c4 	movi	r4,7
 8005b94:	20819116 	blt	r4,r2,80061dc <___vfprintf_internal_r+0x1650>
 8005b98:	42000204 	addi	r8,r8,8
 8005b9c:	003dec06 	br	8005350 <__alt_data_end+0xf8005350>
 8005ba0:	db013317 	ldw	r12,1228(sp)
 8005ba4:	00800044 	movi	r2,1
 8005ba8:	18c00044 	addi	r3,r3,1
 8005bac:	1301530e 	bge	r2,r12,80060fc <___vfprintf_internal_r+0x1570>
 8005bb0:	dc011f17 	ldw	r16,1148(sp)
 8005bb4:	dac13117 	ldw	r11,1220(sp)
 8005bb8:	00800044 	movi	r2,1
 8005bbc:	84000044 	addi	r16,r16,1
 8005bc0:	40800115 	stw	r2,4(r8)
 8005bc4:	42c00015 	stw	r11,0(r8)
 8005bc8:	d8c12015 	stw	r3,1152(sp)
 8005bcc:	dc011f15 	stw	r16,1148(sp)
 8005bd0:	008001c4 	movi	r2,7
 8005bd4:	14016b16 	blt	r2,r16,8006184 <___vfprintf_internal_r+0x15f8>
 8005bd8:	42000204 	addi	r8,r8,8
 8005bdc:	db013817 	ldw	r12,1248(sp)
 8005be0:	dac13517 	ldw	r11,1236(sp)
 8005be4:	84000044 	addi	r16,r16,1
 8005be8:	1b07883a 	add	r3,r3,r12
 8005bec:	42c00015 	stw	r11,0(r8)
 8005bf0:	43000115 	stw	r12,4(r8)
 8005bf4:	d8c12015 	stw	r3,1152(sp)
 8005bf8:	dc011f15 	stw	r16,1148(sp)
 8005bfc:	008001c4 	movi	r2,7
 8005c00:	14016916 	blt	r2,r16,80061a8 <___vfprintf_internal_r+0x161c>
 8005c04:	44800204 	addi	r18,r8,8
 8005c08:	d9013717 	ldw	r4,1244(sp)
 8005c0c:	d9413917 	ldw	r5,1252(sp)
 8005c10:	000d883a 	mov	r6,zero
 8005c14:	000f883a 	mov	r7,zero
 8005c18:	d8c13d15 	stw	r3,1268(sp)
 8005c1c:	8016cec0 	call	8016cec <__eqdf2>
 8005c20:	d8c13d17 	ldw	r3,1268(sp)
 8005c24:	db013317 	ldw	r12,1228(sp)
 8005c28:	1000ae26 	beq	r2,zero,8005ee4 <___vfprintf_internal_r+0x1358>
 8005c2c:	dac13117 	ldw	r11,1220(sp)
 8005c30:	60bfffc4 	addi	r2,r12,-1
 8005c34:	1887883a 	add	r3,r3,r2
 8005c38:	59000044 	addi	r4,r11,1
 8005c3c:	84000044 	addi	r16,r16,1
 8005c40:	90800115 	stw	r2,4(r18)
 8005c44:	91000015 	stw	r4,0(r18)
 8005c48:	d8c12015 	stw	r3,1152(sp)
 8005c4c:	dc011f15 	stw	r16,1148(sp)
 8005c50:	008001c4 	movi	r2,7
 8005c54:	14014216 	blt	r2,r16,8006160 <___vfprintf_internal_r+0x15d4>
 8005c58:	94800204 	addi	r18,r18,8
 8005c5c:	dac13a17 	ldw	r11,1256(sp)
 8005c60:	dd4122c4 	addi	r21,sp,1163
 8005c64:	84000044 	addi	r16,r16,1
 8005c68:	58c7883a 	add	r3,r11,r3
 8005c6c:	95400015 	stw	r21,0(r18)
 8005c70:	92c00115 	stw	r11,4(r18)
 8005c74:	d8c12015 	stw	r3,1152(sp)
 8005c78:	dc011f15 	stw	r16,1148(sp)
 8005c7c:	008001c4 	movi	r2,7
 8005c80:	14000e16 	blt	r2,r16,8005cbc <___vfprintf_internal_r+0x1130>
 8005c84:	92000204 	addi	r8,r18,8
 8005c88:	003de706 	br	8005428 <__alt_data_end+0xf8005428>
 8005c8c:	010200b4 	movhi	r4,2050
 8005c90:	21323a84 	addi	r4,r4,-14102
 8005c94:	d9012c15 	stw	r4,1200(sp)
 8005c98:	dac12c17 	ldw	r11,1200(sp)
 8005c9c:	1c07883a 	add	r3,r3,r16
 8005ca0:	44000115 	stw	r16,4(r8)
 8005ca4:	42c00015 	stw	r11,0(r8)
 8005ca8:	10800044 	addi	r2,r2,1
 8005cac:	d8c12015 	stw	r3,1152(sp)
 8005cb0:	d8811f15 	stw	r2,1148(sp)
 8005cb4:	010001c4 	movi	r4,7
 8005cb8:	20bdda0e 	bge	r4,r2,8005424 <__alt_data_end+0xf8005424>
 8005cbc:	b009883a 	mov	r4,r22
 8005cc0:	b80b883a 	mov	r5,r23
 8005cc4:	d9811e04 	addi	r6,sp,1144
 8005cc8:	80112f00 	call	80112f0 <__sprint_r>
 8005ccc:	103cc61e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005cd0:	d8c12017 	ldw	r3,1152(sp)
 8005cd4:	da000404 	addi	r8,sp,16
 8005cd8:	003dd306 	br	8005428 <__alt_data_end+0xf8005428>
 8005cdc:	b009883a 	mov	r4,r22
 8005ce0:	b80b883a 	mov	r5,r23
 8005ce4:	d9811e04 	addi	r6,sp,1144
 8005ce8:	80112f00 	call	80112f0 <__sprint_r>
 8005cec:	103e0926 	beq	r2,zero,8005514 <__alt_data_end+0xf8005514>
 8005cf0:	003cbd06 	br	8004fe8 <__alt_data_end+0xf8004fe8>
 8005cf4:	10803fcc 	andi	r2,r2,255
 8005cf8:	1000651e 	bne	r2,zero,8005e90 <___vfprintf_internal_r+0x1304>
 8005cfc:	8880004c 	andi	r2,r17,1
 8005d00:	10013226 	beq	r2,zero,80061cc <___vfprintf_internal_r+0x1640>
 8005d04:	00800c04 	movi	r2,48
 8005d08:	d8c10dc4 	addi	r3,sp,1079
 8005d0c:	d8810dc5 	stb	r2,1079(sp)
 8005d10:	dc813c17 	ldw	r18,1264(sp)
 8005d14:	d8c13115 	stw	r3,1220(sp)
 8005d18:	003d2b06 	br	80051c8 <__alt_data_end+0xf80051c8>
 8005d1c:	b009883a 	mov	r4,r22
 8005d20:	b80b883a 	mov	r5,r23
 8005d24:	d9811e04 	addi	r6,sp,1144
 8005d28:	80112f00 	call	80112f0 <__sprint_r>
 8005d2c:	103cae1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005d30:	d8c12017 	ldw	r3,1152(sp)
 8005d34:	da000404 	addi	r8,sp,16
 8005d38:	003dae06 	br	80053f4 <__alt_data_end+0xf80053f4>
 8005d3c:	b009883a 	mov	r4,r22
 8005d40:	b80b883a 	mov	r5,r23
 8005d44:	d9811e04 	addi	r6,sp,1144
 8005d48:	80112f00 	call	80112f0 <__sprint_r>
 8005d4c:	103ca61e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005d50:	d8c12017 	ldw	r3,1152(sp)
 8005d54:	da000404 	addi	r8,sp,16
 8005d58:	003d6c06 	br	800530c <__alt_data_end+0xf800530c>
 8005d5c:	b009883a 	mov	r4,r22
 8005d60:	b80b883a 	mov	r5,r23
 8005d64:	d9811e04 	addi	r6,sp,1144
 8005d68:	80112f00 	call	80112f0 <__sprint_r>
 8005d6c:	103c9e1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005d70:	d8c12017 	ldw	r3,1152(sp)
 8005d74:	da000404 	addi	r8,sp,16
 8005d78:	003d7206 	br	8005344 <__alt_data_end+0xf8005344>
 8005d7c:	d9413b17 	ldw	r5,1260(sp)
 8005d80:	d8c10e04 	addi	r3,sp,1080
 8005d84:	988003cc 	andi	r2,r19,15
 8005d88:	e008973a 	slli	r4,fp,28
 8005d8c:	2885883a 	add	r2,r5,r2
 8005d90:	9826d13a 	srli	r19,r19,4
 8005d94:	10800003 	ldbu	r2,0(r2)
 8005d98:	e038d13a 	srli	fp,fp,4
 8005d9c:	18ffffc4 	addi	r3,r3,-1
 8005da0:	24e6b03a 	or	r19,r4,r19
 8005da4:	18800005 	stb	r2,0(r3)
 8005da8:	9f04b03a 	or	r2,r19,fp
 8005dac:	103ff51e 	bne	r2,zero,8005d84 <__alt_data_end+0xf8005d84>
 8005db0:	db012817 	ldw	r12,1184(sp)
 8005db4:	d8c13115 	stw	r3,1220(sp)
 8005db8:	60e5c83a 	sub	r18,r12,r3
 8005dbc:	003d0206 	br	80051c8 <__alt_data_end+0xf80051c8>
 8005dc0:	dc012617 	ldw	r16,1176(sp)
 8005dc4:	0401b10e 	bge	zero,r16,800648c <___vfprintf_internal_r+0x1900>
 8005dc8:	db013117 	ldw	r12,1220(sp)
 8005dcc:	dac13317 	ldw	r11,1228(sp)
 8005dd0:	62e1883a 	add	r16,r12,r11
 8005dd4:	db013417 	ldw	r12,1232(sp)
 8005dd8:	5825883a 	mov	r18,r11
 8005ddc:	62c0010e 	bge	r12,r11,8005de4 <___vfprintf_internal_r+0x1258>
 8005de0:	6025883a 	mov	r18,r12
 8005de4:	04800b0e 	bge	zero,r18,8005e14 <___vfprintf_internal_r+0x1288>
 8005de8:	d8811f17 	ldw	r2,1148(sp)
 8005dec:	dac13117 	ldw	r11,1220(sp)
 8005df0:	1c87883a 	add	r3,r3,r18
 8005df4:	10800044 	addi	r2,r2,1
 8005df8:	42c00015 	stw	r11,0(r8)
 8005dfc:	44800115 	stw	r18,4(r8)
 8005e00:	d8c12015 	stw	r3,1152(sp)
 8005e04:	d8811f15 	stw	r2,1148(sp)
 8005e08:	010001c4 	movi	r4,7
 8005e0c:	20824f16 	blt	r4,r2,800674c <___vfprintf_internal_r+0x1bc0>
 8005e10:	42000204 	addi	r8,r8,8
 8005e14:	90024b16 	blt	r18,zero,8006744 <___vfprintf_internal_r+0x1bb8>
 8005e18:	db013417 	ldw	r12,1232(sp)
 8005e1c:	64a5c83a 	sub	r18,r12,r18
 8005e20:	0480730e 	bge	zero,r18,8005ff0 <___vfprintf_internal_r+0x1464>
 8005e24:	05400404 	movi	r21,16
 8005e28:	d8811f17 	ldw	r2,1148(sp)
 8005e2c:	ac817d0e 	bge	r21,r18,8006424 <___vfprintf_internal_r+0x1898>
 8005e30:	014200b4 	movhi	r5,2050
 8005e34:	29723a84 	addi	r5,r5,-14102
 8005e38:	d9412c15 	stw	r5,1200(sp)
 8005e3c:	070001c4 	movi	fp,7
 8005e40:	00000306 	br	8005e50 <___vfprintf_internal_r+0x12c4>
 8005e44:	42000204 	addi	r8,r8,8
 8005e48:	94bffc04 	addi	r18,r18,-16
 8005e4c:	ac81780e 	bge	r21,r18,8006430 <___vfprintf_internal_r+0x18a4>
 8005e50:	18c00404 	addi	r3,r3,16
 8005e54:	10800044 	addi	r2,r2,1
 8005e58:	45000015 	stw	r20,0(r8)
 8005e5c:	45400115 	stw	r21,4(r8)
 8005e60:	d8c12015 	stw	r3,1152(sp)
 8005e64:	d8811f15 	stw	r2,1148(sp)
 8005e68:	e0bff60e 	bge	fp,r2,8005e44 <__alt_data_end+0xf8005e44>
 8005e6c:	b009883a 	mov	r4,r22
 8005e70:	b80b883a 	mov	r5,r23
 8005e74:	d9811e04 	addi	r6,sp,1144
 8005e78:	80112f00 	call	80112f0 <__sprint_r>
 8005e7c:	103c5a1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005e80:	d8c12017 	ldw	r3,1152(sp)
 8005e84:	d8811f17 	ldw	r2,1148(sp)
 8005e88:	da000404 	addi	r8,sp,16
 8005e8c:	003fee06 	br	8005e48 <__alt_data_end+0xf8005e48>
 8005e90:	dac10e04 	addi	r11,sp,1080
 8005e94:	0025883a 	mov	r18,zero
 8005e98:	dac13115 	stw	r11,1220(sp)
 8005e9c:	003cca06 	br	80051c8 <__alt_data_end+0xf80051c8>
 8005ea0:	b009883a 	mov	r4,r22
 8005ea4:	b80b883a 	mov	r5,r23
 8005ea8:	d9811e04 	addi	r6,sp,1144
 8005eac:	80112f00 	call	80112f0 <__sprint_r>
 8005eb0:	103c4d1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005eb4:	d8c12017 	ldw	r3,1152(sp)
 8005eb8:	d8812787 	ldb	r2,1182(sp)
 8005ebc:	da000404 	addi	r8,sp,16
 8005ec0:	003d0506 	br	80052d8 <__alt_data_end+0xf80052d8>
 8005ec4:	dac12d17 	ldw	r11,1204(sp)
 8005ec8:	14c00017 	ldw	r19,0(r2)
 8005ecc:	0039883a 	mov	fp,zero
 8005ed0:	5ac00104 	addi	r11,r11,4
 8005ed4:	dac12d15 	stw	r11,1204(sp)
 8005ed8:	0005883a 	mov	r2,zero
 8005edc:	9807883a 	mov	r3,r19
 8005ee0:	003c9c06 	br	8005154 <__alt_data_end+0xf8005154>
 8005ee4:	657fffc4 	addi	r21,r12,-1
 8005ee8:	057f5c0e 	bge	zero,r21,8005c5c <__alt_data_end+0xf8005c5c>
 8005eec:	07000404 	movi	fp,16
 8005ef0:	e5408f0e 	bge	fp,r21,8006130 <___vfprintf_internal_r+0x15a4>
 8005ef4:	010200b4 	movhi	r4,2050
 8005ef8:	21323a84 	addi	r4,r4,-14102
 8005efc:	d9012c15 	stw	r4,1200(sp)
 8005f00:	01c001c4 	movi	r7,7
 8005f04:	00000306 	br	8005f14 <___vfprintf_internal_r+0x1388>
 8005f08:	94800204 	addi	r18,r18,8
 8005f0c:	ad7ffc04 	addi	r21,r21,-16
 8005f10:	e5408a0e 	bge	fp,r21,800613c <___vfprintf_internal_r+0x15b0>
 8005f14:	18c00404 	addi	r3,r3,16
 8005f18:	84000044 	addi	r16,r16,1
 8005f1c:	95000015 	stw	r20,0(r18)
 8005f20:	97000115 	stw	fp,4(r18)
 8005f24:	d8c12015 	stw	r3,1152(sp)
 8005f28:	dc011f15 	stw	r16,1148(sp)
 8005f2c:	3c3ff60e 	bge	r7,r16,8005f08 <__alt_data_end+0xf8005f08>
 8005f30:	b009883a 	mov	r4,r22
 8005f34:	b80b883a 	mov	r5,r23
 8005f38:	d9811e04 	addi	r6,sp,1144
 8005f3c:	d9c13d15 	stw	r7,1268(sp)
 8005f40:	80112f00 	call	80112f0 <__sprint_r>
 8005f44:	d9c13d17 	ldw	r7,1268(sp)
 8005f48:	103c271e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005f4c:	d8c12017 	ldw	r3,1152(sp)
 8005f50:	dc011f17 	ldw	r16,1148(sp)
 8005f54:	dc800404 	addi	r18,sp,16
 8005f58:	003fec06 	br	8005f0c <__alt_data_end+0xf8005f0c>
 8005f5c:	1cc00017 	ldw	r19,0(r3)
 8005f60:	dac12d17 	ldw	r11,1204(sp)
 8005f64:	9839d7fa 	srai	fp,r19,31
 8005f68:	5ac00104 	addi	r11,r11,4
 8005f6c:	dac12d15 	stw	r11,1204(sp)
 8005f70:	e005883a 	mov	r2,fp
 8005f74:	003d9006 	br	80055b8 <__alt_data_end+0xf80055b8>
 8005f78:	00800084 	movi	r2,2
 8005f7c:	9f06b03a 	or	r3,r19,fp
 8005f80:	003c7406 	br	8005154 <__alt_data_end+0xf8005154>
 8005f84:	db012d17 	ldw	r12,1204(sp)
 8005f88:	14c00017 	ldw	r19,0(r2)
 8005f8c:	0039883a 	mov	fp,zero
 8005f90:	63000104 	addi	r12,r12,4
 8005f94:	db012d15 	stw	r12,1204(sp)
 8005f98:	00800044 	movi	r2,1
 8005f9c:	9807883a 	mov	r3,r19
 8005fa0:	003c6c06 	br	8005154 <__alt_data_end+0xf8005154>
 8005fa4:	10803fcc 	andi	r2,r2,255
 8005fa8:	1080201c 	xori	r2,r2,128
 8005fac:	10bfe004 	addi	r2,r2,-128
 8005fb0:	01000c04 	movi	r4,48
 8005fb4:	1101a526 	beq	r2,r4,800664c <___vfprintf_internal_r+0x1ac0>
 8005fb8:	dac13117 	ldw	r11,1220(sp)
 8005fbc:	db012817 	ldw	r12,1184(sp)
 8005fc0:	193fffc5 	stb	r4,-1(r3)
 8005fc4:	5affffc4 	addi	r11,r11,-1
 8005fc8:	dac13115 	stw	r11,1220(sp)
 8005fcc:	62e5c83a 	sub	r18,r12,r11
 8005fd0:	003c7d06 	br	80051c8 <__alt_data_end+0xf80051c8>
 8005fd4:	b009883a 	mov	r4,r22
 8005fd8:	b80b883a 	mov	r5,r23
 8005fdc:	d9811e04 	addi	r6,sp,1144
 8005fe0:	80112f00 	call	80112f0 <__sprint_r>
 8005fe4:	103c001e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8005fe8:	d8c12017 	ldw	r3,1152(sp)
 8005fec:	da000404 	addi	r8,sp,16
 8005ff0:	db013117 	ldw	r12,1220(sp)
 8005ff4:	dac13417 	ldw	r11,1232(sp)
 8005ff8:	d8812617 	ldw	r2,1176(sp)
 8005ffc:	62e5883a 	add	r18,r12,r11
 8006000:	db013317 	ldw	r12,1228(sp)
 8006004:	13000216 	blt	r2,r12,8006010 <___vfprintf_internal_r+0x1484>
 8006008:	8900004c 	andi	r4,r17,1
 800600c:	20000c26 	beq	r4,zero,8006040 <___vfprintf_internal_r+0x14b4>
 8006010:	dac13817 	ldw	r11,1248(sp)
 8006014:	d9011f17 	ldw	r4,1148(sp)
 8006018:	db013517 	ldw	r12,1236(sp)
 800601c:	1ac7883a 	add	r3,r3,r11
 8006020:	21000044 	addi	r4,r4,1
 8006024:	43000015 	stw	r12,0(r8)
 8006028:	42c00115 	stw	r11,4(r8)
 800602c:	d8c12015 	stw	r3,1152(sp)
 8006030:	d9011f15 	stw	r4,1148(sp)
 8006034:	014001c4 	movi	r5,7
 8006038:	2901cc16 	blt	r5,r4,800676c <___vfprintf_internal_r+0x1be0>
 800603c:	42000204 	addi	r8,r8,8
 8006040:	dac13317 	ldw	r11,1228(sp)
 8006044:	8489c83a 	sub	r4,r16,r18
 8006048:	5885c83a 	sub	r2,r11,r2
 800604c:	1021883a 	mov	r16,r2
 8006050:	2080010e 	bge	r4,r2,8006058 <___vfprintf_internal_r+0x14cc>
 8006054:	2021883a 	mov	r16,r4
 8006058:	04000a0e 	bge	zero,r16,8006084 <___vfprintf_internal_r+0x14f8>
 800605c:	d9011f17 	ldw	r4,1148(sp)
 8006060:	1c07883a 	add	r3,r3,r16
 8006064:	44800015 	stw	r18,0(r8)
 8006068:	21000044 	addi	r4,r4,1
 800606c:	44000115 	stw	r16,4(r8)
 8006070:	d8c12015 	stw	r3,1152(sp)
 8006074:	d9011f15 	stw	r4,1148(sp)
 8006078:	014001c4 	movi	r5,7
 800607c:	2901d616 	blt	r5,r4,80067d8 <___vfprintf_internal_r+0x1c4c>
 8006080:	42000204 	addi	r8,r8,8
 8006084:	8001df16 	blt	r16,zero,8006804 <___vfprintf_internal_r+0x1c78>
 8006088:	1421c83a 	sub	r16,r2,r16
 800608c:	043ce60e 	bge	zero,r16,8005428 <__alt_data_end+0xf8005428>
 8006090:	04800404 	movi	r18,16
 8006094:	d8811f17 	ldw	r2,1148(sp)
 8006098:	943efc0e 	bge	r18,r16,8005c8c <__alt_data_end+0xf8005c8c>
 800609c:	014200b4 	movhi	r5,2050
 80060a0:	29723a84 	addi	r5,r5,-14102
 80060a4:	d9412c15 	stw	r5,1200(sp)
 80060a8:	054001c4 	movi	r21,7
 80060ac:	00000306 	br	80060bc <___vfprintf_internal_r+0x1530>
 80060b0:	42000204 	addi	r8,r8,8
 80060b4:	843ffc04 	addi	r16,r16,-16
 80060b8:	943ef70e 	bge	r18,r16,8005c98 <__alt_data_end+0xf8005c98>
 80060bc:	18c00404 	addi	r3,r3,16
 80060c0:	10800044 	addi	r2,r2,1
 80060c4:	45000015 	stw	r20,0(r8)
 80060c8:	44800115 	stw	r18,4(r8)
 80060cc:	d8c12015 	stw	r3,1152(sp)
 80060d0:	d8811f15 	stw	r2,1148(sp)
 80060d4:	a8bff60e 	bge	r21,r2,80060b0 <__alt_data_end+0xf80060b0>
 80060d8:	b009883a 	mov	r4,r22
 80060dc:	b80b883a 	mov	r5,r23
 80060e0:	d9811e04 	addi	r6,sp,1144
 80060e4:	80112f00 	call	80112f0 <__sprint_r>
 80060e8:	103bbf1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80060ec:	d8c12017 	ldw	r3,1152(sp)
 80060f0:	d8811f17 	ldw	r2,1148(sp)
 80060f4:	da000404 	addi	r8,sp,16
 80060f8:	003fee06 	br	80060b4 <__alt_data_end+0xf80060b4>
 80060fc:	8888703a 	and	r4,r17,r2
 8006100:	203eab1e 	bne	r4,zero,8005bb0 <__alt_data_end+0xf8005bb0>
 8006104:	dc011f17 	ldw	r16,1148(sp)
 8006108:	db013117 	ldw	r12,1220(sp)
 800610c:	40800115 	stw	r2,4(r8)
 8006110:	84000044 	addi	r16,r16,1
 8006114:	43000015 	stw	r12,0(r8)
 8006118:	d8c12015 	stw	r3,1152(sp)
 800611c:	dc011f15 	stw	r16,1148(sp)
 8006120:	008001c4 	movi	r2,7
 8006124:	14000e16 	blt	r2,r16,8006160 <___vfprintf_internal_r+0x15d4>
 8006128:	44800204 	addi	r18,r8,8
 800612c:	003ecb06 	br	8005c5c <__alt_data_end+0xf8005c5c>
 8006130:	008200b4 	movhi	r2,2050
 8006134:	10b23a84 	addi	r2,r2,-14102
 8006138:	d8812c15 	stw	r2,1200(sp)
 800613c:	dac12c17 	ldw	r11,1200(sp)
 8006140:	1d47883a 	add	r3,r3,r21
 8006144:	84000044 	addi	r16,r16,1
 8006148:	92c00015 	stw	r11,0(r18)
 800614c:	95400115 	stw	r21,4(r18)
 8006150:	d8c12015 	stw	r3,1152(sp)
 8006154:	dc011f15 	stw	r16,1148(sp)
 8006158:	008001c4 	movi	r2,7
 800615c:	143ebe0e 	bge	r2,r16,8005c58 <__alt_data_end+0xf8005c58>
 8006160:	b009883a 	mov	r4,r22
 8006164:	b80b883a 	mov	r5,r23
 8006168:	d9811e04 	addi	r6,sp,1144
 800616c:	80112f00 	call	80112f0 <__sprint_r>
 8006170:	103b9d1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8006174:	d8c12017 	ldw	r3,1152(sp)
 8006178:	dc011f17 	ldw	r16,1148(sp)
 800617c:	dc800404 	addi	r18,sp,16
 8006180:	003eb606 	br	8005c5c <__alt_data_end+0xf8005c5c>
 8006184:	b009883a 	mov	r4,r22
 8006188:	b80b883a 	mov	r5,r23
 800618c:	d9811e04 	addi	r6,sp,1144
 8006190:	80112f00 	call	80112f0 <__sprint_r>
 8006194:	103b941e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8006198:	d8c12017 	ldw	r3,1152(sp)
 800619c:	dc011f17 	ldw	r16,1148(sp)
 80061a0:	da000404 	addi	r8,sp,16
 80061a4:	003e8d06 	br	8005bdc <__alt_data_end+0xf8005bdc>
 80061a8:	b009883a 	mov	r4,r22
 80061ac:	b80b883a 	mov	r5,r23
 80061b0:	d9811e04 	addi	r6,sp,1144
 80061b4:	80112f00 	call	80112f0 <__sprint_r>
 80061b8:	103b8b1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80061bc:	d8c12017 	ldw	r3,1152(sp)
 80061c0:	dc011f17 	ldw	r16,1148(sp)
 80061c4:	dc800404 	addi	r18,sp,16
 80061c8:	003e8f06 	br	8005c08 <__alt_data_end+0xf8005c08>
 80061cc:	db010e04 	addi	r12,sp,1080
 80061d0:	0025883a 	mov	r18,zero
 80061d4:	db013115 	stw	r12,1220(sp)
 80061d8:	003bfb06 	br	80051c8 <__alt_data_end+0xf80051c8>
 80061dc:	b009883a 	mov	r4,r22
 80061e0:	b80b883a 	mov	r5,r23
 80061e4:	d9811e04 	addi	r6,sp,1144
 80061e8:	80112f00 	call	80112f0 <__sprint_r>
 80061ec:	103b7e1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80061f0:	d8c12017 	ldw	r3,1152(sp)
 80061f4:	da000404 	addi	r8,sp,16
 80061f8:	003c5506 	br	8005350 <__alt_data_end+0xf8005350>
 80061fc:	04e7c83a 	sub	r19,zero,r19
 8006200:	9804c03a 	cmpne	r2,r19,zero
 8006204:	0739c83a 	sub	fp,zero,fp
 8006208:	e0b9c83a 	sub	fp,fp,r2
 800620c:	05400b44 	movi	r21,45
 8006210:	dd412785 	stb	r21,1182(sp)
 8006214:	da413215 	stw	r9,1224(sp)
 8006218:	00800044 	movi	r2,1
 800621c:	9f06b03a 	or	r3,r19,fp
 8006220:	003bcf06 	br	8005160 <__alt_data_end+0xf8005160>
 8006224:	da013f15 	stw	r8,1276(sp)
 8006228:	da413e15 	stw	r9,1272(sp)
 800622c:	800b8500 	call	800b850 <__fpclassifyd>
 8006230:	da013f17 	ldw	r8,1276(sp)
 8006234:	da413e17 	ldw	r9,1272(sp)
 8006238:	1000ce26 	beq	r2,zero,8006574 <___vfprintf_internal_r+0x19e8>
 800623c:	057ff7c4 	movi	r21,-33
 8006240:	00bfffc4 	movi	r2,-1
 8006244:	856a703a 	and	r21,r16,r21
 8006248:	4881f026 	beq	r9,r2,8006a0c <___vfprintf_internal_r+0x1e80>
 800624c:	008011c4 	movi	r2,71
 8006250:	a881e526 	beq	r21,r2,80069e8 <___vfprintf_internal_r+0x1e5c>
 8006254:	db013917 	ldw	r12,1252(sp)
 8006258:	8ac04014 	ori	r11,r17,256
 800625c:	dac12d15 	stw	r11,1204(sp)
 8006260:	6001e416 	blt	r12,zero,80069f4 <___vfprintf_internal_r+0x1e68>
 8006264:	dc813917 	ldw	r18,1252(sp)
 8006268:	d8012b05 	stb	zero,1196(sp)
 800626c:	00801984 	movi	r2,102
 8006270:	80811826 	beq	r16,r2,80066d4 <___vfprintf_internal_r+0x1b48>
 8006274:	00801184 	movi	r2,70
 8006278:	80811626 	beq	r16,r2,80066d4 <___vfprintf_internal_r+0x1b48>
 800627c:	00801144 	movi	r2,69
 8006280:	a881e026 	beq	r21,r2,8006a04 <___vfprintf_internal_r+0x1e78>
 8006284:	4839883a 	mov	fp,r9
 8006288:	d8812604 	addi	r2,sp,1176
 800628c:	d8800115 	stw	r2,4(sp)
 8006290:	d9413717 	ldw	r5,1244(sp)
 8006294:	d8812504 	addi	r2,sp,1172
 8006298:	d8800215 	stw	r2,8(sp)
 800629c:	d8812104 	addi	r2,sp,1156
 80062a0:	df000015 	stw	fp,0(sp)
 80062a4:	d8800315 	stw	r2,12(sp)
 80062a8:	b009883a 	mov	r4,r22
 80062ac:	900d883a 	mov	r6,r18
 80062b0:	01c00084 	movi	r7,2
 80062b4:	da013f15 	stw	r8,1276(sp)
 80062b8:	da413e15 	stw	r9,1272(sp)
 80062bc:	8006f8c0 	call	8006f8c <_dtoa_r>
 80062c0:	d8813115 	stw	r2,1220(sp)
 80062c4:	008019c4 	movi	r2,103
 80062c8:	da013f17 	ldw	r8,1276(sp)
 80062cc:	da413e17 	ldw	r9,1272(sp)
 80062d0:	80800226 	beq	r16,r2,80062dc <___vfprintf_internal_r+0x1750>
 80062d4:	008011c4 	movi	r2,71
 80062d8:	8081101e 	bne	r16,r2,800671c <___vfprintf_internal_r+0x1b90>
 80062dc:	8880004c 	andi	r2,r17,1
 80062e0:	1001df26 	beq	r2,zero,8006a60 <___vfprintf_internal_r+0x1ed4>
 80062e4:	db013117 	ldw	r12,1220(sp)
 80062e8:	6715883a 	add	r10,r12,fp
 80062ec:	d9013717 	ldw	r4,1244(sp)
 80062f0:	900b883a 	mov	r5,r18
 80062f4:	000d883a 	mov	r6,zero
 80062f8:	000f883a 	mov	r7,zero
 80062fc:	da013f15 	stw	r8,1276(sp)
 8006300:	da413e15 	stw	r9,1272(sp)
 8006304:	da813d15 	stw	r10,1268(sp)
 8006308:	8016cec0 	call	8016cec <__eqdf2>
 800630c:	da013f17 	ldw	r8,1276(sp)
 8006310:	da413e17 	ldw	r9,1272(sp)
 8006314:	da813d17 	ldw	r10,1268(sp)
 8006318:	10016526 	beq	r2,zero,80068b0 <___vfprintf_internal_r+0x1d24>
 800631c:	d8812117 	ldw	r2,1156(sp)
 8006320:	1280062e 	bgeu	r2,r10,800633c <___vfprintf_internal_r+0x17b0>
 8006324:	01000c04 	movi	r4,48
 8006328:	10c00044 	addi	r3,r2,1
 800632c:	d8c12115 	stw	r3,1156(sp)
 8006330:	11000005 	stb	r4,0(r2)
 8006334:	d8812117 	ldw	r2,1156(sp)
 8006338:	12bffb36 	bltu	r2,r10,8006328 <__alt_data_end+0xf8006328>
 800633c:	db013117 	ldw	r12,1220(sp)
 8006340:	1305c83a 	sub	r2,r2,r12
 8006344:	d8813315 	stw	r2,1228(sp)
 8006348:	008011c4 	movi	r2,71
 800634c:	a8814a26 	beq	r21,r2,8006878 <___vfprintf_internal_r+0x1cec>
 8006350:	00801944 	movi	r2,101
 8006354:	14020a0e 	bge	r2,r16,8006b80 <___vfprintf_internal_r+0x1ff4>
 8006358:	00801984 	movi	r2,102
 800635c:	8081b626 	beq	r16,r2,8006a38 <___vfprintf_internal_r+0x1eac>
 8006360:	db012617 	ldw	r12,1176(sp)
 8006364:	db013415 	stw	r12,1232(sp)
 8006368:	db013417 	ldw	r12,1232(sp)
 800636c:	dac13317 	ldw	r11,1228(sp)
 8006370:	62c1a816 	blt	r12,r11,8006a14 <___vfprintf_internal_r+0x1e88>
 8006374:	8c40004c 	andi	r17,r17,1
 8006378:	8801ca1e 	bne	r17,zero,8006aa4 <___vfprintf_internal_r+0x1f18>
 800637c:	6005883a 	mov	r2,r12
 8006380:	6001b516 	blt	r12,zero,8006a58 <___vfprintf_internal_r+0x1ecc>
 8006384:	dc813417 	ldw	r18,1232(sp)
 8006388:	df012b07 	ldb	fp,1196(sp)
 800638c:	e001321e 	bne	fp,zero,8006858 <___vfprintf_internal_r+0x1ccc>
 8006390:	dc412d17 	ldw	r17,1204(sp)
 8006394:	dd412783 	ldbu	r21,1182(sp)
 8006398:	d8812b15 	stw	r2,1196(sp)
 800639c:	dcc12d15 	stw	r19,1204(sp)
 80063a0:	d8013215 	stw	zero,1224(sp)
 80063a4:	003b8d06 	br	80051dc <__alt_data_end+0xf80051dc>
 80063a8:	88c0100c 	andi	r3,r17,64
 80063ac:	18008226 	beq	r3,zero,80065b8 <___vfprintf_internal_r+0x1a2c>
 80063b0:	dac12d17 	ldw	r11,1204(sp)
 80063b4:	14c0000b 	ldhu	r19,0(r2)
 80063b8:	0039883a 	mov	fp,zero
 80063bc:	5ac00104 	addi	r11,r11,4
 80063c0:	dac12d15 	stw	r11,1204(sp)
 80063c4:	003c8f06 	br	8005604 <__alt_data_end+0xf8005604>
 80063c8:	1c000007 	ldb	r16,0(r3)
 80063cc:	1805883a 	mov	r2,r3
 80063d0:	003a5506 	br	8004d28 <__alt_data_end+0xf8004d28>
 80063d4:	00800084 	movi	r2,2
 80063d8:	003b5e06 	br	8005154 <__alt_data_end+0xf8005154>
 80063dc:	8880040c 	andi	r2,r17,16
 80063e0:	1000091e 	bne	r2,zero,8006408 <___vfprintf_internal_r+0x187c>
 80063e4:	8c40100c 	andi	r17,r17,64
 80063e8:	88000726 	beq	r17,zero,8006408 <___vfprintf_internal_r+0x187c>
 80063ec:	db012d17 	ldw	r12,1204(sp)
 80063f0:	dac12f17 	ldw	r11,1212(sp)
 80063f4:	60800017 	ldw	r2,0(r12)
 80063f8:	63000104 	addi	r12,r12,4
 80063fc:	db012d15 	stw	r12,1204(sp)
 8006400:	12c0000d 	sth	r11,0(r2)
 8006404:	003a1e06 	br	8004c80 <__alt_data_end+0xf8004c80>
 8006408:	db012d17 	ldw	r12,1204(sp)
 800640c:	dac12f17 	ldw	r11,1212(sp)
 8006410:	60800017 	ldw	r2,0(r12)
 8006414:	63000104 	addi	r12,r12,4
 8006418:	db012d15 	stw	r12,1204(sp)
 800641c:	12c00015 	stw	r11,0(r2)
 8006420:	003a1706 	br	8004c80 <__alt_data_end+0xf8004c80>
 8006424:	010200b4 	movhi	r4,2050
 8006428:	21323a84 	addi	r4,r4,-14102
 800642c:	d9012c15 	stw	r4,1200(sp)
 8006430:	dac12c17 	ldw	r11,1200(sp)
 8006434:	1c87883a 	add	r3,r3,r18
 8006438:	10800044 	addi	r2,r2,1
 800643c:	42c00015 	stw	r11,0(r8)
 8006440:	44800115 	stw	r18,4(r8)
 8006444:	d8c12015 	stw	r3,1152(sp)
 8006448:	d8811f15 	stw	r2,1148(sp)
 800644c:	010001c4 	movi	r4,7
 8006450:	20bee016 	blt	r4,r2,8005fd4 <__alt_data_end+0xf8005fd4>
 8006454:	42000204 	addi	r8,r8,8
 8006458:	003ee506 	br	8005ff0 <__alt_data_end+0xf8005ff0>
 800645c:	010200b4 	movhi	r4,2050
 8006460:	21323a84 	addi	r4,r4,-14102
 8006464:	d9012c15 	stw	r4,1200(sp)
 8006468:	003bd806 	br	80053cc <__alt_data_end+0xf80053cc>
 800646c:	b009883a 	mov	r4,r22
 8006470:	b80b883a 	mov	r5,r23
 8006474:	d9811e04 	addi	r6,sp,1144
 8006478:	80112f00 	call	80112f0 <__sprint_r>
 800647c:	103ada1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8006480:	d8c12017 	ldw	r3,1152(sp)
 8006484:	da000404 	addi	r8,sp,16
 8006488:	003d6b06 	br	8005a38 <__alt_data_end+0xf8005a38>
 800648c:	d8811f17 	ldw	r2,1148(sp)
 8006490:	030200b4 	movhi	r12,2050
 8006494:	01000044 	movi	r4,1
 8006498:	18c00044 	addi	r3,r3,1
 800649c:	10800044 	addi	r2,r2,1
 80064a0:	63323a04 	addi	r12,r12,-14104
 80064a4:	41000115 	stw	r4,4(r8)
 80064a8:	43000015 	stw	r12,0(r8)
 80064ac:	d8c12015 	stw	r3,1152(sp)
 80064b0:	d8811f15 	stw	r2,1148(sp)
 80064b4:	010001c4 	movi	r4,7
 80064b8:	20804916 	blt	r4,r2,80065e0 <___vfprintf_internal_r+0x1a54>
 80064bc:	42000204 	addi	r8,r8,8
 80064c0:	8000041e 	bne	r16,zero,80064d4 <___vfprintf_internal_r+0x1948>
 80064c4:	dac13317 	ldw	r11,1228(sp)
 80064c8:	5800021e 	bne	r11,zero,80064d4 <___vfprintf_internal_r+0x1948>
 80064cc:	8880004c 	andi	r2,r17,1
 80064d0:	103bd526 	beq	r2,zero,8005428 <__alt_data_end+0xf8005428>
 80064d4:	db013817 	ldw	r12,1248(sp)
 80064d8:	d8811f17 	ldw	r2,1148(sp)
 80064dc:	dac13517 	ldw	r11,1236(sp)
 80064e0:	1b07883a 	add	r3,r3,r12
 80064e4:	10800044 	addi	r2,r2,1
 80064e8:	42c00015 	stw	r11,0(r8)
 80064ec:	43000115 	stw	r12,4(r8)
 80064f0:	d8c12015 	stw	r3,1152(sp)
 80064f4:	d8811f15 	stw	r2,1148(sp)
 80064f8:	010001c4 	movi	r4,7
 80064fc:	20813016 	blt	r4,r2,80069c0 <___vfprintf_internal_r+0x1e34>
 8006500:	42000204 	addi	r8,r8,8
 8006504:	0421c83a 	sub	r16,zero,r16
 8006508:	0400630e 	bge	zero,r16,8006698 <___vfprintf_internal_r+0x1b0c>
 800650c:	04800404 	movi	r18,16
 8006510:	94009f0e 	bge	r18,r16,8006790 <___vfprintf_internal_r+0x1c04>
 8006514:	010200b4 	movhi	r4,2050
 8006518:	21323a84 	addi	r4,r4,-14102
 800651c:	d9012c15 	stw	r4,1200(sp)
 8006520:	054001c4 	movi	r21,7
 8006524:	00000306 	br	8006534 <___vfprintf_internal_r+0x19a8>
 8006528:	42000204 	addi	r8,r8,8
 800652c:	843ffc04 	addi	r16,r16,-16
 8006530:	94009a0e 	bge	r18,r16,800679c <___vfprintf_internal_r+0x1c10>
 8006534:	18c00404 	addi	r3,r3,16
 8006538:	10800044 	addi	r2,r2,1
 800653c:	45000015 	stw	r20,0(r8)
 8006540:	44800115 	stw	r18,4(r8)
 8006544:	d8c12015 	stw	r3,1152(sp)
 8006548:	d8811f15 	stw	r2,1148(sp)
 800654c:	a8bff60e 	bge	r21,r2,8006528 <__alt_data_end+0xf8006528>
 8006550:	b009883a 	mov	r4,r22
 8006554:	b80b883a 	mov	r5,r23
 8006558:	d9811e04 	addi	r6,sp,1144
 800655c:	80112f00 	call	80112f0 <__sprint_r>
 8006560:	103aa11e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8006564:	d8c12017 	ldw	r3,1152(sp)
 8006568:	d8811f17 	ldw	r2,1148(sp)
 800656c:	da000404 	addi	r8,sp,16
 8006570:	003fee06 	br	800652c <__alt_data_end+0xf800652c>
 8006574:	008011c4 	movi	r2,71
 8006578:	1400b316 	blt	r2,r16,8006848 <___vfprintf_internal_r+0x1cbc>
 800657c:	030200b4 	movhi	r12,2050
 8006580:	63322c04 	addi	r12,r12,-14160
 8006584:	db013115 	stw	r12,1220(sp)
 8006588:	00c000c4 	movi	r3,3
 800658c:	00bfdfc4 	movi	r2,-129
 8006590:	d8c12b15 	stw	r3,1196(sp)
 8006594:	88a2703a 	and	r17,r17,r2
 8006598:	dd412783 	ldbu	r21,1182(sp)
 800659c:	dcc12d15 	stw	r19,1204(sp)
 80065a0:	1825883a 	mov	r18,r3
 80065a4:	d8013215 	stw	zero,1224(sp)
 80065a8:	d8013415 	stw	zero,1232(sp)
 80065ac:	003b0b06 	br	80051dc <__alt_data_end+0xf80051dc>
 80065b0:	4825883a 	mov	r18,r9
 80065b4:	003cba06 	br	80058a0 <__alt_data_end+0xf80058a0>
 80065b8:	db012d17 	ldw	r12,1204(sp)
 80065bc:	14c00017 	ldw	r19,0(r2)
 80065c0:	0039883a 	mov	fp,zero
 80065c4:	63000104 	addi	r12,r12,4
 80065c8:	db012d15 	stw	r12,1204(sp)
 80065cc:	003c0d06 	br	8005604 <__alt_data_end+0xf8005604>
 80065d0:	008200b4 	movhi	r2,2050
 80065d4:	10b22a04 	addi	r2,r2,-14168
 80065d8:	d8813115 	stw	r2,1220(sp)
 80065dc:	003ac406 	br	80050f0 <__alt_data_end+0xf80050f0>
 80065e0:	b009883a 	mov	r4,r22
 80065e4:	b80b883a 	mov	r5,r23
 80065e8:	d9811e04 	addi	r6,sp,1144
 80065ec:	80112f00 	call	80112f0 <__sprint_r>
 80065f0:	103a7d1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80065f4:	dc012617 	ldw	r16,1176(sp)
 80065f8:	d8c12017 	ldw	r3,1152(sp)
 80065fc:	da000404 	addi	r8,sp,16
 8006600:	003faf06 	br	80064c0 <__alt_data_end+0xf80064c0>
 8006604:	db012e17 	ldw	r12,1208(sp)
 8006608:	1805883a 	mov	r2,r3
 800660c:	dac12d15 	stw	r11,1204(sp)
 8006610:	0319c83a 	sub	r12,zero,r12
 8006614:	db012e15 	stw	r12,1208(sp)
 8006618:	003a7e06 	br	8005014 <__alt_data_end+0xf8005014>
 800661c:	18800044 	addi	r2,r3,1
 8006620:	8c400814 	ori	r17,r17,32
 8006624:	1c000047 	ldb	r16,1(r3)
 8006628:	0039bf06 	br	8004d28 <__alt_data_end+0xf8004d28>
 800662c:	b009883a 	mov	r4,r22
 8006630:	b80b883a 	mov	r5,r23
 8006634:	d9811e04 	addi	r6,sp,1144
 8006638:	80112f00 	call	80112f0 <__sprint_r>
 800663c:	103a6a1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8006640:	d8c12017 	ldw	r3,1152(sp)
 8006644:	da000404 	addi	r8,sp,16
 8006648:	003d0c06 	br	8005a7c <__alt_data_end+0xf8005a7c>
 800664c:	db012817 	ldw	r12,1184(sp)
 8006650:	d8c13117 	ldw	r3,1220(sp)
 8006654:	60e5c83a 	sub	r18,r12,r3
 8006658:	003adb06 	br	80051c8 <__alt_data_end+0xf80051c8>
 800665c:	da013f15 	stw	r8,1276(sp)
 8006660:	800338c0 	call	800338c <strlen>
 8006664:	1025883a 	mov	r18,r2
 8006668:	da013f17 	ldw	r8,1276(sp)
 800666c:	903c8e0e 	bge	r18,zero,80058a8 <__alt_data_end+0xf80058a8>
 8006670:	0005883a 	mov	r2,zero
 8006674:	003c8c06 	br	80058a8 <__alt_data_end+0xf80058a8>
 8006678:	b009883a 	mov	r4,r22
 800667c:	b80b883a 	mov	r5,r23
 8006680:	d9811e04 	addi	r6,sp,1144
 8006684:	80112f00 	call	80112f0 <__sprint_r>
 8006688:	103a571e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 800668c:	d8c12017 	ldw	r3,1152(sp)
 8006690:	d8811f17 	ldw	r2,1148(sp)
 8006694:	da000404 	addi	r8,sp,16
 8006698:	db013317 	ldw	r12,1228(sp)
 800669c:	dac13117 	ldw	r11,1220(sp)
 80066a0:	10800044 	addi	r2,r2,1
 80066a4:	60c7883a 	add	r3,r12,r3
 80066a8:	42c00015 	stw	r11,0(r8)
 80066ac:	43000115 	stw	r12,4(r8)
 80066b0:	d8c12015 	stw	r3,1152(sp)
 80066b4:	d8811f15 	stw	r2,1148(sp)
 80066b8:	010001c4 	movi	r4,7
 80066bc:	20bb590e 	bge	r4,r2,8005424 <__alt_data_end+0xf8005424>
 80066c0:	003d7e06 	br	8005cbc <__alt_data_end+0xf8005cbc>
 80066c4:	010200b4 	movhi	r4,2050
 80066c8:	21323e84 	addi	r4,r4,-14086
 80066cc:	d9013615 	stw	r4,1240(sp)
 80066d0:	003af606 	br	80052ac <__alt_data_end+0xf80052ac>
 80066d4:	d8812604 	addi	r2,sp,1176
 80066d8:	d8800115 	stw	r2,4(sp)
 80066dc:	d9413717 	ldw	r5,1244(sp)
 80066e0:	d8812504 	addi	r2,sp,1172
 80066e4:	d8800215 	stw	r2,8(sp)
 80066e8:	d8812104 	addi	r2,sp,1156
 80066ec:	da400015 	stw	r9,0(sp)
 80066f0:	d8800315 	stw	r2,12(sp)
 80066f4:	b009883a 	mov	r4,r22
 80066f8:	900d883a 	mov	r6,r18
 80066fc:	01c000c4 	movi	r7,3
 8006700:	da013f15 	stw	r8,1276(sp)
 8006704:	da413e15 	stw	r9,1272(sp)
 8006708:	8006f8c0 	call	8006f8c <_dtoa_r>
 800670c:	da413e17 	ldw	r9,1272(sp)
 8006710:	da013f17 	ldw	r8,1276(sp)
 8006714:	d8813115 	stw	r2,1220(sp)
 8006718:	4839883a 	mov	fp,r9
 800671c:	dac13117 	ldw	r11,1220(sp)
 8006720:	00801184 	movi	r2,70
 8006724:	5f15883a 	add	r10,r11,fp
 8006728:	a8bef01e 	bne	r21,r2,80062ec <__alt_data_end+0xf80062ec>
 800672c:	59000007 	ldb	r4,0(r11)
 8006730:	00800c04 	movi	r2,48
 8006734:	2080e026 	beq	r4,r2,8006ab8 <___vfprintf_internal_r+0x1f2c>
 8006738:	d8c12617 	ldw	r3,1176(sp)
 800673c:	50d5883a 	add	r10,r10,r3
 8006740:	003eea06 	br	80062ec <__alt_data_end+0xf80062ec>
 8006744:	0025883a 	mov	r18,zero
 8006748:	003db306 	br	8005e18 <__alt_data_end+0xf8005e18>
 800674c:	b009883a 	mov	r4,r22
 8006750:	b80b883a 	mov	r5,r23
 8006754:	d9811e04 	addi	r6,sp,1144
 8006758:	80112f00 	call	80112f0 <__sprint_r>
 800675c:	103a221e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8006760:	d8c12017 	ldw	r3,1152(sp)
 8006764:	da000404 	addi	r8,sp,16
 8006768:	003daa06 	br	8005e14 <__alt_data_end+0xf8005e14>
 800676c:	b009883a 	mov	r4,r22
 8006770:	b80b883a 	mov	r5,r23
 8006774:	d9811e04 	addi	r6,sp,1144
 8006778:	80112f00 	call	80112f0 <__sprint_r>
 800677c:	103a1a1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 8006780:	d8812617 	ldw	r2,1176(sp)
 8006784:	d8c12017 	ldw	r3,1152(sp)
 8006788:	da000404 	addi	r8,sp,16
 800678c:	003e2c06 	br	8006040 <__alt_data_end+0xf8006040>
 8006790:	030200b4 	movhi	r12,2050
 8006794:	63323a84 	addi	r12,r12,-14102
 8006798:	db012c15 	stw	r12,1200(sp)
 800679c:	dac12c17 	ldw	r11,1200(sp)
 80067a0:	1c07883a 	add	r3,r3,r16
 80067a4:	10800044 	addi	r2,r2,1
 80067a8:	42c00015 	stw	r11,0(r8)
 80067ac:	44000115 	stw	r16,4(r8)
 80067b0:	d8c12015 	stw	r3,1152(sp)
 80067b4:	d8811f15 	stw	r2,1148(sp)
 80067b8:	010001c4 	movi	r4,7
 80067bc:	20bfae16 	blt	r4,r2,8006678 <__alt_data_end+0xf8006678>
 80067c0:	42000204 	addi	r8,r8,8
 80067c4:	003fb406 	br	8006698 <__alt_data_end+0xf8006698>
 80067c8:	030200b4 	movhi	r12,2050
 80067cc:	63323e84 	addi	r12,r12,-14086
 80067d0:	db013615 	stw	r12,1240(sp)
 80067d4:	003b3806 	br	80054b8 <__alt_data_end+0xf80054b8>
 80067d8:	b009883a 	mov	r4,r22
 80067dc:	b80b883a 	mov	r5,r23
 80067e0:	d9811e04 	addi	r6,sp,1144
 80067e4:	80112f00 	call	80112f0 <__sprint_r>
 80067e8:	1039ff1e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80067ec:	d8812617 	ldw	r2,1176(sp)
 80067f0:	db013317 	ldw	r12,1228(sp)
 80067f4:	d8c12017 	ldw	r3,1152(sp)
 80067f8:	da000404 	addi	r8,sp,16
 80067fc:	6085c83a 	sub	r2,r12,r2
 8006800:	003e2006 	br	8006084 <__alt_data_end+0xf8006084>
 8006804:	0021883a 	mov	r16,zero
 8006808:	003e1f06 	br	8006088 <__alt_data_end+0xf8006088>
 800680c:	00800184 	movi	r2,6
 8006810:	1240012e 	bgeu	r2,r9,8006818 <___vfprintf_internal_r+0x1c8c>
 8006814:	1013883a 	mov	r9,r2
 8006818:	4825883a 	mov	r18,r9
 800681c:	4805883a 	mov	r2,r9
 8006820:	48009e16 	blt	r9,zero,8006a9c <___vfprintf_internal_r+0x1f10>
 8006824:	d8812b15 	stw	r2,1196(sp)
 8006828:	008200b4 	movhi	r2,2050
 800682c:	10b23804 	addi	r2,r2,-14112
 8006830:	d8813115 	stw	r2,1220(sp)
 8006834:	dcc12d15 	stw	r19,1204(sp)
 8006838:	d8013215 	stw	zero,1224(sp)
 800683c:	d8013415 	stw	zero,1232(sp)
 8006840:	0005883a 	mov	r2,zero
 8006844:	003a6c06 	br	80051f8 <__alt_data_end+0xf80051f8>
 8006848:	008200b4 	movhi	r2,2050
 800684c:	10b22d04 	addi	r2,r2,-14156
 8006850:	d8813115 	stw	r2,1220(sp)
 8006854:	003f4c06 	br	8006588 <__alt_data_end+0xf8006588>
 8006858:	00c00b44 	movi	r3,45
 800685c:	d8812b15 	stw	r2,1196(sp)
 8006860:	dc412d17 	ldw	r17,1204(sp)
 8006864:	d8c12785 	stb	r3,1182(sp)
 8006868:	dcc12d15 	stw	r19,1204(sp)
 800686c:	d8013215 	stw	zero,1224(sp)
 8006870:	00800b44 	movi	r2,45
 8006874:	003a5d06 	br	80051ec <__alt_data_end+0xf80051ec>
 8006878:	d8c12617 	ldw	r3,1176(sp)
 800687c:	00bfff44 	movi	r2,-3
 8006880:	18800d16 	blt	r3,r2,80068b8 <___vfprintf_internal_r+0x1d2c>
 8006884:	48c00c16 	blt	r9,r3,80068b8 <___vfprintf_internal_r+0x1d2c>
 8006888:	d8c13415 	stw	r3,1232(sp)
 800688c:	040019c4 	movi	r16,103
 8006890:	003eb506 	br	8006368 <__alt_data_end+0xf8006368>
 8006894:	05400b44 	movi	r21,45
 8006898:	dd412785 	stb	r21,1182(sp)
 800689c:	003a0f06 	br	80050dc <__alt_data_end+0xf80050dc>
 80068a0:	010200b4 	movhi	r4,2050
 80068a4:	21323a84 	addi	r4,r4,-14102
 80068a8:	d9012c15 	stw	r4,1200(sp)
 80068ac:	003cb106 	br	8005b74 <__alt_data_end+0xf8005b74>
 80068b0:	5005883a 	mov	r2,r10
 80068b4:	003ea106 	br	800633c <__alt_data_end+0xf800633c>
 80068b8:	843fff84 	addi	r16,r16,-2
 80068bc:	1f3fffc4 	addi	fp,r3,-1
 80068c0:	df012615 	stw	fp,1176(sp)
 80068c4:	dc0122c5 	stb	r16,1163(sp)
 80068c8:	e0009516 	blt	fp,zero,8006b20 <___vfprintf_internal_r+0x1f94>
 80068cc:	00800ac4 	movi	r2,43
 80068d0:	d8812305 	stb	r2,1164(sp)
 80068d4:	00800244 	movi	r2,9
 80068d8:	1700690e 	bge	r2,fp,8006a80 <___vfprintf_internal_r+0x1ef4>
 80068dc:	dd4122c4 	addi	r21,sp,1163
 80068e0:	dc012c15 	stw	r16,1200(sp)
 80068e4:	8825883a 	mov	r18,r17
 80068e8:	a821883a 	mov	r16,r21
 80068ec:	4023883a 	mov	r17,r8
 80068f0:	e009883a 	mov	r4,fp
 80068f4:	01400284 	movi	r5,10
 80068f8:	80024340 	call	8002434 <__modsi3>
 80068fc:	10800c04 	addi	r2,r2,48
 8006900:	843fffc4 	addi	r16,r16,-1
 8006904:	e009883a 	mov	r4,fp
 8006908:	01400284 	movi	r5,10
 800690c:	80800005 	stb	r2,0(r16)
 8006910:	80023e00 	call	80023e0 <__divsi3>
 8006914:	1039883a 	mov	fp,r2
 8006918:	00800244 	movi	r2,9
 800691c:	173ff416 	blt	r2,fp,80068f0 <__alt_data_end+0xf80068f0>
 8006920:	8811883a 	mov	r8,r17
 8006924:	e0800c04 	addi	r2,fp,48
 8006928:	9023883a 	mov	r17,r18
 800692c:	8025883a 	mov	r18,r16
 8006930:	913fffc4 	addi	r4,r18,-1
 8006934:	90bfffc5 	stb	r2,-1(r18)
 8006938:	dc012c17 	ldw	r16,1200(sp)
 800693c:	25408e2e 	bgeu	r4,r21,8006b78 <___vfprintf_internal_r+0x1fec>
 8006940:	d9412384 	addi	r5,sp,1166
 8006944:	2c8bc83a 	sub	r5,r5,r18
 8006948:	d8c12344 	addi	r3,sp,1165
 800694c:	a94b883a 	add	r5,r21,r5
 8006950:	00000106 	br	8006958 <___vfprintf_internal_r+0x1dcc>
 8006954:	20800003 	ldbu	r2,0(r4)
 8006958:	18800005 	stb	r2,0(r3)
 800695c:	18c00044 	addi	r3,r3,1
 8006960:	21000044 	addi	r4,r4,1
 8006964:	197ffb1e 	bne	r3,r5,8006954 <__alt_data_end+0xf8006954>
 8006968:	d8812304 	addi	r2,sp,1164
 800696c:	1485c83a 	sub	r2,r2,r18
 8006970:	d8c12344 	addi	r3,sp,1165
 8006974:	1885883a 	add	r2,r3,r2
 8006978:	dac13317 	ldw	r11,1228(sp)
 800697c:	156bc83a 	sub	r21,r2,r21
 8006980:	dd413a15 	stw	r21,1256(sp)
 8006984:	00800044 	movi	r2,1
 8006988:	5d65883a 	add	r18,r11,r21
 800698c:	12c0770e 	bge	r2,r11,8006b6c <___vfprintf_internal_r+0x1fe0>
 8006990:	94800044 	addi	r18,r18,1
 8006994:	9005883a 	mov	r2,r18
 8006998:	90007216 	blt	r18,zero,8006b64 <___vfprintf_internal_r+0x1fd8>
 800699c:	d8013415 	stw	zero,1232(sp)
 80069a0:	003e7906 	br	8006388 <__alt_data_end+0xf8006388>
 80069a4:	da412b15 	stw	r9,1196(sp)
 80069a8:	dd412783 	ldbu	r21,1182(sp)
 80069ac:	4825883a 	mov	r18,r9
 80069b0:	dcc12d15 	stw	r19,1204(sp)
 80069b4:	d8013215 	stw	zero,1224(sp)
 80069b8:	d8013415 	stw	zero,1232(sp)
 80069bc:	003a0706 	br	80051dc <__alt_data_end+0xf80051dc>
 80069c0:	b009883a 	mov	r4,r22
 80069c4:	b80b883a 	mov	r5,r23
 80069c8:	d9811e04 	addi	r6,sp,1144
 80069cc:	80112f00 	call	80112f0 <__sprint_r>
 80069d0:	1039851e 	bne	r2,zero,8004fe8 <__alt_data_end+0xf8004fe8>
 80069d4:	dc012617 	ldw	r16,1176(sp)
 80069d8:	d8c12017 	ldw	r3,1152(sp)
 80069dc:	d8811f17 	ldw	r2,1148(sp)
 80069e0:	da000404 	addi	r8,sp,16
 80069e4:	003ec706 	br	8006504 <__alt_data_end+0xf8006504>
 80069e8:	483e1a1e 	bne	r9,zero,8006254 <__alt_data_end+0xf8006254>
 80069ec:	9013883a 	mov	r9,r18
 80069f0:	003e1806 	br	8006254 <__alt_data_end+0xf8006254>
 80069f4:	00c00b44 	movi	r3,45
 80069f8:	64a0003c 	xorhi	r18,r12,32768
 80069fc:	d8c12b05 	stb	r3,1196(sp)
 8006a00:	003e1a06 	br	800626c <__alt_data_end+0xf800626c>
 8006a04:	4f000044 	addi	fp,r9,1
 8006a08:	003e1f06 	br	8006288 <__alt_data_end+0xf8006288>
 8006a0c:	02400184 	movi	r9,6
 8006a10:	003e1006 	br	8006254 <__alt_data_end+0xf8006254>
 8006a14:	d8c13417 	ldw	r3,1232(sp)
 8006a18:	00c04b0e 	bge	zero,r3,8006b48 <___vfprintf_internal_r+0x1fbc>
 8006a1c:	04800044 	movi	r18,1
 8006a20:	dac13317 	ldw	r11,1228(sp)
 8006a24:	92e5883a 	add	r18,r18,r11
 8006a28:	9005883a 	mov	r2,r18
 8006a2c:	903e560e 	bge	r18,zero,8006388 <__alt_data_end+0xf8006388>
 8006a30:	0005883a 	mov	r2,zero
 8006a34:	003e5406 	br	8006388 <__alt_data_end+0xf8006388>
 8006a38:	d8c12617 	ldw	r3,1176(sp)
 8006a3c:	d8c13415 	stw	r3,1232(sp)
 8006a40:	00c03b0e 	bge	zero,r3,8006b30 <___vfprintf_internal_r+0x1fa4>
 8006a44:	4800081e 	bne	r9,zero,8006a68 <___vfprintf_internal_r+0x1edc>
 8006a48:	8c40004c 	andi	r17,r17,1
 8006a4c:	8800061e 	bne	r17,zero,8006a68 <___vfprintf_internal_r+0x1edc>
 8006a50:	1805883a 	mov	r2,r3
 8006a54:	183e4b0e 	bge	r3,zero,8006384 <__alt_data_end+0xf8006384>
 8006a58:	0005883a 	mov	r2,zero
 8006a5c:	003e4906 	br	8006384 <__alt_data_end+0xf8006384>
 8006a60:	d8812117 	ldw	r2,1156(sp)
 8006a64:	003e3506 	br	800633c <__alt_data_end+0xf800633c>
 8006a68:	dac13417 	ldw	r11,1232(sp)
 8006a6c:	4a400044 	addi	r9,r9,1
 8006a70:	5a65883a 	add	r18,r11,r9
 8006a74:	9005883a 	mov	r2,r18
 8006a78:	903e430e 	bge	r18,zero,8006388 <__alt_data_end+0xf8006388>
 8006a7c:	003fec06 	br	8006a30 <__alt_data_end+0xf8006a30>
 8006a80:	00800c04 	movi	r2,48
 8006a84:	e0c00c04 	addi	r3,fp,48
 8006a88:	d8812345 	stb	r2,1165(sp)
 8006a8c:	d8c12385 	stb	r3,1166(sp)
 8006a90:	d88123c4 	addi	r2,sp,1167
 8006a94:	dd4122c4 	addi	r21,sp,1163
 8006a98:	003fb706 	br	8006978 <__alt_data_end+0xf8006978>
 8006a9c:	0005883a 	mov	r2,zero
 8006aa0:	003f6006 	br	8006824 <__alt_data_end+0xf8006824>
 8006aa4:	db013417 	ldw	r12,1232(sp)
 8006aa8:	64800044 	addi	r18,r12,1
 8006aac:	9005883a 	mov	r2,r18
 8006ab0:	903e350e 	bge	r18,zero,8006388 <__alt_data_end+0xf8006388>
 8006ab4:	003fde06 	br	8006a30 <__alt_data_end+0xf8006a30>
 8006ab8:	d9013717 	ldw	r4,1244(sp)
 8006abc:	900b883a 	mov	r5,r18
 8006ac0:	000d883a 	mov	r6,zero
 8006ac4:	000f883a 	mov	r7,zero
 8006ac8:	da013f15 	stw	r8,1276(sp)
 8006acc:	da413e15 	stw	r9,1272(sp)
 8006ad0:	da813d15 	stw	r10,1268(sp)
 8006ad4:	8016cec0 	call	8016cec <__eqdf2>
 8006ad8:	da013f17 	ldw	r8,1276(sp)
 8006adc:	da413e17 	ldw	r9,1272(sp)
 8006ae0:	da813d17 	ldw	r10,1268(sp)
 8006ae4:	103f1426 	beq	r2,zero,8006738 <__alt_data_end+0xf8006738>
 8006ae8:	00800044 	movi	r2,1
 8006aec:	1707c83a 	sub	r3,r2,fp
 8006af0:	d8c12615 	stw	r3,1176(sp)
 8006af4:	003f1106 	br	800673c <__alt_data_end+0xf800673c>
 8006af8:	dac12d17 	ldw	r11,1204(sp)
 8006afc:	5a400017 	ldw	r9,0(r11)
 8006b00:	5ac00104 	addi	r11,r11,4
 8006b04:	dac12d15 	stw	r11,1204(sp)
 8006b08:	483ec60e 	bge	r9,zero,8006624 <__alt_data_end+0xf8006624>
 8006b0c:	027fffc4 	movi	r9,-1
 8006b10:	1c000047 	ldb	r16,1(r3)
 8006b14:	00388406 	br	8004d28 <__alt_data_end+0xf8004d28>
 8006b18:	043fffc4 	movi	r16,-1
 8006b1c:	00391006 	br	8004f60 <__alt_data_end+0xf8004f60>
 8006b20:	00800b44 	movi	r2,45
 8006b24:	0739c83a 	sub	fp,zero,fp
 8006b28:	d8812305 	stb	r2,1164(sp)
 8006b2c:	003f6906 	br	80068d4 <__alt_data_end+0xf80068d4>
 8006b30:	4800081e 	bne	r9,zero,8006b54 <___vfprintf_internal_r+0x1fc8>
 8006b34:	8c40004c 	andi	r17,r17,1
 8006b38:	8800061e 	bne	r17,zero,8006b54 <___vfprintf_internal_r+0x1fc8>
 8006b3c:	00800044 	movi	r2,1
 8006b40:	1025883a 	mov	r18,r2
 8006b44:	003e1006 	br	8006388 <__alt_data_end+0xf8006388>
 8006b48:	04800084 	movi	r18,2
 8006b4c:	90e5c83a 	sub	r18,r18,r3
 8006b50:	003fb306 	br	8006a20 <__alt_data_end+0xf8006a20>
 8006b54:	4c800084 	addi	r18,r9,2
 8006b58:	9005883a 	mov	r2,r18
 8006b5c:	903e0a0e 	bge	r18,zero,8006388 <__alt_data_end+0xf8006388>
 8006b60:	003fb306 	br	8006a30 <__alt_data_end+0xf8006a30>
 8006b64:	0005883a 	mov	r2,zero
 8006b68:	003f8c06 	br	800699c <__alt_data_end+0xf800699c>
 8006b6c:	88a2703a 	and	r17,r17,r2
 8006b70:	883f8826 	beq	r17,zero,8006994 <__alt_data_end+0xf8006994>
 8006b74:	003f8606 	br	8006990 <__alt_data_end+0xf8006990>
 8006b78:	d8812344 	addi	r2,sp,1165
 8006b7c:	003f7e06 	br	8006978 <__alt_data_end+0xf8006978>
 8006b80:	d8c12617 	ldw	r3,1176(sp)
 8006b84:	003f4d06 	br	80068bc <__alt_data_end+0xf80068bc>

08006b88 <__vfprintf_internal>:
 8006b88:	2007883a 	mov	r3,r4
 8006b8c:	010200b4 	movhi	r4,2050
 8006b90:	213ab604 	addi	r4,r4,-5416
 8006b94:	21000017 	ldw	r4,0(r4)
 8006b98:	2805883a 	mov	r2,r5
 8006b9c:	300f883a 	mov	r7,r6
 8006ba0:	180b883a 	mov	r5,r3
 8006ba4:	100d883a 	mov	r6,r2
 8006ba8:	8004b8c1 	jmpi	8004b8c <___vfprintf_internal_r>

08006bac <_write_r>:
 8006bac:	defffd04 	addi	sp,sp,-12
 8006bb0:	dc000015 	stw	r16,0(sp)
 8006bb4:	040200b4 	movhi	r16,2050
 8006bb8:	dc400115 	stw	r17,4(sp)
 8006bbc:	843ace04 	addi	r16,r16,-5320
 8006bc0:	2023883a 	mov	r17,r4
 8006bc4:	2809883a 	mov	r4,r5
 8006bc8:	300b883a 	mov	r5,r6
 8006bcc:	380d883a 	mov	r6,r7
 8006bd0:	dfc00215 	stw	ra,8(sp)
 8006bd4:	80000015 	stw	zero,0(r16)
 8006bd8:	8018c100 	call	8018c10 <write>
 8006bdc:	00ffffc4 	movi	r3,-1
 8006be0:	10c00526 	beq	r2,r3,8006bf8 <_write_r+0x4c>
 8006be4:	dfc00217 	ldw	ra,8(sp)
 8006be8:	dc400117 	ldw	r17,4(sp)
 8006bec:	dc000017 	ldw	r16,0(sp)
 8006bf0:	dec00304 	addi	sp,sp,12
 8006bf4:	f800283a 	ret
 8006bf8:	80c00017 	ldw	r3,0(r16)
 8006bfc:	183ff926 	beq	r3,zero,8006be4 <__alt_data_end+0xf8006be4>
 8006c00:	88c00015 	stw	r3,0(r17)
 8006c04:	003ff706 	br	8006be4 <__alt_data_end+0xf8006be4>

08006c08 <__swsetup_r>:
 8006c08:	008200b4 	movhi	r2,2050
 8006c0c:	defffd04 	addi	sp,sp,-12
 8006c10:	10bab604 	addi	r2,r2,-5416
 8006c14:	dc400115 	stw	r17,4(sp)
 8006c18:	2023883a 	mov	r17,r4
 8006c1c:	11000017 	ldw	r4,0(r2)
 8006c20:	dc000015 	stw	r16,0(sp)
 8006c24:	dfc00215 	stw	ra,8(sp)
 8006c28:	2821883a 	mov	r16,r5
 8006c2c:	20000226 	beq	r4,zero,8006c38 <__swsetup_r+0x30>
 8006c30:	20c00e17 	ldw	r3,56(r4)
 8006c34:	18002e26 	beq	r3,zero,8006cf0 <__swsetup_r+0xe8>
 8006c38:	8080030b 	ldhu	r2,12(r16)
 8006c3c:	10c0020c 	andi	r3,r2,8
 8006c40:	100d883a 	mov	r6,r2
 8006c44:	18000f26 	beq	r3,zero,8006c84 <__swsetup_r+0x7c>
 8006c48:	80c00417 	ldw	r3,16(r16)
 8006c4c:	18001526 	beq	r3,zero,8006ca4 <__swsetup_r+0x9c>
 8006c50:	1100004c 	andi	r4,r2,1
 8006c54:	20001c1e 	bne	r4,zero,8006cc8 <__swsetup_r+0xc0>
 8006c58:	1080008c 	andi	r2,r2,2
 8006c5c:	1000261e 	bne	r2,zero,8006cf8 <__swsetup_r+0xf0>
 8006c60:	80800517 	ldw	r2,20(r16)
 8006c64:	80800215 	stw	r2,8(r16)
 8006c68:	18001c26 	beq	r3,zero,8006cdc <__swsetup_r+0xd4>
 8006c6c:	0005883a 	mov	r2,zero
 8006c70:	dfc00217 	ldw	ra,8(sp)
 8006c74:	dc400117 	ldw	r17,4(sp)
 8006c78:	dc000017 	ldw	r16,0(sp)
 8006c7c:	dec00304 	addi	sp,sp,12
 8006c80:	f800283a 	ret
 8006c84:	3080040c 	andi	r2,r6,16
 8006c88:	10001726 	beq	r2,zero,8006ce8 <__swsetup_r+0xe0>
 8006c8c:	3080010c 	andi	r2,r6,4
 8006c90:	10001b1e 	bne	r2,zero,8006d00 <__swsetup_r+0xf8>
 8006c94:	80c00417 	ldw	r3,16(r16)
 8006c98:	30800214 	ori	r2,r6,8
 8006c9c:	8080030d 	sth	r2,12(r16)
 8006ca0:	183feb1e 	bne	r3,zero,8006c50 <__alt_data_end+0xf8006c50>
 8006ca4:	1140a00c 	andi	r5,r2,640
 8006ca8:	01008004 	movi	r4,512
 8006cac:	293fe826 	beq	r5,r4,8006c50 <__alt_data_end+0xf8006c50>
 8006cb0:	8809883a 	mov	r4,r17
 8006cb4:	800b883a 	mov	r5,r16
 8006cb8:	80098400 	call	8009840 <__smakebuf_r>
 8006cbc:	8080030b 	ldhu	r2,12(r16)
 8006cc0:	80c00417 	ldw	r3,16(r16)
 8006cc4:	003fe206 	br	8006c50 <__alt_data_end+0xf8006c50>
 8006cc8:	80800517 	ldw	r2,20(r16)
 8006ccc:	80000215 	stw	zero,8(r16)
 8006cd0:	0085c83a 	sub	r2,zero,r2
 8006cd4:	80800615 	stw	r2,24(r16)
 8006cd8:	183fe41e 	bne	r3,zero,8006c6c <__alt_data_end+0xf8006c6c>
 8006cdc:	8080030b 	ldhu	r2,12(r16)
 8006ce0:	1080200c 	andi	r2,r2,128
 8006ce4:	103fe226 	beq	r2,zero,8006c70 <__alt_data_end+0xf8006c70>
 8006ce8:	00bfffc4 	movi	r2,-1
 8006cec:	003fe006 	br	8006c70 <__alt_data_end+0xf8006c70>
 8006cf0:	8008c5c0 	call	8008c5c <__sinit>
 8006cf4:	003fd006 	br	8006c38 <__alt_data_end+0xf8006c38>
 8006cf8:	0005883a 	mov	r2,zero
 8006cfc:	003fd906 	br	8006c64 <__alt_data_end+0xf8006c64>
 8006d00:	81400c17 	ldw	r5,48(r16)
 8006d04:	28000626 	beq	r5,zero,8006d20 <__swsetup_r+0x118>
 8006d08:	80801004 	addi	r2,r16,64
 8006d0c:	28800326 	beq	r5,r2,8006d1c <__swsetup_r+0x114>
 8006d10:	8809883a 	mov	r4,r17
 8006d14:	8008dd00 	call	8008dd0 <_free_r>
 8006d18:	8180030b 	ldhu	r6,12(r16)
 8006d1c:	80000c15 	stw	zero,48(r16)
 8006d20:	80c00417 	ldw	r3,16(r16)
 8006d24:	00bff6c4 	movi	r2,-37
 8006d28:	118c703a 	and	r6,r2,r6
 8006d2c:	80000115 	stw	zero,4(r16)
 8006d30:	80c00015 	stw	r3,0(r16)
 8006d34:	003fd806 	br	8006c98 <__alt_data_end+0xf8006c98>

08006d38 <_close_r>:
 8006d38:	defffd04 	addi	sp,sp,-12
 8006d3c:	dc000015 	stw	r16,0(sp)
 8006d40:	040200b4 	movhi	r16,2050
 8006d44:	dc400115 	stw	r17,4(sp)
 8006d48:	843ace04 	addi	r16,r16,-5320
 8006d4c:	2023883a 	mov	r17,r4
 8006d50:	2809883a 	mov	r4,r5
 8006d54:	dfc00215 	stw	ra,8(sp)
 8006d58:	80000015 	stw	zero,0(r16)
 8006d5c:	801836c0 	call	801836c <close>
 8006d60:	00ffffc4 	movi	r3,-1
 8006d64:	10c00526 	beq	r2,r3,8006d7c <_close_r+0x44>
 8006d68:	dfc00217 	ldw	ra,8(sp)
 8006d6c:	dc400117 	ldw	r17,4(sp)
 8006d70:	dc000017 	ldw	r16,0(sp)
 8006d74:	dec00304 	addi	sp,sp,12
 8006d78:	f800283a 	ret
 8006d7c:	80c00017 	ldw	r3,0(r16)
 8006d80:	183ff926 	beq	r3,zero,8006d68 <__alt_data_end+0xf8006d68>
 8006d84:	88c00015 	stw	r3,0(r17)
 8006d88:	003ff706 	br	8006d68 <__alt_data_end+0xf8006d68>

08006d8c <quorem>:
 8006d8c:	defff704 	addi	sp,sp,-36
 8006d90:	dc800215 	stw	r18,8(sp)
 8006d94:	20800417 	ldw	r2,16(r4)
 8006d98:	2c800417 	ldw	r18,16(r5)
 8006d9c:	dfc00815 	stw	ra,32(sp)
 8006da0:	ddc00715 	stw	r23,28(sp)
 8006da4:	dd800615 	stw	r22,24(sp)
 8006da8:	dd400515 	stw	r21,20(sp)
 8006dac:	dd000415 	stw	r20,16(sp)
 8006db0:	dcc00315 	stw	r19,12(sp)
 8006db4:	dc400115 	stw	r17,4(sp)
 8006db8:	dc000015 	stw	r16,0(sp)
 8006dbc:	14807116 	blt	r2,r18,8006f84 <quorem+0x1f8>
 8006dc0:	94bfffc4 	addi	r18,r18,-1
 8006dc4:	94ad883a 	add	r22,r18,r18
 8006dc8:	b5ad883a 	add	r22,r22,r22
 8006dcc:	2c400504 	addi	r17,r5,20
 8006dd0:	8da9883a 	add	r20,r17,r22
 8006dd4:	25400504 	addi	r21,r4,20
 8006dd8:	282f883a 	mov	r23,r5
 8006ddc:	adad883a 	add	r22,r21,r22
 8006de0:	a1400017 	ldw	r5,0(r20)
 8006de4:	2021883a 	mov	r16,r4
 8006de8:	b1000017 	ldw	r4,0(r22)
 8006dec:	29400044 	addi	r5,r5,1
 8006df0:	80024900 	call	8002490 <__udivsi3>
 8006df4:	1027883a 	mov	r19,r2
 8006df8:	10002c26 	beq	r2,zero,8006eac <quorem+0x120>
 8006dfc:	a813883a 	mov	r9,r21
 8006e00:	8811883a 	mov	r8,r17
 8006e04:	0009883a 	mov	r4,zero
 8006e08:	000d883a 	mov	r6,zero
 8006e0c:	41c00017 	ldw	r7,0(r8)
 8006e10:	49400017 	ldw	r5,0(r9)
 8006e14:	42000104 	addi	r8,r8,4
 8006e18:	38bfffcc 	andi	r2,r7,65535
 8006e1c:	14c5383a 	mul	r2,r2,r19
 8006e20:	380ed43a 	srli	r7,r7,16
 8006e24:	28ffffcc 	andi	r3,r5,65535
 8006e28:	2085883a 	add	r2,r4,r2
 8006e2c:	1008d43a 	srli	r4,r2,16
 8006e30:	3ccf383a 	mul	r7,r7,r19
 8006e34:	198d883a 	add	r6,r3,r6
 8006e38:	10ffffcc 	andi	r3,r2,65535
 8006e3c:	30c7c83a 	sub	r3,r6,r3
 8006e40:	280ad43a 	srli	r5,r5,16
 8006e44:	21c9883a 	add	r4,r4,r7
 8006e48:	180dd43a 	srai	r6,r3,16
 8006e4c:	20bfffcc 	andi	r2,r4,65535
 8006e50:	288bc83a 	sub	r5,r5,r2
 8006e54:	298b883a 	add	r5,r5,r6
 8006e58:	280e943a 	slli	r7,r5,16
 8006e5c:	18ffffcc 	andi	r3,r3,65535
 8006e60:	2008d43a 	srli	r4,r4,16
 8006e64:	38ceb03a 	or	r7,r7,r3
 8006e68:	49c00015 	stw	r7,0(r9)
 8006e6c:	280dd43a 	srai	r6,r5,16
 8006e70:	4a400104 	addi	r9,r9,4
 8006e74:	a23fe52e 	bgeu	r20,r8,8006e0c <__alt_data_end+0xf8006e0c>
 8006e78:	b0800017 	ldw	r2,0(r22)
 8006e7c:	10000b1e 	bne	r2,zero,8006eac <quorem+0x120>
 8006e80:	b0bfff04 	addi	r2,r22,-4
 8006e84:	a880082e 	bgeu	r21,r2,8006ea8 <quorem+0x11c>
 8006e88:	b0ffff17 	ldw	r3,-4(r22)
 8006e8c:	18000326 	beq	r3,zero,8006e9c <quorem+0x110>
 8006e90:	00000506 	br	8006ea8 <quorem+0x11c>
 8006e94:	10c00017 	ldw	r3,0(r2)
 8006e98:	1800031e 	bne	r3,zero,8006ea8 <quorem+0x11c>
 8006e9c:	10bfff04 	addi	r2,r2,-4
 8006ea0:	94bfffc4 	addi	r18,r18,-1
 8006ea4:	a8bffb36 	bltu	r21,r2,8006e94 <__alt_data_end+0xf8006e94>
 8006ea8:	84800415 	stw	r18,16(r16)
 8006eac:	8009883a 	mov	r4,r16
 8006eb0:	b80b883a 	mov	r5,r23
 8006eb4:	800a85c0 	call	800a85c <__mcmp>
 8006eb8:	10002616 	blt	r2,zero,8006f54 <quorem+0x1c8>
 8006ebc:	9cc00044 	addi	r19,r19,1
 8006ec0:	a80d883a 	mov	r6,r21
 8006ec4:	000b883a 	mov	r5,zero
 8006ec8:	31000017 	ldw	r4,0(r6)
 8006ecc:	88800017 	ldw	r2,0(r17)
 8006ed0:	31800104 	addi	r6,r6,4
 8006ed4:	20ffffcc 	andi	r3,r4,65535
 8006ed8:	194b883a 	add	r5,r3,r5
 8006edc:	10ffffcc 	andi	r3,r2,65535
 8006ee0:	28c7c83a 	sub	r3,r5,r3
 8006ee4:	1004d43a 	srli	r2,r2,16
 8006ee8:	2008d43a 	srli	r4,r4,16
 8006eec:	180bd43a 	srai	r5,r3,16
 8006ef0:	18ffffcc 	andi	r3,r3,65535
 8006ef4:	2089c83a 	sub	r4,r4,r2
 8006ef8:	2149883a 	add	r4,r4,r5
 8006efc:	2004943a 	slli	r2,r4,16
 8006f00:	8c400104 	addi	r17,r17,4
 8006f04:	200bd43a 	srai	r5,r4,16
 8006f08:	10c6b03a 	or	r3,r2,r3
 8006f0c:	30ffff15 	stw	r3,-4(r6)
 8006f10:	a47fed2e 	bgeu	r20,r17,8006ec8 <__alt_data_end+0xf8006ec8>
 8006f14:	9485883a 	add	r2,r18,r18
 8006f18:	1085883a 	add	r2,r2,r2
 8006f1c:	a887883a 	add	r3,r21,r2
 8006f20:	18800017 	ldw	r2,0(r3)
 8006f24:	10000b1e 	bne	r2,zero,8006f54 <quorem+0x1c8>
 8006f28:	18bfff04 	addi	r2,r3,-4
 8006f2c:	a880082e 	bgeu	r21,r2,8006f50 <quorem+0x1c4>
 8006f30:	18ffff17 	ldw	r3,-4(r3)
 8006f34:	18000326 	beq	r3,zero,8006f44 <quorem+0x1b8>
 8006f38:	00000506 	br	8006f50 <quorem+0x1c4>
 8006f3c:	10c00017 	ldw	r3,0(r2)
 8006f40:	1800031e 	bne	r3,zero,8006f50 <quorem+0x1c4>
 8006f44:	10bfff04 	addi	r2,r2,-4
 8006f48:	94bfffc4 	addi	r18,r18,-1
 8006f4c:	a8bffb36 	bltu	r21,r2,8006f3c <__alt_data_end+0xf8006f3c>
 8006f50:	84800415 	stw	r18,16(r16)
 8006f54:	9805883a 	mov	r2,r19
 8006f58:	dfc00817 	ldw	ra,32(sp)
 8006f5c:	ddc00717 	ldw	r23,28(sp)
 8006f60:	dd800617 	ldw	r22,24(sp)
 8006f64:	dd400517 	ldw	r21,20(sp)
 8006f68:	dd000417 	ldw	r20,16(sp)
 8006f6c:	dcc00317 	ldw	r19,12(sp)
 8006f70:	dc800217 	ldw	r18,8(sp)
 8006f74:	dc400117 	ldw	r17,4(sp)
 8006f78:	dc000017 	ldw	r16,0(sp)
 8006f7c:	dec00904 	addi	sp,sp,36
 8006f80:	f800283a 	ret
 8006f84:	0005883a 	mov	r2,zero
 8006f88:	003ff306 	br	8006f58 <__alt_data_end+0xf8006f58>

08006f8c <_dtoa_r>:
 8006f8c:	20801017 	ldw	r2,64(r4)
 8006f90:	deffde04 	addi	sp,sp,-136
 8006f94:	dd401d15 	stw	r21,116(sp)
 8006f98:	dcc01b15 	stw	r19,108(sp)
 8006f9c:	dc801a15 	stw	r18,104(sp)
 8006fa0:	dc401915 	stw	r17,100(sp)
 8006fa4:	dc001815 	stw	r16,96(sp)
 8006fa8:	dfc02115 	stw	ra,132(sp)
 8006fac:	df002015 	stw	fp,128(sp)
 8006fb0:	ddc01f15 	stw	r23,124(sp)
 8006fb4:	dd801e15 	stw	r22,120(sp)
 8006fb8:	dd001c15 	stw	r20,112(sp)
 8006fbc:	d9c00315 	stw	r7,12(sp)
 8006fc0:	2021883a 	mov	r16,r4
 8006fc4:	302b883a 	mov	r21,r6
 8006fc8:	2825883a 	mov	r18,r5
 8006fcc:	dc402417 	ldw	r17,144(sp)
 8006fd0:	3027883a 	mov	r19,r6
 8006fd4:	10000826 	beq	r2,zero,8006ff8 <_dtoa_r+0x6c>
 8006fd8:	21801117 	ldw	r6,68(r4)
 8006fdc:	00c00044 	movi	r3,1
 8006fe0:	100b883a 	mov	r5,r2
 8006fe4:	1986983a 	sll	r3,r3,r6
 8006fe8:	11800115 	stw	r6,4(r2)
 8006fec:	10c00215 	stw	r3,8(r2)
 8006ff0:	800a0440 	call	800a044 <_Bfree>
 8006ff4:	80001015 	stw	zero,64(r16)
 8006ff8:	a8002d16 	blt	r21,zero,80070b0 <_dtoa_r+0x124>
 8006ffc:	88000015 	stw	zero,0(r17)
 8007000:	a8dffc2c 	andhi	r3,r21,32752
 8007004:	009ffc34 	movhi	r2,32752
 8007008:	18801b26 	beq	r3,r2,8007078 <_dtoa_r+0xec>
 800700c:	9009883a 	mov	r4,r18
 8007010:	980b883a 	mov	r5,r19
 8007014:	000d883a 	mov	r6,zero
 8007018:	000f883a 	mov	r7,zero
 800701c:	8016cec0 	call	8016cec <__eqdf2>
 8007020:	10002a1e 	bne	r2,zero,80070cc <_dtoa_r+0x140>
 8007024:	d8c02317 	ldw	r3,140(sp)
 8007028:	d9002517 	ldw	r4,148(sp)
 800702c:	00800044 	movi	r2,1
 8007030:	18800015 	stw	r2,0(r3)
 8007034:	2001a226 	beq	r4,zero,80076c0 <_dtoa_r+0x734>
 8007038:	008200b4 	movhi	r2,2050
 800703c:	10b23a44 	addi	r2,r2,-14103
 8007040:	20800015 	stw	r2,0(r4)
 8007044:	10bfffc4 	addi	r2,r2,-1
 8007048:	dfc02117 	ldw	ra,132(sp)
 800704c:	df002017 	ldw	fp,128(sp)
 8007050:	ddc01f17 	ldw	r23,124(sp)
 8007054:	dd801e17 	ldw	r22,120(sp)
 8007058:	dd401d17 	ldw	r21,116(sp)
 800705c:	dd001c17 	ldw	r20,112(sp)
 8007060:	dcc01b17 	ldw	r19,108(sp)
 8007064:	dc801a17 	ldw	r18,104(sp)
 8007068:	dc401917 	ldw	r17,100(sp)
 800706c:	dc001817 	ldw	r16,96(sp)
 8007070:	dec02204 	addi	sp,sp,136
 8007074:	f800283a 	ret
 8007078:	d8c02317 	ldw	r3,140(sp)
 800707c:	0089c3c4 	movi	r2,9999
 8007080:	18800015 	stw	r2,0(r3)
 8007084:	90017c26 	beq	r18,zero,8007678 <_dtoa_r+0x6ec>
 8007088:	008200b4 	movhi	r2,2050
 800708c:	10b2e604 	addi	r2,r2,-13416
 8007090:	d9002517 	ldw	r4,148(sp)
 8007094:	203fec26 	beq	r4,zero,8007048 <__alt_data_end+0xf8007048>
 8007098:	10c000c7 	ldb	r3,3(r2)
 800709c:	18017d1e 	bne	r3,zero,8007694 <_dtoa_r+0x708>
 80070a0:	10c000c4 	addi	r3,r2,3
 80070a4:	d9802517 	ldw	r6,148(sp)
 80070a8:	30c00015 	stw	r3,0(r6)
 80070ac:	003fe606 	br	8007048 <__alt_data_end+0xf8007048>
 80070b0:	04e00034 	movhi	r19,32768
 80070b4:	9cffffc4 	addi	r19,r19,-1
 80070b8:	00800044 	movi	r2,1
 80070bc:	ace6703a 	and	r19,r21,r19
 80070c0:	88800015 	stw	r2,0(r17)
 80070c4:	982b883a 	mov	r21,r19
 80070c8:	003fcd06 	br	8007000 <__alt_data_end+0xf8007000>
 80070cc:	d8800204 	addi	r2,sp,8
 80070d0:	a822d53a 	srli	r17,r21,20
 80070d4:	d8800015 	stw	r2,0(sp)
 80070d8:	8009883a 	mov	r4,r16
 80070dc:	900b883a 	mov	r5,r18
 80070e0:	980d883a 	mov	r6,r19
 80070e4:	d9c00104 	addi	r7,sp,4
 80070e8:	800abd00 	call	800abd0 <__d2b>
 80070ec:	1039883a 	mov	fp,r2
 80070f0:	88016a1e 	bne	r17,zero,800769c <_dtoa_r+0x710>
 80070f4:	dd000217 	ldw	r20,8(sp)
 80070f8:	dc400117 	ldw	r17,4(sp)
 80070fc:	00befbc4 	movi	r2,-1041
 8007100:	a463883a 	add	r17,r20,r17
 8007104:	8882ea16 	blt	r17,r2,8007cb0 <_dtoa_r+0xd24>
 8007108:	00bf0384 	movi	r2,-1010
 800710c:	1445c83a 	sub	r2,r2,r17
 8007110:	89010484 	addi	r4,r17,1042
 8007114:	a8aa983a 	sll	r21,r21,r2
 8007118:	9108d83a 	srl	r4,r18,r4
 800711c:	a908b03a 	or	r4,r21,r4
 8007120:	801807c0 	call	801807c <__floatunsidf>
 8007124:	017f8434 	movhi	r5,65040
 8007128:	01800044 	movi	r6,1
 800712c:	1009883a 	mov	r4,r2
 8007130:	194b883a 	add	r5,r3,r5
 8007134:	8c7fffc4 	addi	r17,r17,-1
 8007138:	d9800f15 	stw	r6,60(sp)
 800713c:	000d883a 	mov	r6,zero
 8007140:	01cffe34 	movhi	r7,16376
 8007144:	80176540 	call	8017654 <__subdf3>
 8007148:	0198dbf4 	movhi	r6,25455
 800714c:	01cff4f4 	movhi	r7,16339
 8007150:	1009883a 	mov	r4,r2
 8007154:	180b883a 	mov	r5,r3
 8007158:	3190d844 	addi	r6,r6,17249
 800715c:	39e1e9c4 	addi	r7,r7,-30809
 8007160:	8016f300 	call	8016f30 <__muldf3>
 8007164:	01a2d874 	movhi	r6,35681
 8007168:	01cff1f4 	movhi	r7,16327
 800716c:	180b883a 	mov	r5,r3
 8007170:	31b22cc4 	addi	r6,r6,-14157
 8007174:	39e28a04 	addi	r7,r7,-30168
 8007178:	1009883a 	mov	r4,r2
 800717c:	8015b840 	call	8015b84 <__adddf3>
 8007180:	8809883a 	mov	r4,r17
 8007184:	102d883a 	mov	r22,r2
 8007188:	182b883a 	mov	r21,r3
 800718c:	8017fac0 	call	8017fac <__floatsidf>
 8007190:	019427f4 	movhi	r6,20639
 8007194:	01cff4f4 	movhi	r7,16339
 8007198:	1009883a 	mov	r4,r2
 800719c:	180b883a 	mov	r5,r3
 80071a0:	319e7ec4 	addi	r6,r6,31227
 80071a4:	39d104c4 	addi	r7,r7,17427
 80071a8:	8016f300 	call	8016f30 <__muldf3>
 80071ac:	b009883a 	mov	r4,r22
 80071b0:	a80b883a 	mov	r5,r21
 80071b4:	100d883a 	mov	r6,r2
 80071b8:	180f883a 	mov	r7,r3
 80071bc:	8015b840 	call	8015b84 <__adddf3>
 80071c0:	1009883a 	mov	r4,r2
 80071c4:	180b883a 	mov	r5,r3
 80071c8:	102d883a 	mov	r22,r2
 80071cc:	182b883a 	mov	r21,r3
 80071d0:	8017f240 	call	8017f24 <__fixdfsi>
 80071d4:	b009883a 	mov	r4,r22
 80071d8:	a80b883a 	mov	r5,r21
 80071dc:	000d883a 	mov	r6,zero
 80071e0:	000f883a 	mov	r7,zero
 80071e4:	d8800515 	stw	r2,20(sp)
 80071e8:	8016e500 	call	8016e50 <__ledf2>
 80071ec:	10023116 	blt	r2,zero,8007ab4 <_dtoa_r+0xb28>
 80071f0:	d8c00517 	ldw	r3,20(sp)
 80071f4:	00800584 	movi	r2,22
 80071f8:	10c21f36 	bltu	r2,r3,8007a78 <_dtoa_r+0xaec>
 80071fc:	180490fa 	slli	r2,r3,3
 8007200:	00c200b4 	movhi	r3,2050
 8007204:	18f30104 	addi	r3,r3,-13308
 8007208:	1885883a 	add	r2,r3,r2
 800720c:	11000017 	ldw	r4,0(r2)
 8007210:	11400117 	ldw	r5,4(r2)
 8007214:	900d883a 	mov	r6,r18
 8007218:	980f883a 	mov	r7,r19
 800721c:	8016d700 	call	8016d70 <__gedf2>
 8007220:	0082a70e 	bge	zero,r2,8007cc0 <_dtoa_r+0xd34>
 8007224:	d9000517 	ldw	r4,20(sp)
 8007228:	d8000c15 	stw	zero,48(sp)
 800722c:	213fffc4 	addi	r4,r4,-1
 8007230:	d9000515 	stw	r4,20(sp)
 8007234:	a463c83a 	sub	r17,r20,r17
 8007238:	8dbfffc4 	addi	r22,r17,-1
 800723c:	b0021916 	blt	r22,zero,8007aa4 <_dtoa_r+0xb18>
 8007240:	d8000815 	stw	zero,32(sp)
 8007244:	d8800517 	ldw	r2,20(sp)
 8007248:	10020e16 	blt	r2,zero,8007a84 <_dtoa_r+0xaf8>
 800724c:	b0ad883a 	add	r22,r22,r2
 8007250:	d8800a15 	stw	r2,40(sp)
 8007254:	d8000915 	stw	zero,36(sp)
 8007258:	d8c00317 	ldw	r3,12(sp)
 800725c:	00800244 	movi	r2,9
 8007260:	10c11a36 	bltu	r2,r3,80076cc <_dtoa_r+0x740>
 8007264:	00800144 	movi	r2,5
 8007268:	10c4fc0e 	bge	r2,r3,800865c <_dtoa_r+0x16d0>
 800726c:	18ffff04 	addi	r3,r3,-4
 8007270:	d8c00315 	stw	r3,12(sp)
 8007274:	0029883a 	mov	r20,zero
 8007278:	d9800317 	ldw	r6,12(sp)
 800727c:	008000c4 	movi	r2,3
 8007280:	3083bd26 	beq	r6,r2,8008178 <_dtoa_r+0x11ec>
 8007284:	1183670e 	bge	r2,r6,8008024 <_dtoa_r+0x1098>
 8007288:	d8c00317 	ldw	r3,12(sp)
 800728c:	00800104 	movi	r2,4
 8007290:	1882e726 	beq	r3,r2,8007e30 <_dtoa_r+0xea4>
 8007294:	00800144 	movi	r2,5
 8007298:	1884f21e 	bne	r3,r2,8008664 <_dtoa_r+0x16d8>
 800729c:	00800044 	movi	r2,1
 80072a0:	d8800b15 	stw	r2,44(sp)
 80072a4:	d8c02217 	ldw	r3,136(sp)
 80072a8:	d9000517 	ldw	r4,20(sp)
 80072ac:	1907883a 	add	r3,r3,r4
 80072b0:	19800044 	addi	r6,r3,1
 80072b4:	d8c00d15 	stw	r3,52(sp)
 80072b8:	d9800615 	stw	r6,24(sp)
 80072bc:	0183c30e 	bge	zero,r6,80081cc <_dtoa_r+0x1240>
 80072c0:	d9800617 	ldw	r6,24(sp)
 80072c4:	3023883a 	mov	r17,r6
 80072c8:	80001115 	stw	zero,68(r16)
 80072cc:	008005c4 	movi	r2,23
 80072d0:	1184f62e 	bgeu	r2,r6,80086ac <_dtoa_r+0x1720>
 80072d4:	00c00044 	movi	r3,1
 80072d8:	00800104 	movi	r2,4
 80072dc:	1085883a 	add	r2,r2,r2
 80072e0:	11000504 	addi	r4,r2,20
 80072e4:	180b883a 	mov	r5,r3
 80072e8:	18c00044 	addi	r3,r3,1
 80072ec:	313ffb2e 	bgeu	r6,r4,80072dc <__alt_data_end+0xf80072dc>
 80072f0:	81401115 	stw	r5,68(r16)
 80072f4:	8009883a 	mov	r4,r16
 80072f8:	8009f9c0 	call	8009f9c <_Balloc>
 80072fc:	d8800715 	stw	r2,28(sp)
 8007300:	80801015 	stw	r2,64(r16)
 8007304:	00800384 	movi	r2,14
 8007308:	1440fd36 	bltu	r2,r17,8007700 <_dtoa_r+0x774>
 800730c:	a000fc26 	beq	r20,zero,8007700 <_dtoa_r+0x774>
 8007310:	d8800517 	ldw	r2,20(sp)
 8007314:	0083b90e 	bge	zero,r2,80081fc <_dtoa_r+0x1270>
 8007318:	d8c00517 	ldw	r3,20(sp)
 800731c:	108003cc 	andi	r2,r2,15
 8007320:	100490fa 	slli	r2,r2,3
 8007324:	182fd13a 	srai	r23,r3,4
 8007328:	00c200b4 	movhi	r3,2050
 800732c:	18f30104 	addi	r3,r3,-13308
 8007330:	1885883a 	add	r2,r3,r2
 8007334:	b8c0040c 	andi	r3,r23,16
 8007338:	12c00017 	ldw	r11,0(r2)
 800733c:	12800117 	ldw	r10,4(r2)
 8007340:	18039726 	beq	r3,zero,80081a0 <_dtoa_r+0x1214>
 8007344:	008200b4 	movhi	r2,2050
 8007348:	10b2f704 	addi	r2,r2,-13348
 800734c:	11800817 	ldw	r6,32(r2)
 8007350:	11c00917 	ldw	r7,36(r2)
 8007354:	9009883a 	mov	r4,r18
 8007358:	980b883a 	mov	r5,r19
 800735c:	da801615 	stw	r10,88(sp)
 8007360:	dac01515 	stw	r11,84(sp)
 8007364:	80164200 	call	8016420 <__divdf3>
 8007368:	da801617 	ldw	r10,88(sp)
 800736c:	dac01517 	ldw	r11,84(sp)
 8007370:	bdc003cc 	andi	r23,r23,15
 8007374:	044000c4 	movi	r17,3
 8007378:	d8800e15 	stw	r2,56(sp)
 800737c:	182b883a 	mov	r21,r3
 8007380:	b8001126 	beq	r23,zero,80073c8 <_dtoa_r+0x43c>
 8007384:	050200b4 	movhi	r20,2050
 8007388:	a532f704 	addi	r20,r20,-13348
 800738c:	5805883a 	mov	r2,r11
 8007390:	5007883a 	mov	r3,r10
 8007394:	b980004c 	andi	r6,r23,1
 8007398:	1009883a 	mov	r4,r2
 800739c:	b82fd07a 	srai	r23,r23,1
 80073a0:	180b883a 	mov	r5,r3
 80073a4:	30000426 	beq	r6,zero,80073b8 <_dtoa_r+0x42c>
 80073a8:	a1800017 	ldw	r6,0(r20)
 80073ac:	a1c00117 	ldw	r7,4(r20)
 80073b0:	8c400044 	addi	r17,r17,1
 80073b4:	8016f300 	call	8016f30 <__muldf3>
 80073b8:	a5000204 	addi	r20,r20,8
 80073bc:	b83ff51e 	bne	r23,zero,8007394 <__alt_data_end+0xf8007394>
 80073c0:	1017883a 	mov	r11,r2
 80073c4:	1815883a 	mov	r10,r3
 80073c8:	d9000e17 	ldw	r4,56(sp)
 80073cc:	a80b883a 	mov	r5,r21
 80073d0:	580d883a 	mov	r6,r11
 80073d4:	500f883a 	mov	r7,r10
 80073d8:	80164200 	call	8016420 <__divdf3>
 80073dc:	1029883a 	mov	r20,r2
 80073e0:	182b883a 	mov	r21,r3
 80073e4:	d9800c17 	ldw	r6,48(sp)
 80073e8:	30000626 	beq	r6,zero,8007404 <_dtoa_r+0x478>
 80073ec:	a009883a 	mov	r4,r20
 80073f0:	a80b883a 	mov	r5,r21
 80073f4:	000d883a 	mov	r6,zero
 80073f8:	01cffc34 	movhi	r7,16368
 80073fc:	8016e500 	call	8016e50 <__ledf2>
 8007400:	10043216 	blt	r2,zero,80084cc <_dtoa_r+0x1540>
 8007404:	8809883a 	mov	r4,r17
 8007408:	8017fac0 	call	8017fac <__floatsidf>
 800740c:	1009883a 	mov	r4,r2
 8007410:	180b883a 	mov	r5,r3
 8007414:	a00d883a 	mov	r6,r20
 8007418:	a80f883a 	mov	r7,r21
 800741c:	8016f300 	call	8016f30 <__muldf3>
 8007420:	000d883a 	mov	r6,zero
 8007424:	1009883a 	mov	r4,r2
 8007428:	180b883a 	mov	r5,r3
 800742c:	01d00734 	movhi	r7,16412
 8007430:	8015b840 	call	8015b84 <__adddf3>
 8007434:	1023883a 	mov	r17,r2
 8007438:	d9800617 	ldw	r6,24(sp)
 800743c:	00bf3034 	movhi	r2,64704
 8007440:	1885883a 	add	r2,r3,r2
 8007444:	d8800e15 	stw	r2,56(sp)
 8007448:	30032e26 	beq	r6,zero,8008104 <_dtoa_r+0x1178>
 800744c:	d8c00517 	ldw	r3,20(sp)
 8007450:	da800617 	ldw	r10,24(sp)
 8007454:	d8c01215 	stw	r3,72(sp)
 8007458:	d9000b17 	ldw	r4,44(sp)
 800745c:	2003b026 	beq	r4,zero,8008320 <_dtoa_r+0x1394>
 8007460:	50bfffc4 	addi	r2,r10,-1
 8007464:	100490fa 	slli	r2,r2,3
 8007468:	00c200b4 	movhi	r3,2050
 800746c:	18f30104 	addi	r3,r3,-13308
 8007470:	1885883a 	add	r2,r3,r2
 8007474:	11800017 	ldw	r6,0(r2)
 8007478:	11c00117 	ldw	r7,4(r2)
 800747c:	d8800717 	ldw	r2,28(sp)
 8007480:	0009883a 	mov	r4,zero
 8007484:	014ff834 	movhi	r5,16352
 8007488:	da801615 	stw	r10,88(sp)
 800748c:	15c00044 	addi	r23,r2,1
 8007490:	80164200 	call	8016420 <__divdf3>
 8007494:	d9c00e17 	ldw	r7,56(sp)
 8007498:	880d883a 	mov	r6,r17
 800749c:	1009883a 	mov	r4,r2
 80074a0:	180b883a 	mov	r5,r3
 80074a4:	80176540 	call	8017654 <__subdf3>
 80074a8:	a80b883a 	mov	r5,r21
 80074ac:	a009883a 	mov	r4,r20
 80074b0:	d8c01015 	stw	r3,64(sp)
 80074b4:	d8800e15 	stw	r2,56(sp)
 80074b8:	8017f240 	call	8017f24 <__fixdfsi>
 80074bc:	1009883a 	mov	r4,r2
 80074c0:	d8801715 	stw	r2,92(sp)
 80074c4:	8017fac0 	call	8017fac <__floatsidf>
 80074c8:	a009883a 	mov	r4,r20
 80074cc:	a80b883a 	mov	r5,r21
 80074d0:	100d883a 	mov	r6,r2
 80074d4:	180f883a 	mov	r7,r3
 80074d8:	80176540 	call	8017654 <__subdf3>
 80074dc:	da001717 	ldw	r8,92(sp)
 80074e0:	1829883a 	mov	r20,r3
 80074e4:	d8c00717 	ldw	r3,28(sp)
 80074e8:	d9000e17 	ldw	r4,56(sp)
 80074ec:	d9401017 	ldw	r5,64(sp)
 80074f0:	42000c04 	addi	r8,r8,48
 80074f4:	1023883a 	mov	r17,r2
 80074f8:	1a000005 	stb	r8,0(r3)
 80074fc:	880d883a 	mov	r6,r17
 8007500:	a00f883a 	mov	r7,r20
 8007504:	402b883a 	mov	r21,r8
 8007508:	8016d700 	call	8016d70 <__gedf2>
 800750c:	00844516 	blt	zero,r2,8008624 <_dtoa_r+0x1698>
 8007510:	0009883a 	mov	r4,zero
 8007514:	014ffc34 	movhi	r5,16368
 8007518:	880d883a 	mov	r6,r17
 800751c:	a00f883a 	mov	r7,r20
 8007520:	80176540 	call	8017654 <__subdf3>
 8007524:	d9000e17 	ldw	r4,56(sp)
 8007528:	d9401017 	ldw	r5,64(sp)
 800752c:	100d883a 	mov	r6,r2
 8007530:	180f883a 	mov	r7,r3
 8007534:	8016d700 	call	8016d70 <__gedf2>
 8007538:	da801617 	ldw	r10,88(sp)
 800753c:	00843616 	blt	zero,r2,8008618 <_dtoa_r+0x168c>
 8007540:	00800044 	movi	r2,1
 8007544:	12806e0e 	bge	r2,r10,8007700 <_dtoa_r+0x774>
 8007548:	d9000717 	ldw	r4,28(sp)
 800754c:	dd801315 	stw	r22,76(sp)
 8007550:	dc001115 	stw	r16,68(sp)
 8007554:	2295883a 	add	r10,r4,r10
 8007558:	dcc01415 	stw	r19,80(sp)
 800755c:	502d883a 	mov	r22,r10
 8007560:	dcc01017 	ldw	r19,64(sp)
 8007564:	b821883a 	mov	r16,r23
 8007568:	dc801015 	stw	r18,64(sp)
 800756c:	dc800e17 	ldw	r18,56(sp)
 8007570:	00000906 	br	8007598 <_dtoa_r+0x60c>
 8007574:	80176540 	call	8017654 <__subdf3>
 8007578:	1009883a 	mov	r4,r2
 800757c:	180b883a 	mov	r5,r3
 8007580:	900d883a 	mov	r6,r18
 8007584:	980f883a 	mov	r7,r19
 8007588:	8016e500 	call	8016e50 <__ledf2>
 800758c:	10040e16 	blt	r2,zero,80085c8 <_dtoa_r+0x163c>
 8007590:	b821883a 	mov	r16,r23
 8007594:	bd841026 	beq	r23,r22,80085d8 <_dtoa_r+0x164c>
 8007598:	9009883a 	mov	r4,r18
 800759c:	980b883a 	mov	r5,r19
 80075a0:	000d883a 	mov	r6,zero
 80075a4:	01d00934 	movhi	r7,16420
 80075a8:	8016f300 	call	8016f30 <__muldf3>
 80075ac:	000d883a 	mov	r6,zero
 80075b0:	01d00934 	movhi	r7,16420
 80075b4:	8809883a 	mov	r4,r17
 80075b8:	a00b883a 	mov	r5,r20
 80075bc:	1025883a 	mov	r18,r2
 80075c0:	1827883a 	mov	r19,r3
 80075c4:	8016f300 	call	8016f30 <__muldf3>
 80075c8:	180b883a 	mov	r5,r3
 80075cc:	1009883a 	mov	r4,r2
 80075d0:	1823883a 	mov	r17,r3
 80075d4:	1029883a 	mov	r20,r2
 80075d8:	8017f240 	call	8017f24 <__fixdfsi>
 80075dc:	1009883a 	mov	r4,r2
 80075e0:	102b883a 	mov	r21,r2
 80075e4:	8017fac0 	call	8017fac <__floatsidf>
 80075e8:	a009883a 	mov	r4,r20
 80075ec:	880b883a 	mov	r5,r17
 80075f0:	100d883a 	mov	r6,r2
 80075f4:	180f883a 	mov	r7,r3
 80075f8:	80176540 	call	8017654 <__subdf3>
 80075fc:	ad400c04 	addi	r21,r21,48
 8007600:	1009883a 	mov	r4,r2
 8007604:	180b883a 	mov	r5,r3
 8007608:	900d883a 	mov	r6,r18
 800760c:	980f883a 	mov	r7,r19
 8007610:	85400005 	stb	r21,0(r16)
 8007614:	1023883a 	mov	r17,r2
 8007618:	1829883a 	mov	r20,r3
 800761c:	8016e500 	call	8016e50 <__ledf2>
 8007620:	bdc00044 	addi	r23,r23,1
 8007624:	0009883a 	mov	r4,zero
 8007628:	014ffc34 	movhi	r5,16368
 800762c:	880d883a 	mov	r6,r17
 8007630:	a00f883a 	mov	r7,r20
 8007634:	103fcf0e 	bge	r2,zero,8007574 <__alt_data_end+0xf8007574>
 8007638:	d9801217 	ldw	r6,72(sp)
 800763c:	dc001117 	ldw	r16,68(sp)
 8007640:	d9800515 	stw	r6,20(sp)
 8007644:	8009883a 	mov	r4,r16
 8007648:	e00b883a 	mov	r5,fp
 800764c:	800a0440 	call	800a044 <_Bfree>
 8007650:	d8c00517 	ldw	r3,20(sp)
 8007654:	d9002317 	ldw	r4,140(sp)
 8007658:	d9802517 	ldw	r6,148(sp)
 800765c:	b8000005 	stb	zero,0(r23)
 8007660:	18800044 	addi	r2,r3,1
 8007664:	20800015 	stw	r2,0(r4)
 8007668:	30027226 	beq	r6,zero,8008034 <_dtoa_r+0x10a8>
 800766c:	35c00015 	stw	r23,0(r6)
 8007670:	d8800717 	ldw	r2,28(sp)
 8007674:	003e7406 	br	8007048 <__alt_data_end+0xf8007048>
 8007678:	00800434 	movhi	r2,16
 800767c:	10bfffc4 	addi	r2,r2,-1
 8007680:	a8aa703a 	and	r21,r21,r2
 8007684:	a83e801e 	bne	r21,zero,8007088 <__alt_data_end+0xf8007088>
 8007688:	008200b4 	movhi	r2,2050
 800768c:	10b2e304 	addi	r2,r2,-13428
 8007690:	003e7f06 	br	8007090 <__alt_data_end+0xf8007090>
 8007694:	10c00204 	addi	r3,r2,8
 8007698:	003e8206 	br	80070a4 <__alt_data_end+0xf80070a4>
 800769c:	01400434 	movhi	r5,16
 80076a0:	297fffc4 	addi	r5,r5,-1
 80076a4:	994a703a 	and	r5,r19,r5
 80076a8:	9009883a 	mov	r4,r18
 80076ac:	8c7f0044 	addi	r17,r17,-1023
 80076b0:	294ffc34 	orhi	r5,r5,16368
 80076b4:	dd000217 	ldw	r20,8(sp)
 80076b8:	d8000f15 	stw	zero,60(sp)
 80076bc:	003e9f06 	br	800713c <__alt_data_end+0xf800713c>
 80076c0:	008200b4 	movhi	r2,2050
 80076c4:	10b23a04 	addi	r2,r2,-14104
 80076c8:	003e5f06 	br	8007048 <__alt_data_end+0xf8007048>
 80076cc:	80001115 	stw	zero,68(r16)
 80076d0:	8009883a 	mov	r4,r16
 80076d4:	000b883a 	mov	r5,zero
 80076d8:	8009f9c0 	call	8009f9c <_Balloc>
 80076dc:	01bfffc4 	movi	r6,-1
 80076e0:	d8800715 	stw	r2,28(sp)
 80076e4:	80801015 	stw	r2,64(r16)
 80076e8:	00800044 	movi	r2,1
 80076ec:	d9800615 	stw	r6,24(sp)
 80076f0:	d8800b15 	stw	r2,44(sp)
 80076f4:	d8002215 	stw	zero,136(sp)
 80076f8:	d9800d15 	stw	r6,52(sp)
 80076fc:	d8000315 	stw	zero,12(sp)
 8007700:	d8800117 	ldw	r2,4(sp)
 8007704:	10008e16 	blt	r2,zero,8007940 <_dtoa_r+0x9b4>
 8007708:	d9000517 	ldw	r4,20(sp)
 800770c:	00c00384 	movi	r3,14
 8007710:	19008b16 	blt	r3,r4,8007940 <_dtoa_r+0x9b4>
 8007714:	200490fa 	slli	r2,r4,3
 8007718:	00c200b4 	movhi	r3,2050
 800771c:	d9802217 	ldw	r6,136(sp)
 8007720:	18f30104 	addi	r3,r3,-13308
 8007724:	1885883a 	add	r2,r3,r2
 8007728:	14400017 	ldw	r17,0(r2)
 800772c:	15000117 	ldw	r20,4(r2)
 8007730:	3001c716 	blt	r6,zero,8007e50 <_dtoa_r+0xec4>
 8007734:	880d883a 	mov	r6,r17
 8007738:	a00f883a 	mov	r7,r20
 800773c:	9009883a 	mov	r4,r18
 8007740:	980b883a 	mov	r5,r19
 8007744:	80164200 	call	8016420 <__divdf3>
 8007748:	180b883a 	mov	r5,r3
 800774c:	1009883a 	mov	r4,r2
 8007750:	8017f240 	call	8017f24 <__fixdfsi>
 8007754:	1009883a 	mov	r4,r2
 8007758:	102d883a 	mov	r22,r2
 800775c:	8017fac0 	call	8017fac <__floatsidf>
 8007760:	1009883a 	mov	r4,r2
 8007764:	180b883a 	mov	r5,r3
 8007768:	880d883a 	mov	r6,r17
 800776c:	a00f883a 	mov	r7,r20
 8007770:	8016f300 	call	8016f30 <__muldf3>
 8007774:	9009883a 	mov	r4,r18
 8007778:	980b883a 	mov	r5,r19
 800777c:	100d883a 	mov	r6,r2
 8007780:	180f883a 	mov	r7,r3
 8007784:	80176540 	call	8017654 <__subdf3>
 8007788:	d9000717 	ldw	r4,28(sp)
 800778c:	d9800617 	ldw	r6,24(sp)
 8007790:	180b883a 	mov	r5,r3
 8007794:	b0c00c04 	addi	r3,r22,48
 8007798:	20c00005 	stb	r3,0(r4)
 800779c:	25c00044 	addi	r23,r4,1
 80077a0:	01000044 	movi	r4,1
 80077a4:	1011883a 	mov	r8,r2
 80077a8:	2807883a 	mov	r3,r5
 80077ac:	31003d26 	beq	r6,r4,80078a4 <_dtoa_r+0x918>
 80077b0:	000d883a 	mov	r6,zero
 80077b4:	01d00934 	movhi	r7,16420
 80077b8:	1009883a 	mov	r4,r2
 80077bc:	8016f300 	call	8016f30 <__muldf3>
 80077c0:	1009883a 	mov	r4,r2
 80077c4:	180b883a 	mov	r5,r3
 80077c8:	000d883a 	mov	r6,zero
 80077cc:	000f883a 	mov	r7,zero
 80077d0:	1027883a 	mov	r19,r2
 80077d4:	182b883a 	mov	r21,r3
 80077d8:	8016cec0 	call	8016cec <__eqdf2>
 80077dc:	103f9926 	beq	r2,zero,8007644 <__alt_data_end+0xf8007644>
 80077e0:	d8c00617 	ldw	r3,24(sp)
 80077e4:	d9000717 	ldw	r4,28(sp)
 80077e8:	b825883a 	mov	r18,r23
 80077ec:	18bfffc4 	addi	r2,r3,-1
 80077f0:	20ad883a 	add	r22,r4,r2
 80077f4:	dc000315 	stw	r16,12(sp)
 80077f8:	00000a06 	br	8007824 <_dtoa_r+0x898>
 80077fc:	8016f300 	call	8016f30 <__muldf3>
 8007800:	1009883a 	mov	r4,r2
 8007804:	180b883a 	mov	r5,r3
 8007808:	000d883a 	mov	r6,zero
 800780c:	000f883a 	mov	r7,zero
 8007810:	1027883a 	mov	r19,r2
 8007814:	182b883a 	mov	r21,r3
 8007818:	b825883a 	mov	r18,r23
 800781c:	8016cec0 	call	8016cec <__eqdf2>
 8007820:	10022626 	beq	r2,zero,80080bc <_dtoa_r+0x1130>
 8007824:	880d883a 	mov	r6,r17
 8007828:	a00f883a 	mov	r7,r20
 800782c:	9809883a 	mov	r4,r19
 8007830:	a80b883a 	mov	r5,r21
 8007834:	80164200 	call	8016420 <__divdf3>
 8007838:	180b883a 	mov	r5,r3
 800783c:	1009883a 	mov	r4,r2
 8007840:	8017f240 	call	8017f24 <__fixdfsi>
 8007844:	1009883a 	mov	r4,r2
 8007848:	1021883a 	mov	r16,r2
 800784c:	8017fac0 	call	8017fac <__floatsidf>
 8007850:	1009883a 	mov	r4,r2
 8007854:	180b883a 	mov	r5,r3
 8007858:	880d883a 	mov	r6,r17
 800785c:	a00f883a 	mov	r7,r20
 8007860:	8016f300 	call	8016f30 <__muldf3>
 8007864:	9809883a 	mov	r4,r19
 8007868:	a80b883a 	mov	r5,r21
 800786c:	100d883a 	mov	r6,r2
 8007870:	180f883a 	mov	r7,r3
 8007874:	80176540 	call	8017654 <__subdf3>
 8007878:	82000c04 	addi	r8,r16,48
 800787c:	92000005 	stb	r8,0(r18)
 8007880:	1009883a 	mov	r4,r2
 8007884:	180b883a 	mov	r5,r3
 8007888:	000d883a 	mov	r6,zero
 800788c:	01d00934 	movhi	r7,16420
 8007890:	1011883a 	mov	r8,r2
 8007894:	bdc00044 	addi	r23,r23,1
 8007898:	95bfd81e 	bne	r18,r22,80077fc <__alt_data_end+0xf80077fc>
 800789c:	802d883a 	mov	r22,r16
 80078a0:	dc000317 	ldw	r16,12(sp)
 80078a4:	4009883a 	mov	r4,r8
 80078a8:	180b883a 	mov	r5,r3
 80078ac:	400d883a 	mov	r6,r8
 80078b0:	180f883a 	mov	r7,r3
 80078b4:	8015b840 	call	8015b84 <__adddf3>
 80078b8:	8809883a 	mov	r4,r17
 80078bc:	a00b883a 	mov	r5,r20
 80078c0:	100d883a 	mov	r6,r2
 80078c4:	180f883a 	mov	r7,r3
 80078c8:	1027883a 	mov	r19,r2
 80078cc:	1825883a 	mov	r18,r3
 80078d0:	8016e500 	call	8016e50 <__ledf2>
 80078d4:	10000816 	blt	r2,zero,80078f8 <_dtoa_r+0x96c>
 80078d8:	8809883a 	mov	r4,r17
 80078dc:	a00b883a 	mov	r5,r20
 80078e0:	980d883a 	mov	r6,r19
 80078e4:	900f883a 	mov	r7,r18
 80078e8:	8016cec0 	call	8016cec <__eqdf2>
 80078ec:	103f551e 	bne	r2,zero,8007644 <__alt_data_end+0xf8007644>
 80078f0:	b580004c 	andi	r22,r22,1
 80078f4:	b03f5326 	beq	r22,zero,8007644 <__alt_data_end+0xf8007644>
 80078f8:	bd7fffc3 	ldbu	r21,-1(r23)
 80078fc:	b8bfffc4 	addi	r2,r23,-1
 8007900:	1007883a 	mov	r3,r2
 8007904:	01400e44 	movi	r5,57
 8007908:	d9800717 	ldw	r6,28(sp)
 800790c:	00000506 	br	8007924 <_dtoa_r+0x998>
 8007910:	18ffffc4 	addi	r3,r3,-1
 8007914:	30825e26 	beq	r6,r2,8008290 <_dtoa_r+0x1304>
 8007918:	1d400003 	ldbu	r21,0(r3)
 800791c:	102f883a 	mov	r23,r2
 8007920:	10bfffc4 	addi	r2,r2,-1
 8007924:	a9003fcc 	andi	r4,r21,255
 8007928:	2100201c 	xori	r4,r4,128
 800792c:	213fe004 	addi	r4,r4,-128
 8007930:	217ff726 	beq	r4,r5,8007910 <__alt_data_end+0xf8007910>
 8007934:	aa000044 	addi	r8,r21,1
 8007938:	12000005 	stb	r8,0(r2)
 800793c:	003f4106 	br	8007644 <__alt_data_end+0xf8007644>
 8007940:	d8c00b17 	ldw	r3,44(sp)
 8007944:	18006726 	beq	r3,zero,8007ae4 <_dtoa_r+0xb58>
 8007948:	d9000317 	ldw	r4,12(sp)
 800794c:	00c00044 	movi	r3,1
 8007950:	19016a0e 	bge	r3,r4,8007efc <_dtoa_r+0xf70>
 8007954:	d8800617 	ldw	r2,24(sp)
 8007958:	d8c00917 	ldw	r3,36(sp)
 800795c:	157fffc4 	addi	r21,r2,-1
 8007960:	1d420716 	blt	r3,r21,8008180 <_dtoa_r+0x11f4>
 8007964:	1d6bc83a 	sub	r21,r3,r21
 8007968:	d8800617 	ldw	r2,24(sp)
 800796c:	1002c716 	blt	r2,zero,800848c <_dtoa_r+0x1500>
 8007970:	dd000817 	ldw	r20,32(sp)
 8007974:	d8800617 	ldw	r2,24(sp)
 8007978:	d9800817 	ldw	r6,32(sp)
 800797c:	8009883a 	mov	r4,r16
 8007980:	01400044 	movi	r5,1
 8007984:	308d883a 	add	r6,r6,r2
 8007988:	d9800815 	stw	r6,32(sp)
 800798c:	b0ad883a 	add	r22,r22,r2
 8007990:	800a39c0 	call	800a39c <__i2b>
 8007994:	1023883a 	mov	r17,r2
 8007998:	a0000826 	beq	r20,zero,80079bc <_dtoa_r+0xa30>
 800799c:	0580070e 	bge	zero,r22,80079bc <_dtoa_r+0xa30>
 80079a0:	b005883a 	mov	r2,r22
 80079a4:	a5812016 	blt	r20,r22,8007e28 <_dtoa_r+0xe9c>
 80079a8:	d8c00817 	ldw	r3,32(sp)
 80079ac:	a0a9c83a 	sub	r20,r20,r2
 80079b0:	b0adc83a 	sub	r22,r22,r2
 80079b4:	1887c83a 	sub	r3,r3,r2
 80079b8:	d8c00815 	stw	r3,32(sp)
 80079bc:	d9000917 	ldw	r4,36(sp)
 80079c0:	0100140e 	bge	zero,r4,8007a14 <_dtoa_r+0xa88>
 80079c4:	d9800b17 	ldw	r6,44(sp)
 80079c8:	3001e526 	beq	r6,zero,8008160 <_dtoa_r+0x11d4>
 80079cc:	05400e0e 	bge	zero,r21,8007a08 <_dtoa_r+0xa7c>
 80079d0:	880b883a 	mov	r5,r17
 80079d4:	8009883a 	mov	r4,r16
 80079d8:	a80d883a 	mov	r6,r21
 80079dc:	800a5d40 	call	800a5d4 <__pow5mult>
 80079e0:	e00d883a 	mov	r6,fp
 80079e4:	8009883a 	mov	r4,r16
 80079e8:	100b883a 	mov	r5,r2
 80079ec:	1023883a 	mov	r17,r2
 80079f0:	800a3d80 	call	800a3d8 <__multiply>
 80079f4:	102f883a 	mov	r23,r2
 80079f8:	e00b883a 	mov	r5,fp
 80079fc:	8009883a 	mov	r4,r16
 8007a00:	800a0440 	call	800a044 <_Bfree>
 8007a04:	b839883a 	mov	fp,r23
 8007a08:	d8800917 	ldw	r2,36(sp)
 8007a0c:	154dc83a 	sub	r6,r2,r21
 8007a10:	3001281e 	bne	r6,zero,8007eb4 <_dtoa_r+0xf28>
 8007a14:	05c00044 	movi	r23,1
 8007a18:	8009883a 	mov	r4,r16
 8007a1c:	b80b883a 	mov	r5,r23
 8007a20:	800a39c0 	call	800a39c <__i2b>
 8007a24:	d8c00a17 	ldw	r3,40(sp)
 8007a28:	102b883a 	mov	r21,r2
 8007a2c:	00c0310e 	bge	zero,r3,8007af4 <_dtoa_r+0xb68>
 8007a30:	8009883a 	mov	r4,r16
 8007a34:	100b883a 	mov	r5,r2
 8007a38:	180d883a 	mov	r6,r3
 8007a3c:	800a5d40 	call	800a5d4 <__pow5mult>
 8007a40:	d9000317 	ldw	r4,12(sp)
 8007a44:	102b883a 	mov	r21,r2
 8007a48:	b9011f0e 	bge	r23,r4,8007ec8 <_dtoa_r+0xf3c>
 8007a4c:	0027883a 	mov	r19,zero
 8007a50:	a8800417 	ldw	r2,16(r21)
 8007a54:	10800104 	addi	r2,r2,4
 8007a58:	1085883a 	add	r2,r2,r2
 8007a5c:	1085883a 	add	r2,r2,r2
 8007a60:	a885883a 	add	r2,r21,r2
 8007a64:	11000017 	ldw	r4,0(r2)
 8007a68:	800a2840 	call	800a284 <__hi0bits>
 8007a6c:	00c00804 	movi	r3,32
 8007a70:	1885c83a 	sub	r2,r3,r2
 8007a74:	00002506 	br	8007b0c <_dtoa_r+0xb80>
 8007a78:	01800044 	movi	r6,1
 8007a7c:	d9800c15 	stw	r6,48(sp)
 8007a80:	003dec06 	br	8007234 <__alt_data_end+0xf8007234>
 8007a84:	d8c00817 	ldw	r3,32(sp)
 8007a88:	d9000517 	ldw	r4,20(sp)
 8007a8c:	d8000a15 	stw	zero,40(sp)
 8007a90:	1907c83a 	sub	r3,r3,r4
 8007a94:	010dc83a 	sub	r6,zero,r4
 8007a98:	d8c00815 	stw	r3,32(sp)
 8007a9c:	d9800915 	stw	r6,36(sp)
 8007aa0:	003ded06 	br	8007258 <__alt_data_end+0xf8007258>
 8007aa4:	05adc83a 	sub	r22,zero,r22
 8007aa8:	dd800815 	stw	r22,32(sp)
 8007aac:	002d883a 	mov	r22,zero
 8007ab0:	003de406 	br	8007244 <__alt_data_end+0xf8007244>
 8007ab4:	d9000517 	ldw	r4,20(sp)
 8007ab8:	8017fac0 	call	8017fac <__floatsidf>
 8007abc:	1009883a 	mov	r4,r2
 8007ac0:	180b883a 	mov	r5,r3
 8007ac4:	b00d883a 	mov	r6,r22
 8007ac8:	a80f883a 	mov	r7,r21
 8007acc:	8016cec0 	call	8016cec <__eqdf2>
 8007ad0:	103dc726 	beq	r2,zero,80071f0 <__alt_data_end+0xf80071f0>
 8007ad4:	d8800517 	ldw	r2,20(sp)
 8007ad8:	10bfffc4 	addi	r2,r2,-1
 8007adc:	d8800515 	stw	r2,20(sp)
 8007ae0:	003dc306 	br	80071f0 <__alt_data_end+0xf80071f0>
 8007ae4:	dd400917 	ldw	r21,36(sp)
 8007ae8:	dd000817 	ldw	r20,32(sp)
 8007aec:	0023883a 	mov	r17,zero
 8007af0:	003fa906 	br	8007998 <__alt_data_end+0xf8007998>
 8007af4:	d9800317 	ldw	r6,12(sp)
 8007af8:	b981670e 	bge	r23,r6,8008098 <_dtoa_r+0x110c>
 8007afc:	0027883a 	mov	r19,zero
 8007b00:	d8c00a17 	ldw	r3,40(sp)
 8007b04:	183fd21e 	bne	r3,zero,8007a50 <__alt_data_end+0xf8007a50>
 8007b08:	00800044 	movi	r2,1
 8007b0c:	1585883a 	add	r2,r2,r22
 8007b10:	108007cc 	andi	r2,r2,31
 8007b14:	10005f26 	beq	r2,zero,8007c94 <_dtoa_r+0xd08>
 8007b18:	00c00804 	movi	r3,32
 8007b1c:	1887c83a 	sub	r3,r3,r2
 8007b20:	01000104 	movi	r4,4
 8007b24:	20c2dd0e 	bge	r4,r3,800869c <_dtoa_r+0x1710>
 8007b28:	d9000817 	ldw	r4,32(sp)
 8007b2c:	00c00704 	movi	r3,28
 8007b30:	1885c83a 	sub	r2,r3,r2
 8007b34:	2089883a 	add	r4,r4,r2
 8007b38:	d9000815 	stw	r4,32(sp)
 8007b3c:	a0a9883a 	add	r20,r20,r2
 8007b40:	b0ad883a 	add	r22,r22,r2
 8007b44:	d8800817 	ldw	r2,32(sp)
 8007b48:	0080050e 	bge	zero,r2,8007b60 <_dtoa_r+0xbd4>
 8007b4c:	e00b883a 	mov	r5,fp
 8007b50:	8009883a 	mov	r4,r16
 8007b54:	100d883a 	mov	r6,r2
 8007b58:	800a7140 	call	800a714 <__lshift>
 8007b5c:	1039883a 	mov	fp,r2
 8007b60:	0580050e 	bge	zero,r22,8007b78 <_dtoa_r+0xbec>
 8007b64:	a80b883a 	mov	r5,r21
 8007b68:	8009883a 	mov	r4,r16
 8007b6c:	b00d883a 	mov	r6,r22
 8007b70:	800a7140 	call	800a714 <__lshift>
 8007b74:	102b883a 	mov	r21,r2
 8007b78:	d8c00c17 	ldw	r3,48(sp)
 8007b7c:	1801161e 	bne	r3,zero,8007fd8 <_dtoa_r+0x104c>
 8007b80:	d8c00617 	ldw	r3,24(sp)
 8007b84:	00c12d0e 	bge	zero,r3,800803c <_dtoa_r+0x10b0>
 8007b88:	d8c00b17 	ldw	r3,44(sp)
 8007b8c:	1800571e 	bne	r3,zero,8007cec <_dtoa_r+0xd60>
 8007b90:	dc800717 	ldw	r18,28(sp)
 8007b94:	dcc00617 	ldw	r19,24(sp)
 8007b98:	9029883a 	mov	r20,r18
 8007b9c:	00000206 	br	8007ba8 <_dtoa_r+0xc1c>
 8007ba0:	800a06c0 	call	800a06c <__multadd>
 8007ba4:	1039883a 	mov	fp,r2
 8007ba8:	e009883a 	mov	r4,fp
 8007bac:	a80b883a 	mov	r5,r21
 8007bb0:	8006d8c0 	call	8006d8c <quorem>
 8007bb4:	10800c04 	addi	r2,r2,48
 8007bb8:	90800005 	stb	r2,0(r18)
 8007bbc:	94800044 	addi	r18,r18,1
 8007bc0:	9507c83a 	sub	r3,r18,r20
 8007bc4:	8009883a 	mov	r4,r16
 8007bc8:	e00b883a 	mov	r5,fp
 8007bcc:	01800284 	movi	r6,10
 8007bd0:	000f883a 	mov	r7,zero
 8007bd4:	1cfff216 	blt	r3,r19,8007ba0 <__alt_data_end+0xf8007ba0>
 8007bd8:	1011883a 	mov	r8,r2
 8007bdc:	d8800617 	ldw	r2,24(sp)
 8007be0:	00822e0e 	bge	zero,r2,800849c <_dtoa_r+0x1510>
 8007be4:	d9000717 	ldw	r4,28(sp)
 8007be8:	0025883a 	mov	r18,zero
 8007bec:	20af883a 	add	r23,r4,r2
 8007bf0:	e00b883a 	mov	r5,fp
 8007bf4:	01800044 	movi	r6,1
 8007bf8:	8009883a 	mov	r4,r16
 8007bfc:	da001715 	stw	r8,92(sp)
 8007c00:	800a7140 	call	800a714 <__lshift>
 8007c04:	1009883a 	mov	r4,r2
 8007c08:	a80b883a 	mov	r5,r21
 8007c0c:	1039883a 	mov	fp,r2
 8007c10:	800a85c0 	call	800a85c <__mcmp>
 8007c14:	da001717 	ldw	r8,92(sp)
 8007c18:	00816e0e 	bge	zero,r2,80081d4 <_dtoa_r+0x1248>
 8007c1c:	b93fffc3 	ldbu	r4,-1(r23)
 8007c20:	b8bfffc4 	addi	r2,r23,-1
 8007c24:	1007883a 	mov	r3,r2
 8007c28:	01800e44 	movi	r6,57
 8007c2c:	d9c00717 	ldw	r7,28(sp)
 8007c30:	00000506 	br	8007c48 <_dtoa_r+0xcbc>
 8007c34:	18ffffc4 	addi	r3,r3,-1
 8007c38:	38811926 	beq	r7,r2,80080a0 <_dtoa_r+0x1114>
 8007c3c:	19000003 	ldbu	r4,0(r3)
 8007c40:	102f883a 	mov	r23,r2
 8007c44:	10bfffc4 	addi	r2,r2,-1
 8007c48:	21403fcc 	andi	r5,r4,255
 8007c4c:	2940201c 	xori	r5,r5,128
 8007c50:	297fe004 	addi	r5,r5,-128
 8007c54:	29bff726 	beq	r5,r6,8007c34 <__alt_data_end+0xf8007c34>
 8007c58:	21000044 	addi	r4,r4,1
 8007c5c:	11000005 	stb	r4,0(r2)
 8007c60:	8009883a 	mov	r4,r16
 8007c64:	a80b883a 	mov	r5,r21
 8007c68:	800a0440 	call	800a044 <_Bfree>
 8007c6c:	883e7526 	beq	r17,zero,8007644 <__alt_data_end+0xf8007644>
 8007c70:	90000426 	beq	r18,zero,8007c84 <_dtoa_r+0xcf8>
 8007c74:	94400326 	beq	r18,r17,8007c84 <_dtoa_r+0xcf8>
 8007c78:	8009883a 	mov	r4,r16
 8007c7c:	900b883a 	mov	r5,r18
 8007c80:	800a0440 	call	800a044 <_Bfree>
 8007c84:	8009883a 	mov	r4,r16
 8007c88:	880b883a 	mov	r5,r17
 8007c8c:	800a0440 	call	800a044 <_Bfree>
 8007c90:	003e6c06 	br	8007644 <__alt_data_end+0xf8007644>
 8007c94:	00800704 	movi	r2,28
 8007c98:	d9800817 	ldw	r6,32(sp)
 8007c9c:	a0a9883a 	add	r20,r20,r2
 8007ca0:	b0ad883a 	add	r22,r22,r2
 8007ca4:	308d883a 	add	r6,r6,r2
 8007ca8:	d9800815 	stw	r6,32(sp)
 8007cac:	003fa506 	br	8007b44 <__alt_data_end+0xf8007b44>
 8007cb0:	013efb84 	movi	r4,-1042
 8007cb4:	246bc83a 	sub	r21,r4,r17
 8007cb8:	9548983a 	sll	r4,r18,r21
 8007cbc:	003d1806 	br	8007120 <__alt_data_end+0xf8007120>
 8007cc0:	d8000c15 	stw	zero,48(sp)
 8007cc4:	003d5b06 	br	8007234 <__alt_data_end+0xf8007234>
 8007cc8:	880b883a 	mov	r5,r17
 8007ccc:	8009883a 	mov	r4,r16
 8007cd0:	01800284 	movi	r6,10
 8007cd4:	000f883a 	mov	r7,zero
 8007cd8:	800a06c0 	call	800a06c <__multadd>
 8007cdc:	1023883a 	mov	r17,r2
 8007ce0:	d8800d17 	ldw	r2,52(sp)
 8007ce4:	0082550e 	bge	zero,r2,800863c <_dtoa_r+0x16b0>
 8007ce8:	d8800615 	stw	r2,24(sp)
 8007cec:	0500050e 	bge	zero,r20,8007d04 <_dtoa_r+0xd78>
 8007cf0:	880b883a 	mov	r5,r17
 8007cf4:	8009883a 	mov	r4,r16
 8007cf8:	a00d883a 	mov	r6,r20
 8007cfc:	800a7140 	call	800a714 <__lshift>
 8007d00:	1023883a 	mov	r17,r2
 8007d04:	98016a1e 	bne	r19,zero,80082b0 <_dtoa_r+0x1324>
 8007d08:	8829883a 	mov	r20,r17
 8007d0c:	d9000617 	ldw	r4,24(sp)
 8007d10:	dcc00717 	ldw	r19,28(sp)
 8007d14:	9480004c 	andi	r18,r18,1
 8007d18:	20bfffc4 	addi	r2,r4,-1
 8007d1c:	9885883a 	add	r2,r19,r2
 8007d20:	d8800415 	stw	r2,16(sp)
 8007d24:	dc800615 	stw	r18,24(sp)
 8007d28:	e009883a 	mov	r4,fp
 8007d2c:	a80b883a 	mov	r5,r21
 8007d30:	8006d8c0 	call	8006d8c <quorem>
 8007d34:	e009883a 	mov	r4,fp
 8007d38:	880b883a 	mov	r5,r17
 8007d3c:	102f883a 	mov	r23,r2
 8007d40:	800a85c0 	call	800a85c <__mcmp>
 8007d44:	8009883a 	mov	r4,r16
 8007d48:	a80b883a 	mov	r5,r21
 8007d4c:	a00d883a 	mov	r6,r20
 8007d50:	102d883a 	mov	r22,r2
 8007d54:	800a8bc0 	call	800a8bc <__mdiff>
 8007d58:	1007883a 	mov	r3,r2
 8007d5c:	10800317 	ldw	r2,12(r2)
 8007d60:	bc800c04 	addi	r18,r23,48
 8007d64:	1000971e 	bne	r2,zero,8007fc4 <_dtoa_r+0x1038>
 8007d68:	180b883a 	mov	r5,r3
 8007d6c:	e009883a 	mov	r4,fp
 8007d70:	d8c01515 	stw	r3,84(sp)
 8007d74:	800a85c0 	call	800a85c <__mcmp>
 8007d78:	d8c01517 	ldw	r3,84(sp)
 8007d7c:	8009883a 	mov	r4,r16
 8007d80:	d8801515 	stw	r2,84(sp)
 8007d84:	180b883a 	mov	r5,r3
 8007d88:	800a0440 	call	800a044 <_Bfree>
 8007d8c:	d8801517 	ldw	r2,84(sp)
 8007d90:	1000041e 	bne	r2,zero,8007da4 <_dtoa_r+0xe18>
 8007d94:	d9800317 	ldw	r6,12(sp)
 8007d98:	3000021e 	bne	r6,zero,8007da4 <_dtoa_r+0xe18>
 8007d9c:	d8c00617 	ldw	r3,24(sp)
 8007da0:	18007626 	beq	r3,zero,8007f7c <_dtoa_r+0xff0>
 8007da4:	b0005b16 	blt	r22,zero,8007f14 <_dtoa_r+0xf88>
 8007da8:	b000041e 	bne	r22,zero,8007dbc <_dtoa_r+0xe30>
 8007dac:	d9000317 	ldw	r4,12(sp)
 8007db0:	2000021e 	bne	r4,zero,8007dbc <_dtoa_r+0xe30>
 8007db4:	d8c00617 	ldw	r3,24(sp)
 8007db8:	18005626 	beq	r3,zero,8007f14 <_dtoa_r+0xf88>
 8007dbc:	00814d16 	blt	zero,r2,80082f4 <_dtoa_r+0x1368>
 8007dc0:	d8c00417 	ldw	r3,16(sp)
 8007dc4:	9d800044 	addi	r22,r19,1
 8007dc8:	9c800005 	stb	r18,0(r19)
 8007dcc:	b02f883a 	mov	r23,r22
 8007dd0:	98c14c26 	beq	r19,r3,8008304 <_dtoa_r+0x1378>
 8007dd4:	e00b883a 	mov	r5,fp
 8007dd8:	8009883a 	mov	r4,r16
 8007ddc:	01800284 	movi	r6,10
 8007de0:	000f883a 	mov	r7,zero
 8007de4:	800a06c0 	call	800a06c <__multadd>
 8007de8:	1039883a 	mov	fp,r2
 8007dec:	8d006d26 	beq	r17,r20,8007fa4 <_dtoa_r+0x1018>
 8007df0:	880b883a 	mov	r5,r17
 8007df4:	01800284 	movi	r6,10
 8007df8:	000f883a 	mov	r7,zero
 8007dfc:	8009883a 	mov	r4,r16
 8007e00:	800a06c0 	call	800a06c <__multadd>
 8007e04:	a00b883a 	mov	r5,r20
 8007e08:	8009883a 	mov	r4,r16
 8007e0c:	01800284 	movi	r6,10
 8007e10:	000f883a 	mov	r7,zero
 8007e14:	1023883a 	mov	r17,r2
 8007e18:	800a06c0 	call	800a06c <__multadd>
 8007e1c:	1029883a 	mov	r20,r2
 8007e20:	b027883a 	mov	r19,r22
 8007e24:	003fc006 	br	8007d28 <__alt_data_end+0xf8007d28>
 8007e28:	a005883a 	mov	r2,r20
 8007e2c:	003ede06 	br	80079a8 <__alt_data_end+0xf80079a8>
 8007e30:	01000044 	movi	r4,1
 8007e34:	d9000b15 	stw	r4,44(sp)
 8007e38:	d9802217 	ldw	r6,136(sp)
 8007e3c:	0180dc0e 	bge	zero,r6,80081b0 <_dtoa_r+0x1224>
 8007e40:	3023883a 	mov	r17,r6
 8007e44:	d9800d15 	stw	r6,52(sp)
 8007e48:	d9800615 	stw	r6,24(sp)
 8007e4c:	003d1e06 	br	80072c8 <__alt_data_end+0xf80072c8>
 8007e50:	d8800617 	ldw	r2,24(sp)
 8007e54:	00be3716 	blt	zero,r2,8007734 <__alt_data_end+0xf8007734>
 8007e58:	1000be1e 	bne	r2,zero,8008154 <_dtoa_r+0x11c8>
 8007e5c:	8809883a 	mov	r4,r17
 8007e60:	a00b883a 	mov	r5,r20
 8007e64:	000d883a 	mov	r6,zero
 8007e68:	01d00534 	movhi	r7,16404
 8007e6c:	8016f300 	call	8016f30 <__muldf3>
 8007e70:	1009883a 	mov	r4,r2
 8007e74:	180b883a 	mov	r5,r3
 8007e78:	900d883a 	mov	r6,r18
 8007e7c:	980f883a 	mov	r7,r19
 8007e80:	8016d700 	call	8016d70 <__gedf2>
 8007e84:	002b883a 	mov	r21,zero
 8007e88:	0023883a 	mov	r17,zero
 8007e8c:	10007a16 	blt	r2,zero,8008078 <_dtoa_r+0x10ec>
 8007e90:	d9002217 	ldw	r4,136(sp)
 8007e94:	ddc00717 	ldw	r23,28(sp)
 8007e98:	0108303a 	nor	r4,zero,r4
 8007e9c:	d9000515 	stw	r4,20(sp)
 8007ea0:	8009883a 	mov	r4,r16
 8007ea4:	a80b883a 	mov	r5,r21
 8007ea8:	800a0440 	call	800a044 <_Bfree>
 8007eac:	883f751e 	bne	r17,zero,8007c84 <__alt_data_end+0xf8007c84>
 8007eb0:	003de406 	br	8007644 <__alt_data_end+0xf8007644>
 8007eb4:	e00b883a 	mov	r5,fp
 8007eb8:	8009883a 	mov	r4,r16
 8007ebc:	800a5d40 	call	800a5d4 <__pow5mult>
 8007ec0:	1039883a 	mov	fp,r2
 8007ec4:	003ed306 	br	8007a14 <__alt_data_end+0xf8007a14>
 8007ec8:	903ee01e 	bne	r18,zero,8007a4c <__alt_data_end+0xf8007a4c>
 8007ecc:	00800434 	movhi	r2,16
 8007ed0:	10bfffc4 	addi	r2,r2,-1
 8007ed4:	9884703a 	and	r2,r19,r2
 8007ed8:	103f081e 	bne	r2,zero,8007afc <__alt_data_end+0xf8007afc>
 8007edc:	9cdffc2c 	andhi	r19,r19,32752
 8007ee0:	983f0626 	beq	r19,zero,8007afc <__alt_data_end+0xf8007afc>
 8007ee4:	d8800817 	ldw	r2,32(sp)
 8007ee8:	b5800044 	addi	r22,r22,1
 8007eec:	04c00044 	movi	r19,1
 8007ef0:	10800044 	addi	r2,r2,1
 8007ef4:	d8800815 	stw	r2,32(sp)
 8007ef8:	003f0106 	br	8007b00 <__alt_data_end+0xf8007b00>
 8007efc:	d9800f17 	ldw	r6,60(sp)
 8007f00:	30016826 	beq	r6,zero,80084a4 <_dtoa_r+0x1518>
 8007f04:	10810cc4 	addi	r2,r2,1075
 8007f08:	dd400917 	ldw	r21,36(sp)
 8007f0c:	dd000817 	ldw	r20,32(sp)
 8007f10:	003e9906 	br	8007978 <__alt_data_end+0xf8007978>
 8007f14:	9011883a 	mov	r8,r18
 8007f18:	4007883a 	mov	r3,r8
 8007f1c:	e02d883a 	mov	r22,fp
 8007f20:	0080100e 	bge	zero,r2,8007f64 <_dtoa_r+0xfd8>
 8007f24:	01800044 	movi	r6,1
 8007f28:	8009883a 	mov	r4,r16
 8007f2c:	e00b883a 	mov	r5,fp
 8007f30:	da001515 	stw	r8,84(sp)
 8007f34:	da001715 	stw	r8,92(sp)
 8007f38:	800a7140 	call	800a714 <__lshift>
 8007f3c:	1009883a 	mov	r4,r2
 8007f40:	a80b883a 	mov	r5,r21
 8007f44:	102d883a 	mov	r22,r2
 8007f48:	800a85c0 	call	800a85c <__mcmp>
 8007f4c:	d8c01517 	ldw	r3,84(sp)
 8007f50:	da001717 	ldw	r8,92(sp)
 8007f54:	0081a50e 	bge	zero,r2,80085ec <_dtoa_r+0x1660>
 8007f58:	00800e44 	movi	r2,57
 8007f5c:	40817b26 	beq	r8,r2,800854c <_dtoa_r+0x15c0>
 8007f60:	40c00044 	addi	r3,r8,1
 8007f64:	8825883a 	mov	r18,r17
 8007f68:	9dc00044 	addi	r23,r19,1
 8007f6c:	98c00005 	stb	r3,0(r19)
 8007f70:	a023883a 	mov	r17,r20
 8007f74:	b039883a 	mov	fp,r22
 8007f78:	003f3906 	br	8007c60 <__alt_data_end+0xf8007c60>
 8007f7c:	00800e44 	movi	r2,57
 8007f80:	9011883a 	mov	r8,r18
 8007f84:	90817226 	beq	r18,r2,8008550 <_dtoa_r+0x15c4>
 8007f88:	0580010e 	bge	zero,r22,8007f90 <_dtoa_r+0x1004>
 8007f8c:	ba000c44 	addi	r8,r23,49
 8007f90:	8825883a 	mov	r18,r17
 8007f94:	9dc00044 	addi	r23,r19,1
 8007f98:	9a000005 	stb	r8,0(r19)
 8007f9c:	a023883a 	mov	r17,r20
 8007fa0:	003f2f06 	br	8007c60 <__alt_data_end+0xf8007c60>
 8007fa4:	880b883a 	mov	r5,r17
 8007fa8:	8009883a 	mov	r4,r16
 8007fac:	01800284 	movi	r6,10
 8007fb0:	000f883a 	mov	r7,zero
 8007fb4:	800a06c0 	call	800a06c <__multadd>
 8007fb8:	1023883a 	mov	r17,r2
 8007fbc:	1029883a 	mov	r20,r2
 8007fc0:	003f9706 	br	8007e20 <__alt_data_end+0xf8007e20>
 8007fc4:	8009883a 	mov	r4,r16
 8007fc8:	180b883a 	mov	r5,r3
 8007fcc:	800a0440 	call	800a044 <_Bfree>
 8007fd0:	00800044 	movi	r2,1
 8007fd4:	003f7306 	br	8007da4 <__alt_data_end+0xf8007da4>
 8007fd8:	e009883a 	mov	r4,fp
 8007fdc:	a80b883a 	mov	r5,r21
 8007fe0:	800a85c0 	call	800a85c <__mcmp>
 8007fe4:	103ee60e 	bge	r2,zero,8007b80 <__alt_data_end+0xf8007b80>
 8007fe8:	8009883a 	mov	r4,r16
 8007fec:	e00b883a 	mov	r5,fp
 8007ff0:	01800284 	movi	r6,10
 8007ff4:	000f883a 	mov	r7,zero
 8007ff8:	800a06c0 	call	800a06c <__multadd>
 8007ffc:	d9000517 	ldw	r4,20(sp)
 8008000:	d9800b17 	ldw	r6,44(sp)
 8008004:	1039883a 	mov	fp,r2
 8008008:	213fffc4 	addi	r4,r4,-1
 800800c:	d9000515 	stw	r4,20(sp)
 8008010:	303f2d1e 	bne	r6,zero,8007cc8 <__alt_data_end+0xf8007cc8>
 8008014:	d9000d17 	ldw	r4,52(sp)
 8008018:	0101780e 	bge	zero,r4,80085fc <_dtoa_r+0x1670>
 800801c:	d9000615 	stw	r4,24(sp)
 8008020:	003edb06 	br	8007b90 <__alt_data_end+0xf8007b90>
 8008024:	00800084 	movi	r2,2
 8008028:	30818e1e 	bne	r6,r2,8008664 <_dtoa_r+0x16d8>
 800802c:	d8000b15 	stw	zero,44(sp)
 8008030:	003f8106 	br	8007e38 <__alt_data_end+0xf8007e38>
 8008034:	d8800717 	ldw	r2,28(sp)
 8008038:	003c0306 	br	8007048 <__alt_data_end+0xf8007048>
 800803c:	d9000317 	ldw	r4,12(sp)
 8008040:	00800084 	movi	r2,2
 8008044:	113ed00e 	bge	r2,r4,8007b88 <__alt_data_end+0xf8007b88>
 8008048:	d8c00617 	ldw	r3,24(sp)
 800804c:	183f901e 	bne	r3,zero,8007e90 <__alt_data_end+0xf8007e90>
 8008050:	a80b883a 	mov	r5,r21
 8008054:	8009883a 	mov	r4,r16
 8008058:	01800144 	movi	r6,5
 800805c:	000f883a 	mov	r7,zero
 8008060:	800a06c0 	call	800a06c <__multadd>
 8008064:	e009883a 	mov	r4,fp
 8008068:	100b883a 	mov	r5,r2
 800806c:	102b883a 	mov	r21,r2
 8008070:	800a85c0 	call	800a85c <__mcmp>
 8008074:	00bf860e 	bge	zero,r2,8007e90 <__alt_data_end+0xf8007e90>
 8008078:	d9800717 	ldw	r6,28(sp)
 800807c:	00800c44 	movi	r2,49
 8008080:	30800005 	stb	r2,0(r6)
 8008084:	d8800517 	ldw	r2,20(sp)
 8008088:	35c00044 	addi	r23,r6,1
 800808c:	10800044 	addi	r2,r2,1
 8008090:	d8800515 	stw	r2,20(sp)
 8008094:	003f8206 	br	8007ea0 <__alt_data_end+0xf8007ea0>
 8008098:	903e981e 	bne	r18,zero,8007afc <__alt_data_end+0xf8007afc>
 800809c:	003f8b06 	br	8007ecc <__alt_data_end+0xf8007ecc>
 80080a0:	d9800517 	ldw	r6,20(sp)
 80080a4:	d8c00717 	ldw	r3,28(sp)
 80080a8:	00800c44 	movi	r2,49
 80080ac:	31800044 	addi	r6,r6,1
 80080b0:	d9800515 	stw	r6,20(sp)
 80080b4:	18800005 	stb	r2,0(r3)
 80080b8:	003ee906 	br	8007c60 <__alt_data_end+0xf8007c60>
 80080bc:	dc000317 	ldw	r16,12(sp)
 80080c0:	003d6006 	br	8007644 <__alt_data_end+0xf8007644>
 80080c4:	8809883a 	mov	r4,r17
 80080c8:	8017fac0 	call	8017fac <__floatsidf>
 80080cc:	a009883a 	mov	r4,r20
 80080d0:	a80b883a 	mov	r5,r21
 80080d4:	100d883a 	mov	r6,r2
 80080d8:	180f883a 	mov	r7,r3
 80080dc:	8016f300 	call	8016f30 <__muldf3>
 80080e0:	1009883a 	mov	r4,r2
 80080e4:	180b883a 	mov	r5,r3
 80080e8:	000d883a 	mov	r6,zero
 80080ec:	01d00734 	movhi	r7,16412
 80080f0:	8015b840 	call	8015b84 <__adddf3>
 80080f4:	1023883a 	mov	r17,r2
 80080f8:	00bf3034 	movhi	r2,64704
 80080fc:	1885883a 	add	r2,r3,r2
 8008100:	d8800e15 	stw	r2,56(sp)
 8008104:	a009883a 	mov	r4,r20
 8008108:	a80b883a 	mov	r5,r21
 800810c:	000d883a 	mov	r6,zero
 8008110:	01d00534 	movhi	r7,16404
 8008114:	80176540 	call	8017654 <__subdf3>
 8008118:	d9c00e17 	ldw	r7,56(sp)
 800811c:	1009883a 	mov	r4,r2
 8008120:	180b883a 	mov	r5,r3
 8008124:	880d883a 	mov	r6,r17
 8008128:	102b883a 	mov	r21,r2
 800812c:	1829883a 	mov	r20,r3
 8008130:	8016d700 	call	8016d70 <__gedf2>
 8008134:	00807716 	blt	zero,r2,8008314 <_dtoa_r+0x1388>
 8008138:	d8800e17 	ldw	r2,56(sp)
 800813c:	a809883a 	mov	r4,r21
 8008140:	a00b883a 	mov	r5,r20
 8008144:	11e0003c 	xorhi	r7,r2,32768
 8008148:	880d883a 	mov	r6,r17
 800814c:	8016e500 	call	8016e50 <__ledf2>
 8008150:	103d6b0e 	bge	r2,zero,8007700 <__alt_data_end+0xf8007700>
 8008154:	002b883a 	mov	r21,zero
 8008158:	0023883a 	mov	r17,zero
 800815c:	003f4c06 	br	8007e90 <__alt_data_end+0xf8007e90>
 8008160:	d9800917 	ldw	r6,36(sp)
 8008164:	e00b883a 	mov	r5,fp
 8008168:	8009883a 	mov	r4,r16
 800816c:	800a5d40 	call	800a5d4 <__pow5mult>
 8008170:	1039883a 	mov	fp,r2
 8008174:	003e2706 	br	8007a14 <__alt_data_end+0xf8007a14>
 8008178:	d8000b15 	stw	zero,44(sp)
 800817c:	003c4906 	br	80072a4 <__alt_data_end+0xf80072a4>
 8008180:	d9000917 	ldw	r4,36(sp)
 8008184:	d9800a17 	ldw	r6,40(sp)
 8008188:	dd400915 	stw	r21,36(sp)
 800818c:	a905c83a 	sub	r2,r21,r4
 8008190:	308d883a 	add	r6,r6,r2
 8008194:	d9800a15 	stw	r6,40(sp)
 8008198:	002b883a 	mov	r21,zero
 800819c:	003df206 	br	8007968 <__alt_data_end+0xf8007968>
 80081a0:	dc800e15 	stw	r18,56(sp)
 80081a4:	982b883a 	mov	r21,r19
 80081a8:	04400084 	movi	r17,2
 80081ac:	003c7406 	br	8007380 <__alt_data_end+0xf8007380>
 80081b0:	04400044 	movi	r17,1
 80081b4:	dc400d15 	stw	r17,52(sp)
 80081b8:	dc400615 	stw	r17,24(sp)
 80081bc:	dc402215 	stw	r17,136(sp)
 80081c0:	80001115 	stw	zero,68(r16)
 80081c4:	000b883a 	mov	r5,zero
 80081c8:	003c4a06 	br	80072f4 <__alt_data_end+0xf80072f4>
 80081cc:	3023883a 	mov	r17,r6
 80081d0:	003ffb06 	br	80081c0 <__alt_data_end+0xf80081c0>
 80081d4:	1000021e 	bne	r2,zero,80081e0 <_dtoa_r+0x1254>
 80081d8:	4200004c 	andi	r8,r8,1
 80081dc:	403e8f1e 	bne	r8,zero,8007c1c <__alt_data_end+0xf8007c1c>
 80081e0:	01000c04 	movi	r4,48
 80081e4:	00000106 	br	80081ec <_dtoa_r+0x1260>
 80081e8:	102f883a 	mov	r23,r2
 80081ec:	b8bfffc4 	addi	r2,r23,-1
 80081f0:	10c00007 	ldb	r3,0(r2)
 80081f4:	193ffc26 	beq	r3,r4,80081e8 <__alt_data_end+0xf80081e8>
 80081f8:	003e9906 	br	8007c60 <__alt_data_end+0xf8007c60>
 80081fc:	d9000517 	ldw	r4,20(sp)
 8008200:	012fc83a 	sub	r23,zero,r4
 8008204:	b800ad26 	beq	r23,zero,80084bc <_dtoa_r+0x1530>
 8008208:	b88003cc 	andi	r2,r23,15
 800820c:	100490fa 	slli	r2,r2,3
 8008210:	00c200b4 	movhi	r3,2050
 8008214:	18f30104 	addi	r3,r3,-13308
 8008218:	1885883a 	add	r2,r3,r2
 800821c:	11800017 	ldw	r6,0(r2)
 8008220:	11c00117 	ldw	r7,4(r2)
 8008224:	b82fd13a 	srai	r23,r23,4
 8008228:	9009883a 	mov	r4,r18
 800822c:	980b883a 	mov	r5,r19
 8008230:	8016f300 	call	8016f30 <__muldf3>
 8008234:	1029883a 	mov	r20,r2
 8008238:	182b883a 	mov	r21,r3
 800823c:	b800f426 	beq	r23,zero,8008610 <_dtoa_r+0x1684>
 8008240:	020200b4 	movhi	r8,2050
 8008244:	4232f704 	addi	r8,r8,-13348
 8008248:	8029883a 	mov	r20,r16
 800824c:	04400084 	movi	r17,2
 8008250:	4021883a 	mov	r16,r8
 8008254:	b980004c 	andi	r6,r23,1
 8008258:	1009883a 	mov	r4,r2
 800825c:	b82fd07a 	srai	r23,r23,1
 8008260:	180b883a 	mov	r5,r3
 8008264:	30000426 	beq	r6,zero,8008278 <_dtoa_r+0x12ec>
 8008268:	81800017 	ldw	r6,0(r16)
 800826c:	81c00117 	ldw	r7,4(r16)
 8008270:	8c400044 	addi	r17,r17,1
 8008274:	8016f300 	call	8016f30 <__muldf3>
 8008278:	84000204 	addi	r16,r16,8
 800827c:	b83ff51e 	bne	r23,zero,8008254 <__alt_data_end+0xf8008254>
 8008280:	a021883a 	mov	r16,r20
 8008284:	182b883a 	mov	r21,r3
 8008288:	1029883a 	mov	r20,r2
 800828c:	003c5506 	br	80073e4 <__alt_data_end+0xf80073e4>
 8008290:	d9800517 	ldw	r6,20(sp)
 8008294:	d9000717 	ldw	r4,28(sp)
 8008298:	00c00c04 	movi	r3,48
 800829c:	31800044 	addi	r6,r6,1
 80082a0:	d9800515 	stw	r6,20(sp)
 80082a4:	20c00005 	stb	r3,0(r4)
 80082a8:	02000c44 	movi	r8,49
 80082ac:	003da206 	br	8007938 <__alt_data_end+0xf8007938>
 80082b0:	89400117 	ldw	r5,4(r17)
 80082b4:	8009883a 	mov	r4,r16
 80082b8:	8009f9c0 	call	8009f9c <_Balloc>
 80082bc:	89800417 	ldw	r6,16(r17)
 80082c0:	11000304 	addi	r4,r2,12
 80082c4:	89400304 	addi	r5,r17,12
 80082c8:	31800084 	addi	r6,r6,2
 80082cc:	318d883a 	add	r6,r6,r6
 80082d0:	318d883a 	add	r6,r6,r6
 80082d4:	1027883a 	mov	r19,r2
 80082d8:	8002df40 	call	8002df4 <memcpy>
 80082dc:	8009883a 	mov	r4,r16
 80082e0:	980b883a 	mov	r5,r19
 80082e4:	01800044 	movi	r6,1
 80082e8:	800a7140 	call	800a714 <__lshift>
 80082ec:	1029883a 	mov	r20,r2
 80082f0:	003e8606 	br	8007d0c <__alt_data_end+0xf8007d0c>
 80082f4:	00800e44 	movi	r2,57
 80082f8:	90809526 	beq	r18,r2,8008550 <_dtoa_r+0x15c4>
 80082fc:	92000044 	addi	r8,r18,1
 8008300:	003f2306 	br	8007f90 <__alt_data_end+0xf8007f90>
 8008304:	9011883a 	mov	r8,r18
 8008308:	8825883a 	mov	r18,r17
 800830c:	a023883a 	mov	r17,r20
 8008310:	003e3706 	br	8007bf0 <__alt_data_end+0xf8007bf0>
 8008314:	002b883a 	mov	r21,zero
 8008318:	0023883a 	mov	r17,zero
 800831c:	003f5606 	br	8008078 <__alt_data_end+0xf8008078>
 8008320:	51bfffc4 	addi	r6,r10,-1
 8008324:	300490fa 	slli	r2,r6,3
 8008328:	00c200b4 	movhi	r3,2050
 800832c:	18f30104 	addi	r3,r3,-13308
 8008330:	1885883a 	add	r2,r3,r2
 8008334:	d9c00e17 	ldw	r7,56(sp)
 8008338:	11000017 	ldw	r4,0(r2)
 800833c:	11400117 	ldw	r5,4(r2)
 8008340:	d8800717 	ldw	r2,28(sp)
 8008344:	d9801015 	stw	r6,64(sp)
 8008348:	880d883a 	mov	r6,r17
 800834c:	da801615 	stw	r10,88(sp)
 8008350:	15c00044 	addi	r23,r2,1
 8008354:	8016f300 	call	8016f30 <__muldf3>
 8008358:	a80b883a 	mov	r5,r21
 800835c:	a009883a 	mov	r4,r20
 8008360:	d8c01115 	stw	r3,68(sp)
 8008364:	d8800e15 	stw	r2,56(sp)
 8008368:	8017f240 	call	8017f24 <__fixdfsi>
 800836c:	1009883a 	mov	r4,r2
 8008370:	1023883a 	mov	r17,r2
 8008374:	8017fac0 	call	8017fac <__floatsidf>
 8008378:	a009883a 	mov	r4,r20
 800837c:	a80b883a 	mov	r5,r21
 8008380:	100d883a 	mov	r6,r2
 8008384:	180f883a 	mov	r7,r3
 8008388:	80176540 	call	8017654 <__subdf3>
 800838c:	1813883a 	mov	r9,r3
 8008390:	d8c00717 	ldw	r3,28(sp)
 8008394:	8c400c04 	addi	r17,r17,48
 8008398:	1011883a 	mov	r8,r2
 800839c:	1c400005 	stb	r17,0(r3)
 80083a0:	da801617 	ldw	r10,88(sp)
 80083a4:	00800044 	movi	r2,1
 80083a8:	50802326 	beq	r10,r2,8008438 <_dtoa_r+0x14ac>
 80083ac:	d8800717 	ldw	r2,28(sp)
 80083b0:	b82b883a 	mov	r21,r23
 80083b4:	dc001315 	stw	r16,76(sp)
 80083b8:	12a9883a 	add	r20,r2,r10
 80083bc:	4807883a 	mov	r3,r9
 80083c0:	4005883a 	mov	r2,r8
 80083c4:	dc801415 	stw	r18,80(sp)
 80083c8:	000d883a 	mov	r6,zero
 80083cc:	01d00934 	movhi	r7,16420
 80083d0:	1009883a 	mov	r4,r2
 80083d4:	180b883a 	mov	r5,r3
 80083d8:	8016f300 	call	8016f30 <__muldf3>
 80083dc:	180b883a 	mov	r5,r3
 80083e0:	1009883a 	mov	r4,r2
 80083e4:	1821883a 	mov	r16,r3
 80083e8:	1025883a 	mov	r18,r2
 80083ec:	8017f240 	call	8017f24 <__fixdfsi>
 80083f0:	1009883a 	mov	r4,r2
 80083f4:	1023883a 	mov	r17,r2
 80083f8:	8017fac0 	call	8017fac <__floatsidf>
 80083fc:	9009883a 	mov	r4,r18
 8008400:	800b883a 	mov	r5,r16
 8008404:	100d883a 	mov	r6,r2
 8008408:	180f883a 	mov	r7,r3
 800840c:	8c400c04 	addi	r17,r17,48
 8008410:	80176540 	call	8017654 <__subdf3>
 8008414:	ad400044 	addi	r21,r21,1
 8008418:	ac7fffc5 	stb	r17,-1(r21)
 800841c:	ad3fea1e 	bne	r21,r20,80083c8 <__alt_data_end+0xf80083c8>
 8008420:	1813883a 	mov	r9,r3
 8008424:	d8c01017 	ldw	r3,64(sp)
 8008428:	dc001317 	ldw	r16,76(sp)
 800842c:	dc801417 	ldw	r18,80(sp)
 8008430:	1011883a 	mov	r8,r2
 8008434:	b8ef883a 	add	r23,r23,r3
 8008438:	d9000e17 	ldw	r4,56(sp)
 800843c:	d9401117 	ldw	r5,68(sp)
 8008440:	000d883a 	mov	r6,zero
 8008444:	01cff834 	movhi	r7,16352
 8008448:	da001715 	stw	r8,92(sp)
 800844c:	da401515 	stw	r9,84(sp)
 8008450:	8015b840 	call	8015b84 <__adddf3>
 8008454:	da001717 	ldw	r8,92(sp)
 8008458:	da401517 	ldw	r9,84(sp)
 800845c:	1009883a 	mov	r4,r2
 8008460:	400d883a 	mov	r6,r8
 8008464:	480f883a 	mov	r7,r9
 8008468:	180b883a 	mov	r5,r3
 800846c:	8016e500 	call	8016e50 <__ledf2>
 8008470:	da001717 	ldw	r8,92(sp)
 8008474:	da401517 	ldw	r9,84(sp)
 8008478:	10003b0e 	bge	r2,zero,8008568 <_dtoa_r+0x15dc>
 800847c:	d9001217 	ldw	r4,72(sp)
 8008480:	bd7fffc3 	ldbu	r21,-1(r23)
 8008484:	d9000515 	stw	r4,20(sp)
 8008488:	003d1c06 	br	80078fc <__alt_data_end+0xf80078fc>
 800848c:	d8c00817 	ldw	r3,32(sp)
 8008490:	18a9c83a 	sub	r20,r3,r2
 8008494:	0005883a 	mov	r2,zero
 8008498:	003d3706 	br	8007978 <__alt_data_end+0xf8007978>
 800849c:	00800044 	movi	r2,1
 80084a0:	003dd006 	br	8007be4 <__alt_data_end+0xf8007be4>
 80084a4:	d8c00217 	ldw	r3,8(sp)
 80084a8:	00800d84 	movi	r2,54
 80084ac:	dd400917 	ldw	r21,36(sp)
 80084b0:	10c5c83a 	sub	r2,r2,r3
 80084b4:	dd000817 	ldw	r20,32(sp)
 80084b8:	003d2f06 	br	8007978 <__alt_data_end+0xf8007978>
 80084bc:	9029883a 	mov	r20,r18
 80084c0:	982b883a 	mov	r21,r19
 80084c4:	04400084 	movi	r17,2
 80084c8:	003bc606 	br	80073e4 <__alt_data_end+0xf80073e4>
 80084cc:	d8800617 	ldw	r2,24(sp)
 80084d0:	103efc26 	beq	r2,zero,80080c4 <__alt_data_end+0xf80080c4>
 80084d4:	d8c00d17 	ldw	r3,52(sp)
 80084d8:	00fc890e 	bge	zero,r3,8007700 <__alt_data_end+0xf8007700>
 80084dc:	a80b883a 	mov	r5,r21
 80084e0:	a009883a 	mov	r4,r20
 80084e4:	000d883a 	mov	r6,zero
 80084e8:	01d00934 	movhi	r7,16420
 80084ec:	8016f300 	call	8016f30 <__muldf3>
 80084f0:	89000044 	addi	r4,r17,1
 80084f4:	1029883a 	mov	r20,r2
 80084f8:	182b883a 	mov	r21,r3
 80084fc:	8017fac0 	call	8017fac <__floatsidf>
 8008500:	a009883a 	mov	r4,r20
 8008504:	a80b883a 	mov	r5,r21
 8008508:	100d883a 	mov	r6,r2
 800850c:	180f883a 	mov	r7,r3
 8008510:	8016f300 	call	8016f30 <__muldf3>
 8008514:	1009883a 	mov	r4,r2
 8008518:	180b883a 	mov	r5,r3
 800851c:	000d883a 	mov	r6,zero
 8008520:	01d00734 	movhi	r7,16412
 8008524:	8015b840 	call	8015b84 <__adddf3>
 8008528:	d9000517 	ldw	r4,20(sp)
 800852c:	1023883a 	mov	r17,r2
 8008530:	00bf3034 	movhi	r2,64704
 8008534:	213fffc4 	addi	r4,r4,-1
 8008538:	1885883a 	add	r2,r3,r2
 800853c:	d9001215 	stw	r4,72(sp)
 8008540:	d8800e15 	stw	r2,56(sp)
 8008544:	da800d17 	ldw	r10,52(sp)
 8008548:	003bc306 	br	8007458 <__alt_data_end+0xf8007458>
 800854c:	b039883a 	mov	fp,r22
 8008550:	01000e44 	movi	r4,57
 8008554:	8825883a 	mov	r18,r17
 8008558:	9dc00044 	addi	r23,r19,1
 800855c:	99000005 	stb	r4,0(r19)
 8008560:	a023883a 	mov	r17,r20
 8008564:	003dae06 	br	8007c20 <__alt_data_end+0xf8007c20>
 8008568:	d9800e17 	ldw	r6,56(sp)
 800856c:	d9c01117 	ldw	r7,68(sp)
 8008570:	0009883a 	mov	r4,zero
 8008574:	014ff834 	movhi	r5,16352
 8008578:	da001715 	stw	r8,92(sp)
 800857c:	da401515 	stw	r9,84(sp)
 8008580:	80176540 	call	8017654 <__subdf3>
 8008584:	da001717 	ldw	r8,92(sp)
 8008588:	da401517 	ldw	r9,84(sp)
 800858c:	1009883a 	mov	r4,r2
 8008590:	180b883a 	mov	r5,r3
 8008594:	400d883a 	mov	r6,r8
 8008598:	480f883a 	mov	r7,r9
 800859c:	8016d700 	call	8016d70 <__gedf2>
 80085a0:	00bc570e 	bge	zero,r2,8007700 <__alt_data_end+0xf8007700>
 80085a4:	01000c04 	movi	r4,48
 80085a8:	00000106 	br	80085b0 <_dtoa_r+0x1624>
 80085ac:	102f883a 	mov	r23,r2
 80085b0:	b8bfffc4 	addi	r2,r23,-1
 80085b4:	10c00007 	ldb	r3,0(r2)
 80085b8:	193ffc26 	beq	r3,r4,80085ac <__alt_data_end+0xf80085ac>
 80085bc:	d9801217 	ldw	r6,72(sp)
 80085c0:	d9800515 	stw	r6,20(sp)
 80085c4:	003c1f06 	br	8007644 <__alt_data_end+0xf8007644>
 80085c8:	d8801217 	ldw	r2,72(sp)
 80085cc:	dc001117 	ldw	r16,68(sp)
 80085d0:	d8800515 	stw	r2,20(sp)
 80085d4:	003cc906 	br	80078fc <__alt_data_end+0xf80078fc>
 80085d8:	dd801317 	ldw	r22,76(sp)
 80085dc:	dc001117 	ldw	r16,68(sp)
 80085e0:	dcc01417 	ldw	r19,80(sp)
 80085e4:	dc801017 	ldw	r18,64(sp)
 80085e8:	003c4506 	br	8007700 <__alt_data_end+0xf8007700>
 80085ec:	103e5d1e 	bne	r2,zero,8007f64 <__alt_data_end+0xf8007f64>
 80085f0:	4080004c 	andi	r2,r8,1
 80085f4:	103e5b26 	beq	r2,zero,8007f64 <__alt_data_end+0xf8007f64>
 80085f8:	003e5706 	br	8007f58 <__alt_data_end+0xf8007f58>
 80085fc:	d8c00317 	ldw	r3,12(sp)
 8008600:	00800084 	movi	r2,2
 8008604:	10c00a16 	blt	r2,r3,8008630 <_dtoa_r+0x16a4>
 8008608:	d9000d17 	ldw	r4,52(sp)
 800860c:	003e8306 	br	800801c <__alt_data_end+0xf800801c>
 8008610:	04400084 	movi	r17,2
 8008614:	003b7306 	br	80073e4 <__alt_data_end+0xf80073e4>
 8008618:	d9801217 	ldw	r6,72(sp)
 800861c:	d9800515 	stw	r6,20(sp)
 8008620:	003cb606 	br	80078fc <__alt_data_end+0xf80078fc>
 8008624:	d9001217 	ldw	r4,72(sp)
 8008628:	d9000515 	stw	r4,20(sp)
 800862c:	003c0506 	br	8007644 <__alt_data_end+0xf8007644>
 8008630:	d9800d17 	ldw	r6,52(sp)
 8008634:	d9800615 	stw	r6,24(sp)
 8008638:	003e8306 	br	8008048 <__alt_data_end+0xf8008048>
 800863c:	d9800317 	ldw	r6,12(sp)
 8008640:	00800084 	movi	r2,2
 8008644:	11800216 	blt	r2,r6,8008650 <_dtoa_r+0x16c4>
 8008648:	d8800d17 	ldw	r2,52(sp)
 800864c:	003da606 	br	8007ce8 <__alt_data_end+0xf8007ce8>
 8008650:	d8800d17 	ldw	r2,52(sp)
 8008654:	d8800615 	stw	r2,24(sp)
 8008658:	003e7b06 	br	8008048 <__alt_data_end+0xf8008048>
 800865c:	05000044 	movi	r20,1
 8008660:	003b0506 	br	8007278 <__alt_data_end+0xf8007278>
 8008664:	8009883a 	mov	r4,r16
 8008668:	80001115 	stw	zero,68(r16)
 800866c:	000b883a 	mov	r5,zero
 8008670:	8009f9c0 	call	8009f9c <_Balloc>
 8008674:	d8800715 	stw	r2,28(sp)
 8008678:	d8c00717 	ldw	r3,28(sp)
 800867c:	00bfffc4 	movi	r2,-1
 8008680:	01000044 	movi	r4,1
 8008684:	d8800615 	stw	r2,24(sp)
 8008688:	80c01015 	stw	r3,64(r16)
 800868c:	d9000b15 	stw	r4,44(sp)
 8008690:	d8002215 	stw	zero,136(sp)
 8008694:	d8800d15 	stw	r2,52(sp)
 8008698:	003c1906 	br	8007700 <__alt_data_end+0xf8007700>
 800869c:	193d2926 	beq	r3,r4,8007b44 <__alt_data_end+0xf8007b44>
 80086a0:	00c00f04 	movi	r3,60
 80086a4:	1885c83a 	sub	r2,r3,r2
 80086a8:	003d7b06 	br	8007c98 <__alt_data_end+0xf8007c98>
 80086ac:	000b883a 	mov	r5,zero
 80086b0:	003b1006 	br	80072f4 <__alt_data_end+0xf80072f4>

080086b4 <_fflush_r>:
 80086b4:	defffb04 	addi	sp,sp,-20
 80086b8:	dcc00315 	stw	r19,12(sp)
 80086bc:	dc000015 	stw	r16,0(sp)
 80086c0:	dfc00415 	stw	ra,16(sp)
 80086c4:	dc800215 	stw	r18,8(sp)
 80086c8:	dc400115 	stw	r17,4(sp)
 80086cc:	2027883a 	mov	r19,r4
 80086d0:	2821883a 	mov	r16,r5
 80086d4:	20000226 	beq	r4,zero,80086e0 <_fflush_r+0x2c>
 80086d8:	20800e17 	ldw	r2,56(r4)
 80086dc:	10005326 	beq	r2,zero,800882c <_fflush_r+0x178>
 80086e0:	8080030b 	ldhu	r2,12(r16)
 80086e4:	10ffffcc 	andi	r3,r2,65535
 80086e8:	18e0001c 	xori	r3,r3,32768
 80086ec:	18e00004 	addi	r3,r3,-32768
 80086f0:	18002c26 	beq	r3,zero,80087a4 <_fflush_r+0xf0>
 80086f4:	10c0020c 	andi	r3,r2,8
 80086f8:	1800321e 	bne	r3,zero,80087c4 <_fflush_r+0x110>
 80086fc:	80c00117 	ldw	r3,4(r16)
 8008700:	10820014 	ori	r2,r2,2048
 8008704:	8080030d 	sth	r2,12(r16)
 8008708:	00c0570e 	bge	zero,r3,8008868 <_fflush_r+0x1b4>
 800870c:	82000a17 	ldw	r8,40(r16)
 8008710:	40002426 	beq	r8,zero,80087a4 <_fflush_r+0xf0>
 8008714:	9c400017 	ldw	r17,0(r19)
 8008718:	10c4000c 	andi	r3,r2,4096
 800871c:	98000015 	stw	zero,0(r19)
 8008720:	18004626 	beq	r3,zero,800883c <_fflush_r+0x188>
 8008724:	81801417 	ldw	r6,80(r16)
 8008728:	10c0010c 	andi	r3,r2,4
 800872c:	18000626 	beq	r3,zero,8008748 <_fflush_r+0x94>
 8008730:	80c00117 	ldw	r3,4(r16)
 8008734:	80800c17 	ldw	r2,48(r16)
 8008738:	30cdc83a 	sub	r6,r6,r3
 800873c:	10000226 	beq	r2,zero,8008748 <_fflush_r+0x94>
 8008740:	80800f17 	ldw	r2,60(r16)
 8008744:	308dc83a 	sub	r6,r6,r2
 8008748:	81400717 	ldw	r5,28(r16)
 800874c:	9809883a 	mov	r4,r19
 8008750:	000f883a 	mov	r7,zero
 8008754:	403ee83a 	callr	r8
 8008758:	00ffffc4 	movi	r3,-1
 800875c:	10c04526 	beq	r2,r3,8008874 <_fflush_r+0x1c0>
 8008760:	80c0030b 	ldhu	r3,12(r16)
 8008764:	81000417 	ldw	r4,16(r16)
 8008768:	80000115 	stw	zero,4(r16)
 800876c:	197dffcc 	andi	r5,r3,63487
 8008770:	8140030d 	sth	r5,12(r16)
 8008774:	81000015 	stw	r4,0(r16)
 8008778:	18c4000c 	andi	r3,r3,4096
 800877c:	18000126 	beq	r3,zero,8008784 <_fflush_r+0xd0>
 8008780:	80801415 	stw	r2,80(r16)
 8008784:	81400c17 	ldw	r5,48(r16)
 8008788:	9c400015 	stw	r17,0(r19)
 800878c:	28000526 	beq	r5,zero,80087a4 <_fflush_r+0xf0>
 8008790:	80801004 	addi	r2,r16,64
 8008794:	28800226 	beq	r5,r2,80087a0 <_fflush_r+0xec>
 8008798:	9809883a 	mov	r4,r19
 800879c:	8008dd00 	call	8008dd0 <_free_r>
 80087a0:	80000c15 	stw	zero,48(r16)
 80087a4:	0005883a 	mov	r2,zero
 80087a8:	dfc00417 	ldw	ra,16(sp)
 80087ac:	dcc00317 	ldw	r19,12(sp)
 80087b0:	dc800217 	ldw	r18,8(sp)
 80087b4:	dc400117 	ldw	r17,4(sp)
 80087b8:	dc000017 	ldw	r16,0(sp)
 80087bc:	dec00504 	addi	sp,sp,20
 80087c0:	f800283a 	ret
 80087c4:	84800417 	ldw	r18,16(r16)
 80087c8:	903ff626 	beq	r18,zero,80087a4 <__alt_data_end+0xf80087a4>
 80087cc:	84400017 	ldw	r17,0(r16)
 80087d0:	108000cc 	andi	r2,r2,3
 80087d4:	84800015 	stw	r18,0(r16)
 80087d8:	8ca3c83a 	sub	r17,r17,r18
 80087dc:	10001526 	beq	r2,zero,8008834 <_fflush_r+0x180>
 80087e0:	0005883a 	mov	r2,zero
 80087e4:	80800215 	stw	r2,8(r16)
 80087e8:	04400316 	blt	zero,r17,80087f8 <_fflush_r+0x144>
 80087ec:	003fed06 	br	80087a4 <__alt_data_end+0xf80087a4>
 80087f0:	90a5883a 	add	r18,r18,r2
 80087f4:	047feb0e 	bge	zero,r17,80087a4 <__alt_data_end+0xf80087a4>
 80087f8:	80800917 	ldw	r2,36(r16)
 80087fc:	81400717 	ldw	r5,28(r16)
 8008800:	880f883a 	mov	r7,r17
 8008804:	900d883a 	mov	r6,r18
 8008808:	9809883a 	mov	r4,r19
 800880c:	103ee83a 	callr	r2
 8008810:	88a3c83a 	sub	r17,r17,r2
 8008814:	00bff616 	blt	zero,r2,80087f0 <__alt_data_end+0xf80087f0>
 8008818:	80c0030b 	ldhu	r3,12(r16)
 800881c:	00bfffc4 	movi	r2,-1
 8008820:	18c01014 	ori	r3,r3,64
 8008824:	80c0030d 	sth	r3,12(r16)
 8008828:	003fdf06 	br	80087a8 <__alt_data_end+0xf80087a8>
 800882c:	8008c5c0 	call	8008c5c <__sinit>
 8008830:	003fab06 	br	80086e0 <__alt_data_end+0xf80086e0>
 8008834:	80800517 	ldw	r2,20(r16)
 8008838:	003fea06 	br	80087e4 <__alt_data_end+0xf80087e4>
 800883c:	81400717 	ldw	r5,28(r16)
 8008840:	000d883a 	mov	r6,zero
 8008844:	9809883a 	mov	r4,r19
 8008848:	01c00044 	movi	r7,1
 800884c:	403ee83a 	callr	r8
 8008850:	100d883a 	mov	r6,r2
 8008854:	00bfffc4 	movi	r2,-1
 8008858:	30801326 	beq	r6,r2,80088a8 <_fflush_r+0x1f4>
 800885c:	8080030b 	ldhu	r2,12(r16)
 8008860:	82000a17 	ldw	r8,40(r16)
 8008864:	003fb006 	br	8008728 <__alt_data_end+0xf8008728>
 8008868:	80c00f17 	ldw	r3,60(r16)
 800886c:	00ffa716 	blt	zero,r3,800870c <__alt_data_end+0xf800870c>
 8008870:	003fcc06 	br	80087a4 <__alt_data_end+0xf80087a4>
 8008874:	98c00017 	ldw	r3,0(r19)
 8008878:	183fb926 	beq	r3,zero,8008760 <__alt_data_end+0xf8008760>
 800887c:	01000744 	movi	r4,29
 8008880:	19000226 	beq	r3,r4,800888c <_fflush_r+0x1d8>
 8008884:	01000584 	movi	r4,22
 8008888:	1900101e 	bne	r3,r4,80088cc <_fflush_r+0x218>
 800888c:	8080030b 	ldhu	r2,12(r16)
 8008890:	80c00417 	ldw	r3,16(r16)
 8008894:	80000115 	stw	zero,4(r16)
 8008898:	10bdffcc 	andi	r2,r2,63487
 800889c:	8080030d 	sth	r2,12(r16)
 80088a0:	80c00015 	stw	r3,0(r16)
 80088a4:	003fb706 	br	8008784 <__alt_data_end+0xf8008784>
 80088a8:	98800017 	ldw	r2,0(r19)
 80088ac:	103feb26 	beq	r2,zero,800885c <__alt_data_end+0xf800885c>
 80088b0:	00c00744 	movi	r3,29
 80088b4:	10c00226 	beq	r2,r3,80088c0 <_fflush_r+0x20c>
 80088b8:	00c00584 	movi	r3,22
 80088bc:	10ffd61e 	bne	r2,r3,8008818 <__alt_data_end+0xf8008818>
 80088c0:	9c400015 	stw	r17,0(r19)
 80088c4:	0005883a 	mov	r2,zero
 80088c8:	003fb706 	br	80087a8 <__alt_data_end+0xf80087a8>
 80088cc:	80c0030b 	ldhu	r3,12(r16)
 80088d0:	18c01014 	ori	r3,r3,64
 80088d4:	80c0030d 	sth	r3,12(r16)
 80088d8:	003fb306 	br	80087a8 <__alt_data_end+0xf80087a8>

080088dc <fflush>:
 80088dc:	20000526 	beq	r4,zero,80088f4 <fflush+0x18>
 80088e0:	008200b4 	movhi	r2,2050
 80088e4:	10bab604 	addi	r2,r2,-5416
 80088e8:	200b883a 	mov	r5,r4
 80088ec:	11000017 	ldw	r4,0(r2)
 80088f0:	80086b41 	jmpi	80086b4 <_fflush_r>
 80088f4:	008200b4 	movhi	r2,2050
 80088f8:	10bab504 	addi	r2,r2,-5420
 80088fc:	11000017 	ldw	r4,0(r2)
 8008900:	01420074 	movhi	r5,2049
 8008904:	2961ad04 	addi	r5,r5,-31052
 8008908:	800961c1 	jmpi	800961c <_fwalk_reent>

0800890c <__fp_lock>:
 800890c:	0005883a 	mov	r2,zero
 8008910:	f800283a 	ret

08008914 <__fp_unlock>:
 8008914:	0005883a 	mov	r2,zero
 8008918:	f800283a 	ret

0800891c <_cleanup_r>:
 800891c:	01420074 	movhi	r5,2049
 8008920:	294a6f04 	addi	r5,r5,10684
 8008924:	80095641 	jmpi	8009564 <_fwalk>

08008928 <__sinit.part.1>:
 8008928:	defff604 	addi	sp,sp,-40
 800892c:	00c20074 	movhi	r3,2049
 8008930:	dfc00915 	stw	ra,36(sp)
 8008934:	df000815 	stw	fp,32(sp)
 8008938:	ddc00715 	stw	r23,28(sp)
 800893c:	dd800615 	stw	r22,24(sp)
 8008940:	dd400515 	stw	r21,20(sp)
 8008944:	dd000415 	stw	r20,16(sp)
 8008948:	dcc00315 	stw	r19,12(sp)
 800894c:	dc800215 	stw	r18,8(sp)
 8008950:	dc400115 	stw	r17,4(sp)
 8008954:	dc000015 	stw	r16,0(sp)
 8008958:	18e24704 	addi	r3,r3,-30436
 800895c:	24000117 	ldw	r16,4(r4)
 8008960:	20c00f15 	stw	r3,60(r4)
 8008964:	07000044 	movi	fp,1
 8008968:	00c000c4 	movi	r3,3
 800896c:	2080bb04 	addi	r2,r4,748
 8008970:	20c0b915 	stw	r3,740(r4)
 8008974:	27000e15 	stw	fp,56(r4)
 8008978:	2080ba15 	stw	r2,744(r4)
 800897c:	2000b815 	stw	zero,736(r4)
 8008980:	05c00204 	movi	r23,8
 8008984:	00800104 	movi	r2,4
 8008988:	2025883a 	mov	r18,r4
 800898c:	b80d883a 	mov	r6,r23
 8008990:	81001704 	addi	r4,r16,92
 8008994:	000b883a 	mov	r5,zero
 8008998:	80000015 	stw	zero,0(r16)
 800899c:	80000115 	stw	zero,4(r16)
 80089a0:	80000215 	stw	zero,8(r16)
 80089a4:	8080030d 	sth	r2,12(r16)
 80089a8:	80001915 	stw	zero,100(r16)
 80089ac:	8000038d 	sth	zero,14(r16)
 80089b0:	80000415 	stw	zero,16(r16)
 80089b4:	80000515 	stw	zero,20(r16)
 80089b8:	80000615 	stw	zero,24(r16)
 80089bc:	8009e780 	call	8009e78 <memset>
 80089c0:	05820034 	movhi	r22,2048
 80089c4:	94400217 	ldw	r17,8(r18)
 80089c8:	05420034 	movhi	r21,2048
 80089cc:	05020034 	movhi	r20,2048
 80089d0:	04c20034 	movhi	r19,2048
 80089d4:	b58c9404 	addi	r22,r22,12880
 80089d8:	ad4cab04 	addi	r21,r21,12972
 80089dc:	a50cca04 	addi	r20,r20,13096
 80089e0:	9ccce104 	addi	r19,r19,13188
 80089e4:	85800815 	stw	r22,32(r16)
 80089e8:	85400915 	stw	r21,36(r16)
 80089ec:	85000a15 	stw	r20,40(r16)
 80089f0:	84c00b15 	stw	r19,44(r16)
 80089f4:	84000715 	stw	r16,28(r16)
 80089f8:	00800284 	movi	r2,10
 80089fc:	89001704 	addi	r4,r17,92
 8008a00:	b80d883a 	mov	r6,r23
 8008a04:	000b883a 	mov	r5,zero
 8008a08:	88000015 	stw	zero,0(r17)
 8008a0c:	88000115 	stw	zero,4(r17)
 8008a10:	88000215 	stw	zero,8(r17)
 8008a14:	8880030d 	sth	r2,12(r17)
 8008a18:	88001915 	stw	zero,100(r17)
 8008a1c:	8f00038d 	sth	fp,14(r17)
 8008a20:	88000415 	stw	zero,16(r17)
 8008a24:	88000515 	stw	zero,20(r17)
 8008a28:	88000615 	stw	zero,24(r17)
 8008a2c:	8009e780 	call	8009e78 <memset>
 8008a30:	94000317 	ldw	r16,12(r18)
 8008a34:	00800484 	movi	r2,18
 8008a38:	8c400715 	stw	r17,28(r17)
 8008a3c:	8d800815 	stw	r22,32(r17)
 8008a40:	8d400915 	stw	r21,36(r17)
 8008a44:	8d000a15 	stw	r20,40(r17)
 8008a48:	8cc00b15 	stw	r19,44(r17)
 8008a4c:	8080030d 	sth	r2,12(r16)
 8008a50:	00800084 	movi	r2,2
 8008a54:	80000015 	stw	zero,0(r16)
 8008a58:	80000115 	stw	zero,4(r16)
 8008a5c:	80000215 	stw	zero,8(r16)
 8008a60:	80001915 	stw	zero,100(r16)
 8008a64:	8080038d 	sth	r2,14(r16)
 8008a68:	80000415 	stw	zero,16(r16)
 8008a6c:	80000515 	stw	zero,20(r16)
 8008a70:	80000615 	stw	zero,24(r16)
 8008a74:	81001704 	addi	r4,r16,92
 8008a78:	000b883a 	mov	r5,zero
 8008a7c:	b80d883a 	mov	r6,r23
 8008a80:	8009e780 	call	8009e78 <memset>
 8008a84:	84000715 	stw	r16,28(r16)
 8008a88:	85800815 	stw	r22,32(r16)
 8008a8c:	85400915 	stw	r21,36(r16)
 8008a90:	85000a15 	stw	r20,40(r16)
 8008a94:	84c00b15 	stw	r19,44(r16)
 8008a98:	dfc00917 	ldw	ra,36(sp)
 8008a9c:	df000817 	ldw	fp,32(sp)
 8008aa0:	ddc00717 	ldw	r23,28(sp)
 8008aa4:	dd800617 	ldw	r22,24(sp)
 8008aa8:	dd400517 	ldw	r21,20(sp)
 8008aac:	dd000417 	ldw	r20,16(sp)
 8008ab0:	dcc00317 	ldw	r19,12(sp)
 8008ab4:	dc800217 	ldw	r18,8(sp)
 8008ab8:	dc400117 	ldw	r17,4(sp)
 8008abc:	dc000017 	ldw	r16,0(sp)
 8008ac0:	dec00a04 	addi	sp,sp,40
 8008ac4:	f800283a 	ret

08008ac8 <__sfmoreglue>:
 8008ac8:	defffc04 	addi	sp,sp,-16
 8008acc:	dc400115 	stw	r17,4(sp)
 8008ad0:	2c401a24 	muli	r17,r5,104
 8008ad4:	dc800215 	stw	r18,8(sp)
 8008ad8:	2825883a 	mov	r18,r5
 8008adc:	89400304 	addi	r5,r17,12
 8008ae0:	dc000015 	stw	r16,0(sp)
 8008ae4:	dfc00315 	stw	ra,12(sp)
 8008ae8:	80025d00 	call	80025d0 <_malloc_r>
 8008aec:	1021883a 	mov	r16,r2
 8008af0:	10000726 	beq	r2,zero,8008b10 <__sfmoreglue+0x48>
 8008af4:	11000304 	addi	r4,r2,12
 8008af8:	10000015 	stw	zero,0(r2)
 8008afc:	14800115 	stw	r18,4(r2)
 8008b00:	11000215 	stw	r4,8(r2)
 8008b04:	000b883a 	mov	r5,zero
 8008b08:	880d883a 	mov	r6,r17
 8008b0c:	8009e780 	call	8009e78 <memset>
 8008b10:	8005883a 	mov	r2,r16
 8008b14:	dfc00317 	ldw	ra,12(sp)
 8008b18:	dc800217 	ldw	r18,8(sp)
 8008b1c:	dc400117 	ldw	r17,4(sp)
 8008b20:	dc000017 	ldw	r16,0(sp)
 8008b24:	dec00404 	addi	sp,sp,16
 8008b28:	f800283a 	ret

08008b2c <__sfp>:
 8008b2c:	008200b4 	movhi	r2,2050
 8008b30:	defffb04 	addi	sp,sp,-20
 8008b34:	10bab504 	addi	r2,r2,-5420
 8008b38:	dc800215 	stw	r18,8(sp)
 8008b3c:	14800017 	ldw	r18,0(r2)
 8008b40:	dcc00315 	stw	r19,12(sp)
 8008b44:	dfc00415 	stw	ra,16(sp)
 8008b48:	90800e17 	ldw	r2,56(r18)
 8008b4c:	dc400115 	stw	r17,4(sp)
 8008b50:	dc000015 	stw	r16,0(sp)
 8008b54:	2027883a 	mov	r19,r4
 8008b58:	1000021e 	bne	r2,zero,8008b64 <__sfp+0x38>
 8008b5c:	9009883a 	mov	r4,r18
 8008b60:	80089280 	call	8008928 <__sinit.part.1>
 8008b64:	9480b804 	addi	r18,r18,736
 8008b68:	047fffc4 	movi	r17,-1
 8008b6c:	91400117 	ldw	r5,4(r18)
 8008b70:	94000217 	ldw	r16,8(r18)
 8008b74:	297fffc4 	addi	r5,r5,-1
 8008b78:	28000a16 	blt	r5,zero,8008ba4 <__sfp+0x78>
 8008b7c:	8080030f 	ldh	r2,12(r16)
 8008b80:	10000c26 	beq	r2,zero,8008bb4 <__sfp+0x88>
 8008b84:	80c01d04 	addi	r3,r16,116
 8008b88:	00000206 	br	8008b94 <__sfp+0x68>
 8008b8c:	18bfe60f 	ldh	r2,-104(r3)
 8008b90:	10000826 	beq	r2,zero,8008bb4 <__sfp+0x88>
 8008b94:	297fffc4 	addi	r5,r5,-1
 8008b98:	1c3ffd04 	addi	r16,r3,-12
 8008b9c:	18c01a04 	addi	r3,r3,104
 8008ba0:	2c7ffa1e 	bne	r5,r17,8008b8c <__alt_data_end+0xf8008b8c>
 8008ba4:	90800017 	ldw	r2,0(r18)
 8008ba8:	10001d26 	beq	r2,zero,8008c20 <__sfp+0xf4>
 8008bac:	1025883a 	mov	r18,r2
 8008bb0:	003fee06 	br	8008b6c <__alt_data_end+0xf8008b6c>
 8008bb4:	00bfffc4 	movi	r2,-1
 8008bb8:	8080038d 	sth	r2,14(r16)
 8008bbc:	00800044 	movi	r2,1
 8008bc0:	8080030d 	sth	r2,12(r16)
 8008bc4:	80001915 	stw	zero,100(r16)
 8008bc8:	80000015 	stw	zero,0(r16)
 8008bcc:	80000215 	stw	zero,8(r16)
 8008bd0:	80000115 	stw	zero,4(r16)
 8008bd4:	80000415 	stw	zero,16(r16)
 8008bd8:	80000515 	stw	zero,20(r16)
 8008bdc:	80000615 	stw	zero,24(r16)
 8008be0:	81001704 	addi	r4,r16,92
 8008be4:	000b883a 	mov	r5,zero
 8008be8:	01800204 	movi	r6,8
 8008bec:	8009e780 	call	8009e78 <memset>
 8008bf0:	8005883a 	mov	r2,r16
 8008bf4:	80000c15 	stw	zero,48(r16)
 8008bf8:	80000d15 	stw	zero,52(r16)
 8008bfc:	80001115 	stw	zero,68(r16)
 8008c00:	80001215 	stw	zero,72(r16)
 8008c04:	dfc00417 	ldw	ra,16(sp)
 8008c08:	dcc00317 	ldw	r19,12(sp)
 8008c0c:	dc800217 	ldw	r18,8(sp)
 8008c10:	dc400117 	ldw	r17,4(sp)
 8008c14:	dc000017 	ldw	r16,0(sp)
 8008c18:	dec00504 	addi	sp,sp,20
 8008c1c:	f800283a 	ret
 8008c20:	9809883a 	mov	r4,r19
 8008c24:	01400104 	movi	r5,4
 8008c28:	8008ac80 	call	8008ac8 <__sfmoreglue>
 8008c2c:	90800015 	stw	r2,0(r18)
 8008c30:	103fde1e 	bne	r2,zero,8008bac <__alt_data_end+0xf8008bac>
 8008c34:	00800304 	movi	r2,12
 8008c38:	98800015 	stw	r2,0(r19)
 8008c3c:	0005883a 	mov	r2,zero
 8008c40:	003ff006 	br	8008c04 <__alt_data_end+0xf8008c04>

08008c44 <_cleanup>:
 8008c44:	008200b4 	movhi	r2,2050
 8008c48:	10bab504 	addi	r2,r2,-5420
 8008c4c:	11000017 	ldw	r4,0(r2)
 8008c50:	01420074 	movhi	r5,2049
 8008c54:	294a6f04 	addi	r5,r5,10684
 8008c58:	80095641 	jmpi	8009564 <_fwalk>

08008c5c <__sinit>:
 8008c5c:	20800e17 	ldw	r2,56(r4)
 8008c60:	10000126 	beq	r2,zero,8008c68 <__sinit+0xc>
 8008c64:	f800283a 	ret
 8008c68:	80089281 	jmpi	8008928 <__sinit.part.1>

08008c6c <__sfp_lock_acquire>:
 8008c6c:	f800283a 	ret

08008c70 <__sfp_lock_release>:
 8008c70:	f800283a 	ret

08008c74 <__sinit_lock_acquire>:
 8008c74:	f800283a 	ret

08008c78 <__sinit_lock_release>:
 8008c78:	f800283a 	ret

08008c7c <__fp_lock_all>:
 8008c7c:	008200b4 	movhi	r2,2050
 8008c80:	10bab604 	addi	r2,r2,-5416
 8008c84:	11000017 	ldw	r4,0(r2)
 8008c88:	01420074 	movhi	r5,2049
 8008c8c:	29624304 	addi	r5,r5,-30452
 8008c90:	80095641 	jmpi	8009564 <_fwalk>

08008c94 <__fp_unlock_all>:
 8008c94:	008200b4 	movhi	r2,2050
 8008c98:	10bab604 	addi	r2,r2,-5416
 8008c9c:	11000017 	ldw	r4,0(r2)
 8008ca0:	01420074 	movhi	r5,2049
 8008ca4:	29624504 	addi	r5,r5,-30444
 8008ca8:	80095641 	jmpi	8009564 <_fwalk>

08008cac <_malloc_trim_r>:
 8008cac:	defffb04 	addi	sp,sp,-20
 8008cb0:	dcc00315 	stw	r19,12(sp)
 8008cb4:	04c200b4 	movhi	r19,2050
 8008cb8:	dc800215 	stw	r18,8(sp)
 8008cbc:	dc400115 	stw	r17,4(sp)
 8008cc0:	dc000015 	stw	r16,0(sp)
 8008cc4:	dfc00415 	stw	ra,16(sp)
 8008cc8:	2821883a 	mov	r16,r5
 8008ccc:	9cf4cb04 	addi	r19,r19,-11476
 8008cd0:	2025883a 	mov	r18,r4
 8008cd4:	80189240 	call	8018924 <__malloc_lock>
 8008cd8:	98800217 	ldw	r2,8(r19)
 8008cdc:	14400117 	ldw	r17,4(r2)
 8008ce0:	00bfff04 	movi	r2,-4
 8008ce4:	88a2703a 	and	r17,r17,r2
 8008ce8:	8c21c83a 	sub	r16,r17,r16
 8008cec:	8403fbc4 	addi	r16,r16,4079
 8008cf0:	8020d33a 	srli	r16,r16,12
 8008cf4:	0083ffc4 	movi	r2,4095
 8008cf8:	843fffc4 	addi	r16,r16,-1
 8008cfc:	8020933a 	slli	r16,r16,12
 8008d00:	1400060e 	bge	r2,r16,8008d1c <_malloc_trim_r+0x70>
 8008d04:	9009883a 	mov	r4,r18
 8008d08:	000b883a 	mov	r5,zero
 8008d0c:	80031080 	call	8003108 <_sbrk_r>
 8008d10:	98c00217 	ldw	r3,8(r19)
 8008d14:	1c47883a 	add	r3,r3,r17
 8008d18:	10c00a26 	beq	r2,r3,8008d44 <_malloc_trim_r+0x98>
 8008d1c:	9009883a 	mov	r4,r18
 8008d20:	80189440 	call	8018944 <__malloc_unlock>
 8008d24:	0005883a 	mov	r2,zero
 8008d28:	dfc00417 	ldw	ra,16(sp)
 8008d2c:	dcc00317 	ldw	r19,12(sp)
 8008d30:	dc800217 	ldw	r18,8(sp)
 8008d34:	dc400117 	ldw	r17,4(sp)
 8008d38:	dc000017 	ldw	r16,0(sp)
 8008d3c:	dec00504 	addi	sp,sp,20
 8008d40:	f800283a 	ret
 8008d44:	9009883a 	mov	r4,r18
 8008d48:	040bc83a 	sub	r5,zero,r16
 8008d4c:	80031080 	call	8003108 <_sbrk_r>
 8008d50:	00ffffc4 	movi	r3,-1
 8008d54:	10c00d26 	beq	r2,r3,8008d8c <_malloc_trim_r+0xe0>
 8008d58:	00c200b4 	movhi	r3,2050
 8008d5c:	18fad904 	addi	r3,r3,-5276
 8008d60:	18800017 	ldw	r2,0(r3)
 8008d64:	99000217 	ldw	r4,8(r19)
 8008d68:	8c23c83a 	sub	r17,r17,r16
 8008d6c:	8c400054 	ori	r17,r17,1
 8008d70:	1421c83a 	sub	r16,r2,r16
 8008d74:	24400115 	stw	r17,4(r4)
 8008d78:	9009883a 	mov	r4,r18
 8008d7c:	1c000015 	stw	r16,0(r3)
 8008d80:	80189440 	call	8018944 <__malloc_unlock>
 8008d84:	00800044 	movi	r2,1
 8008d88:	003fe706 	br	8008d28 <__alt_data_end+0xf8008d28>
 8008d8c:	9009883a 	mov	r4,r18
 8008d90:	000b883a 	mov	r5,zero
 8008d94:	80031080 	call	8003108 <_sbrk_r>
 8008d98:	99000217 	ldw	r4,8(r19)
 8008d9c:	014003c4 	movi	r5,15
 8008da0:	1107c83a 	sub	r3,r2,r4
 8008da4:	28ffdd0e 	bge	r5,r3,8008d1c <__alt_data_end+0xf8008d1c>
 8008da8:	014200b4 	movhi	r5,2050
 8008dac:	297ab704 	addi	r5,r5,-5412
 8008db0:	29400017 	ldw	r5,0(r5)
 8008db4:	18c00054 	ori	r3,r3,1
 8008db8:	20c00115 	stw	r3,4(r4)
 8008dbc:	00c200b4 	movhi	r3,2050
 8008dc0:	1145c83a 	sub	r2,r2,r5
 8008dc4:	18fad904 	addi	r3,r3,-5276
 8008dc8:	18800015 	stw	r2,0(r3)
 8008dcc:	003fd306 	br	8008d1c <__alt_data_end+0xf8008d1c>

08008dd0 <_free_r>:
 8008dd0:	28004c26 	beq	r5,zero,8008f04 <_free_r+0x134>
 8008dd4:	defffd04 	addi	sp,sp,-12
 8008dd8:	dc400115 	stw	r17,4(sp)
 8008ddc:	dc000015 	stw	r16,0(sp)
 8008de0:	2023883a 	mov	r17,r4
 8008de4:	2821883a 	mov	r16,r5
 8008de8:	dfc00215 	stw	ra,8(sp)
 8008dec:	80189240 	call	8018924 <__malloc_lock>
 8008df0:	813fff17 	ldw	r4,-4(r16)
 8008df4:	00bfff84 	movi	r2,-2
 8008df8:	024200b4 	movhi	r9,2050
 8008dfc:	81bffe04 	addi	r6,r16,-8
 8008e00:	2084703a 	and	r2,r4,r2
 8008e04:	4a74cb04 	addi	r9,r9,-11476
 8008e08:	308b883a 	add	r5,r6,r2
 8008e0c:	2a000117 	ldw	r8,4(r5)
 8008e10:	49c00217 	ldw	r7,8(r9)
 8008e14:	00ffff04 	movi	r3,-4
 8008e18:	40c6703a 	and	r3,r8,r3
 8008e1c:	39405326 	beq	r7,r5,8008f6c <_free_r+0x19c>
 8008e20:	28c00115 	stw	r3,4(r5)
 8008e24:	2100004c 	andi	r4,r4,1
 8008e28:	2000091e 	bne	r4,zero,8008e50 <_free_r+0x80>
 8008e2c:	81fffe17 	ldw	r7,-8(r16)
 8008e30:	4a000204 	addi	r8,r9,8
 8008e34:	31cdc83a 	sub	r6,r6,r7
 8008e38:	31000217 	ldw	r4,8(r6)
 8008e3c:	11c5883a 	add	r2,r2,r7
 8008e40:	22006126 	beq	r4,r8,8008fc8 <_free_r+0x1f8>
 8008e44:	31c00317 	ldw	r7,12(r6)
 8008e48:	21c00315 	stw	r7,12(r4)
 8008e4c:	39000215 	stw	r4,8(r7)
 8008e50:	28c9883a 	add	r4,r5,r3
 8008e54:	21c00117 	ldw	r7,4(r4)
 8008e58:	39c0004c 	andi	r7,r7,1
 8008e5c:	38000d1e 	bne	r7,zero,8008e94 <_free_r+0xc4>
 8008e60:	29000217 	ldw	r4,8(r5)
 8008e64:	10c5883a 	add	r2,r2,r3
 8008e68:	00c200b4 	movhi	r3,2050
 8008e6c:	18f4cd04 	addi	r3,r3,-11468
 8008e70:	20c07526 	beq	r4,r3,8009048 <_free_r+0x278>
 8008e74:	29c00317 	ldw	r7,12(r5)
 8008e78:	11400054 	ori	r5,r2,1
 8008e7c:	3087883a 	add	r3,r6,r2
 8008e80:	21c00315 	stw	r7,12(r4)
 8008e84:	39000215 	stw	r4,8(r7)
 8008e88:	31400115 	stw	r5,4(r6)
 8008e8c:	18800015 	stw	r2,0(r3)
 8008e90:	00000406 	br	8008ea4 <_free_r+0xd4>
 8008e94:	10c00054 	ori	r3,r2,1
 8008e98:	30c00115 	stw	r3,4(r6)
 8008e9c:	3087883a 	add	r3,r6,r2
 8008ea0:	18800015 	stw	r2,0(r3)
 8008ea4:	00c07fc4 	movi	r3,511
 8008ea8:	18801736 	bltu	r3,r2,8008f08 <_free_r+0x138>
 8008eac:	1004d0fa 	srli	r2,r2,3
 8008eb0:	01400044 	movi	r5,1
 8008eb4:	49000117 	ldw	r4,4(r9)
 8008eb8:	1087883a 	add	r3,r2,r2
 8008ebc:	18c7883a 	add	r3,r3,r3
 8008ec0:	1005d0ba 	srai	r2,r2,2
 8008ec4:	18c7883a 	add	r3,r3,r3
 8008ec8:	1a47883a 	add	r3,r3,r9
 8008ecc:	19c00217 	ldw	r7,8(r3)
 8008ed0:	2884983a 	sll	r2,r5,r2
 8008ed4:	30c00315 	stw	r3,12(r6)
 8008ed8:	31c00215 	stw	r7,8(r6)
 8008edc:	1104b03a 	or	r2,r2,r4
 8008ee0:	19800215 	stw	r6,8(r3)
 8008ee4:	48800115 	stw	r2,4(r9)
 8008ee8:	39800315 	stw	r6,12(r7)
 8008eec:	8809883a 	mov	r4,r17
 8008ef0:	dfc00217 	ldw	ra,8(sp)
 8008ef4:	dc400117 	ldw	r17,4(sp)
 8008ef8:	dc000017 	ldw	r16,0(sp)
 8008efc:	dec00304 	addi	sp,sp,12
 8008f00:	80189441 	jmpi	8018944 <__malloc_unlock>
 8008f04:	f800283a 	ret
 8008f08:	1006d27a 	srli	r3,r2,9
 8008f0c:	01000104 	movi	r4,4
 8008f10:	20c04036 	bltu	r4,r3,8009014 <_free_r+0x244>
 8008f14:	1006d1ba 	srli	r3,r2,6
 8008f18:	19400e04 	addi	r5,r3,56
 8008f1c:	2947883a 	add	r3,r5,r5
 8008f20:	18c7883a 	add	r3,r3,r3
 8008f24:	18c7883a 	add	r3,r3,r3
 8008f28:	1a49883a 	add	r4,r3,r9
 8008f2c:	20c00217 	ldw	r3,8(r4)
 8008f30:	01c200b4 	movhi	r7,2050
 8008f34:	39f4cb04 	addi	r7,r7,-11476
 8008f38:	19003b26 	beq	r3,r4,8009028 <_free_r+0x258>
 8008f3c:	01ffff04 	movi	r7,-4
 8008f40:	19400117 	ldw	r5,4(r3)
 8008f44:	29ca703a 	and	r5,r5,r7
 8008f48:	1140022e 	bgeu	r2,r5,8008f54 <_free_r+0x184>
 8008f4c:	18c00217 	ldw	r3,8(r3)
 8008f50:	20fffb1e 	bne	r4,r3,8008f40 <__alt_data_end+0xf8008f40>
 8008f54:	18800317 	ldw	r2,12(r3)
 8008f58:	30800315 	stw	r2,12(r6)
 8008f5c:	30c00215 	stw	r3,8(r6)
 8008f60:	11800215 	stw	r6,8(r2)
 8008f64:	19800315 	stw	r6,12(r3)
 8008f68:	003fe006 	br	8008eec <__alt_data_end+0xf8008eec>
 8008f6c:	2100004c 	andi	r4,r4,1
 8008f70:	1885883a 	add	r2,r3,r2
 8008f74:	2000071e 	bne	r4,zero,8008f94 <_free_r+0x1c4>
 8008f78:	817ffe17 	ldw	r5,-8(r16)
 8008f7c:	314dc83a 	sub	r6,r6,r5
 8008f80:	30c00317 	ldw	r3,12(r6)
 8008f84:	31000217 	ldw	r4,8(r6)
 8008f88:	1145883a 	add	r2,r2,r5
 8008f8c:	20c00315 	stw	r3,12(r4)
 8008f90:	19000215 	stw	r4,8(r3)
 8008f94:	10c00054 	ori	r3,r2,1
 8008f98:	30c00115 	stw	r3,4(r6)
 8008f9c:	00c200b4 	movhi	r3,2050
 8008fa0:	18fab804 	addi	r3,r3,-5408
 8008fa4:	18c00017 	ldw	r3,0(r3)
 8008fa8:	49800215 	stw	r6,8(r9)
 8008fac:	10ffcf36 	bltu	r2,r3,8008eec <__alt_data_end+0xf8008eec>
 8008fb0:	008200b4 	movhi	r2,2050
 8008fb4:	10bacd04 	addi	r2,r2,-5324
 8008fb8:	11400017 	ldw	r5,0(r2)
 8008fbc:	8809883a 	mov	r4,r17
 8008fc0:	8008cac0 	call	8008cac <_malloc_trim_r>
 8008fc4:	003fc906 	br	8008eec <__alt_data_end+0xf8008eec>
 8008fc8:	28c9883a 	add	r4,r5,r3
 8008fcc:	21000117 	ldw	r4,4(r4)
 8008fd0:	2100004c 	andi	r4,r4,1
 8008fd4:	20000a1e 	bne	r4,zero,8009000 <_free_r+0x230>
 8008fd8:	29000317 	ldw	r4,12(r5)
 8008fdc:	29400217 	ldw	r5,8(r5)
 8008fe0:	10c5883a 	add	r2,r2,r3
 8008fe4:	10c00054 	ori	r3,r2,1
 8008fe8:	29000315 	stw	r4,12(r5)
 8008fec:	21400215 	stw	r5,8(r4)
 8008ff0:	30c00115 	stw	r3,4(r6)
 8008ff4:	308d883a 	add	r6,r6,r2
 8008ff8:	30800015 	stw	r2,0(r6)
 8008ffc:	003fbb06 	br	8008eec <__alt_data_end+0xf8008eec>
 8009000:	10c00054 	ori	r3,r2,1
 8009004:	30c00115 	stw	r3,4(r6)
 8009008:	308d883a 	add	r6,r6,r2
 800900c:	30800015 	stw	r2,0(r6)
 8009010:	003fb606 	br	8008eec <__alt_data_end+0xf8008eec>
 8009014:	01000504 	movi	r4,20
 8009018:	20c01436 	bltu	r4,r3,800906c <_free_r+0x29c>
 800901c:	194016c4 	addi	r5,r3,91
 8009020:	2947883a 	add	r3,r5,r5
 8009024:	003fbe06 	br	8008f20 <__alt_data_end+0xf8008f20>
 8009028:	280bd0ba 	srai	r5,r5,2
 800902c:	00800044 	movi	r2,1
 8009030:	39000117 	ldw	r4,4(r7)
 8009034:	114a983a 	sll	r5,r2,r5
 8009038:	1805883a 	mov	r2,r3
 800903c:	2908b03a 	or	r4,r5,r4
 8009040:	39000115 	stw	r4,4(r7)
 8009044:	003fc406 	br	8008f58 <__alt_data_end+0xf8008f58>
 8009048:	49800515 	stw	r6,20(r9)
 800904c:	49800415 	stw	r6,16(r9)
 8009050:	10c00054 	ori	r3,r2,1
 8009054:	31000315 	stw	r4,12(r6)
 8009058:	31000215 	stw	r4,8(r6)
 800905c:	30c00115 	stw	r3,4(r6)
 8009060:	308d883a 	add	r6,r6,r2
 8009064:	30800015 	stw	r2,0(r6)
 8009068:	003fa006 	br	8008eec <__alt_data_end+0xf8008eec>
 800906c:	01001504 	movi	r4,84
 8009070:	20c00436 	bltu	r4,r3,8009084 <_free_r+0x2b4>
 8009074:	1006d33a 	srli	r3,r2,12
 8009078:	19401b84 	addi	r5,r3,110
 800907c:	2947883a 	add	r3,r5,r5
 8009080:	003fa706 	br	8008f20 <__alt_data_end+0xf8008f20>
 8009084:	01005504 	movi	r4,340
 8009088:	20c00436 	bltu	r4,r3,800909c <_free_r+0x2cc>
 800908c:	1006d3fa 	srli	r3,r2,15
 8009090:	19401dc4 	addi	r5,r3,119
 8009094:	2947883a 	add	r3,r5,r5
 8009098:	003fa106 	br	8008f20 <__alt_data_end+0xf8008f20>
 800909c:	01015504 	movi	r4,1364
 80090a0:	20c00436 	bltu	r4,r3,80090b4 <_free_r+0x2e4>
 80090a4:	1006d4ba 	srli	r3,r2,18
 80090a8:	19401f04 	addi	r5,r3,124
 80090ac:	2947883a 	add	r3,r5,r5
 80090b0:	003f9b06 	br	8008f20 <__alt_data_end+0xf8008f20>
 80090b4:	00c03f04 	movi	r3,252
 80090b8:	01401f84 	movi	r5,126
 80090bc:	003f9806 	br	8008f20 <__alt_data_end+0xf8008f20>

080090c0 <__sfvwrite_r>:
 80090c0:	30800217 	ldw	r2,8(r6)
 80090c4:	10004526 	beq	r2,zero,80091dc <__sfvwrite_r+0x11c>
 80090c8:	28c0030b 	ldhu	r3,12(r5)
 80090cc:	defff404 	addi	sp,sp,-48
 80090d0:	dd400715 	stw	r21,28(sp)
 80090d4:	dcc00515 	stw	r19,20(sp)
 80090d8:	dc000215 	stw	r16,8(sp)
 80090dc:	dfc00b15 	stw	ra,44(sp)
 80090e0:	df000a15 	stw	fp,40(sp)
 80090e4:	ddc00915 	stw	r23,36(sp)
 80090e8:	dd800815 	stw	r22,32(sp)
 80090ec:	dd000615 	stw	r20,24(sp)
 80090f0:	dc800415 	stw	r18,16(sp)
 80090f4:	dc400315 	stw	r17,12(sp)
 80090f8:	1880020c 	andi	r2,r3,8
 80090fc:	2821883a 	mov	r16,r5
 8009100:	202b883a 	mov	r21,r4
 8009104:	3027883a 	mov	r19,r6
 8009108:	10002526 	beq	r2,zero,80091a0 <__sfvwrite_r+0xe0>
 800910c:	28800417 	ldw	r2,16(r5)
 8009110:	10002326 	beq	r2,zero,80091a0 <__sfvwrite_r+0xe0>
 8009114:	1880008c 	andi	r2,r3,2
 8009118:	9c400017 	ldw	r17,0(r19)
 800911c:	10003126 	beq	r2,zero,80091e4 <__sfvwrite_r+0x124>
 8009120:	0029883a 	mov	r20,zero
 8009124:	0025883a 	mov	r18,zero
 8009128:	05810004 	movi	r22,1024
 800912c:	a00d883a 	mov	r6,r20
 8009130:	a809883a 	mov	r4,r21
 8009134:	90002526 	beq	r18,zero,80091cc <__sfvwrite_r+0x10c>
 8009138:	900f883a 	mov	r7,r18
 800913c:	81400717 	ldw	r5,28(r16)
 8009140:	b480012e 	bgeu	r22,r18,8009148 <__sfvwrite_r+0x88>
 8009144:	01c10004 	movi	r7,1024
 8009148:	80800917 	ldw	r2,36(r16)
 800914c:	103ee83a 	callr	r2
 8009150:	0080510e 	bge	zero,r2,8009298 <__sfvwrite_r+0x1d8>
 8009154:	98c00217 	ldw	r3,8(r19)
 8009158:	a0a9883a 	add	r20,r20,r2
 800915c:	90a5c83a 	sub	r18,r18,r2
 8009160:	1885c83a 	sub	r2,r3,r2
 8009164:	98800215 	stw	r2,8(r19)
 8009168:	103ff01e 	bne	r2,zero,800912c <__alt_data_end+0xf800912c>
 800916c:	0005883a 	mov	r2,zero
 8009170:	dfc00b17 	ldw	ra,44(sp)
 8009174:	df000a17 	ldw	fp,40(sp)
 8009178:	ddc00917 	ldw	r23,36(sp)
 800917c:	dd800817 	ldw	r22,32(sp)
 8009180:	dd400717 	ldw	r21,28(sp)
 8009184:	dd000617 	ldw	r20,24(sp)
 8009188:	dcc00517 	ldw	r19,20(sp)
 800918c:	dc800417 	ldw	r18,16(sp)
 8009190:	dc400317 	ldw	r17,12(sp)
 8009194:	dc000217 	ldw	r16,8(sp)
 8009198:	dec00c04 	addi	sp,sp,48
 800919c:	f800283a 	ret
 80091a0:	a809883a 	mov	r4,r21
 80091a4:	800b883a 	mov	r5,r16
 80091a8:	8006c080 	call	8006c08 <__swsetup_r>
 80091ac:	80c0030b 	ldhu	r3,12(r16)
 80091b0:	103fd826 	beq	r2,zero,8009114 <__alt_data_end+0xf8009114>
 80091b4:	18c01014 	ori	r3,r3,64
 80091b8:	80c0030d 	sth	r3,12(r16)
 80091bc:	00c00244 	movi	r3,9
 80091c0:	00bfffc4 	movi	r2,-1
 80091c4:	a8c00015 	stw	r3,0(r21)
 80091c8:	003fe906 	br	8009170 <__alt_data_end+0xf8009170>
 80091cc:	8d000017 	ldw	r20,0(r17)
 80091d0:	8c800117 	ldw	r18,4(r17)
 80091d4:	8c400204 	addi	r17,r17,8
 80091d8:	003fd406 	br	800912c <__alt_data_end+0xf800912c>
 80091dc:	0005883a 	mov	r2,zero
 80091e0:	f800283a 	ret
 80091e4:	1880004c 	andi	r2,r3,1
 80091e8:	1000301e 	bne	r2,zero,80092ac <__sfvwrite_r+0x1ec>
 80091ec:	002f883a 	mov	r23,zero
 80091f0:	0025883a 	mov	r18,zero
 80091f4:	90001c26 	beq	r18,zero,8009268 <__sfvwrite_r+0x1a8>
 80091f8:	1880800c 	andi	r2,r3,512
 80091fc:	85000217 	ldw	r20,8(r16)
 8009200:	10006c26 	beq	r2,zero,80093b4 <__sfvwrite_r+0x2f4>
 8009204:	a02d883a 	mov	r22,r20
 8009208:	95008536 	bltu	r18,r20,8009420 <__sfvwrite_r+0x360>
 800920c:	1881200c 	andi	r2,r3,1152
 8009210:	10009d1e 	bne	r2,zero,8009488 <__sfvwrite_r+0x3c8>
 8009214:	81000017 	ldw	r4,0(r16)
 8009218:	a039883a 	mov	fp,r20
 800921c:	9029883a 	mov	r20,r18
 8009220:	b80b883a 	mov	r5,r23
 8009224:	b00d883a 	mov	r6,r22
 8009228:	8009d1c0 	call	8009d1c <memmove>
 800922c:	80c00217 	ldw	r3,8(r16)
 8009230:	81000017 	ldw	r4,0(r16)
 8009234:	9005883a 	mov	r2,r18
 8009238:	1f39c83a 	sub	fp,r3,fp
 800923c:	258f883a 	add	r7,r4,r22
 8009240:	87000215 	stw	fp,8(r16)
 8009244:	81c00015 	stw	r7,0(r16)
 8009248:	98c00217 	ldw	r3,8(r19)
 800924c:	b8af883a 	add	r23,r23,r2
 8009250:	90a5c83a 	sub	r18,r18,r2
 8009254:	1d05c83a 	sub	r2,r3,r20
 8009258:	98800215 	stw	r2,8(r19)
 800925c:	103fc326 	beq	r2,zero,800916c <__alt_data_end+0xf800916c>
 8009260:	80c0030b 	ldhu	r3,12(r16)
 8009264:	903fe41e 	bne	r18,zero,80091f8 <__alt_data_end+0xf80091f8>
 8009268:	8dc00017 	ldw	r23,0(r17)
 800926c:	8c800117 	ldw	r18,4(r17)
 8009270:	8c400204 	addi	r17,r17,8
 8009274:	003fdf06 	br	80091f4 <__alt_data_end+0xf80091f4>
 8009278:	800b0ec0 	call	800b0ec <_realloc_r>
 800927c:	102d883a 	mov	r22,r2
 8009280:	1000a01e 	bne	r2,zero,8009504 <__sfvwrite_r+0x444>
 8009284:	81400417 	ldw	r5,16(r16)
 8009288:	a809883a 	mov	r4,r21
 800928c:	8008dd00 	call	8008dd0 <_free_r>
 8009290:	00800304 	movi	r2,12
 8009294:	a8800015 	stw	r2,0(r21)
 8009298:	80c0030b 	ldhu	r3,12(r16)
 800929c:	00bfffc4 	movi	r2,-1
 80092a0:	18c01014 	ori	r3,r3,64
 80092a4:	80c0030d 	sth	r3,12(r16)
 80092a8:	003fb106 	br	8009170 <__alt_data_end+0xf8009170>
 80092ac:	0029883a 	mov	r20,zero
 80092b0:	0011883a 	mov	r8,zero
 80092b4:	0039883a 	mov	fp,zero
 80092b8:	0025883a 	mov	r18,zero
 80092bc:	90001f26 	beq	r18,zero,800933c <__sfvwrite_r+0x27c>
 80092c0:	40006826 	beq	r8,zero,8009464 <__sfvwrite_r+0x3a4>
 80092c4:	a02f883a 	mov	r23,r20
 80092c8:	9500012e 	bgeu	r18,r20,80092d0 <__sfvwrite_r+0x210>
 80092cc:	902f883a 	mov	r23,r18
 80092d0:	81000017 	ldw	r4,0(r16)
 80092d4:	80800417 	ldw	r2,16(r16)
 80092d8:	b82d883a 	mov	r22,r23
 80092dc:	81800217 	ldw	r6,8(r16)
 80092e0:	81c00517 	ldw	r7,20(r16)
 80092e4:	1100022e 	bgeu	r2,r4,80092f0 <__sfvwrite_r+0x230>
 80092e8:	31c7883a 	add	r3,r6,r7
 80092ec:	1dc01816 	blt	r3,r23,8009350 <__sfvwrite_r+0x290>
 80092f0:	b9c03f16 	blt	r23,r7,80093f0 <__sfvwrite_r+0x330>
 80092f4:	80800917 	ldw	r2,36(r16)
 80092f8:	81400717 	ldw	r5,28(r16)
 80092fc:	a809883a 	mov	r4,r21
 8009300:	da000115 	stw	r8,4(sp)
 8009304:	e00d883a 	mov	r6,fp
 8009308:	103ee83a 	callr	r2
 800930c:	102d883a 	mov	r22,r2
 8009310:	da000117 	ldw	r8,4(sp)
 8009314:	00bfe00e 	bge	zero,r2,8009298 <__alt_data_end+0xf8009298>
 8009318:	a5a9c83a 	sub	r20,r20,r22
 800931c:	a0001f26 	beq	r20,zero,800939c <__sfvwrite_r+0x2dc>
 8009320:	98800217 	ldw	r2,8(r19)
 8009324:	e5b9883a 	add	fp,fp,r22
 8009328:	95a5c83a 	sub	r18,r18,r22
 800932c:	15adc83a 	sub	r22,r2,r22
 8009330:	9d800215 	stw	r22,8(r19)
 8009334:	b03f8d26 	beq	r22,zero,800916c <__alt_data_end+0xf800916c>
 8009338:	903fe11e 	bne	r18,zero,80092c0 <__alt_data_end+0xf80092c0>
 800933c:	8f000017 	ldw	fp,0(r17)
 8009340:	8c800117 	ldw	r18,4(r17)
 8009344:	0011883a 	mov	r8,zero
 8009348:	8c400204 	addi	r17,r17,8
 800934c:	003fdb06 	br	80092bc <__alt_data_end+0xf80092bc>
 8009350:	180d883a 	mov	r6,r3
 8009354:	e00b883a 	mov	r5,fp
 8009358:	da000115 	stw	r8,4(sp)
 800935c:	d8c00015 	stw	r3,0(sp)
 8009360:	8009d1c0 	call	8009d1c <memmove>
 8009364:	d8c00017 	ldw	r3,0(sp)
 8009368:	80800017 	ldw	r2,0(r16)
 800936c:	a809883a 	mov	r4,r21
 8009370:	800b883a 	mov	r5,r16
 8009374:	10c5883a 	add	r2,r2,r3
 8009378:	80800015 	stw	r2,0(r16)
 800937c:	d8c00015 	stw	r3,0(sp)
 8009380:	80086b40 	call	80086b4 <_fflush_r>
 8009384:	d8c00017 	ldw	r3,0(sp)
 8009388:	da000117 	ldw	r8,4(sp)
 800938c:	103fc21e 	bne	r2,zero,8009298 <__alt_data_end+0xf8009298>
 8009390:	182d883a 	mov	r22,r3
 8009394:	a5a9c83a 	sub	r20,r20,r22
 8009398:	a03fe11e 	bne	r20,zero,8009320 <__alt_data_end+0xf8009320>
 800939c:	a809883a 	mov	r4,r21
 80093a0:	800b883a 	mov	r5,r16
 80093a4:	80086b40 	call	80086b4 <_fflush_r>
 80093a8:	103fbb1e 	bne	r2,zero,8009298 <__alt_data_end+0xf8009298>
 80093ac:	0011883a 	mov	r8,zero
 80093b0:	003fdb06 	br	8009320 <__alt_data_end+0xf8009320>
 80093b4:	81000017 	ldw	r4,0(r16)
 80093b8:	80800417 	ldw	r2,16(r16)
 80093bc:	1100012e 	bgeu	r2,r4,80093c4 <__sfvwrite_r+0x304>
 80093c0:	a4805a36 	bltu	r20,r18,800952c <__sfvwrite_r+0x46c>
 80093c4:	81c00517 	ldw	r7,20(r16)
 80093c8:	91c01a36 	bltu	r18,r7,8009434 <__sfvwrite_r+0x374>
 80093cc:	80800917 	ldw	r2,36(r16)
 80093d0:	81400717 	ldw	r5,28(r16)
 80093d4:	a809883a 	mov	r4,r21
 80093d8:	b80d883a 	mov	r6,r23
 80093dc:	103ee83a 	callr	r2
 80093e0:	1029883a 	mov	r20,r2
 80093e4:	00bfac0e 	bge	zero,r2,8009298 <__alt_data_end+0xf8009298>
 80093e8:	a005883a 	mov	r2,r20
 80093ec:	003f9606 	br	8009248 <__alt_data_end+0xf8009248>
 80093f0:	b80d883a 	mov	r6,r23
 80093f4:	e00b883a 	mov	r5,fp
 80093f8:	da000115 	stw	r8,4(sp)
 80093fc:	8009d1c0 	call	8009d1c <memmove>
 8009400:	80800217 	ldw	r2,8(r16)
 8009404:	80c00017 	ldw	r3,0(r16)
 8009408:	da000117 	ldw	r8,4(sp)
 800940c:	15c5c83a 	sub	r2,r2,r23
 8009410:	1def883a 	add	r23,r3,r23
 8009414:	80800215 	stw	r2,8(r16)
 8009418:	85c00015 	stw	r23,0(r16)
 800941c:	003fbe06 	br	8009318 <__alt_data_end+0xf8009318>
 8009420:	81000017 	ldw	r4,0(r16)
 8009424:	9039883a 	mov	fp,r18
 8009428:	9029883a 	mov	r20,r18
 800942c:	902d883a 	mov	r22,r18
 8009430:	003f7b06 	br	8009220 <__alt_data_end+0xf8009220>
 8009434:	b80b883a 	mov	r5,r23
 8009438:	900d883a 	mov	r6,r18
 800943c:	8009d1c0 	call	8009d1c <memmove>
 8009440:	80c00217 	ldw	r3,8(r16)
 8009444:	80800017 	ldw	r2,0(r16)
 8009448:	9029883a 	mov	r20,r18
 800944c:	1c87c83a 	sub	r3,r3,r18
 8009450:	1485883a 	add	r2,r2,r18
 8009454:	80800015 	stw	r2,0(r16)
 8009458:	80c00215 	stw	r3,8(r16)
 800945c:	9005883a 	mov	r2,r18
 8009460:	003f7906 	br	8009248 <__alt_data_end+0xf8009248>
 8009464:	e009883a 	mov	r4,fp
 8009468:	01400284 	movi	r5,10
 800946c:	900d883a 	mov	r6,r18
 8009470:	8009c340 	call	8009c34 <memchr>
 8009474:	10003826 	beq	r2,zero,8009558 <__sfvwrite_r+0x498>
 8009478:	10800044 	addi	r2,r2,1
 800947c:	1729c83a 	sub	r20,r2,fp
 8009480:	02000044 	movi	r8,1
 8009484:	003f8f06 	br	80092c4 <__alt_data_end+0xf80092c4>
 8009488:	80800517 	ldw	r2,20(r16)
 800948c:	81400417 	ldw	r5,16(r16)
 8009490:	87000017 	ldw	fp,0(r16)
 8009494:	10a9883a 	add	r20,r2,r2
 8009498:	a085883a 	add	r2,r20,r2
 800949c:	1028d7fa 	srli	r20,r2,31
 80094a0:	e179c83a 	sub	fp,fp,r5
 80094a4:	e1000044 	addi	r4,fp,1
 80094a8:	a085883a 	add	r2,r20,r2
 80094ac:	1029d07a 	srai	r20,r2,1
 80094b0:	2485883a 	add	r2,r4,r18
 80094b4:	a00d883a 	mov	r6,r20
 80094b8:	a080022e 	bgeu	r20,r2,80094c4 <__sfvwrite_r+0x404>
 80094bc:	1029883a 	mov	r20,r2
 80094c0:	100d883a 	mov	r6,r2
 80094c4:	18c1000c 	andi	r3,r3,1024
 80094c8:	a809883a 	mov	r4,r21
 80094cc:	183f6a26 	beq	r3,zero,8009278 <__alt_data_end+0xf8009278>
 80094d0:	300b883a 	mov	r5,r6
 80094d4:	80025d00 	call	80025d0 <_malloc_r>
 80094d8:	102d883a 	mov	r22,r2
 80094dc:	103f6c26 	beq	r2,zero,8009290 <__alt_data_end+0xf8009290>
 80094e0:	81400417 	ldw	r5,16(r16)
 80094e4:	1009883a 	mov	r4,r2
 80094e8:	e00d883a 	mov	r6,fp
 80094ec:	8002df40 	call	8002df4 <memcpy>
 80094f0:	8080030b 	ldhu	r2,12(r16)
 80094f4:	00fedfc4 	movi	r3,-1153
 80094f8:	10c4703a 	and	r2,r2,r3
 80094fc:	10802014 	ori	r2,r2,128
 8009500:	8080030d 	sth	r2,12(r16)
 8009504:	b709883a 	add	r4,r22,fp
 8009508:	a707c83a 	sub	r3,r20,fp
 800950c:	85800415 	stw	r22,16(r16)
 8009510:	85000515 	stw	r20,20(r16)
 8009514:	81000015 	stw	r4,0(r16)
 8009518:	9039883a 	mov	fp,r18
 800951c:	80c00215 	stw	r3,8(r16)
 8009520:	9029883a 	mov	r20,r18
 8009524:	902d883a 	mov	r22,r18
 8009528:	003f3d06 	br	8009220 <__alt_data_end+0xf8009220>
 800952c:	b80b883a 	mov	r5,r23
 8009530:	a00d883a 	mov	r6,r20
 8009534:	8009d1c0 	call	8009d1c <memmove>
 8009538:	80800017 	ldw	r2,0(r16)
 800953c:	a809883a 	mov	r4,r21
 8009540:	800b883a 	mov	r5,r16
 8009544:	1505883a 	add	r2,r2,r20
 8009548:	80800015 	stw	r2,0(r16)
 800954c:	80086b40 	call	80086b4 <_fflush_r>
 8009550:	103fa526 	beq	r2,zero,80093e8 <__alt_data_end+0xf80093e8>
 8009554:	003f5006 	br	8009298 <__alt_data_end+0xf8009298>
 8009558:	95000044 	addi	r20,r18,1
 800955c:	02000044 	movi	r8,1
 8009560:	003f5806 	br	80092c4 <__alt_data_end+0xf80092c4>

08009564 <_fwalk>:
 8009564:	defff804 	addi	sp,sp,-32
 8009568:	dd400515 	stw	r21,20(sp)
 800956c:	2540b804 	addi	r21,r4,736
 8009570:	dd800615 	stw	r22,24(sp)
 8009574:	dd000415 	stw	r20,16(sp)
 8009578:	dfc00715 	stw	ra,28(sp)
 800957c:	dcc00315 	stw	r19,12(sp)
 8009580:	dc800215 	stw	r18,8(sp)
 8009584:	dc400115 	stw	r17,4(sp)
 8009588:	dc000015 	stw	r16,0(sp)
 800958c:	2829883a 	mov	r20,r5
 8009590:	002d883a 	mov	r22,zero
 8009594:	8008c6c0 	call	8008c6c <__sfp_lock_acquire>
 8009598:	a8001426 	beq	r21,zero,80095ec <_fwalk+0x88>
 800959c:	04ffffc4 	movi	r19,-1
 80095a0:	ac400117 	ldw	r17,4(r21)
 80095a4:	ac800217 	ldw	r18,8(r21)
 80095a8:	8c7fffc4 	addi	r17,r17,-1
 80095ac:	88000d16 	blt	r17,zero,80095e4 <_fwalk+0x80>
 80095b0:	94000304 	addi	r16,r18,12
 80095b4:	94800384 	addi	r18,r18,14
 80095b8:	80c0000f 	ldh	r3,0(r16)
 80095bc:	8c7fffc4 	addi	r17,r17,-1
 80095c0:	813ffd04 	addi	r4,r16,-12
 80095c4:	18000426 	beq	r3,zero,80095d8 <_fwalk+0x74>
 80095c8:	90c0000f 	ldh	r3,0(r18)
 80095cc:	1cc00226 	beq	r3,r19,80095d8 <_fwalk+0x74>
 80095d0:	a03ee83a 	callr	r20
 80095d4:	b0acb03a 	or	r22,r22,r2
 80095d8:	84001a04 	addi	r16,r16,104
 80095dc:	94801a04 	addi	r18,r18,104
 80095e0:	8cfff51e 	bne	r17,r19,80095b8 <__alt_data_end+0xf80095b8>
 80095e4:	ad400017 	ldw	r21,0(r21)
 80095e8:	a83fed1e 	bne	r21,zero,80095a0 <__alt_data_end+0xf80095a0>
 80095ec:	8008c700 	call	8008c70 <__sfp_lock_release>
 80095f0:	b005883a 	mov	r2,r22
 80095f4:	dfc00717 	ldw	ra,28(sp)
 80095f8:	dd800617 	ldw	r22,24(sp)
 80095fc:	dd400517 	ldw	r21,20(sp)
 8009600:	dd000417 	ldw	r20,16(sp)
 8009604:	dcc00317 	ldw	r19,12(sp)
 8009608:	dc800217 	ldw	r18,8(sp)
 800960c:	dc400117 	ldw	r17,4(sp)
 8009610:	dc000017 	ldw	r16,0(sp)
 8009614:	dec00804 	addi	sp,sp,32
 8009618:	f800283a 	ret

0800961c <_fwalk_reent>:
 800961c:	defff804 	addi	sp,sp,-32
 8009620:	dd400515 	stw	r21,20(sp)
 8009624:	2540b804 	addi	r21,r4,736
 8009628:	dd800615 	stw	r22,24(sp)
 800962c:	dd000415 	stw	r20,16(sp)
 8009630:	dcc00315 	stw	r19,12(sp)
 8009634:	dfc00715 	stw	ra,28(sp)
 8009638:	dc800215 	stw	r18,8(sp)
 800963c:	dc400115 	stw	r17,4(sp)
 8009640:	dc000015 	stw	r16,0(sp)
 8009644:	2027883a 	mov	r19,r4
 8009648:	2829883a 	mov	r20,r5
 800964c:	002d883a 	mov	r22,zero
 8009650:	8008c6c0 	call	8008c6c <__sfp_lock_acquire>
 8009654:	a8001326 	beq	r21,zero,80096a4 <_fwalk_reent+0x88>
 8009658:	04bfffc4 	movi	r18,-1
 800965c:	ac400117 	ldw	r17,4(r21)
 8009660:	ac000217 	ldw	r16,8(r21)
 8009664:	8c7fffc4 	addi	r17,r17,-1
 8009668:	88000c16 	blt	r17,zero,800969c <_fwalk_reent+0x80>
 800966c:	84000304 	addi	r16,r16,12
 8009670:	80c0000f 	ldh	r3,0(r16)
 8009674:	8c7fffc4 	addi	r17,r17,-1
 8009678:	817ffd04 	addi	r5,r16,-12
 800967c:	18000526 	beq	r3,zero,8009694 <_fwalk_reent+0x78>
 8009680:	80c0008f 	ldh	r3,2(r16)
 8009684:	9809883a 	mov	r4,r19
 8009688:	1c800226 	beq	r3,r18,8009694 <_fwalk_reent+0x78>
 800968c:	a03ee83a 	callr	r20
 8009690:	b0acb03a 	or	r22,r22,r2
 8009694:	84001a04 	addi	r16,r16,104
 8009698:	8cbff51e 	bne	r17,r18,8009670 <__alt_data_end+0xf8009670>
 800969c:	ad400017 	ldw	r21,0(r21)
 80096a0:	a83fee1e 	bne	r21,zero,800965c <__alt_data_end+0xf800965c>
 80096a4:	8008c700 	call	8008c70 <__sfp_lock_release>
 80096a8:	b005883a 	mov	r2,r22
 80096ac:	dfc00717 	ldw	ra,28(sp)
 80096b0:	dd800617 	ldw	r22,24(sp)
 80096b4:	dd400517 	ldw	r21,20(sp)
 80096b8:	dd000417 	ldw	r20,16(sp)
 80096bc:	dcc00317 	ldw	r19,12(sp)
 80096c0:	dc800217 	ldw	r18,8(sp)
 80096c4:	dc400117 	ldw	r17,4(sp)
 80096c8:	dc000017 	ldw	r16,0(sp)
 80096cc:	dec00804 	addi	sp,sp,32
 80096d0:	f800283a 	ret

080096d4 <iswspace>:
 80096d4:	00803fc4 	movi	r2,255
 80096d8:	11000836 	bltu	r2,r4,80096fc <iswspace+0x28>
 80096dc:	008200b4 	movhi	r2,2050
 80096e0:	10bab904 	addi	r2,r2,-5404
 80096e4:	10800017 	ldw	r2,0(r2)
 80096e8:	1109883a 	add	r4,r2,r4
 80096ec:	20800043 	ldbu	r2,1(r4)
 80096f0:	1080020c 	andi	r2,r2,8
 80096f4:	10803fcc 	andi	r2,r2,255
 80096f8:	f800283a 	ret
 80096fc:	0005883a 	mov	r2,zero
 8009700:	f800283a 	ret

08009704 <_setlocale_r>:
 8009704:	30001b26 	beq	r6,zero,8009774 <_setlocale_r+0x70>
 8009708:	014200b4 	movhi	r5,2050
 800970c:	defffe04 	addi	sp,sp,-8
 8009710:	2972e704 	addi	r5,r5,-13412
 8009714:	3009883a 	mov	r4,r6
 8009718:	dc000015 	stw	r16,0(sp)
 800971c:	dfc00115 	stw	ra,4(sp)
 8009720:	3021883a 	mov	r16,r6
 8009724:	800ba500 	call	800ba50 <strcmp>
 8009728:	1000061e 	bne	r2,zero,8009744 <_setlocale_r+0x40>
 800972c:	008200b4 	movhi	r2,2050
 8009730:	10b21e04 	addi	r2,r2,-14216
 8009734:	dfc00117 	ldw	ra,4(sp)
 8009738:	dc000017 	ldw	r16,0(sp)
 800973c:	dec00204 	addi	sp,sp,8
 8009740:	f800283a 	ret
 8009744:	014200b4 	movhi	r5,2050
 8009748:	29721e04 	addi	r5,r5,-14216
 800974c:	8009883a 	mov	r4,r16
 8009750:	800ba500 	call	800ba50 <strcmp>
 8009754:	103ff526 	beq	r2,zero,800972c <__alt_data_end+0xf800972c>
 8009758:	014200b4 	movhi	r5,2050
 800975c:	29723204 	addi	r5,r5,-14136
 8009760:	8009883a 	mov	r4,r16
 8009764:	800ba500 	call	800ba50 <strcmp>
 8009768:	103ff026 	beq	r2,zero,800972c <__alt_data_end+0xf800972c>
 800976c:	0005883a 	mov	r2,zero
 8009770:	003ff006 	br	8009734 <__alt_data_end+0xf8009734>
 8009774:	008200b4 	movhi	r2,2050
 8009778:	10b21e04 	addi	r2,r2,-14216
 800977c:	f800283a 	ret

08009780 <__locale_charset>:
 8009780:	008200b4 	movhi	r2,2050
 8009784:	10b5d504 	addi	r2,r2,-10412
 8009788:	f800283a 	ret

0800978c <__locale_mb_cur_max>:
 800978c:	008200b4 	movhi	r2,2050
 8009790:	10baba04 	addi	r2,r2,-5400
 8009794:	10800017 	ldw	r2,0(r2)
 8009798:	f800283a 	ret

0800979c <__locale_msgcharset>:
 800979c:	008200b4 	movhi	r2,2050
 80097a0:	10b5cd04 	addi	r2,r2,-10444
 80097a4:	f800283a 	ret

080097a8 <__locale_cjk_lang>:
 80097a8:	0005883a 	mov	r2,zero
 80097ac:	f800283a 	ret

080097b0 <_localeconv_r>:
 80097b0:	008200b4 	movhi	r2,2050
 80097b4:	10b5dd04 	addi	r2,r2,-10380
 80097b8:	f800283a 	ret

080097bc <setlocale>:
 80097bc:	00c200b4 	movhi	r3,2050
 80097c0:	18fab604 	addi	r3,r3,-5416
 80097c4:	2005883a 	mov	r2,r4
 80097c8:	19000017 	ldw	r4,0(r3)
 80097cc:	280d883a 	mov	r6,r5
 80097d0:	100b883a 	mov	r5,r2
 80097d4:	80097041 	jmpi	8009704 <_setlocale_r>

080097d8 <localeconv>:
 80097d8:	008200b4 	movhi	r2,2050
 80097dc:	10b5dd04 	addi	r2,r2,-10380
 80097e0:	f800283a 	ret

080097e4 <_lseek_r>:
 80097e4:	defffd04 	addi	sp,sp,-12
 80097e8:	dc000015 	stw	r16,0(sp)
 80097ec:	040200b4 	movhi	r16,2050
 80097f0:	dc400115 	stw	r17,4(sp)
 80097f4:	843ace04 	addi	r16,r16,-5320
 80097f8:	2023883a 	mov	r17,r4
 80097fc:	2809883a 	mov	r4,r5
 8009800:	300b883a 	mov	r5,r6
 8009804:	380d883a 	mov	r6,r7
 8009808:	dfc00215 	stw	ra,8(sp)
 800980c:	80000015 	stw	zero,0(r16)
 8009810:	80187d80 	call	80187d8 <lseek>
 8009814:	00ffffc4 	movi	r3,-1
 8009818:	10c00526 	beq	r2,r3,8009830 <_lseek_r+0x4c>
 800981c:	dfc00217 	ldw	ra,8(sp)
 8009820:	dc400117 	ldw	r17,4(sp)
 8009824:	dc000017 	ldw	r16,0(sp)
 8009828:	dec00304 	addi	sp,sp,12
 800982c:	f800283a 	ret
 8009830:	80c00017 	ldw	r3,0(r16)
 8009834:	183ff926 	beq	r3,zero,800981c <__alt_data_end+0xf800981c>
 8009838:	88c00015 	stw	r3,0(r17)
 800983c:	003ff706 	br	800981c <__alt_data_end+0xf800981c>

08009840 <__smakebuf_r>:
 8009840:	2880030b 	ldhu	r2,12(r5)
 8009844:	10c0008c 	andi	r3,r2,2
 8009848:	1800401e 	bne	r3,zero,800994c <__smakebuf_r+0x10c>
 800984c:	deffec04 	addi	sp,sp,-80
 8009850:	dc000f15 	stw	r16,60(sp)
 8009854:	2821883a 	mov	r16,r5
 8009858:	2940038f 	ldh	r5,14(r5)
 800985c:	dc401015 	stw	r17,64(sp)
 8009860:	dfc01315 	stw	ra,76(sp)
 8009864:	dcc01215 	stw	r19,72(sp)
 8009868:	dc801115 	stw	r18,68(sp)
 800986c:	2023883a 	mov	r17,r4
 8009870:	28001b16 	blt	r5,zero,80098e0 <__smakebuf_r+0xa0>
 8009874:	d80d883a 	mov	r6,sp
 8009878:	8012bac0 	call	8012bac <_fstat_r>
 800987c:	10001716 	blt	r2,zero,80098dc <__smakebuf_r+0x9c>
 8009880:	d8800117 	ldw	r2,4(sp)
 8009884:	00e00014 	movui	r3,32768
 8009888:	10bc000c 	andi	r2,r2,61440
 800988c:	10c03726 	beq	r2,r3,800996c <__smakebuf_r+0x12c>
 8009890:	80c0030b 	ldhu	r3,12(r16)
 8009894:	18c20014 	ori	r3,r3,2048
 8009898:	80c0030d 	sth	r3,12(r16)
 800989c:	00c80004 	movi	r3,8192
 80098a0:	10c03c1e 	bne	r2,r3,8009994 <__smakebuf_r+0x154>
 80098a4:	8140038f 	ldh	r5,14(r16)
 80098a8:	8809883a 	mov	r4,r17
 80098ac:	80138380 	call	8013838 <_isatty_r>
 80098b0:	10004e26 	beq	r2,zero,80099ec <__smakebuf_r+0x1ac>
 80098b4:	8080030b 	ldhu	r2,12(r16)
 80098b8:	04c00044 	movi	r19,1
 80098bc:	80c010c4 	addi	r3,r16,67
 80098c0:	14c4b03a 	or	r2,r2,r19
 80098c4:	8080030d 	sth	r2,12(r16)
 80098c8:	80c00015 	stw	r3,0(r16)
 80098cc:	80c00415 	stw	r3,16(r16)
 80098d0:	84c00515 	stw	r19,20(r16)
 80098d4:	04810004 	movi	r18,1024
 80098d8:	00000706 	br	80098f8 <__smakebuf_r+0xb8>
 80098dc:	8080030b 	ldhu	r2,12(r16)
 80098e0:	10c0200c 	andi	r3,r2,128
 80098e4:	18001f1e 	bne	r3,zero,8009964 <__smakebuf_r+0x124>
 80098e8:	04810004 	movi	r18,1024
 80098ec:	10820014 	ori	r2,r2,2048
 80098f0:	8080030d 	sth	r2,12(r16)
 80098f4:	0027883a 	mov	r19,zero
 80098f8:	8809883a 	mov	r4,r17
 80098fc:	900b883a 	mov	r5,r18
 8009900:	80025d00 	call	80025d0 <_malloc_r>
 8009904:	10002e26 	beq	r2,zero,80099c0 <__smakebuf_r+0x180>
 8009908:	80c0030b 	ldhu	r3,12(r16)
 800990c:	01020074 	movhi	r4,2049
 8009910:	21224704 	addi	r4,r4,-30436
 8009914:	89000f15 	stw	r4,60(r17)
 8009918:	18c02014 	ori	r3,r3,128
 800991c:	80c0030d 	sth	r3,12(r16)
 8009920:	80800015 	stw	r2,0(r16)
 8009924:	80800415 	stw	r2,16(r16)
 8009928:	84800515 	stw	r18,20(r16)
 800992c:	98001c1e 	bne	r19,zero,80099a0 <__smakebuf_r+0x160>
 8009930:	dfc01317 	ldw	ra,76(sp)
 8009934:	dcc01217 	ldw	r19,72(sp)
 8009938:	dc801117 	ldw	r18,68(sp)
 800993c:	dc401017 	ldw	r17,64(sp)
 8009940:	dc000f17 	ldw	r16,60(sp)
 8009944:	dec01404 	addi	sp,sp,80
 8009948:	f800283a 	ret
 800994c:	288010c4 	addi	r2,r5,67
 8009950:	28800015 	stw	r2,0(r5)
 8009954:	28800415 	stw	r2,16(r5)
 8009958:	00800044 	movi	r2,1
 800995c:	28800515 	stw	r2,20(r5)
 8009960:	f800283a 	ret
 8009964:	04801004 	movi	r18,64
 8009968:	003fe006 	br	80098ec <__alt_data_end+0xf80098ec>
 800996c:	81000a17 	ldw	r4,40(r16)
 8009970:	00c20034 	movhi	r3,2048
 8009974:	18ccca04 	addi	r3,r3,13096
 8009978:	20ffc51e 	bne	r4,r3,8009890 <__alt_data_end+0xf8009890>
 800997c:	80c0030b 	ldhu	r3,12(r16)
 8009980:	01010004 	movi	r4,1024
 8009984:	81001315 	stw	r4,76(r16)
 8009988:	1906b03a 	or	r3,r3,r4
 800998c:	80c0030d 	sth	r3,12(r16)
 8009990:	003fc206 	br	800989c <__alt_data_end+0xf800989c>
 8009994:	0027883a 	mov	r19,zero
 8009998:	04810004 	movi	r18,1024
 800999c:	003fd606 	br	80098f8 <__alt_data_end+0xf80098f8>
 80099a0:	8140038f 	ldh	r5,14(r16)
 80099a4:	8809883a 	mov	r4,r17
 80099a8:	80138380 	call	8013838 <_isatty_r>
 80099ac:	103fe026 	beq	r2,zero,8009930 <__alt_data_end+0xf8009930>
 80099b0:	8080030b 	ldhu	r2,12(r16)
 80099b4:	10800054 	ori	r2,r2,1
 80099b8:	8080030d 	sth	r2,12(r16)
 80099bc:	003fdc06 	br	8009930 <__alt_data_end+0xf8009930>
 80099c0:	8080030b 	ldhu	r2,12(r16)
 80099c4:	10c0800c 	andi	r3,r2,512
 80099c8:	183fd91e 	bne	r3,zero,8009930 <__alt_data_end+0xf8009930>
 80099cc:	10800094 	ori	r2,r2,2
 80099d0:	80c010c4 	addi	r3,r16,67
 80099d4:	8080030d 	sth	r2,12(r16)
 80099d8:	00800044 	movi	r2,1
 80099dc:	80c00015 	stw	r3,0(r16)
 80099e0:	80c00415 	stw	r3,16(r16)
 80099e4:	80800515 	stw	r2,20(r16)
 80099e8:	003fd106 	br	8009930 <__alt_data_end+0xf8009930>
 80099ec:	04c00044 	movi	r19,1
 80099f0:	04810004 	movi	r18,1024
 80099f4:	003fc006 	br	80098f8 <__alt_data_end+0xf80098f8>

080099f8 <_mbrtowc_r>:
 80099f8:	defff704 	addi	sp,sp,-36
 80099fc:	008200b4 	movhi	r2,2050
 8009a00:	dc800715 	stw	r18,28(sp)
 8009a04:	dc400615 	stw	r17,24(sp)
 8009a08:	dc000515 	stw	r16,20(sp)
 8009a0c:	10babb04 	addi	r2,r2,-5396
 8009a10:	dfc00815 	stw	ra,32(sp)
 8009a14:	2021883a 	mov	r16,r4
 8009a18:	dc400917 	ldw	r17,36(sp)
 8009a1c:	14800017 	ldw	r18,0(r2)
 8009a20:	30001626 	beq	r6,zero,8009a7c <_mbrtowc_r+0x84>
 8009a24:	d9400215 	stw	r5,8(sp)
 8009a28:	d9800315 	stw	r6,12(sp)
 8009a2c:	d9c00415 	stw	r7,16(sp)
 8009a30:	80097800 	call	8009780 <__locale_charset>
 8009a34:	d9400217 	ldw	r5,8(sp)
 8009a38:	d9800317 	ldw	r6,12(sp)
 8009a3c:	d9c00417 	ldw	r7,16(sp)
 8009a40:	d8800015 	stw	r2,0(sp)
 8009a44:	dc400115 	stw	r17,4(sp)
 8009a48:	8009883a 	mov	r4,r16
 8009a4c:	903ee83a 	callr	r18
 8009a50:	00ffffc4 	movi	r3,-1
 8009a54:	10c0031e 	bne	r2,r3,8009a64 <_mbrtowc_r+0x6c>
 8009a58:	88000015 	stw	zero,0(r17)
 8009a5c:	00c02284 	movi	r3,138
 8009a60:	80c00015 	stw	r3,0(r16)
 8009a64:	dfc00817 	ldw	ra,32(sp)
 8009a68:	dc800717 	ldw	r18,28(sp)
 8009a6c:	dc400617 	ldw	r17,24(sp)
 8009a70:	dc000517 	ldw	r16,20(sp)
 8009a74:	dec00904 	addi	sp,sp,36
 8009a78:	f800283a 	ret
 8009a7c:	80097800 	call	8009780 <__locale_charset>
 8009a80:	018200b4 	movhi	r6,2050
 8009a84:	31b23204 	addi	r6,r6,-14136
 8009a88:	d8800015 	stw	r2,0(sp)
 8009a8c:	dc400115 	stw	r17,4(sp)
 8009a90:	8009883a 	mov	r4,r16
 8009a94:	000b883a 	mov	r5,zero
 8009a98:	01c00044 	movi	r7,1
 8009a9c:	903ee83a 	callr	r18
 8009aa0:	003feb06 	br	8009a50 <__alt_data_end+0xf8009a50>

08009aa4 <mbrtowc>:
 8009aa4:	defff604 	addi	sp,sp,-40
 8009aa8:	dc400315 	stw	r17,12(sp)
 8009aac:	dc000215 	stw	r16,8(sp)
 8009ab0:	dfc00915 	stw	ra,36(sp)
 8009ab4:	dd800815 	stw	r22,32(sp)
 8009ab8:	dd400715 	stw	r21,28(sp)
 8009abc:	dd000615 	stw	r20,24(sp)
 8009ac0:	dcc00515 	stw	r19,20(sp)
 8009ac4:	dc800415 	stw	r18,16(sp)
 8009ac8:	2821883a 	mov	r16,r5
 8009acc:	3823883a 	mov	r17,r7
 8009ad0:	28002026 	beq	r5,zero,8009b54 <mbrtowc+0xb0>
 8009ad4:	048200b4 	movhi	r18,2050
 8009ad8:	94bab604 	addi	r18,r18,-5416
 8009adc:	008200b4 	movhi	r2,2050
 8009ae0:	95800017 	ldw	r22,0(r18)
 8009ae4:	10babb04 	addi	r2,r2,-5396
 8009ae8:	15400017 	ldw	r21,0(r2)
 8009aec:	2029883a 	mov	r20,r4
 8009af0:	3027883a 	mov	r19,r6
 8009af4:	80097800 	call	8009780 <__locale_charset>
 8009af8:	d8800015 	stw	r2,0(sp)
 8009afc:	dc400115 	stw	r17,4(sp)
 8009b00:	b009883a 	mov	r4,r22
 8009b04:	a00b883a 	mov	r5,r20
 8009b08:	800d883a 	mov	r6,r16
 8009b0c:	980f883a 	mov	r7,r19
 8009b10:	a83ee83a 	callr	r21
 8009b14:	00ffffc4 	movi	r3,-1
 8009b18:	10c0041e 	bne	r2,r3,8009b2c <mbrtowc+0x88>
 8009b1c:	90c00017 	ldw	r3,0(r18)
 8009b20:	01002284 	movi	r4,138
 8009b24:	88000015 	stw	zero,0(r17)
 8009b28:	19000015 	stw	r4,0(r3)
 8009b2c:	dfc00917 	ldw	ra,36(sp)
 8009b30:	dd800817 	ldw	r22,32(sp)
 8009b34:	dd400717 	ldw	r21,28(sp)
 8009b38:	dd000617 	ldw	r20,24(sp)
 8009b3c:	dcc00517 	ldw	r19,20(sp)
 8009b40:	dc800417 	ldw	r18,16(sp)
 8009b44:	dc400317 	ldw	r17,12(sp)
 8009b48:	dc000217 	ldw	r16,8(sp)
 8009b4c:	dec00a04 	addi	sp,sp,40
 8009b50:	f800283a 	ret
 8009b54:	048200b4 	movhi	r18,2050
 8009b58:	94bab604 	addi	r18,r18,-5416
 8009b5c:	008200b4 	movhi	r2,2050
 8009b60:	94c00017 	ldw	r19,0(r18)
 8009b64:	10babb04 	addi	r2,r2,-5396
 8009b68:	14000017 	ldw	r16,0(r2)
 8009b6c:	80097800 	call	8009780 <__locale_charset>
 8009b70:	018200b4 	movhi	r6,2050
 8009b74:	31b23204 	addi	r6,r6,-14136
 8009b78:	d8800015 	stw	r2,0(sp)
 8009b7c:	dc400115 	stw	r17,4(sp)
 8009b80:	9809883a 	mov	r4,r19
 8009b84:	000b883a 	mov	r5,zero
 8009b88:	01c00044 	movi	r7,1
 8009b8c:	803ee83a 	callr	r16
 8009b90:	003fe006 	br	8009b14 <__alt_data_end+0xf8009b14>

08009b94 <__ascii_mbtowc>:
 8009b94:	deffff04 	addi	sp,sp,-4
 8009b98:	28000826 	beq	r5,zero,8009bbc <__ascii_mbtowc+0x28>
 8009b9c:	30000926 	beq	r6,zero,8009bc4 <__ascii_mbtowc+0x30>
 8009ba0:	38000b26 	beq	r7,zero,8009bd0 <__ascii_mbtowc+0x3c>
 8009ba4:	30800003 	ldbu	r2,0(r6)
 8009ba8:	28800015 	stw	r2,0(r5)
 8009bac:	30800003 	ldbu	r2,0(r6)
 8009bb0:	1004c03a 	cmpne	r2,r2,zero
 8009bb4:	dec00104 	addi	sp,sp,4
 8009bb8:	f800283a 	ret
 8009bbc:	d80b883a 	mov	r5,sp
 8009bc0:	303ff71e 	bne	r6,zero,8009ba0 <__alt_data_end+0xf8009ba0>
 8009bc4:	0005883a 	mov	r2,zero
 8009bc8:	dec00104 	addi	sp,sp,4
 8009bcc:	f800283a 	ret
 8009bd0:	00bfff84 	movi	r2,-2
 8009bd4:	003ff706 	br	8009bb4 <__alt_data_end+0xf8009bb4>

08009bd8 <_mbtowc_r>:
 8009bd8:	008200b4 	movhi	r2,2050
 8009bdc:	defff804 	addi	sp,sp,-32
 8009be0:	10babb04 	addi	r2,r2,-5396
 8009be4:	dfc00715 	stw	ra,28(sp)
 8009be8:	dc000615 	stw	r16,24(sp)
 8009bec:	14000017 	ldw	r16,0(r2)
 8009bf0:	d9000215 	stw	r4,8(sp)
 8009bf4:	d9400315 	stw	r5,12(sp)
 8009bf8:	d9800415 	stw	r6,16(sp)
 8009bfc:	d9c00515 	stw	r7,20(sp)
 8009c00:	80097800 	call	8009780 <__locale_charset>
 8009c04:	d8800015 	stw	r2,0(sp)
 8009c08:	d8800817 	ldw	r2,32(sp)
 8009c0c:	d9000217 	ldw	r4,8(sp)
 8009c10:	d9400317 	ldw	r5,12(sp)
 8009c14:	d9800417 	ldw	r6,16(sp)
 8009c18:	d9c00517 	ldw	r7,20(sp)
 8009c1c:	d8800115 	stw	r2,4(sp)
 8009c20:	803ee83a 	callr	r16
 8009c24:	dfc00717 	ldw	ra,28(sp)
 8009c28:	dc000617 	ldw	r16,24(sp)
 8009c2c:	dec00804 	addi	sp,sp,32
 8009c30:	f800283a 	ret

08009c34 <memchr>:
 8009c34:	208000cc 	andi	r2,r4,3
 8009c38:	280f883a 	mov	r7,r5
 8009c3c:	10003526 	beq	r2,zero,8009d14 <memchr+0xe0>
 8009c40:	30bfffc4 	addi	r2,r6,-1
 8009c44:	30001b26 	beq	r6,zero,8009cb4 <memchr+0x80>
 8009c48:	21800003 	ldbu	r6,0(r4)
 8009c4c:	28c03fcc 	andi	r3,r5,255
 8009c50:	30c01a26 	beq	r6,r3,8009cbc <memchr+0x88>
 8009c54:	180d883a 	mov	r6,r3
 8009c58:	00000406 	br	8009c6c <memchr+0x38>
 8009c5c:	10001526 	beq	r2,zero,8009cb4 <memchr+0x80>
 8009c60:	20c00003 	ldbu	r3,0(r4)
 8009c64:	10bfffc4 	addi	r2,r2,-1
 8009c68:	19801426 	beq	r3,r6,8009cbc <memchr+0x88>
 8009c6c:	21000044 	addi	r4,r4,1
 8009c70:	20c000cc 	andi	r3,r4,3
 8009c74:	183ff91e 	bne	r3,zero,8009c5c <__alt_data_end+0xf8009c5c>
 8009c78:	024000c4 	movi	r9,3
 8009c7c:	48801136 	bltu	r9,r2,8009cc4 <memchr+0x90>
 8009c80:	10000c26 	beq	r2,zero,8009cb4 <memchr+0x80>
 8009c84:	20c00003 	ldbu	r3,0(r4)
 8009c88:	29403fcc 	andi	r5,r5,255
 8009c8c:	19400b26 	beq	r3,r5,8009cbc <memchr+0x88>
 8009c90:	20c00044 	addi	r3,r4,1
 8009c94:	2085883a 	add	r2,r4,r2
 8009c98:	39803fcc 	andi	r6,r7,255
 8009c9c:	00000306 	br	8009cac <memchr+0x78>
 8009ca0:	18c00044 	addi	r3,r3,1
 8009ca4:	197fffc3 	ldbu	r5,-1(r3)
 8009ca8:	29800426 	beq	r5,r6,8009cbc <memchr+0x88>
 8009cac:	1809883a 	mov	r4,r3
 8009cb0:	18bffb1e 	bne	r3,r2,8009ca0 <__alt_data_end+0xf8009ca0>
 8009cb4:	0005883a 	mov	r2,zero
 8009cb8:	f800283a 	ret
 8009cbc:	2005883a 	mov	r2,r4
 8009cc0:	f800283a 	ret
 8009cc4:	28c03fcc 	andi	r3,r5,255
 8009cc8:	1810923a 	slli	r8,r3,8
 8009ccc:	02ffbff4 	movhi	r11,65279
 8009cd0:	02a02074 	movhi	r10,32897
 8009cd4:	40c6b03a 	or	r3,r8,r3
 8009cd8:	1810943a 	slli	r8,r3,16
 8009cdc:	5affbfc4 	addi	r11,r11,-257
 8009ce0:	52a02004 	addi	r10,r10,-32640
 8009ce4:	40d0b03a 	or	r8,r8,r3
 8009ce8:	20c00017 	ldw	r3,0(r4)
 8009cec:	40c6f03a 	xor	r3,r8,r3
 8009cf0:	1acd883a 	add	r6,r3,r11
 8009cf4:	00c6303a 	nor	r3,zero,r3
 8009cf8:	30c6703a 	and	r3,r6,r3
 8009cfc:	1a86703a 	and	r3,r3,r10
 8009d00:	183fdf1e 	bne	r3,zero,8009c80 <__alt_data_end+0xf8009c80>
 8009d04:	10bfff04 	addi	r2,r2,-4
 8009d08:	21000104 	addi	r4,r4,4
 8009d0c:	48bff636 	bltu	r9,r2,8009ce8 <__alt_data_end+0xf8009ce8>
 8009d10:	003fdb06 	br	8009c80 <__alt_data_end+0xf8009c80>
 8009d14:	3005883a 	mov	r2,r6
 8009d18:	003fd706 	br	8009c78 <__alt_data_end+0xf8009c78>

08009d1c <memmove>:
 8009d1c:	2005883a 	mov	r2,r4
 8009d20:	29000b2e 	bgeu	r5,r4,8009d50 <memmove+0x34>
 8009d24:	298f883a 	add	r7,r5,r6
 8009d28:	21c0092e 	bgeu	r4,r7,8009d50 <memmove+0x34>
 8009d2c:	2187883a 	add	r3,r4,r6
 8009d30:	198bc83a 	sub	r5,r3,r6
 8009d34:	30004b26 	beq	r6,zero,8009e64 <memmove+0x148>
 8009d38:	39ffffc4 	addi	r7,r7,-1
 8009d3c:	39000003 	ldbu	r4,0(r7)
 8009d40:	18ffffc4 	addi	r3,r3,-1
 8009d44:	19000005 	stb	r4,0(r3)
 8009d48:	197ffb1e 	bne	r3,r5,8009d38 <__alt_data_end+0xf8009d38>
 8009d4c:	f800283a 	ret
 8009d50:	00c003c4 	movi	r3,15
 8009d54:	1980412e 	bgeu	r3,r6,8009e5c <memmove+0x140>
 8009d58:	1146b03a 	or	r3,r2,r5
 8009d5c:	18c000cc 	andi	r3,r3,3
 8009d60:	1800411e 	bne	r3,zero,8009e68 <memmove+0x14c>
 8009d64:	33fffc04 	addi	r15,r6,-16
 8009d68:	781ed13a 	srli	r15,r15,4
 8009d6c:	28c00104 	addi	r3,r5,4
 8009d70:	13400104 	addi	r13,r2,4
 8009d74:	781c913a 	slli	r14,r15,4
 8009d78:	2b000204 	addi	r12,r5,8
 8009d7c:	12c00204 	addi	r11,r2,8
 8009d80:	73800504 	addi	r14,r14,20
 8009d84:	2a800304 	addi	r10,r5,12
 8009d88:	12400304 	addi	r9,r2,12
 8009d8c:	2b9d883a 	add	r14,r5,r14
 8009d90:	2811883a 	mov	r8,r5
 8009d94:	100f883a 	mov	r7,r2
 8009d98:	41000017 	ldw	r4,0(r8)
 8009d9c:	39c00404 	addi	r7,r7,16
 8009da0:	18c00404 	addi	r3,r3,16
 8009da4:	393ffc15 	stw	r4,-16(r7)
 8009da8:	193ffc17 	ldw	r4,-16(r3)
 8009dac:	6b400404 	addi	r13,r13,16
 8009db0:	5ac00404 	addi	r11,r11,16
 8009db4:	693ffc15 	stw	r4,-16(r13)
 8009db8:	61000017 	ldw	r4,0(r12)
 8009dbc:	4a400404 	addi	r9,r9,16
 8009dc0:	42000404 	addi	r8,r8,16
 8009dc4:	593ffc15 	stw	r4,-16(r11)
 8009dc8:	51000017 	ldw	r4,0(r10)
 8009dcc:	63000404 	addi	r12,r12,16
 8009dd0:	52800404 	addi	r10,r10,16
 8009dd4:	493ffc15 	stw	r4,-16(r9)
 8009dd8:	1bbfef1e 	bne	r3,r14,8009d98 <__alt_data_end+0xf8009d98>
 8009ddc:	79000044 	addi	r4,r15,1
 8009de0:	2008913a 	slli	r4,r4,4
 8009de4:	328003cc 	andi	r10,r6,15
 8009de8:	02c000c4 	movi	r11,3
 8009dec:	1107883a 	add	r3,r2,r4
 8009df0:	290b883a 	add	r5,r5,r4
 8009df4:	5a801e2e 	bgeu	r11,r10,8009e70 <memmove+0x154>
 8009df8:	1813883a 	mov	r9,r3
 8009dfc:	2811883a 	mov	r8,r5
 8009e00:	500f883a 	mov	r7,r10
 8009e04:	41000017 	ldw	r4,0(r8)
 8009e08:	4a400104 	addi	r9,r9,4
 8009e0c:	39ffff04 	addi	r7,r7,-4
 8009e10:	493fff15 	stw	r4,-4(r9)
 8009e14:	42000104 	addi	r8,r8,4
 8009e18:	59fffa36 	bltu	r11,r7,8009e04 <__alt_data_end+0xf8009e04>
 8009e1c:	513fff04 	addi	r4,r10,-4
 8009e20:	2008d0ba 	srli	r4,r4,2
 8009e24:	318000cc 	andi	r6,r6,3
 8009e28:	21000044 	addi	r4,r4,1
 8009e2c:	2109883a 	add	r4,r4,r4
 8009e30:	2109883a 	add	r4,r4,r4
 8009e34:	1907883a 	add	r3,r3,r4
 8009e38:	290b883a 	add	r5,r5,r4
 8009e3c:	30000926 	beq	r6,zero,8009e64 <memmove+0x148>
 8009e40:	198d883a 	add	r6,r3,r6
 8009e44:	29c00003 	ldbu	r7,0(r5)
 8009e48:	18c00044 	addi	r3,r3,1
 8009e4c:	29400044 	addi	r5,r5,1
 8009e50:	19ffffc5 	stb	r7,-1(r3)
 8009e54:	19bffb1e 	bne	r3,r6,8009e44 <__alt_data_end+0xf8009e44>
 8009e58:	f800283a 	ret
 8009e5c:	1007883a 	mov	r3,r2
 8009e60:	003ff606 	br	8009e3c <__alt_data_end+0xf8009e3c>
 8009e64:	f800283a 	ret
 8009e68:	1007883a 	mov	r3,r2
 8009e6c:	003ff406 	br	8009e40 <__alt_data_end+0xf8009e40>
 8009e70:	500d883a 	mov	r6,r10
 8009e74:	003ff106 	br	8009e3c <__alt_data_end+0xf8009e3c>

08009e78 <memset>:
 8009e78:	20c000cc 	andi	r3,r4,3
 8009e7c:	2005883a 	mov	r2,r4
 8009e80:	18004326 	beq	r3,zero,8009f90 <memset+0x118>
 8009e84:	31ffffc4 	addi	r7,r6,-1
 8009e88:	30004026 	beq	r6,zero,8009f8c <memset+0x114>
 8009e8c:	2813883a 	mov	r9,r5
 8009e90:	200d883a 	mov	r6,r4
 8009e94:	2007883a 	mov	r3,r4
 8009e98:	00000406 	br	8009eac <memset+0x34>
 8009e9c:	3a3fffc4 	addi	r8,r7,-1
 8009ea0:	31800044 	addi	r6,r6,1
 8009ea4:	38003926 	beq	r7,zero,8009f8c <memset+0x114>
 8009ea8:	400f883a 	mov	r7,r8
 8009eac:	18c00044 	addi	r3,r3,1
 8009eb0:	32400005 	stb	r9,0(r6)
 8009eb4:	1a0000cc 	andi	r8,r3,3
 8009eb8:	403ff81e 	bne	r8,zero,8009e9c <__alt_data_end+0xf8009e9c>
 8009ebc:	010000c4 	movi	r4,3
 8009ec0:	21c02d2e 	bgeu	r4,r7,8009f78 <memset+0x100>
 8009ec4:	29803fcc 	andi	r6,r5,255
 8009ec8:	3008923a 	slli	r4,r6,8
 8009ecc:	218cb03a 	or	r6,r4,r6
 8009ed0:	3008943a 	slli	r4,r6,16
 8009ed4:	218cb03a 	or	r6,r4,r6
 8009ed8:	010003c4 	movi	r4,15
 8009edc:	21c0182e 	bgeu	r4,r7,8009f40 <memset+0xc8>
 8009ee0:	3b3ffc04 	addi	r12,r7,-16
 8009ee4:	6018d13a 	srli	r12,r12,4
 8009ee8:	1a000104 	addi	r8,r3,4
 8009eec:	1ac00204 	addi	r11,r3,8
 8009ef0:	6008913a 	slli	r4,r12,4
 8009ef4:	1a800304 	addi	r10,r3,12
 8009ef8:	1813883a 	mov	r9,r3
 8009efc:	21000504 	addi	r4,r4,20
 8009f00:	1909883a 	add	r4,r3,r4
 8009f04:	49800015 	stw	r6,0(r9)
 8009f08:	41800015 	stw	r6,0(r8)
 8009f0c:	59800015 	stw	r6,0(r11)
 8009f10:	51800015 	stw	r6,0(r10)
 8009f14:	42000404 	addi	r8,r8,16
 8009f18:	4a400404 	addi	r9,r9,16
 8009f1c:	5ac00404 	addi	r11,r11,16
 8009f20:	52800404 	addi	r10,r10,16
 8009f24:	413ff71e 	bne	r8,r4,8009f04 <__alt_data_end+0xf8009f04>
 8009f28:	63000044 	addi	r12,r12,1
 8009f2c:	6018913a 	slli	r12,r12,4
 8009f30:	39c003cc 	andi	r7,r7,15
 8009f34:	010000c4 	movi	r4,3
 8009f38:	1b07883a 	add	r3,r3,r12
 8009f3c:	21c00e2e 	bgeu	r4,r7,8009f78 <memset+0x100>
 8009f40:	1813883a 	mov	r9,r3
 8009f44:	3811883a 	mov	r8,r7
 8009f48:	010000c4 	movi	r4,3
 8009f4c:	49800015 	stw	r6,0(r9)
 8009f50:	423fff04 	addi	r8,r8,-4
 8009f54:	4a400104 	addi	r9,r9,4
 8009f58:	223ffc36 	bltu	r4,r8,8009f4c <__alt_data_end+0xf8009f4c>
 8009f5c:	393fff04 	addi	r4,r7,-4
 8009f60:	2008d0ba 	srli	r4,r4,2
 8009f64:	39c000cc 	andi	r7,r7,3
 8009f68:	21000044 	addi	r4,r4,1
 8009f6c:	2109883a 	add	r4,r4,r4
 8009f70:	2109883a 	add	r4,r4,r4
 8009f74:	1907883a 	add	r3,r3,r4
 8009f78:	38000426 	beq	r7,zero,8009f8c <memset+0x114>
 8009f7c:	19cf883a 	add	r7,r3,r7
 8009f80:	19400005 	stb	r5,0(r3)
 8009f84:	18c00044 	addi	r3,r3,1
 8009f88:	19fffd1e 	bne	r3,r7,8009f80 <__alt_data_end+0xf8009f80>
 8009f8c:	f800283a 	ret
 8009f90:	2007883a 	mov	r3,r4
 8009f94:	300f883a 	mov	r7,r6
 8009f98:	003fc806 	br	8009ebc <__alt_data_end+0xf8009ebc>

08009f9c <_Balloc>:
 8009f9c:	20801317 	ldw	r2,76(r4)
 8009fa0:	defffc04 	addi	sp,sp,-16
 8009fa4:	dc400115 	stw	r17,4(sp)
 8009fa8:	dc000015 	stw	r16,0(sp)
 8009fac:	dfc00315 	stw	ra,12(sp)
 8009fb0:	dc800215 	stw	r18,8(sp)
 8009fb4:	2023883a 	mov	r17,r4
 8009fb8:	2821883a 	mov	r16,r5
 8009fbc:	10000f26 	beq	r2,zero,8009ffc <_Balloc+0x60>
 8009fc0:	8407883a 	add	r3,r16,r16
 8009fc4:	18c7883a 	add	r3,r3,r3
 8009fc8:	10c7883a 	add	r3,r2,r3
 8009fcc:	18800017 	ldw	r2,0(r3)
 8009fd0:	10001126 	beq	r2,zero,800a018 <_Balloc+0x7c>
 8009fd4:	11000017 	ldw	r4,0(r2)
 8009fd8:	19000015 	stw	r4,0(r3)
 8009fdc:	10000415 	stw	zero,16(r2)
 8009fe0:	10000315 	stw	zero,12(r2)
 8009fe4:	dfc00317 	ldw	ra,12(sp)
 8009fe8:	dc800217 	ldw	r18,8(sp)
 8009fec:	dc400117 	ldw	r17,4(sp)
 8009ff0:	dc000017 	ldw	r16,0(sp)
 8009ff4:	dec00404 	addi	sp,sp,16
 8009ff8:	f800283a 	ret
 8009ffc:	01400104 	movi	r5,4
 800a000:	01800844 	movi	r6,33
 800a004:	80127f80 	call	80127f8 <_calloc_r>
 800a008:	88801315 	stw	r2,76(r17)
 800a00c:	103fec1e 	bne	r2,zero,8009fc0 <__alt_data_end+0xf8009fc0>
 800a010:	0005883a 	mov	r2,zero
 800a014:	003ff306 	br	8009fe4 <__alt_data_end+0xf8009fe4>
 800a018:	01400044 	movi	r5,1
 800a01c:	2c24983a 	sll	r18,r5,r16
 800a020:	8809883a 	mov	r4,r17
 800a024:	91800144 	addi	r6,r18,5
 800a028:	318d883a 	add	r6,r6,r6
 800a02c:	318d883a 	add	r6,r6,r6
 800a030:	80127f80 	call	80127f8 <_calloc_r>
 800a034:	103ff626 	beq	r2,zero,800a010 <__alt_data_end+0xf800a010>
 800a038:	14000115 	stw	r16,4(r2)
 800a03c:	14800215 	stw	r18,8(r2)
 800a040:	003fe606 	br	8009fdc <__alt_data_end+0xf8009fdc>

0800a044 <_Bfree>:
 800a044:	28000826 	beq	r5,zero,800a068 <_Bfree+0x24>
 800a048:	28c00117 	ldw	r3,4(r5)
 800a04c:	20801317 	ldw	r2,76(r4)
 800a050:	18c7883a 	add	r3,r3,r3
 800a054:	18c7883a 	add	r3,r3,r3
 800a058:	10c5883a 	add	r2,r2,r3
 800a05c:	10c00017 	ldw	r3,0(r2)
 800a060:	28c00015 	stw	r3,0(r5)
 800a064:	11400015 	stw	r5,0(r2)
 800a068:	f800283a 	ret

0800a06c <__multadd>:
 800a06c:	defffa04 	addi	sp,sp,-24
 800a070:	dc000115 	stw	r16,4(sp)
 800a074:	2c000417 	ldw	r16,16(r5)
 800a078:	dc800315 	stw	r18,12(sp)
 800a07c:	dc400215 	stw	r17,8(sp)
 800a080:	dfc00515 	stw	ra,20(sp)
 800a084:	dcc00415 	stw	r19,16(sp)
 800a088:	2823883a 	mov	r17,r5
 800a08c:	2025883a 	mov	r18,r4
 800a090:	2a400504 	addi	r9,r5,20
 800a094:	0015883a 	mov	r10,zero
 800a098:	4a000017 	ldw	r8,0(r9)
 800a09c:	4a400104 	addi	r9,r9,4
 800a0a0:	52800044 	addi	r10,r10,1
 800a0a4:	40ffffcc 	andi	r3,r8,65535
 800a0a8:	1987383a 	mul	r3,r3,r6
 800a0ac:	4010d43a 	srli	r8,r8,16
 800a0b0:	19cf883a 	add	r7,r3,r7
 800a0b4:	4191383a 	mul	r8,r8,r6
 800a0b8:	3816d43a 	srli	r11,r7,16
 800a0bc:	38ffffcc 	andi	r3,r7,65535
 800a0c0:	5a0f883a 	add	r7,r11,r8
 800a0c4:	3810943a 	slli	r8,r7,16
 800a0c8:	380ed43a 	srli	r7,r7,16
 800a0cc:	40c7883a 	add	r3,r8,r3
 800a0d0:	48ffff15 	stw	r3,-4(r9)
 800a0d4:	543ff016 	blt	r10,r16,800a098 <__alt_data_end+0xf800a098>
 800a0d8:	38000926 	beq	r7,zero,800a100 <__multadd+0x94>
 800a0dc:	88800217 	ldw	r2,8(r17)
 800a0e0:	80800f0e 	bge	r16,r2,800a120 <__multadd+0xb4>
 800a0e4:	80800144 	addi	r2,r16,5
 800a0e8:	1085883a 	add	r2,r2,r2
 800a0ec:	1085883a 	add	r2,r2,r2
 800a0f0:	8885883a 	add	r2,r17,r2
 800a0f4:	11c00015 	stw	r7,0(r2)
 800a0f8:	84000044 	addi	r16,r16,1
 800a0fc:	8c000415 	stw	r16,16(r17)
 800a100:	8805883a 	mov	r2,r17
 800a104:	dfc00517 	ldw	ra,20(sp)
 800a108:	dcc00417 	ldw	r19,16(sp)
 800a10c:	dc800317 	ldw	r18,12(sp)
 800a110:	dc400217 	ldw	r17,8(sp)
 800a114:	dc000117 	ldw	r16,4(sp)
 800a118:	dec00604 	addi	sp,sp,24
 800a11c:	f800283a 	ret
 800a120:	89400117 	ldw	r5,4(r17)
 800a124:	9009883a 	mov	r4,r18
 800a128:	d9c00015 	stw	r7,0(sp)
 800a12c:	29400044 	addi	r5,r5,1
 800a130:	8009f9c0 	call	8009f9c <_Balloc>
 800a134:	89800417 	ldw	r6,16(r17)
 800a138:	89400304 	addi	r5,r17,12
 800a13c:	11000304 	addi	r4,r2,12
 800a140:	31800084 	addi	r6,r6,2
 800a144:	318d883a 	add	r6,r6,r6
 800a148:	318d883a 	add	r6,r6,r6
 800a14c:	1027883a 	mov	r19,r2
 800a150:	8002df40 	call	8002df4 <memcpy>
 800a154:	89000117 	ldw	r4,4(r17)
 800a158:	90c01317 	ldw	r3,76(r18)
 800a15c:	d9c00017 	ldw	r7,0(sp)
 800a160:	2109883a 	add	r4,r4,r4
 800a164:	2109883a 	add	r4,r4,r4
 800a168:	1907883a 	add	r3,r3,r4
 800a16c:	18800017 	ldw	r2,0(r3)
 800a170:	88800015 	stw	r2,0(r17)
 800a174:	1c400015 	stw	r17,0(r3)
 800a178:	9823883a 	mov	r17,r19
 800a17c:	003fd906 	br	800a0e4 <__alt_data_end+0xf800a0e4>

0800a180 <__s2b>:
 800a180:	defff904 	addi	sp,sp,-28
 800a184:	dc400115 	stw	r17,4(sp)
 800a188:	dc000015 	stw	r16,0(sp)
 800a18c:	2023883a 	mov	r17,r4
 800a190:	2821883a 	mov	r16,r5
 800a194:	39000204 	addi	r4,r7,8
 800a198:	01400244 	movi	r5,9
 800a19c:	dcc00315 	stw	r19,12(sp)
 800a1a0:	dc800215 	stw	r18,8(sp)
 800a1a4:	dfc00615 	stw	ra,24(sp)
 800a1a8:	dd400515 	stw	r21,20(sp)
 800a1ac:	dd000415 	stw	r20,16(sp)
 800a1b0:	3825883a 	mov	r18,r7
 800a1b4:	3027883a 	mov	r19,r6
 800a1b8:	80023e00 	call	80023e0 <__divsi3>
 800a1bc:	00c00044 	movi	r3,1
 800a1c0:	000b883a 	mov	r5,zero
 800a1c4:	1880030e 	bge	r3,r2,800a1d4 <__s2b+0x54>
 800a1c8:	18c7883a 	add	r3,r3,r3
 800a1cc:	29400044 	addi	r5,r5,1
 800a1d0:	18bffd16 	blt	r3,r2,800a1c8 <__alt_data_end+0xf800a1c8>
 800a1d4:	8809883a 	mov	r4,r17
 800a1d8:	8009f9c0 	call	8009f9c <_Balloc>
 800a1dc:	d8c00717 	ldw	r3,28(sp)
 800a1e0:	10c00515 	stw	r3,20(r2)
 800a1e4:	00c00044 	movi	r3,1
 800a1e8:	10c00415 	stw	r3,16(r2)
 800a1ec:	00c00244 	movi	r3,9
 800a1f0:	1cc0210e 	bge	r3,r19,800a278 <__s2b+0xf8>
 800a1f4:	80eb883a 	add	r21,r16,r3
 800a1f8:	a829883a 	mov	r20,r21
 800a1fc:	84e1883a 	add	r16,r16,r19
 800a200:	a1c00007 	ldb	r7,0(r20)
 800a204:	8809883a 	mov	r4,r17
 800a208:	a5000044 	addi	r20,r20,1
 800a20c:	100b883a 	mov	r5,r2
 800a210:	01800284 	movi	r6,10
 800a214:	39fff404 	addi	r7,r7,-48
 800a218:	800a06c0 	call	800a06c <__multadd>
 800a21c:	a43ff81e 	bne	r20,r16,800a200 <__alt_data_end+0xf800a200>
 800a220:	ace1883a 	add	r16,r21,r19
 800a224:	843ffe04 	addi	r16,r16,-8
 800a228:	9c800a0e 	bge	r19,r18,800a254 <__s2b+0xd4>
 800a22c:	94e5c83a 	sub	r18,r18,r19
 800a230:	84a5883a 	add	r18,r16,r18
 800a234:	81c00007 	ldb	r7,0(r16)
 800a238:	8809883a 	mov	r4,r17
 800a23c:	84000044 	addi	r16,r16,1
 800a240:	100b883a 	mov	r5,r2
 800a244:	01800284 	movi	r6,10
 800a248:	39fff404 	addi	r7,r7,-48
 800a24c:	800a06c0 	call	800a06c <__multadd>
 800a250:	84bff81e 	bne	r16,r18,800a234 <__alt_data_end+0xf800a234>
 800a254:	dfc00617 	ldw	ra,24(sp)
 800a258:	dd400517 	ldw	r21,20(sp)
 800a25c:	dd000417 	ldw	r20,16(sp)
 800a260:	dcc00317 	ldw	r19,12(sp)
 800a264:	dc800217 	ldw	r18,8(sp)
 800a268:	dc400117 	ldw	r17,4(sp)
 800a26c:	dc000017 	ldw	r16,0(sp)
 800a270:	dec00704 	addi	sp,sp,28
 800a274:	f800283a 	ret
 800a278:	84000284 	addi	r16,r16,10
 800a27c:	1827883a 	mov	r19,r3
 800a280:	003fe906 	br	800a228 <__alt_data_end+0xf800a228>

0800a284 <__hi0bits>:
 800a284:	20bfffec 	andhi	r2,r4,65535
 800a288:	1000141e 	bne	r2,zero,800a2dc <__hi0bits+0x58>
 800a28c:	2008943a 	slli	r4,r4,16
 800a290:	00800404 	movi	r2,16
 800a294:	20ffc02c 	andhi	r3,r4,65280
 800a298:	1800021e 	bne	r3,zero,800a2a4 <__hi0bits+0x20>
 800a29c:	2008923a 	slli	r4,r4,8
 800a2a0:	10800204 	addi	r2,r2,8
 800a2a4:	20fc002c 	andhi	r3,r4,61440
 800a2a8:	1800021e 	bne	r3,zero,800a2b4 <__hi0bits+0x30>
 800a2ac:	2008913a 	slli	r4,r4,4
 800a2b0:	10800104 	addi	r2,r2,4
 800a2b4:	20f0002c 	andhi	r3,r4,49152
 800a2b8:	1800031e 	bne	r3,zero,800a2c8 <__hi0bits+0x44>
 800a2bc:	2109883a 	add	r4,r4,r4
 800a2c0:	10800084 	addi	r2,r2,2
 800a2c4:	2109883a 	add	r4,r4,r4
 800a2c8:	20000316 	blt	r4,zero,800a2d8 <__hi0bits+0x54>
 800a2cc:	2110002c 	andhi	r4,r4,16384
 800a2d0:	2000041e 	bne	r4,zero,800a2e4 <__hi0bits+0x60>
 800a2d4:	00800804 	movi	r2,32
 800a2d8:	f800283a 	ret
 800a2dc:	0005883a 	mov	r2,zero
 800a2e0:	003fec06 	br	800a294 <__alt_data_end+0xf800a294>
 800a2e4:	10800044 	addi	r2,r2,1
 800a2e8:	f800283a 	ret

0800a2ec <__lo0bits>:
 800a2ec:	20c00017 	ldw	r3,0(r4)
 800a2f0:	188001cc 	andi	r2,r3,7
 800a2f4:	10000826 	beq	r2,zero,800a318 <__lo0bits+0x2c>
 800a2f8:	1880004c 	andi	r2,r3,1
 800a2fc:	1000211e 	bne	r2,zero,800a384 <__lo0bits+0x98>
 800a300:	1880008c 	andi	r2,r3,2
 800a304:	1000211e 	bne	r2,zero,800a38c <__lo0bits+0xa0>
 800a308:	1806d0ba 	srli	r3,r3,2
 800a30c:	00800084 	movi	r2,2
 800a310:	20c00015 	stw	r3,0(r4)
 800a314:	f800283a 	ret
 800a318:	18bfffcc 	andi	r2,r3,65535
 800a31c:	10001326 	beq	r2,zero,800a36c <__lo0bits+0x80>
 800a320:	0005883a 	mov	r2,zero
 800a324:	19403fcc 	andi	r5,r3,255
 800a328:	2800021e 	bne	r5,zero,800a334 <__lo0bits+0x48>
 800a32c:	1806d23a 	srli	r3,r3,8
 800a330:	10800204 	addi	r2,r2,8
 800a334:	194003cc 	andi	r5,r3,15
 800a338:	2800021e 	bne	r5,zero,800a344 <__lo0bits+0x58>
 800a33c:	1806d13a 	srli	r3,r3,4
 800a340:	10800104 	addi	r2,r2,4
 800a344:	194000cc 	andi	r5,r3,3
 800a348:	2800021e 	bne	r5,zero,800a354 <__lo0bits+0x68>
 800a34c:	1806d0ba 	srli	r3,r3,2
 800a350:	10800084 	addi	r2,r2,2
 800a354:	1940004c 	andi	r5,r3,1
 800a358:	2800081e 	bne	r5,zero,800a37c <__lo0bits+0x90>
 800a35c:	1806d07a 	srli	r3,r3,1
 800a360:	1800051e 	bne	r3,zero,800a378 <__lo0bits+0x8c>
 800a364:	00800804 	movi	r2,32
 800a368:	f800283a 	ret
 800a36c:	1806d43a 	srli	r3,r3,16
 800a370:	00800404 	movi	r2,16
 800a374:	003feb06 	br	800a324 <__alt_data_end+0xf800a324>
 800a378:	10800044 	addi	r2,r2,1
 800a37c:	20c00015 	stw	r3,0(r4)
 800a380:	f800283a 	ret
 800a384:	0005883a 	mov	r2,zero
 800a388:	f800283a 	ret
 800a38c:	1806d07a 	srli	r3,r3,1
 800a390:	00800044 	movi	r2,1
 800a394:	20c00015 	stw	r3,0(r4)
 800a398:	f800283a 	ret

0800a39c <__i2b>:
 800a39c:	defffd04 	addi	sp,sp,-12
 800a3a0:	dc000015 	stw	r16,0(sp)
 800a3a4:	04000044 	movi	r16,1
 800a3a8:	dc400115 	stw	r17,4(sp)
 800a3ac:	2823883a 	mov	r17,r5
 800a3b0:	800b883a 	mov	r5,r16
 800a3b4:	dfc00215 	stw	ra,8(sp)
 800a3b8:	8009f9c0 	call	8009f9c <_Balloc>
 800a3bc:	14400515 	stw	r17,20(r2)
 800a3c0:	14000415 	stw	r16,16(r2)
 800a3c4:	dfc00217 	ldw	ra,8(sp)
 800a3c8:	dc400117 	ldw	r17,4(sp)
 800a3cc:	dc000017 	ldw	r16,0(sp)
 800a3d0:	dec00304 	addi	sp,sp,12
 800a3d4:	f800283a 	ret

0800a3d8 <__multiply>:
 800a3d8:	defffa04 	addi	sp,sp,-24
 800a3dc:	dcc00315 	stw	r19,12(sp)
 800a3e0:	dc800215 	stw	r18,8(sp)
 800a3e4:	2cc00417 	ldw	r19,16(r5)
 800a3e8:	34800417 	ldw	r18,16(r6)
 800a3ec:	dd000415 	stw	r20,16(sp)
 800a3f0:	dc400115 	stw	r17,4(sp)
 800a3f4:	dfc00515 	stw	ra,20(sp)
 800a3f8:	dc000015 	stw	r16,0(sp)
 800a3fc:	2829883a 	mov	r20,r5
 800a400:	3023883a 	mov	r17,r6
 800a404:	9c807016 	blt	r19,r18,800a5c8 <__multiply+0x1f0>
 800a408:	9005883a 	mov	r2,r18
 800a40c:	9825883a 	mov	r18,r19
 800a410:	1027883a 	mov	r19,r2
 800a414:	a0800217 	ldw	r2,8(r20)
 800a418:	94e1883a 	add	r16,r18,r19
 800a41c:	a1400117 	ldw	r5,4(r20)
 800a420:	1400010e 	bge	r2,r16,800a428 <__multiply+0x50>
 800a424:	29400044 	addi	r5,r5,1
 800a428:	8009f9c0 	call	8009f9c <_Balloc>
 800a42c:	8417883a 	add	r11,r16,r16
 800a430:	13000504 	addi	r12,r2,20
 800a434:	5ad7883a 	add	r11,r11,r11
 800a438:	62d7883a 	add	r11,r12,r11
 800a43c:	6007883a 	mov	r3,r12
 800a440:	62c0032e 	bgeu	r12,r11,800a450 <__multiply+0x78>
 800a444:	18000015 	stw	zero,0(r3)
 800a448:	18c00104 	addi	r3,r3,4
 800a44c:	1afffd36 	bltu	r3,r11,800a444 <__alt_data_end+0xf800a444>
 800a450:	9ce7883a 	add	r19,r19,r19
 800a454:	94a5883a 	add	r18,r18,r18
 800a458:	89800504 	addi	r6,r17,20
 800a45c:	9ce7883a 	add	r19,r19,r19
 800a460:	a3800504 	addi	r14,r20,20
 800a464:	94a5883a 	add	r18,r18,r18
 800a468:	34db883a 	add	r13,r6,r19
 800a46c:	7495883a 	add	r10,r14,r18
 800a470:	3340422e 	bgeu	r6,r13,800a57c <__multiply+0x1a4>
 800a474:	34400017 	ldw	r17,0(r6)
 800a478:	8cbfffcc 	andi	r18,r17,65535
 800a47c:	90001b26 	beq	r18,zero,800a4ec <__multiply+0x114>
 800a480:	6013883a 	mov	r9,r12
 800a484:	7023883a 	mov	r17,r14
 800a488:	0011883a 	mov	r8,zero
 800a48c:	88c00017 	ldw	r3,0(r17)
 800a490:	4bc00017 	ldw	r15,0(r9)
 800a494:	8c400104 	addi	r17,r17,4
 800a498:	19ffffcc 	andi	r7,r3,65535
 800a49c:	3c8f383a 	mul	r7,r7,r18
 800a4a0:	1808d43a 	srli	r4,r3,16
 800a4a4:	797fffcc 	andi	r5,r15,65535
 800a4a8:	29cb883a 	add	r5,r5,r7
 800a4ac:	2a0b883a 	add	r5,r5,r8
 800a4b0:	2489383a 	mul	r4,r4,r18
 800a4b4:	7806d43a 	srli	r3,r15,16
 800a4b8:	2810d43a 	srli	r8,r5,16
 800a4bc:	297fffcc 	andi	r5,r5,65535
 800a4c0:	1907883a 	add	r3,r3,r4
 800a4c4:	1a07883a 	add	r3,r3,r8
 800a4c8:	1808943a 	slli	r4,r3,16
 800a4cc:	480f883a 	mov	r7,r9
 800a4d0:	1810d43a 	srli	r8,r3,16
 800a4d4:	214ab03a 	or	r5,r4,r5
 800a4d8:	49400015 	stw	r5,0(r9)
 800a4dc:	4a400104 	addi	r9,r9,4
 800a4e0:	8abfea36 	bltu	r17,r10,800a48c <__alt_data_end+0xf800a48c>
 800a4e4:	3a000115 	stw	r8,4(r7)
 800a4e8:	34400017 	ldw	r17,0(r6)
 800a4ec:	8822d43a 	srli	r17,r17,16
 800a4f0:	88001f26 	beq	r17,zero,800a570 <__multiply+0x198>
 800a4f4:	60c00017 	ldw	r3,0(r12)
 800a4f8:	7013883a 	mov	r9,r14
 800a4fc:	601f883a 	mov	r15,r12
 800a500:	1811883a 	mov	r8,r3
 800a504:	6027883a 	mov	r19,r12
 800a508:	000f883a 	mov	r7,zero
 800a50c:	00000106 	br	800a514 <__multiply+0x13c>
 800a510:	9027883a 	mov	r19,r18
 800a514:	4940000b 	ldhu	r5,0(r9)
 800a518:	4010d43a 	srli	r8,r8,16
 800a51c:	193fffcc 	andi	r4,r3,65535
 800a520:	2c4b383a 	mul	r5,r5,r17
 800a524:	7bc00104 	addi	r15,r15,4
 800a528:	4a400104 	addi	r9,r9,4
 800a52c:	2a0b883a 	add	r5,r5,r8
 800a530:	29cb883a 	add	r5,r5,r7
 800a534:	2806943a 	slli	r3,r5,16
 800a538:	9c800104 	addi	r18,r19,4
 800a53c:	280ad43a 	srli	r5,r5,16
 800a540:	1908b03a 	or	r4,r3,r4
 800a544:	793fff15 	stw	r4,-4(r15)
 800a548:	48ffff17 	ldw	r3,-4(r9)
 800a54c:	92000017 	ldw	r8,0(r18)
 800a550:	1806d43a 	srli	r3,r3,16
 800a554:	413fffcc 	andi	r4,r8,65535
 800a558:	1c47383a 	mul	r3,r3,r17
 800a55c:	1907883a 	add	r3,r3,r4
 800a560:	1947883a 	add	r3,r3,r5
 800a564:	180ed43a 	srli	r7,r3,16
 800a568:	4abfe936 	bltu	r9,r10,800a510 <__alt_data_end+0xf800a510>
 800a56c:	98c00115 	stw	r3,4(r19)
 800a570:	31800104 	addi	r6,r6,4
 800a574:	63000104 	addi	r12,r12,4
 800a578:	337fbe36 	bltu	r6,r13,800a474 <__alt_data_end+0xf800a474>
 800a57c:	0400090e 	bge	zero,r16,800a5a4 <__multiply+0x1cc>
 800a580:	58ffff17 	ldw	r3,-4(r11)
 800a584:	5affff04 	addi	r11,r11,-4
 800a588:	18000326 	beq	r3,zero,800a598 <__multiply+0x1c0>
 800a58c:	00000506 	br	800a5a4 <__multiply+0x1cc>
 800a590:	58c00017 	ldw	r3,0(r11)
 800a594:	1800031e 	bne	r3,zero,800a5a4 <__multiply+0x1cc>
 800a598:	843fffc4 	addi	r16,r16,-1
 800a59c:	5affff04 	addi	r11,r11,-4
 800a5a0:	803ffb1e 	bne	r16,zero,800a590 <__alt_data_end+0xf800a590>
 800a5a4:	14000415 	stw	r16,16(r2)
 800a5a8:	dfc00517 	ldw	ra,20(sp)
 800a5ac:	dd000417 	ldw	r20,16(sp)
 800a5b0:	dcc00317 	ldw	r19,12(sp)
 800a5b4:	dc800217 	ldw	r18,8(sp)
 800a5b8:	dc400117 	ldw	r17,4(sp)
 800a5bc:	dc000017 	ldw	r16,0(sp)
 800a5c0:	dec00604 	addi	sp,sp,24
 800a5c4:	f800283a 	ret
 800a5c8:	3029883a 	mov	r20,r6
 800a5cc:	2823883a 	mov	r17,r5
 800a5d0:	003f9006 	br	800a414 <__alt_data_end+0xf800a414>

0800a5d4 <__pow5mult>:
 800a5d4:	defffa04 	addi	sp,sp,-24
 800a5d8:	dcc00315 	stw	r19,12(sp)
 800a5dc:	dc800215 	stw	r18,8(sp)
 800a5e0:	dc000015 	stw	r16,0(sp)
 800a5e4:	dfc00515 	stw	ra,20(sp)
 800a5e8:	dd000415 	stw	r20,16(sp)
 800a5ec:	dc400115 	stw	r17,4(sp)
 800a5f0:	308000cc 	andi	r2,r6,3
 800a5f4:	3021883a 	mov	r16,r6
 800a5f8:	2027883a 	mov	r19,r4
 800a5fc:	2825883a 	mov	r18,r5
 800a600:	10002e1e 	bne	r2,zero,800a6bc <__pow5mult+0xe8>
 800a604:	8021d0ba 	srai	r16,r16,2
 800a608:	80001a26 	beq	r16,zero,800a674 <__pow5mult+0xa0>
 800a60c:	9c401217 	ldw	r17,72(r19)
 800a610:	8800061e 	bne	r17,zero,800a62c <__pow5mult+0x58>
 800a614:	00003406 	br	800a6e8 <__pow5mult+0x114>
 800a618:	8021d07a 	srai	r16,r16,1
 800a61c:	80001526 	beq	r16,zero,800a674 <__pow5mult+0xa0>
 800a620:	88800017 	ldw	r2,0(r17)
 800a624:	10001c26 	beq	r2,zero,800a698 <__pow5mult+0xc4>
 800a628:	1023883a 	mov	r17,r2
 800a62c:	80c0004c 	andi	r3,r16,1
 800a630:	183ff926 	beq	r3,zero,800a618 <__alt_data_end+0xf800a618>
 800a634:	900b883a 	mov	r5,r18
 800a638:	880d883a 	mov	r6,r17
 800a63c:	9809883a 	mov	r4,r19
 800a640:	800a3d80 	call	800a3d8 <__multiply>
 800a644:	90001b26 	beq	r18,zero,800a6b4 <__pow5mult+0xe0>
 800a648:	91c00117 	ldw	r7,4(r18)
 800a64c:	98c01317 	ldw	r3,76(r19)
 800a650:	8021d07a 	srai	r16,r16,1
 800a654:	39cf883a 	add	r7,r7,r7
 800a658:	39cf883a 	add	r7,r7,r7
 800a65c:	19c7883a 	add	r3,r3,r7
 800a660:	19000017 	ldw	r4,0(r3)
 800a664:	91000015 	stw	r4,0(r18)
 800a668:	1c800015 	stw	r18,0(r3)
 800a66c:	1025883a 	mov	r18,r2
 800a670:	803feb1e 	bne	r16,zero,800a620 <__alt_data_end+0xf800a620>
 800a674:	9005883a 	mov	r2,r18
 800a678:	dfc00517 	ldw	ra,20(sp)
 800a67c:	dd000417 	ldw	r20,16(sp)
 800a680:	dcc00317 	ldw	r19,12(sp)
 800a684:	dc800217 	ldw	r18,8(sp)
 800a688:	dc400117 	ldw	r17,4(sp)
 800a68c:	dc000017 	ldw	r16,0(sp)
 800a690:	dec00604 	addi	sp,sp,24
 800a694:	f800283a 	ret
 800a698:	9809883a 	mov	r4,r19
 800a69c:	880b883a 	mov	r5,r17
 800a6a0:	880d883a 	mov	r6,r17
 800a6a4:	800a3d80 	call	800a3d8 <__multiply>
 800a6a8:	88800015 	stw	r2,0(r17)
 800a6ac:	10000015 	stw	zero,0(r2)
 800a6b0:	003fdd06 	br	800a628 <__alt_data_end+0xf800a628>
 800a6b4:	1025883a 	mov	r18,r2
 800a6b8:	003fd706 	br	800a618 <__alt_data_end+0xf800a618>
 800a6bc:	10bfffc4 	addi	r2,r2,-1
 800a6c0:	1085883a 	add	r2,r2,r2
 800a6c4:	00c200b4 	movhi	r3,2050
 800a6c8:	18f2ea04 	addi	r3,r3,-13400
 800a6cc:	1085883a 	add	r2,r2,r2
 800a6d0:	1885883a 	add	r2,r3,r2
 800a6d4:	11800017 	ldw	r6,0(r2)
 800a6d8:	000f883a 	mov	r7,zero
 800a6dc:	800a06c0 	call	800a06c <__multadd>
 800a6e0:	1025883a 	mov	r18,r2
 800a6e4:	003fc706 	br	800a604 <__alt_data_end+0xf800a604>
 800a6e8:	05000044 	movi	r20,1
 800a6ec:	9809883a 	mov	r4,r19
 800a6f0:	a00b883a 	mov	r5,r20
 800a6f4:	8009f9c0 	call	8009f9c <_Balloc>
 800a6f8:	1023883a 	mov	r17,r2
 800a6fc:	00809c44 	movi	r2,625
 800a700:	88800515 	stw	r2,20(r17)
 800a704:	8d000415 	stw	r20,16(r17)
 800a708:	9c401215 	stw	r17,72(r19)
 800a70c:	88000015 	stw	zero,0(r17)
 800a710:	003fc606 	br	800a62c <__alt_data_end+0xf800a62c>

0800a714 <__lshift>:
 800a714:	defff904 	addi	sp,sp,-28
 800a718:	dd000415 	stw	r20,16(sp)
 800a71c:	dcc00315 	stw	r19,12(sp)
 800a720:	3029d17a 	srai	r20,r6,5
 800a724:	2cc00417 	ldw	r19,16(r5)
 800a728:	28800217 	ldw	r2,8(r5)
 800a72c:	dd400515 	stw	r21,20(sp)
 800a730:	a4e7883a 	add	r19,r20,r19
 800a734:	dc800215 	stw	r18,8(sp)
 800a738:	dc400115 	stw	r17,4(sp)
 800a73c:	dc000015 	stw	r16,0(sp)
 800a740:	dfc00615 	stw	ra,24(sp)
 800a744:	9c000044 	addi	r16,r19,1
 800a748:	2823883a 	mov	r17,r5
 800a74c:	302b883a 	mov	r21,r6
 800a750:	2025883a 	mov	r18,r4
 800a754:	29400117 	ldw	r5,4(r5)
 800a758:	1400030e 	bge	r2,r16,800a768 <__lshift+0x54>
 800a75c:	1085883a 	add	r2,r2,r2
 800a760:	29400044 	addi	r5,r5,1
 800a764:	143ffd16 	blt	r2,r16,800a75c <__alt_data_end+0xf800a75c>
 800a768:	9009883a 	mov	r4,r18
 800a76c:	8009f9c0 	call	8009f9c <_Balloc>
 800a770:	11c00504 	addi	r7,r2,20
 800a774:	0500090e 	bge	zero,r20,800a79c <__lshift+0x88>
 800a778:	3811883a 	mov	r8,r7
 800a77c:	0007883a 	mov	r3,zero
 800a780:	40000015 	stw	zero,0(r8)
 800a784:	18c00044 	addi	r3,r3,1
 800a788:	42000104 	addi	r8,r8,4
 800a78c:	1d3ffc1e 	bne	r3,r20,800a780 <__alt_data_end+0xf800a780>
 800a790:	18c7883a 	add	r3,r3,r3
 800a794:	18c7883a 	add	r3,r3,r3
 800a798:	38cf883a 	add	r7,r7,r3
 800a79c:	89000417 	ldw	r4,16(r17)
 800a7a0:	88c00504 	addi	r3,r17,20
 800a7a4:	a98007cc 	andi	r6,r21,31
 800a7a8:	2109883a 	add	r4,r4,r4
 800a7ac:	2109883a 	add	r4,r4,r4
 800a7b0:	1909883a 	add	r4,r3,r4
 800a7b4:	30002326 	beq	r6,zero,800a844 <__lshift+0x130>
 800a7b8:	01400804 	movi	r5,32
 800a7bc:	298bc83a 	sub	r5,r5,r6
 800a7c0:	0013883a 	mov	r9,zero
 800a7c4:	1a000017 	ldw	r8,0(r3)
 800a7c8:	3815883a 	mov	r10,r7
 800a7cc:	39c00104 	addi	r7,r7,4
 800a7d0:	4190983a 	sll	r8,r8,r6
 800a7d4:	18c00104 	addi	r3,r3,4
 800a7d8:	4a10b03a 	or	r8,r9,r8
 800a7dc:	3a3fff15 	stw	r8,-4(r7)
 800a7e0:	1a3fff17 	ldw	r8,-4(r3)
 800a7e4:	4152d83a 	srl	r9,r8,r5
 800a7e8:	193ff636 	bltu	r3,r4,800a7c4 <__alt_data_end+0xf800a7c4>
 800a7ec:	52400115 	stw	r9,4(r10)
 800a7f0:	48000126 	beq	r9,zero,800a7f8 <__lshift+0xe4>
 800a7f4:	9c000084 	addi	r16,r19,2
 800a7f8:	89000117 	ldw	r4,4(r17)
 800a7fc:	90c01317 	ldw	r3,76(r18)
 800a800:	843fffc4 	addi	r16,r16,-1
 800a804:	2109883a 	add	r4,r4,r4
 800a808:	2109883a 	add	r4,r4,r4
 800a80c:	1907883a 	add	r3,r3,r4
 800a810:	19000017 	ldw	r4,0(r3)
 800a814:	14000415 	stw	r16,16(r2)
 800a818:	89000015 	stw	r4,0(r17)
 800a81c:	1c400015 	stw	r17,0(r3)
 800a820:	dfc00617 	ldw	ra,24(sp)
 800a824:	dd400517 	ldw	r21,20(sp)
 800a828:	dd000417 	ldw	r20,16(sp)
 800a82c:	dcc00317 	ldw	r19,12(sp)
 800a830:	dc800217 	ldw	r18,8(sp)
 800a834:	dc400117 	ldw	r17,4(sp)
 800a838:	dc000017 	ldw	r16,0(sp)
 800a83c:	dec00704 	addi	sp,sp,28
 800a840:	f800283a 	ret
 800a844:	19400017 	ldw	r5,0(r3)
 800a848:	39c00104 	addi	r7,r7,4
 800a84c:	18c00104 	addi	r3,r3,4
 800a850:	397fff15 	stw	r5,-4(r7)
 800a854:	193ffb36 	bltu	r3,r4,800a844 <__alt_data_end+0xf800a844>
 800a858:	003fe706 	br	800a7f8 <__alt_data_end+0xf800a7f8>

0800a85c <__mcmp>:
 800a85c:	20800417 	ldw	r2,16(r4)
 800a860:	28c00417 	ldw	r3,16(r5)
 800a864:	10c5c83a 	sub	r2,r2,r3
 800a868:	1000111e 	bne	r2,zero,800a8b0 <__mcmp+0x54>
 800a86c:	18c7883a 	add	r3,r3,r3
 800a870:	18c7883a 	add	r3,r3,r3
 800a874:	21000504 	addi	r4,r4,20
 800a878:	29400504 	addi	r5,r5,20
 800a87c:	20c5883a 	add	r2,r4,r3
 800a880:	28cb883a 	add	r5,r5,r3
 800a884:	00000106 	br	800a88c <__mcmp+0x30>
 800a888:	20800a2e 	bgeu	r4,r2,800a8b4 <__mcmp+0x58>
 800a88c:	10bfff04 	addi	r2,r2,-4
 800a890:	297fff04 	addi	r5,r5,-4
 800a894:	11800017 	ldw	r6,0(r2)
 800a898:	28c00017 	ldw	r3,0(r5)
 800a89c:	30fffa26 	beq	r6,r3,800a888 <__alt_data_end+0xf800a888>
 800a8a0:	30c00236 	bltu	r6,r3,800a8ac <__mcmp+0x50>
 800a8a4:	00800044 	movi	r2,1
 800a8a8:	f800283a 	ret
 800a8ac:	00bfffc4 	movi	r2,-1
 800a8b0:	f800283a 	ret
 800a8b4:	0005883a 	mov	r2,zero
 800a8b8:	f800283a 	ret

0800a8bc <__mdiff>:
 800a8bc:	defffb04 	addi	sp,sp,-20
 800a8c0:	dc000015 	stw	r16,0(sp)
 800a8c4:	2821883a 	mov	r16,r5
 800a8c8:	dcc00315 	stw	r19,12(sp)
 800a8cc:	300b883a 	mov	r5,r6
 800a8d0:	2027883a 	mov	r19,r4
 800a8d4:	8009883a 	mov	r4,r16
 800a8d8:	dc800215 	stw	r18,8(sp)
 800a8dc:	dfc00415 	stw	ra,16(sp)
 800a8e0:	dc400115 	stw	r17,4(sp)
 800a8e4:	3025883a 	mov	r18,r6
 800a8e8:	800a85c0 	call	800a85c <__mcmp>
 800a8ec:	10005226 	beq	r2,zero,800aa38 <__mdiff+0x17c>
 800a8f0:	10004c16 	blt	r2,zero,800aa24 <__mdiff+0x168>
 800a8f4:	0023883a 	mov	r17,zero
 800a8f8:	81400117 	ldw	r5,4(r16)
 800a8fc:	9809883a 	mov	r4,r19
 800a900:	8009f9c0 	call	8009f9c <_Balloc>
 800a904:	83400417 	ldw	r13,16(r16)
 800a908:	93800417 	ldw	r14,16(r18)
 800a90c:	81000504 	addi	r4,r16,20
 800a910:	6b59883a 	add	r12,r13,r13
 800a914:	739d883a 	add	r14,r14,r14
 800a918:	6319883a 	add	r12,r12,r12
 800a91c:	91800504 	addi	r6,r18,20
 800a920:	739d883a 	add	r14,r14,r14
 800a924:	14400315 	stw	r17,12(r2)
 800a928:	2319883a 	add	r12,r4,r12
 800a92c:	339d883a 	add	r14,r6,r14
 800a930:	12400504 	addi	r9,r2,20
 800a934:	0007883a 	mov	r3,zero
 800a938:	22000017 	ldw	r8,0(r4)
 800a93c:	32800017 	ldw	r10,0(r6)
 800a940:	4ac00104 	addi	r11,r9,4
 800a944:	41ffffcc 	andi	r7,r8,65535
 800a948:	38c7883a 	add	r3,r7,r3
 800a94c:	51ffffcc 	andi	r7,r10,65535
 800a950:	19cfc83a 	sub	r7,r3,r7
 800a954:	4010d43a 	srli	r8,r8,16
 800a958:	5014d43a 	srli	r10,r10,16
 800a95c:	3807d43a 	srai	r3,r7,16
 800a960:	39ffffcc 	andi	r7,r7,65535
 800a964:	4291c83a 	sub	r8,r8,r10
 800a968:	40c7883a 	add	r3,r8,r3
 800a96c:	1810943a 	slli	r8,r3,16
 800a970:	31800104 	addi	r6,r6,4
 800a974:	21000104 	addi	r4,r4,4
 800a978:	41ceb03a 	or	r7,r8,r7
 800a97c:	49c00015 	stw	r7,0(r9)
 800a980:	1807d43a 	srai	r3,r3,16
 800a984:	580b883a 	mov	r5,r11
 800a988:	5813883a 	mov	r9,r11
 800a98c:	33bfea36 	bltu	r6,r14,800a938 <__alt_data_end+0xf800a938>
 800a990:	2011883a 	mov	r8,r4
 800a994:	2300152e 	bgeu	r4,r12,800a9ec <__mdiff+0x130>
 800a998:	21400017 	ldw	r5,0(r4)
 800a99c:	4a400104 	addi	r9,r9,4
 800a9a0:	21000104 	addi	r4,r4,4
 800a9a4:	29ffffcc 	andi	r7,r5,65535
 800a9a8:	38c7883a 	add	r3,r7,r3
 800a9ac:	280ad43a 	srli	r5,r5,16
 800a9b0:	180dd43a 	srai	r6,r3,16
 800a9b4:	19ffffcc 	andi	r7,r3,65535
 800a9b8:	3147883a 	add	r3,r6,r5
 800a9bc:	180a943a 	slli	r5,r3,16
 800a9c0:	1807d43a 	srai	r3,r3,16
 800a9c4:	29ceb03a 	or	r7,r5,r7
 800a9c8:	49ffff15 	stw	r7,-4(r9)
 800a9cc:	233ff236 	bltu	r4,r12,800a998 <__alt_data_end+0xf800a998>
 800a9d0:	0206303a 	nor	r3,zero,r8
 800a9d4:	1b07883a 	add	r3,r3,r12
 800a9d8:	1806d0ba 	srli	r3,r3,2
 800a9dc:	18c00044 	addi	r3,r3,1
 800a9e0:	18c7883a 	add	r3,r3,r3
 800a9e4:	18c7883a 	add	r3,r3,r3
 800a9e8:	58cb883a 	add	r5,r11,r3
 800a9ec:	28ffff04 	addi	r3,r5,-4
 800a9f0:	3800041e 	bne	r7,zero,800aa04 <__mdiff+0x148>
 800a9f4:	18ffff04 	addi	r3,r3,-4
 800a9f8:	19000017 	ldw	r4,0(r3)
 800a9fc:	6b7fffc4 	addi	r13,r13,-1
 800aa00:	203ffc26 	beq	r4,zero,800a9f4 <__alt_data_end+0xf800a9f4>
 800aa04:	13400415 	stw	r13,16(r2)
 800aa08:	dfc00417 	ldw	ra,16(sp)
 800aa0c:	dcc00317 	ldw	r19,12(sp)
 800aa10:	dc800217 	ldw	r18,8(sp)
 800aa14:	dc400117 	ldw	r17,4(sp)
 800aa18:	dc000017 	ldw	r16,0(sp)
 800aa1c:	dec00504 	addi	sp,sp,20
 800aa20:	f800283a 	ret
 800aa24:	8005883a 	mov	r2,r16
 800aa28:	04400044 	movi	r17,1
 800aa2c:	9021883a 	mov	r16,r18
 800aa30:	1025883a 	mov	r18,r2
 800aa34:	003fb006 	br	800a8f8 <__alt_data_end+0xf800a8f8>
 800aa38:	9809883a 	mov	r4,r19
 800aa3c:	000b883a 	mov	r5,zero
 800aa40:	8009f9c0 	call	8009f9c <_Balloc>
 800aa44:	00c00044 	movi	r3,1
 800aa48:	10c00415 	stw	r3,16(r2)
 800aa4c:	10000515 	stw	zero,20(r2)
 800aa50:	003fed06 	br	800aa08 <__alt_data_end+0xf800aa08>

0800aa54 <__ulp>:
 800aa54:	295ffc2c 	andhi	r5,r5,32752
 800aa58:	00bf3034 	movhi	r2,64704
 800aa5c:	2887883a 	add	r3,r5,r2
 800aa60:	00c0020e 	bge	zero,r3,800aa6c <__ulp+0x18>
 800aa64:	0005883a 	mov	r2,zero
 800aa68:	f800283a 	ret
 800aa6c:	00c7c83a 	sub	r3,zero,r3
 800aa70:	180bd53a 	srai	r5,r3,20
 800aa74:	008004c4 	movi	r2,19
 800aa78:	11400a0e 	bge	r2,r5,800aaa4 <__ulp+0x50>
 800aa7c:	00800c84 	movi	r2,50
 800aa80:	0007883a 	mov	r3,zero
 800aa84:	11400516 	blt	r2,r5,800aa9c <__ulp+0x48>
 800aa88:	00800cc4 	movi	r2,51
 800aa8c:	114bc83a 	sub	r5,r2,r5
 800aa90:	00800044 	movi	r2,1
 800aa94:	1144983a 	sll	r2,r2,r5
 800aa98:	f800283a 	ret
 800aa9c:	00800044 	movi	r2,1
 800aaa0:	f800283a 	ret
 800aaa4:	00800234 	movhi	r2,8
 800aaa8:	1147d83a 	sra	r3,r2,r5
 800aaac:	0005883a 	mov	r2,zero
 800aab0:	f800283a 	ret

0800aab4 <__b2d>:
 800aab4:	defffa04 	addi	sp,sp,-24
 800aab8:	dc000015 	stw	r16,0(sp)
 800aabc:	24000417 	ldw	r16,16(r4)
 800aac0:	dc400115 	stw	r17,4(sp)
 800aac4:	24400504 	addi	r17,r4,20
 800aac8:	8421883a 	add	r16,r16,r16
 800aacc:	8421883a 	add	r16,r16,r16
 800aad0:	8c21883a 	add	r16,r17,r16
 800aad4:	dc800215 	stw	r18,8(sp)
 800aad8:	84bfff17 	ldw	r18,-4(r16)
 800aadc:	dd000415 	stw	r20,16(sp)
 800aae0:	dcc00315 	stw	r19,12(sp)
 800aae4:	9009883a 	mov	r4,r18
 800aae8:	2829883a 	mov	r20,r5
 800aaec:	dfc00515 	stw	ra,20(sp)
 800aaf0:	800a2840 	call	800a284 <__hi0bits>
 800aaf4:	00c00804 	movi	r3,32
 800aaf8:	1887c83a 	sub	r3,r3,r2
 800aafc:	a0c00015 	stw	r3,0(r20)
 800ab00:	00c00284 	movi	r3,10
 800ab04:	84ffff04 	addi	r19,r16,-4
 800ab08:	18801216 	blt	r3,r2,800ab54 <__b2d+0xa0>
 800ab0c:	014002c4 	movi	r5,11
 800ab10:	2889c83a 	sub	r4,r5,r2
 800ab14:	9106d83a 	srl	r3,r18,r4
 800ab18:	18cffc34 	orhi	r3,r3,16368
 800ab1c:	8cc0282e 	bgeu	r17,r19,800abc0 <__b2d+0x10c>
 800ab20:	817ffe17 	ldw	r5,-8(r16)
 800ab24:	290ad83a 	srl	r5,r5,r4
 800ab28:	10800544 	addi	r2,r2,21
 800ab2c:	9084983a 	sll	r2,r18,r2
 800ab30:	2884b03a 	or	r2,r5,r2
 800ab34:	dfc00517 	ldw	ra,20(sp)
 800ab38:	dd000417 	ldw	r20,16(sp)
 800ab3c:	dcc00317 	ldw	r19,12(sp)
 800ab40:	dc800217 	ldw	r18,8(sp)
 800ab44:	dc400117 	ldw	r17,4(sp)
 800ab48:	dc000017 	ldw	r16,0(sp)
 800ab4c:	dec00604 	addi	sp,sp,24
 800ab50:	f800283a 	ret
 800ab54:	113ffd44 	addi	r4,r2,-11
 800ab58:	8cc00f2e 	bgeu	r17,r19,800ab98 <__b2d+0xe4>
 800ab5c:	81bffe04 	addi	r6,r16,-8
 800ab60:	817ffe17 	ldw	r5,-8(r16)
 800ab64:	20001326 	beq	r4,zero,800abb4 <__b2d+0x100>
 800ab68:	00c00ac4 	movi	r3,43
 800ab6c:	1885c83a 	sub	r2,r3,r2
 800ab70:	2886d83a 	srl	r3,r5,r2
 800ab74:	9124983a 	sll	r18,r18,r4
 800ab78:	90e4b03a 	or	r18,r18,r3
 800ab7c:	90cffc34 	orhi	r3,r18,16368
 800ab80:	8980112e 	bgeu	r17,r6,800abc8 <__b2d+0x114>
 800ab84:	81bffd17 	ldw	r6,-12(r16)
 800ab88:	308cd83a 	srl	r6,r6,r2
 800ab8c:	2904983a 	sll	r2,r5,r4
 800ab90:	1184b03a 	or	r2,r2,r6
 800ab94:	003fe706 	br	800ab34 <__alt_data_end+0xf800ab34>
 800ab98:	20000526 	beq	r4,zero,800abb0 <__b2d+0xfc>
 800ab9c:	9124983a 	sll	r18,r18,r4
 800aba0:	000d883a 	mov	r6,zero
 800aba4:	000b883a 	mov	r5,zero
 800aba8:	90cffc34 	orhi	r3,r18,16368
 800abac:	003ff706 	br	800ab8c <__alt_data_end+0xf800ab8c>
 800abb0:	000b883a 	mov	r5,zero
 800abb4:	90cffc34 	orhi	r3,r18,16368
 800abb8:	2805883a 	mov	r2,r5
 800abbc:	003fdd06 	br	800ab34 <__alt_data_end+0xf800ab34>
 800abc0:	000b883a 	mov	r5,zero
 800abc4:	003fd806 	br	800ab28 <__alt_data_end+0xf800ab28>
 800abc8:	000d883a 	mov	r6,zero
 800abcc:	003fef06 	br	800ab8c <__alt_data_end+0xf800ab8c>

0800abd0 <__d2b>:
 800abd0:	defff704 	addi	sp,sp,-36
 800abd4:	dc000215 	stw	r16,8(sp)
 800abd8:	3021883a 	mov	r16,r6
 800abdc:	dc400315 	stw	r17,12(sp)
 800abe0:	8022907a 	slli	r17,r16,1
 800abe4:	dd400715 	stw	r21,28(sp)
 800abe8:	282b883a 	mov	r21,r5
 800abec:	01400044 	movi	r5,1
 800abf0:	dd000615 	stw	r20,24(sp)
 800abf4:	dcc00515 	stw	r19,20(sp)
 800abf8:	dc800415 	stw	r18,16(sp)
 800abfc:	dfc00815 	stw	ra,32(sp)
 800ac00:	3829883a 	mov	r20,r7
 800ac04:	dc800917 	ldw	r18,36(sp)
 800ac08:	8822d57a 	srli	r17,r17,21
 800ac0c:	8009f9c0 	call	8009f9c <_Balloc>
 800ac10:	1027883a 	mov	r19,r2
 800ac14:	00800434 	movhi	r2,16
 800ac18:	10bfffc4 	addi	r2,r2,-1
 800ac1c:	808c703a 	and	r6,r16,r2
 800ac20:	88000126 	beq	r17,zero,800ac28 <__d2b+0x58>
 800ac24:	31800434 	orhi	r6,r6,16
 800ac28:	d9800015 	stw	r6,0(sp)
 800ac2c:	a8001f26 	beq	r21,zero,800acac <__d2b+0xdc>
 800ac30:	d9000104 	addi	r4,sp,4
 800ac34:	dd400115 	stw	r21,4(sp)
 800ac38:	800a2ec0 	call	800a2ec <__lo0bits>
 800ac3c:	d8c00017 	ldw	r3,0(sp)
 800ac40:	1000291e 	bne	r2,zero,800ace8 <__d2b+0x118>
 800ac44:	d9000117 	ldw	r4,4(sp)
 800ac48:	99000515 	stw	r4,20(r19)
 800ac4c:	1820c03a 	cmpne	r16,r3,zero
 800ac50:	84000044 	addi	r16,r16,1
 800ac54:	98c00615 	stw	r3,24(r19)
 800ac58:	9c000415 	stw	r16,16(r19)
 800ac5c:	88001b1e 	bne	r17,zero,800accc <__d2b+0xfc>
 800ac60:	800690ba 	slli	r3,r16,2
 800ac64:	10bef384 	addi	r2,r2,-1074
 800ac68:	a0800015 	stw	r2,0(r20)
 800ac6c:	98c5883a 	add	r2,r19,r3
 800ac70:	11000417 	ldw	r4,16(r2)
 800ac74:	8020917a 	slli	r16,r16,5
 800ac78:	800a2840 	call	800a284 <__hi0bits>
 800ac7c:	8085c83a 	sub	r2,r16,r2
 800ac80:	90800015 	stw	r2,0(r18)
 800ac84:	9805883a 	mov	r2,r19
 800ac88:	dfc00817 	ldw	ra,32(sp)
 800ac8c:	dd400717 	ldw	r21,28(sp)
 800ac90:	dd000617 	ldw	r20,24(sp)
 800ac94:	dcc00517 	ldw	r19,20(sp)
 800ac98:	dc800417 	ldw	r18,16(sp)
 800ac9c:	dc400317 	ldw	r17,12(sp)
 800aca0:	dc000217 	ldw	r16,8(sp)
 800aca4:	dec00904 	addi	sp,sp,36
 800aca8:	f800283a 	ret
 800acac:	d809883a 	mov	r4,sp
 800acb0:	800a2ec0 	call	800a2ec <__lo0bits>
 800acb4:	d8c00017 	ldw	r3,0(sp)
 800acb8:	04000044 	movi	r16,1
 800acbc:	9c000415 	stw	r16,16(r19)
 800acc0:	98c00515 	stw	r3,20(r19)
 800acc4:	10800804 	addi	r2,r2,32
 800acc8:	883fe526 	beq	r17,zero,800ac60 <__alt_data_end+0xf800ac60>
 800accc:	8c7ef344 	addi	r17,r17,-1075
 800acd0:	88a3883a 	add	r17,r17,r2
 800acd4:	00c00d44 	movi	r3,53
 800acd8:	a4400015 	stw	r17,0(r20)
 800acdc:	1885c83a 	sub	r2,r3,r2
 800ace0:	90800015 	stw	r2,0(r18)
 800ace4:	003fe706 	br	800ac84 <__alt_data_end+0xf800ac84>
 800ace8:	01000804 	movi	r4,32
 800acec:	2089c83a 	sub	r4,r4,r2
 800acf0:	1908983a 	sll	r4,r3,r4
 800acf4:	d9400117 	ldw	r5,4(sp)
 800acf8:	1886d83a 	srl	r3,r3,r2
 800acfc:	2148b03a 	or	r4,r4,r5
 800ad00:	99000515 	stw	r4,20(r19)
 800ad04:	d8c00015 	stw	r3,0(sp)
 800ad08:	003fd006 	br	800ac4c <__alt_data_end+0xf800ac4c>

0800ad0c <__ratio>:
 800ad0c:	defff904 	addi	sp,sp,-28
 800ad10:	dc400315 	stw	r17,12(sp)
 800ad14:	2823883a 	mov	r17,r5
 800ad18:	d9400104 	addi	r5,sp,4
 800ad1c:	dfc00615 	stw	ra,24(sp)
 800ad20:	dcc00515 	stw	r19,20(sp)
 800ad24:	dc800415 	stw	r18,16(sp)
 800ad28:	2027883a 	mov	r19,r4
 800ad2c:	dc000215 	stw	r16,8(sp)
 800ad30:	800aab40 	call	800aab4 <__b2d>
 800ad34:	8809883a 	mov	r4,r17
 800ad38:	d80b883a 	mov	r5,sp
 800ad3c:	1025883a 	mov	r18,r2
 800ad40:	1821883a 	mov	r16,r3
 800ad44:	800aab40 	call	800aab4 <__b2d>
 800ad48:	8a400417 	ldw	r9,16(r17)
 800ad4c:	9a000417 	ldw	r8,16(r19)
 800ad50:	100d883a 	mov	r6,r2
 800ad54:	d8800017 	ldw	r2,0(sp)
 800ad58:	4251c83a 	sub	r8,r8,r9
 800ad5c:	4012917a 	slli	r9,r8,5
 800ad60:	da000117 	ldw	r8,4(sp)
 800ad64:	4091c83a 	sub	r8,r8,r2
 800ad68:	4251883a 	add	r8,r8,r9
 800ad6c:	02000d0e 	bge	zero,r8,800ada4 <__ratio+0x98>
 800ad70:	4010953a 	slli	r8,r8,20
 800ad74:	4421883a 	add	r16,r8,r16
 800ad78:	9009883a 	mov	r4,r18
 800ad7c:	800b883a 	mov	r5,r16
 800ad80:	180f883a 	mov	r7,r3
 800ad84:	80164200 	call	8016420 <__divdf3>
 800ad88:	dfc00617 	ldw	ra,24(sp)
 800ad8c:	dcc00517 	ldw	r19,20(sp)
 800ad90:	dc800417 	ldw	r18,16(sp)
 800ad94:	dc400317 	ldw	r17,12(sp)
 800ad98:	dc000217 	ldw	r16,8(sp)
 800ad9c:	dec00704 	addi	sp,sp,28
 800ada0:	f800283a 	ret
 800ada4:	4010953a 	slli	r8,r8,20
 800ada8:	1a07c83a 	sub	r3,r3,r8
 800adac:	003ff206 	br	800ad78 <__alt_data_end+0xf800ad78>

0800adb0 <_mprec_log10>:
 800adb0:	defffe04 	addi	sp,sp,-8
 800adb4:	dc000015 	stw	r16,0(sp)
 800adb8:	dfc00115 	stw	ra,4(sp)
 800adbc:	008005c4 	movi	r2,23
 800adc0:	2021883a 	mov	r16,r4
 800adc4:	11000d0e 	bge	r2,r4,800adfc <_mprec_log10+0x4c>
 800adc8:	0005883a 	mov	r2,zero
 800adcc:	00cffc34 	movhi	r3,16368
 800add0:	843fffc4 	addi	r16,r16,-1
 800add4:	1009883a 	mov	r4,r2
 800add8:	180b883a 	mov	r5,r3
 800addc:	000d883a 	mov	r6,zero
 800ade0:	01d00934 	movhi	r7,16420
 800ade4:	8016f300 	call	8016f30 <__muldf3>
 800ade8:	803ff91e 	bne	r16,zero,800add0 <__alt_data_end+0xf800add0>
 800adec:	dfc00117 	ldw	ra,4(sp)
 800adf0:	dc000017 	ldw	r16,0(sp)
 800adf4:	dec00204 	addi	sp,sp,8
 800adf8:	f800283a 	ret
 800adfc:	202090fa 	slli	r16,r4,3
 800ae00:	008200b4 	movhi	r2,2050
 800ae04:	10b30104 	addi	r2,r2,-13308
 800ae08:	1421883a 	add	r16,r2,r16
 800ae0c:	80800017 	ldw	r2,0(r16)
 800ae10:	80c00117 	ldw	r3,4(r16)
 800ae14:	dfc00117 	ldw	ra,4(sp)
 800ae18:	dc000017 	ldw	r16,0(sp)
 800ae1c:	dec00204 	addi	sp,sp,8
 800ae20:	f800283a 	ret

0800ae24 <__copybits>:
 800ae24:	297fffc4 	addi	r5,r5,-1
 800ae28:	280fd17a 	srai	r7,r5,5
 800ae2c:	30c00417 	ldw	r3,16(r6)
 800ae30:	30800504 	addi	r2,r6,20
 800ae34:	39c00044 	addi	r7,r7,1
 800ae38:	18c7883a 	add	r3,r3,r3
 800ae3c:	39cf883a 	add	r7,r7,r7
 800ae40:	18c7883a 	add	r3,r3,r3
 800ae44:	39cf883a 	add	r7,r7,r7
 800ae48:	10c7883a 	add	r3,r2,r3
 800ae4c:	21cf883a 	add	r7,r4,r7
 800ae50:	10c00d2e 	bgeu	r2,r3,800ae88 <__copybits+0x64>
 800ae54:	200b883a 	mov	r5,r4
 800ae58:	12000017 	ldw	r8,0(r2)
 800ae5c:	29400104 	addi	r5,r5,4
 800ae60:	10800104 	addi	r2,r2,4
 800ae64:	2a3fff15 	stw	r8,-4(r5)
 800ae68:	10fffb36 	bltu	r2,r3,800ae58 <__alt_data_end+0xf800ae58>
 800ae6c:	1985c83a 	sub	r2,r3,r6
 800ae70:	10bffac4 	addi	r2,r2,-21
 800ae74:	1004d0ba 	srli	r2,r2,2
 800ae78:	10800044 	addi	r2,r2,1
 800ae7c:	1085883a 	add	r2,r2,r2
 800ae80:	1085883a 	add	r2,r2,r2
 800ae84:	2089883a 	add	r4,r4,r2
 800ae88:	21c0032e 	bgeu	r4,r7,800ae98 <__copybits+0x74>
 800ae8c:	20000015 	stw	zero,0(r4)
 800ae90:	21000104 	addi	r4,r4,4
 800ae94:	21fffd36 	bltu	r4,r7,800ae8c <__alt_data_end+0xf800ae8c>
 800ae98:	f800283a 	ret

0800ae9c <__any_on>:
 800ae9c:	20c00417 	ldw	r3,16(r4)
 800aea0:	2805d17a 	srai	r2,r5,5
 800aea4:	21000504 	addi	r4,r4,20
 800aea8:	18800d0e 	bge	r3,r2,800aee0 <__any_on+0x44>
 800aeac:	18c7883a 	add	r3,r3,r3
 800aeb0:	18c7883a 	add	r3,r3,r3
 800aeb4:	20c7883a 	add	r3,r4,r3
 800aeb8:	20c0192e 	bgeu	r4,r3,800af20 <__any_on+0x84>
 800aebc:	18bfff17 	ldw	r2,-4(r3)
 800aec0:	18ffff04 	addi	r3,r3,-4
 800aec4:	1000041e 	bne	r2,zero,800aed8 <__any_on+0x3c>
 800aec8:	20c0142e 	bgeu	r4,r3,800af1c <__any_on+0x80>
 800aecc:	18ffff04 	addi	r3,r3,-4
 800aed0:	19400017 	ldw	r5,0(r3)
 800aed4:	283ffc26 	beq	r5,zero,800aec8 <__alt_data_end+0xf800aec8>
 800aed8:	00800044 	movi	r2,1
 800aedc:	f800283a 	ret
 800aee0:	10c00a0e 	bge	r2,r3,800af0c <__any_on+0x70>
 800aee4:	1085883a 	add	r2,r2,r2
 800aee8:	1085883a 	add	r2,r2,r2
 800aeec:	294007cc 	andi	r5,r5,31
 800aef0:	2087883a 	add	r3,r4,r2
 800aef4:	283ff026 	beq	r5,zero,800aeb8 <__alt_data_end+0xf800aeb8>
 800aef8:	19800017 	ldw	r6,0(r3)
 800aefc:	3144d83a 	srl	r2,r6,r5
 800af00:	114a983a 	sll	r5,r2,r5
 800af04:	29bff41e 	bne	r5,r6,800aed8 <__alt_data_end+0xf800aed8>
 800af08:	003feb06 	br	800aeb8 <__alt_data_end+0xf800aeb8>
 800af0c:	1085883a 	add	r2,r2,r2
 800af10:	1085883a 	add	r2,r2,r2
 800af14:	2087883a 	add	r3,r4,r2
 800af18:	003fe706 	br	800aeb8 <__alt_data_end+0xf800aeb8>
 800af1c:	f800283a 	ret
 800af20:	0005883a 	mov	r2,zero
 800af24:	f800283a 	ret

0800af28 <_putc_r>:
 800af28:	defffc04 	addi	sp,sp,-16
 800af2c:	dc000215 	stw	r16,8(sp)
 800af30:	dfc00315 	stw	ra,12(sp)
 800af34:	2021883a 	mov	r16,r4
 800af38:	20000226 	beq	r4,zero,800af44 <_putc_r+0x1c>
 800af3c:	20800e17 	ldw	r2,56(r4)
 800af40:	10001b26 	beq	r2,zero,800afb0 <_putc_r+0x88>
 800af44:	30800217 	ldw	r2,8(r6)
 800af48:	10bfffc4 	addi	r2,r2,-1
 800af4c:	30800215 	stw	r2,8(r6)
 800af50:	10000a16 	blt	r2,zero,800af7c <_putc_r+0x54>
 800af54:	30800017 	ldw	r2,0(r6)
 800af58:	11400005 	stb	r5,0(r2)
 800af5c:	30800017 	ldw	r2,0(r6)
 800af60:	10c00044 	addi	r3,r2,1
 800af64:	30c00015 	stw	r3,0(r6)
 800af68:	10800003 	ldbu	r2,0(r2)
 800af6c:	dfc00317 	ldw	ra,12(sp)
 800af70:	dc000217 	ldw	r16,8(sp)
 800af74:	dec00404 	addi	sp,sp,16
 800af78:	f800283a 	ret
 800af7c:	30c00617 	ldw	r3,24(r6)
 800af80:	10c00616 	blt	r2,r3,800af9c <_putc_r+0x74>
 800af84:	30800017 	ldw	r2,0(r6)
 800af88:	00c00284 	movi	r3,10
 800af8c:	11400005 	stb	r5,0(r2)
 800af90:	30800017 	ldw	r2,0(r6)
 800af94:	11400003 	ldbu	r5,0(r2)
 800af98:	28fff11e 	bne	r5,r3,800af60 <__alt_data_end+0xf800af60>
 800af9c:	8009883a 	mov	r4,r16
 800afa0:	dfc00317 	ldw	ra,12(sp)
 800afa4:	dc000217 	ldw	r16,8(sp)
 800afa8:	dec00404 	addi	sp,sp,16
 800afac:	80126881 	jmpi	8012688 <__swbuf_r>
 800afb0:	d9400015 	stw	r5,0(sp)
 800afb4:	d9800115 	stw	r6,4(sp)
 800afb8:	8008c5c0 	call	8008c5c <__sinit>
 800afbc:	d9800117 	ldw	r6,4(sp)
 800afc0:	d9400017 	ldw	r5,0(sp)
 800afc4:	003fdf06 	br	800af44 <__alt_data_end+0xf800af44>

0800afc8 <putc>:
 800afc8:	defffc04 	addi	sp,sp,-16
 800afcc:	dc400115 	stw	r17,4(sp)
 800afd0:	044200b4 	movhi	r17,2050
 800afd4:	8c7ab604 	addi	r17,r17,-5416
 800afd8:	dc800215 	stw	r18,8(sp)
 800afdc:	2025883a 	mov	r18,r4
 800afe0:	89000017 	ldw	r4,0(r17)
 800afe4:	dc000015 	stw	r16,0(sp)
 800afe8:	dfc00315 	stw	ra,12(sp)
 800afec:	2821883a 	mov	r16,r5
 800aff0:	20000226 	beq	r4,zero,800affc <putc+0x34>
 800aff4:	20c00e17 	ldw	r3,56(r4)
 800aff8:	18001a26 	beq	r3,zero,800b064 <putc+0x9c>
 800affc:	80800217 	ldw	r2,8(r16)
 800b000:	10bfffc4 	addi	r2,r2,-1
 800b004:	80800215 	stw	r2,8(r16)
 800b008:	10000c16 	blt	r2,zero,800b03c <putc+0x74>
 800b00c:	80800017 	ldw	r2,0(r16)
 800b010:	14800005 	stb	r18,0(r2)
 800b014:	80800017 	ldw	r2,0(r16)
 800b018:	10c00044 	addi	r3,r2,1
 800b01c:	80c00015 	stw	r3,0(r16)
 800b020:	10800003 	ldbu	r2,0(r2)
 800b024:	dfc00317 	ldw	ra,12(sp)
 800b028:	dc800217 	ldw	r18,8(sp)
 800b02c:	dc400117 	ldw	r17,4(sp)
 800b030:	dc000017 	ldw	r16,0(sp)
 800b034:	dec00404 	addi	sp,sp,16
 800b038:	f800283a 	ret
 800b03c:	80c00617 	ldw	r3,24(r16)
 800b040:	10c00a16 	blt	r2,r3,800b06c <putc+0xa4>
 800b044:	80800017 	ldw	r2,0(r16)
 800b048:	00c00284 	movi	r3,10
 800b04c:	14800005 	stb	r18,0(r2)
 800b050:	80800017 	ldw	r2,0(r16)
 800b054:	11400003 	ldbu	r5,0(r2)
 800b058:	28ffef1e 	bne	r5,r3,800b018 <__alt_data_end+0xf800b018>
 800b05c:	89000017 	ldw	r4,0(r17)
 800b060:	00000406 	br	800b074 <putc+0xac>
 800b064:	8008c5c0 	call	8008c5c <__sinit>
 800b068:	003fe406 	br	800affc <__alt_data_end+0xf800affc>
 800b06c:	89000017 	ldw	r4,0(r17)
 800b070:	900b883a 	mov	r5,r18
 800b074:	800d883a 	mov	r6,r16
 800b078:	dfc00317 	ldw	ra,12(sp)
 800b07c:	dc800217 	ldw	r18,8(sp)
 800b080:	dc400117 	ldw	r17,4(sp)
 800b084:	dc000017 	ldw	r16,0(sp)
 800b088:	dec00404 	addi	sp,sp,16
 800b08c:	80126881 	jmpi	8012688 <__swbuf_r>

0800b090 <_read_r>:
 800b090:	defffd04 	addi	sp,sp,-12
 800b094:	dc000015 	stw	r16,0(sp)
 800b098:	040200b4 	movhi	r16,2050
 800b09c:	dc400115 	stw	r17,4(sp)
 800b0a0:	843ace04 	addi	r16,r16,-5320
 800b0a4:	2023883a 	mov	r17,r4
 800b0a8:	2809883a 	mov	r4,r5
 800b0ac:	300b883a 	mov	r5,r6
 800b0b0:	380d883a 	mov	r6,r7
 800b0b4:	dfc00215 	stw	ra,8(sp)
 800b0b8:	80000015 	stw	zero,0(r16)
 800b0bc:	80189b40 	call	80189b4 <read>
 800b0c0:	00ffffc4 	movi	r3,-1
 800b0c4:	10c00526 	beq	r2,r3,800b0dc <_read_r+0x4c>
 800b0c8:	dfc00217 	ldw	ra,8(sp)
 800b0cc:	dc400117 	ldw	r17,4(sp)
 800b0d0:	dc000017 	ldw	r16,0(sp)
 800b0d4:	dec00304 	addi	sp,sp,12
 800b0d8:	f800283a 	ret
 800b0dc:	80c00017 	ldw	r3,0(r16)
 800b0e0:	183ff926 	beq	r3,zero,800b0c8 <__alt_data_end+0xf800b0c8>
 800b0e4:	88c00015 	stw	r3,0(r17)
 800b0e8:	003ff706 	br	800b0c8 <__alt_data_end+0xf800b0c8>

0800b0ec <_realloc_r>:
 800b0ec:	defff604 	addi	sp,sp,-40
 800b0f0:	dcc00315 	stw	r19,12(sp)
 800b0f4:	dc400115 	stw	r17,4(sp)
 800b0f8:	dfc00915 	stw	ra,36(sp)
 800b0fc:	df000815 	stw	fp,32(sp)
 800b100:	ddc00715 	stw	r23,28(sp)
 800b104:	dd800615 	stw	r22,24(sp)
 800b108:	dd400515 	stw	r21,20(sp)
 800b10c:	dd000415 	stw	r20,16(sp)
 800b110:	dc800215 	stw	r18,8(sp)
 800b114:	dc000015 	stw	r16,0(sp)
 800b118:	2827883a 	mov	r19,r5
 800b11c:	3023883a 	mov	r17,r6
 800b120:	2800bf26 	beq	r5,zero,800b420 <_realloc_r+0x334>
 800b124:	2025883a 	mov	r18,r4
 800b128:	80189240 	call	8018924 <__malloc_lock>
 800b12c:	98ffff17 	ldw	r3,-4(r19)
 800b130:	01bfff04 	movi	r6,-4
 800b134:	890002c4 	addi	r4,r17,11
 800b138:	01c00584 	movi	r7,22
 800b13c:	9d7ffe04 	addi	r21,r19,-8
 800b140:	19a0703a 	and	r16,r3,r6
 800b144:	39003f2e 	bgeu	r7,r4,800b244 <_realloc_r+0x158>
 800b148:	053ffe04 	movi	r20,-8
 800b14c:	2528703a 	and	r20,r4,r20
 800b150:	a00f883a 	mov	r7,r20
 800b154:	a0008216 	blt	r20,zero,800b360 <_realloc_r+0x274>
 800b158:	a4408136 	bltu	r20,r17,800b360 <_realloc_r+0x274>
 800b15c:	81c03c0e 	bge	r16,r7,800b250 <_realloc_r+0x164>
 800b160:	070200b4 	movhi	fp,2050
 800b164:	e734cb04 	addi	fp,fp,-11476
 800b168:	e1000217 	ldw	r4,8(fp)
 800b16c:	ac05883a 	add	r2,r21,r16
 800b170:	2080bf26 	beq	r4,r2,800b470 <_realloc_r+0x384>
 800b174:	11000117 	ldw	r4,4(r2)
 800b178:	023fff84 	movi	r8,-2
 800b17c:	2210703a 	and	r8,r4,r8
 800b180:	1211883a 	add	r8,r2,r8
 800b184:	41400117 	ldw	r5,4(r8)
 800b188:	2940004c 	andi	r5,r5,1
 800b18c:	28004a1e 	bne	r5,zero,800b2b8 <_realloc_r+0x1cc>
 800b190:	017fff04 	movi	r5,-4
 800b194:	2148703a 	and	r4,r4,r5
 800b198:	2409883a 	add	r4,r4,r16
 800b19c:	21c0ad0e 	bge	r4,r7,800b454 <_realloc_r+0x368>
 800b1a0:	18c0004c 	andi	r3,r3,1
 800b1a4:	18007f1e 	bne	r3,zero,800b3a4 <_realloc_r+0x2b8>
 800b1a8:	9dfffe17 	ldw	r23,-8(r19)
 800b1ac:	adefc83a 	sub	r23,r21,r23
 800b1b0:	bd800117 	ldw	r22,4(r23)
 800b1b4:	b14a703a 	and	r5,r22,r5
 800b1b8:	216d883a 	add	r22,r4,r5
 800b1bc:	b1c04516 	blt	r22,r7,800b2d4 <_realloc_r+0x1e8>
 800b1c0:	10c00317 	ldw	r3,12(r2)
 800b1c4:	10800217 	ldw	r2,8(r2)
 800b1c8:	81bfff04 	addi	r6,r16,-4
 800b1cc:	bc400204 	addi	r17,r23,8
 800b1d0:	10c00315 	stw	r3,12(r2)
 800b1d4:	18800215 	stw	r2,8(r3)
 800b1d8:	b9400217 	ldw	r5,8(r23)
 800b1dc:	b8c00317 	ldw	r3,12(r23)
 800b1e0:	00800904 	movi	r2,36
 800b1e4:	28c00315 	stw	r3,12(r5)
 800b1e8:	19400215 	stw	r5,8(r3)
 800b1ec:	1180ef36 	bltu	r2,r6,800b5ac <_realloc_r+0x4c0>
 800b1f0:	008004c4 	movi	r2,19
 800b1f4:	1180da2e 	bgeu	r2,r6,800b560 <_realloc_r+0x474>
 800b1f8:	98800017 	ldw	r2,0(r19)
 800b1fc:	b8800215 	stw	r2,8(r23)
 800b200:	98800117 	ldw	r2,4(r19)
 800b204:	b8800315 	stw	r2,12(r23)
 800b208:	008006c4 	movi	r2,27
 800b20c:	1180fc2e 	bgeu	r2,r6,800b600 <_realloc_r+0x514>
 800b210:	98800217 	ldw	r2,8(r19)
 800b214:	b8800415 	stw	r2,16(r23)
 800b218:	98800317 	ldw	r2,12(r19)
 800b21c:	b8800515 	stw	r2,20(r23)
 800b220:	00800904 	movi	r2,36
 800b224:	3080421e 	bne	r6,r2,800b330 <_realloc_r+0x244>
 800b228:	98800417 	ldw	r2,16(r19)
 800b22c:	9cc00604 	addi	r19,r19,24
 800b230:	b8c00804 	addi	r3,r23,32
 800b234:	b8800615 	stw	r2,24(r23)
 800b238:	98bfff17 	ldw	r2,-4(r19)
 800b23c:	b8800715 	stw	r2,28(r23)
 800b240:	00003d06 	br	800b338 <_realloc_r+0x24c>
 800b244:	01c00404 	movi	r7,16
 800b248:	3829883a 	mov	r20,r7
 800b24c:	003fc206 	br	800b158 <__alt_data_end+0xf800b158>
 800b250:	9823883a 	mov	r17,r19
 800b254:	850fc83a 	sub	r7,r16,r20
 800b258:	008003c4 	movi	r2,15
 800b25c:	18c0004c 	andi	r3,r3,1
 800b260:	11c04336 	bltu	r2,r7,800b370 <_realloc_r+0x284>
 800b264:	1c06b03a 	or	r3,r3,r16
 800b268:	a8c00115 	stw	r3,4(r21)
 800b26c:	ac21883a 	add	r16,r21,r16
 800b270:	80c00117 	ldw	r3,4(r16)
 800b274:	18c00054 	ori	r3,r3,1
 800b278:	80c00115 	stw	r3,4(r16)
 800b27c:	9009883a 	mov	r4,r18
 800b280:	80189440 	call	8018944 <__malloc_unlock>
 800b284:	8805883a 	mov	r2,r17
 800b288:	dfc00917 	ldw	ra,36(sp)
 800b28c:	df000817 	ldw	fp,32(sp)
 800b290:	ddc00717 	ldw	r23,28(sp)
 800b294:	dd800617 	ldw	r22,24(sp)
 800b298:	dd400517 	ldw	r21,20(sp)
 800b29c:	dd000417 	ldw	r20,16(sp)
 800b2a0:	dcc00317 	ldw	r19,12(sp)
 800b2a4:	dc800217 	ldw	r18,8(sp)
 800b2a8:	dc400117 	ldw	r17,4(sp)
 800b2ac:	dc000017 	ldw	r16,0(sp)
 800b2b0:	dec00a04 	addi	sp,sp,40
 800b2b4:	f800283a 	ret
 800b2b8:	18c0004c 	andi	r3,r3,1
 800b2bc:	1800391e 	bne	r3,zero,800b3a4 <_realloc_r+0x2b8>
 800b2c0:	9dfffe17 	ldw	r23,-8(r19)
 800b2c4:	00bfff04 	movi	r2,-4
 800b2c8:	adefc83a 	sub	r23,r21,r23
 800b2cc:	b9400117 	ldw	r5,4(r23)
 800b2d0:	288a703a 	and	r5,r5,r2
 800b2d4:	2c2d883a 	add	r22,r5,r16
 800b2d8:	b1c03216 	blt	r22,r7,800b3a4 <_realloc_r+0x2b8>
 800b2dc:	b8800317 	ldw	r2,12(r23)
 800b2e0:	b8c00217 	ldw	r3,8(r23)
 800b2e4:	81bfff04 	addi	r6,r16,-4
 800b2e8:	01000904 	movi	r4,36
 800b2ec:	18800315 	stw	r2,12(r3)
 800b2f0:	10c00215 	stw	r3,8(r2)
 800b2f4:	bc400204 	addi	r17,r23,8
 800b2f8:	2180ac36 	bltu	r4,r6,800b5ac <_realloc_r+0x4c0>
 800b2fc:	008004c4 	movi	r2,19
 800b300:	1180972e 	bgeu	r2,r6,800b560 <_realloc_r+0x474>
 800b304:	98800017 	ldw	r2,0(r19)
 800b308:	b8800215 	stw	r2,8(r23)
 800b30c:	98800117 	ldw	r2,4(r19)
 800b310:	b8800315 	stw	r2,12(r23)
 800b314:	008006c4 	movi	r2,27
 800b318:	1180b92e 	bgeu	r2,r6,800b600 <_realloc_r+0x514>
 800b31c:	98800217 	ldw	r2,8(r19)
 800b320:	b8800415 	stw	r2,16(r23)
 800b324:	98800317 	ldw	r2,12(r19)
 800b328:	b8800515 	stw	r2,20(r23)
 800b32c:	313fbe26 	beq	r6,r4,800b228 <__alt_data_end+0xf800b228>
 800b330:	b8c00604 	addi	r3,r23,24
 800b334:	9cc00404 	addi	r19,r19,16
 800b338:	98800017 	ldw	r2,0(r19)
 800b33c:	b021883a 	mov	r16,r22
 800b340:	b82b883a 	mov	r21,r23
 800b344:	18800015 	stw	r2,0(r3)
 800b348:	98800117 	ldw	r2,4(r19)
 800b34c:	18800115 	stw	r2,4(r3)
 800b350:	98800217 	ldw	r2,8(r19)
 800b354:	18800215 	stw	r2,8(r3)
 800b358:	b8c00117 	ldw	r3,4(r23)
 800b35c:	003fbd06 	br	800b254 <__alt_data_end+0xf800b254>
 800b360:	00800304 	movi	r2,12
 800b364:	90800015 	stw	r2,0(r18)
 800b368:	0005883a 	mov	r2,zero
 800b36c:	003fc606 	br	800b288 <__alt_data_end+0xf800b288>
 800b370:	1d06b03a 	or	r3,r3,r20
 800b374:	ad0b883a 	add	r5,r21,r20
 800b378:	a8c00115 	stw	r3,4(r21)
 800b37c:	38800054 	ori	r2,r7,1
 800b380:	28800115 	stw	r2,4(r5)
 800b384:	29cf883a 	add	r7,r5,r7
 800b388:	38800117 	ldw	r2,4(r7)
 800b38c:	9009883a 	mov	r4,r18
 800b390:	29400204 	addi	r5,r5,8
 800b394:	10800054 	ori	r2,r2,1
 800b398:	38800115 	stw	r2,4(r7)
 800b39c:	8008dd00 	call	8008dd0 <_free_r>
 800b3a0:	003fb606 	br	800b27c <__alt_data_end+0xf800b27c>
 800b3a4:	880b883a 	mov	r5,r17
 800b3a8:	9009883a 	mov	r4,r18
 800b3ac:	80025d00 	call	80025d0 <_malloc_r>
 800b3b0:	1023883a 	mov	r17,r2
 800b3b4:	1000aa26 	beq	r2,zero,800b660 <_realloc_r+0x574>
 800b3b8:	98ffff17 	ldw	r3,-4(r19)
 800b3bc:	113ffe04 	addi	r4,r2,-8
 800b3c0:	00bfff84 	movi	r2,-2
 800b3c4:	1884703a 	and	r2,r3,r2
 800b3c8:	a885883a 	add	r2,r21,r2
 800b3cc:	20808626 	beq	r4,r2,800b5e8 <_realloc_r+0x4fc>
 800b3d0:	81bfff04 	addi	r6,r16,-4
 800b3d4:	00800904 	movi	r2,36
 800b3d8:	11807036 	bltu	r2,r6,800b59c <_realloc_r+0x4b0>
 800b3dc:	00c004c4 	movi	r3,19
 800b3e0:	19805636 	bltu	r3,r6,800b53c <_realloc_r+0x450>
 800b3e4:	8805883a 	mov	r2,r17
 800b3e8:	9807883a 	mov	r3,r19
 800b3ec:	19000017 	ldw	r4,0(r3)
 800b3f0:	11000015 	stw	r4,0(r2)
 800b3f4:	19000117 	ldw	r4,4(r3)
 800b3f8:	11000115 	stw	r4,4(r2)
 800b3fc:	18c00217 	ldw	r3,8(r3)
 800b400:	10c00215 	stw	r3,8(r2)
 800b404:	980b883a 	mov	r5,r19
 800b408:	9009883a 	mov	r4,r18
 800b40c:	8008dd00 	call	8008dd0 <_free_r>
 800b410:	9009883a 	mov	r4,r18
 800b414:	80189440 	call	8018944 <__malloc_unlock>
 800b418:	8805883a 	mov	r2,r17
 800b41c:	003f9a06 	br	800b288 <__alt_data_end+0xf800b288>
 800b420:	300b883a 	mov	r5,r6
 800b424:	dfc00917 	ldw	ra,36(sp)
 800b428:	df000817 	ldw	fp,32(sp)
 800b42c:	ddc00717 	ldw	r23,28(sp)
 800b430:	dd800617 	ldw	r22,24(sp)
 800b434:	dd400517 	ldw	r21,20(sp)
 800b438:	dd000417 	ldw	r20,16(sp)
 800b43c:	dcc00317 	ldw	r19,12(sp)
 800b440:	dc800217 	ldw	r18,8(sp)
 800b444:	dc400117 	ldw	r17,4(sp)
 800b448:	dc000017 	ldw	r16,0(sp)
 800b44c:	dec00a04 	addi	sp,sp,40
 800b450:	80025d01 	jmpi	80025d0 <_malloc_r>
 800b454:	11400317 	ldw	r5,12(r2)
 800b458:	10800217 	ldw	r2,8(r2)
 800b45c:	9823883a 	mov	r17,r19
 800b460:	2021883a 	mov	r16,r4
 800b464:	11400315 	stw	r5,12(r2)
 800b468:	28800215 	stw	r2,8(r5)
 800b46c:	003f7906 	br	800b254 <__alt_data_end+0xf800b254>
 800b470:	21000117 	ldw	r4,4(r4)
 800b474:	00bfff04 	movi	r2,-4
 800b478:	a1800404 	addi	r6,r20,16
 800b47c:	2088703a 	and	r4,r4,r2
 800b480:	2409883a 	add	r4,r4,r16
 800b484:	2180380e 	bge	r4,r6,800b568 <_realloc_r+0x47c>
 800b488:	18c0004c 	andi	r3,r3,1
 800b48c:	183fc51e 	bne	r3,zero,800b3a4 <__alt_data_end+0xf800b3a4>
 800b490:	9dfffe17 	ldw	r23,-8(r19)
 800b494:	adefc83a 	sub	r23,r21,r23
 800b498:	b9400117 	ldw	r5,4(r23)
 800b49c:	288a703a 	and	r5,r5,r2
 800b4a0:	216d883a 	add	r22,r4,r5
 800b4a4:	b1bf8b16 	blt	r22,r6,800b2d4 <__alt_data_end+0xf800b2d4>
 800b4a8:	b8800317 	ldw	r2,12(r23)
 800b4ac:	b8c00217 	ldw	r3,8(r23)
 800b4b0:	81bfff04 	addi	r6,r16,-4
 800b4b4:	01000904 	movi	r4,36
 800b4b8:	18800315 	stw	r2,12(r3)
 800b4bc:	10c00215 	stw	r3,8(r2)
 800b4c0:	bc400204 	addi	r17,r23,8
 800b4c4:	21805a36 	bltu	r4,r6,800b630 <_realloc_r+0x544>
 800b4c8:	008004c4 	movi	r2,19
 800b4cc:	1180562e 	bgeu	r2,r6,800b628 <_realloc_r+0x53c>
 800b4d0:	98800017 	ldw	r2,0(r19)
 800b4d4:	b8800215 	stw	r2,8(r23)
 800b4d8:	98800117 	ldw	r2,4(r19)
 800b4dc:	b8800315 	stw	r2,12(r23)
 800b4e0:	008006c4 	movi	r2,27
 800b4e4:	11805636 	bltu	r2,r6,800b640 <_realloc_r+0x554>
 800b4e8:	b8800404 	addi	r2,r23,16
 800b4ec:	9cc00204 	addi	r19,r19,8
 800b4f0:	98c00017 	ldw	r3,0(r19)
 800b4f4:	10c00015 	stw	r3,0(r2)
 800b4f8:	98c00117 	ldw	r3,4(r19)
 800b4fc:	10c00115 	stw	r3,4(r2)
 800b500:	98c00217 	ldw	r3,8(r19)
 800b504:	10c00215 	stw	r3,8(r2)
 800b508:	bd07883a 	add	r3,r23,r20
 800b50c:	b505c83a 	sub	r2,r22,r20
 800b510:	e0c00215 	stw	r3,8(fp)
 800b514:	10800054 	ori	r2,r2,1
 800b518:	18800115 	stw	r2,4(r3)
 800b51c:	b8800117 	ldw	r2,4(r23)
 800b520:	9009883a 	mov	r4,r18
 800b524:	1080004c 	andi	r2,r2,1
 800b528:	a0a8b03a 	or	r20,r20,r2
 800b52c:	bd000115 	stw	r20,4(r23)
 800b530:	80189440 	call	8018944 <__malloc_unlock>
 800b534:	8805883a 	mov	r2,r17
 800b538:	003f5306 	br	800b288 <__alt_data_end+0xf800b288>
 800b53c:	98c00017 	ldw	r3,0(r19)
 800b540:	88c00015 	stw	r3,0(r17)
 800b544:	98c00117 	ldw	r3,4(r19)
 800b548:	88c00115 	stw	r3,4(r17)
 800b54c:	00c006c4 	movi	r3,27
 800b550:	19801d36 	bltu	r3,r6,800b5c8 <_realloc_r+0x4dc>
 800b554:	88800204 	addi	r2,r17,8
 800b558:	98c00204 	addi	r3,r19,8
 800b55c:	003fa306 	br	800b3ec <__alt_data_end+0xf800b3ec>
 800b560:	8807883a 	mov	r3,r17
 800b564:	003f7406 	br	800b338 <__alt_data_end+0xf800b338>
 800b568:	ad2b883a 	add	r21,r21,r20
 800b56c:	2505c83a 	sub	r2,r4,r20
 800b570:	e5400215 	stw	r21,8(fp)
 800b574:	10800054 	ori	r2,r2,1
 800b578:	a8800115 	stw	r2,4(r21)
 800b57c:	98bfff17 	ldw	r2,-4(r19)
 800b580:	9009883a 	mov	r4,r18
 800b584:	1080004c 	andi	r2,r2,1
 800b588:	a0a8b03a 	or	r20,r20,r2
 800b58c:	9d3fff15 	stw	r20,-4(r19)
 800b590:	80189440 	call	8018944 <__malloc_unlock>
 800b594:	9805883a 	mov	r2,r19
 800b598:	003f3b06 	br	800b288 <__alt_data_end+0xf800b288>
 800b59c:	8809883a 	mov	r4,r17
 800b5a0:	980b883a 	mov	r5,r19
 800b5a4:	8009d1c0 	call	8009d1c <memmove>
 800b5a8:	003f9606 	br	800b404 <__alt_data_end+0xf800b404>
 800b5ac:	8809883a 	mov	r4,r17
 800b5b0:	980b883a 	mov	r5,r19
 800b5b4:	8009d1c0 	call	8009d1c <memmove>
 800b5b8:	b8c00117 	ldw	r3,4(r23)
 800b5bc:	b021883a 	mov	r16,r22
 800b5c0:	b82b883a 	mov	r21,r23
 800b5c4:	003f2306 	br	800b254 <__alt_data_end+0xf800b254>
 800b5c8:	98c00217 	ldw	r3,8(r19)
 800b5cc:	88c00215 	stw	r3,8(r17)
 800b5d0:	98c00317 	ldw	r3,12(r19)
 800b5d4:	88c00315 	stw	r3,12(r17)
 800b5d8:	30800c26 	beq	r6,r2,800b60c <_realloc_r+0x520>
 800b5dc:	88800404 	addi	r2,r17,16
 800b5e0:	98c00404 	addi	r3,r19,16
 800b5e4:	003f8106 	br	800b3ec <__alt_data_end+0xf800b3ec>
 800b5e8:	893fff17 	ldw	r4,-4(r17)
 800b5ec:	00bfff04 	movi	r2,-4
 800b5f0:	9823883a 	mov	r17,r19
 800b5f4:	2084703a 	and	r2,r4,r2
 800b5f8:	80a1883a 	add	r16,r16,r2
 800b5fc:	003f1506 	br	800b254 <__alt_data_end+0xf800b254>
 800b600:	b8c00404 	addi	r3,r23,16
 800b604:	9cc00204 	addi	r19,r19,8
 800b608:	003f4b06 	br	800b338 <__alt_data_end+0xf800b338>
 800b60c:	99000417 	ldw	r4,16(r19)
 800b610:	88800604 	addi	r2,r17,24
 800b614:	98c00604 	addi	r3,r19,24
 800b618:	89000415 	stw	r4,16(r17)
 800b61c:	99000517 	ldw	r4,20(r19)
 800b620:	89000515 	stw	r4,20(r17)
 800b624:	003f7106 	br	800b3ec <__alt_data_end+0xf800b3ec>
 800b628:	8805883a 	mov	r2,r17
 800b62c:	003fb006 	br	800b4f0 <__alt_data_end+0xf800b4f0>
 800b630:	8809883a 	mov	r4,r17
 800b634:	980b883a 	mov	r5,r19
 800b638:	8009d1c0 	call	8009d1c <memmove>
 800b63c:	003fb206 	br	800b508 <__alt_data_end+0xf800b508>
 800b640:	98800217 	ldw	r2,8(r19)
 800b644:	b8800415 	stw	r2,16(r23)
 800b648:	98800317 	ldw	r2,12(r19)
 800b64c:	b8800515 	stw	r2,20(r23)
 800b650:	31000726 	beq	r6,r4,800b670 <_realloc_r+0x584>
 800b654:	b8800604 	addi	r2,r23,24
 800b658:	9cc00404 	addi	r19,r19,16
 800b65c:	003fa406 	br	800b4f0 <__alt_data_end+0xf800b4f0>
 800b660:	9009883a 	mov	r4,r18
 800b664:	80189440 	call	8018944 <__malloc_unlock>
 800b668:	0005883a 	mov	r2,zero
 800b66c:	003f0606 	br	800b288 <__alt_data_end+0xf800b288>
 800b670:	98c00417 	ldw	r3,16(r19)
 800b674:	9cc00604 	addi	r19,r19,24
 800b678:	b8800804 	addi	r2,r23,32
 800b67c:	b8c00615 	stw	r3,24(r23)
 800b680:	98ffff17 	ldw	r3,-4(r19)
 800b684:	b8c00715 	stw	r3,28(r23)
 800b688:	003f9906 	br	800b4f0 <__alt_data_end+0xf800b4f0>

0800b68c <lflush>:
 800b68c:	2080030b 	ldhu	r2,12(r4)
 800b690:	00c00244 	movi	r3,9
 800b694:	1080024c 	andi	r2,r2,9
 800b698:	10c00226 	beq	r2,r3,800b6a4 <lflush+0x18>
 800b69c:	0005883a 	mov	r2,zero
 800b6a0:	f800283a 	ret
 800b6a4:	80088dc1 	jmpi	80088dc <fflush>

0800b6a8 <__srefill_r>:
 800b6a8:	defffd04 	addi	sp,sp,-12
 800b6ac:	dc400115 	stw	r17,4(sp)
 800b6b0:	dc000015 	stw	r16,0(sp)
 800b6b4:	dfc00215 	stw	ra,8(sp)
 800b6b8:	2023883a 	mov	r17,r4
 800b6bc:	2821883a 	mov	r16,r5
 800b6c0:	20000226 	beq	r4,zero,800b6cc <__srefill_r+0x24>
 800b6c4:	20800e17 	ldw	r2,56(r4)
 800b6c8:	10003b26 	beq	r2,zero,800b7b8 <__srefill_r+0x110>
 800b6cc:	80c0030b 	ldhu	r3,12(r16)
 800b6d0:	1908000c 	andi	r4,r3,8192
 800b6d4:	1805883a 	mov	r2,r3
 800b6d8:	2000071e 	bne	r4,zero,800b6f8 <__srefill_r+0x50>
 800b6dc:	81001917 	ldw	r4,100(r16)
 800b6e0:	18880014 	ori	r2,r3,8192
 800b6e4:	00f7ffc4 	movi	r3,-8193
 800b6e8:	20c8703a 	and	r4,r4,r3
 800b6ec:	8080030d 	sth	r2,12(r16)
 800b6f0:	1007883a 	mov	r3,r2
 800b6f4:	81001915 	stw	r4,100(r16)
 800b6f8:	80000115 	stw	zero,4(r16)
 800b6fc:	1100080c 	andi	r4,r2,32
 800b700:	20004d1e 	bne	r4,zero,800b838 <__srefill_r+0x190>
 800b704:	1100010c 	andi	r4,r2,4
 800b708:	20001e26 	beq	r4,zero,800b784 <__srefill_r+0xdc>
 800b70c:	81400c17 	ldw	r5,48(r16)
 800b710:	28000826 	beq	r5,zero,800b734 <__srefill_r+0x8c>
 800b714:	80801004 	addi	r2,r16,64
 800b718:	28800226 	beq	r5,r2,800b724 <__srefill_r+0x7c>
 800b71c:	8809883a 	mov	r4,r17
 800b720:	8008dd00 	call	8008dd0 <_free_r>
 800b724:	80800f17 	ldw	r2,60(r16)
 800b728:	80000c15 	stw	zero,48(r16)
 800b72c:	80800115 	stw	r2,4(r16)
 800b730:	10002f1e 	bne	r2,zero,800b7f0 <__srefill_r+0x148>
 800b734:	80800417 	ldw	r2,16(r16)
 800b738:	10004126 	beq	r2,zero,800b840 <__srefill_r+0x198>
 800b73c:	8080030b 	ldhu	r2,12(r16)
 800b740:	108000cc 	andi	r2,r2,3
 800b744:	10001e1e 	bne	r2,zero,800b7c0 <__srefill_r+0x118>
 800b748:	81800417 	ldw	r6,16(r16)
 800b74c:	80800817 	ldw	r2,32(r16)
 800b750:	81400717 	ldw	r5,28(r16)
 800b754:	81c00517 	ldw	r7,20(r16)
 800b758:	81800015 	stw	r6,0(r16)
 800b75c:	8809883a 	mov	r4,r17
 800b760:	103ee83a 	callr	r2
 800b764:	80800115 	stw	r2,4(r16)
 800b768:	00800d0e 	bge	zero,r2,800b7a0 <__srefill_r+0xf8>
 800b76c:	0005883a 	mov	r2,zero
 800b770:	dfc00217 	ldw	ra,8(sp)
 800b774:	dc400117 	ldw	r17,4(sp)
 800b778:	dc000017 	ldw	r16,0(sp)
 800b77c:	dec00304 	addi	sp,sp,12
 800b780:	f800283a 	ret
 800b784:	1100040c 	andi	r4,r2,16
 800b788:	20002726 	beq	r4,zero,800b828 <__srefill_r+0x180>
 800b78c:	1080020c 	andi	r2,r2,8
 800b790:	10001b1e 	bne	r2,zero,800b800 <__srefill_r+0x158>
 800b794:	18c00114 	ori	r3,r3,4
 800b798:	80c0030d 	sth	r3,12(r16)
 800b79c:	003fe506 	br	800b734 <__alt_data_end+0xf800b734>
 800b7a0:	80c0030b 	ldhu	r3,12(r16)
 800b7a4:	10000d1e 	bne	r2,zero,800b7dc <__srefill_r+0x134>
 800b7a8:	18c00814 	ori	r3,r3,32
 800b7ac:	00bfffc4 	movi	r2,-1
 800b7b0:	80c0030d 	sth	r3,12(r16)
 800b7b4:	003fee06 	br	800b770 <__alt_data_end+0xf800b770>
 800b7b8:	8008c5c0 	call	8008c5c <__sinit>
 800b7bc:	003fc306 	br	800b6cc <__alt_data_end+0xf800b6cc>
 800b7c0:	008200b4 	movhi	r2,2050
 800b7c4:	10bab504 	addi	r2,r2,-5420
 800b7c8:	11000017 	ldw	r4,0(r2)
 800b7cc:	01420074 	movhi	r5,2049
 800b7d0:	296da304 	addi	r5,r5,-18804
 800b7d4:	80095640 	call	8009564 <_fwalk>
 800b7d8:	003fdb06 	br	800b748 <__alt_data_end+0xf800b748>
 800b7dc:	18c01014 	ori	r3,r3,64
 800b7e0:	80000115 	stw	zero,4(r16)
 800b7e4:	00bfffc4 	movi	r2,-1
 800b7e8:	80c0030d 	sth	r3,12(r16)
 800b7ec:	003fe006 	br	800b770 <__alt_data_end+0xf800b770>
 800b7f0:	80c00e17 	ldw	r3,56(r16)
 800b7f4:	0005883a 	mov	r2,zero
 800b7f8:	80c00015 	stw	r3,0(r16)
 800b7fc:	003fdc06 	br	800b770 <__alt_data_end+0xf800b770>
 800b800:	8809883a 	mov	r4,r17
 800b804:	800b883a 	mov	r5,r16
 800b808:	80086b40 	call	80086b4 <_fflush_r>
 800b80c:	10000a1e 	bne	r2,zero,800b838 <__srefill_r+0x190>
 800b810:	8080030b 	ldhu	r2,12(r16)
 800b814:	00fffdc4 	movi	r3,-9
 800b818:	80000215 	stw	zero,8(r16)
 800b81c:	1886703a 	and	r3,r3,r2
 800b820:	80000615 	stw	zero,24(r16)
 800b824:	003fdb06 	br	800b794 <__alt_data_end+0xf800b794>
 800b828:	00800244 	movi	r2,9
 800b82c:	88800015 	stw	r2,0(r17)
 800b830:	18c01014 	ori	r3,r3,64
 800b834:	80c0030d 	sth	r3,12(r16)
 800b838:	00bfffc4 	movi	r2,-1
 800b83c:	003fcc06 	br	800b770 <__alt_data_end+0xf800b770>
 800b840:	8809883a 	mov	r4,r17
 800b844:	800b883a 	mov	r5,r16
 800b848:	80098400 	call	8009840 <__smakebuf_r>
 800b84c:	003fbb06 	br	800b73c <__alt_data_end+0xf800b73c>

0800b850 <__fpclassifyd>:
 800b850:	00a00034 	movhi	r2,32768
 800b854:	10bfffc4 	addi	r2,r2,-1
 800b858:	2884703a 	and	r2,r5,r2
 800b85c:	10000726 	beq	r2,zero,800b87c <__fpclassifyd+0x2c>
 800b860:	00fffc34 	movhi	r3,65520
 800b864:	019ff834 	movhi	r6,32736
 800b868:	28c7883a 	add	r3,r5,r3
 800b86c:	31bfffc4 	addi	r6,r6,-1
 800b870:	30c00536 	bltu	r6,r3,800b888 <__fpclassifyd+0x38>
 800b874:	00800104 	movi	r2,4
 800b878:	f800283a 	ret
 800b87c:	2000021e 	bne	r4,zero,800b888 <__fpclassifyd+0x38>
 800b880:	00800084 	movi	r2,2
 800b884:	f800283a 	ret
 800b888:	00dffc34 	movhi	r3,32752
 800b88c:	019ff834 	movhi	r6,32736
 800b890:	28cb883a 	add	r5,r5,r3
 800b894:	31bfffc4 	addi	r6,r6,-1
 800b898:	317ff62e 	bgeu	r6,r5,800b874 <__alt_data_end+0xf800b874>
 800b89c:	01400434 	movhi	r5,16
 800b8a0:	297fffc4 	addi	r5,r5,-1
 800b8a4:	28800236 	bltu	r5,r2,800b8b0 <__fpclassifyd+0x60>
 800b8a8:	008000c4 	movi	r2,3
 800b8ac:	f800283a 	ret
 800b8b0:	10c00226 	beq	r2,r3,800b8bc <__fpclassifyd+0x6c>
 800b8b4:	0005883a 	mov	r2,zero
 800b8b8:	f800283a 	ret
 800b8bc:	2005003a 	cmpeq	r2,r4,zero
 800b8c0:	f800283a 	ret

0800b8c4 <__sccl>:
 800b8c4:	2a000003 	ldbu	r8,0(r5)
 800b8c8:	00801784 	movi	r2,94
 800b8cc:	40802526 	beq	r8,r2,800b964 <__sccl+0xa0>
 800b8d0:	29400044 	addi	r5,r5,1
 800b8d4:	000f883a 	mov	r7,zero
 800b8d8:	0013883a 	mov	r9,zero
 800b8dc:	2007883a 	mov	r3,r4
 800b8e0:	21804004 	addi	r6,r4,256
 800b8e4:	19c00005 	stb	r7,0(r3)
 800b8e8:	18c00044 	addi	r3,r3,1
 800b8ec:	19bffd1e 	bne	r3,r6,800b8e4 <__alt_data_end+0xf800b8e4>
 800b8f0:	40001026 	beq	r8,zero,800b934 <__sccl+0x70>
 800b8f4:	00800044 	movi	r2,1
 800b8f8:	124dc83a 	sub	r6,r2,r9
 800b8fc:	02801744 	movi	r10,93
 800b900:	02400b44 	movi	r9,45
 800b904:	2205883a 	add	r2,r4,r8
 800b908:	11800005 	stb	r6,0(r2)
 800b90c:	28800044 	addi	r2,r5,1
 800b910:	28c00003 	ldbu	r3,0(r5)
 800b914:	1a400926 	beq	r3,r9,800b93c <__sccl+0x78>
 800b918:	1a800526 	beq	r3,r10,800b930 <__sccl+0x6c>
 800b91c:	18000326 	beq	r3,zero,800b92c <__sccl+0x68>
 800b920:	1811883a 	mov	r8,r3
 800b924:	100b883a 	mov	r5,r2
 800b928:	003ff606 	br	800b904 <__alt_data_end+0xf800b904>
 800b92c:	2805883a 	mov	r2,r5
 800b930:	f800283a 	ret
 800b934:	28bfffc4 	addi	r2,r5,-1
 800b938:	f800283a 	ret
 800b93c:	11c00003 	ldbu	r7,0(r2)
 800b940:	3a800d26 	beq	r7,r10,800b978 <__sccl+0xb4>
 800b944:	3a000c16 	blt	r7,r8,800b978 <__sccl+0xb4>
 800b948:	29400084 	addi	r5,r5,2
 800b94c:	42000044 	addi	r8,r8,1
 800b950:	2207883a 	add	r3,r4,r8
 800b954:	19800005 	stb	r6,0(r3)
 800b958:	41fffc16 	blt	r8,r7,800b94c <__alt_data_end+0xf800b94c>
 800b95c:	10800084 	addi	r2,r2,2
 800b960:	003feb06 	br	800b910 <__alt_data_end+0xf800b910>
 800b964:	2a000043 	ldbu	r8,1(r5)
 800b968:	01c00044 	movi	r7,1
 800b96c:	29400084 	addi	r5,r5,2
 800b970:	02400044 	movi	r9,1
 800b974:	003fd906 	br	800b8dc <__alt_data_end+0xf800b8dc>
 800b978:	100b883a 	mov	r5,r2
 800b97c:	4811883a 	mov	r8,r9
 800b980:	003fe006 	br	800b904 <__alt_data_end+0xf800b904>

0800b984 <nanf>:
 800b984:	009ff034 	movhi	r2,32704
 800b988:	f800283a 	ret

0800b98c <_sprintf_r>:
 800b98c:	deffe404 	addi	sp,sp,-112
 800b990:	2807883a 	mov	r3,r5
 800b994:	dfc01a15 	stw	ra,104(sp)
 800b998:	d9c01b15 	stw	r7,108(sp)
 800b99c:	00a00034 	movhi	r2,32768
 800b9a0:	10bfffc4 	addi	r2,r2,-1
 800b9a4:	02008204 	movi	r8,520
 800b9a8:	d8800215 	stw	r2,8(sp)
 800b9ac:	d8800515 	stw	r2,20(sp)
 800b9b0:	d80b883a 	mov	r5,sp
 800b9b4:	d9c01b04 	addi	r7,sp,108
 800b9b8:	00bfffc4 	movi	r2,-1
 800b9bc:	d8c00015 	stw	r3,0(sp)
 800b9c0:	d8c00415 	stw	r3,16(sp)
 800b9c4:	da00030d 	sth	r8,12(sp)
 800b9c8:	d880038d 	sth	r2,14(sp)
 800b9cc:	800efec0 	call	800efec <___svfprintf_internal_r>
 800b9d0:	d8c00017 	ldw	r3,0(sp)
 800b9d4:	18000005 	stb	zero,0(r3)
 800b9d8:	dfc01a17 	ldw	ra,104(sp)
 800b9dc:	dec01c04 	addi	sp,sp,112
 800b9e0:	f800283a 	ret

0800b9e4 <sprintf>:
 800b9e4:	deffe304 	addi	sp,sp,-116
 800b9e8:	2007883a 	mov	r3,r4
 800b9ec:	dfc01a15 	stw	ra,104(sp)
 800b9f0:	d9801b15 	stw	r6,108(sp)
 800b9f4:	d9c01c15 	stw	r7,112(sp)
 800b9f8:	010200b4 	movhi	r4,2050
 800b9fc:	213ab604 	addi	r4,r4,-5416
 800ba00:	21000017 	ldw	r4,0(r4)
 800ba04:	00a00034 	movhi	r2,32768
 800ba08:	10bfffc4 	addi	r2,r2,-1
 800ba0c:	280d883a 	mov	r6,r5
 800ba10:	02008204 	movi	r8,520
 800ba14:	d8800215 	stw	r2,8(sp)
 800ba18:	d8800515 	stw	r2,20(sp)
 800ba1c:	d80b883a 	mov	r5,sp
 800ba20:	d9c01b04 	addi	r7,sp,108
 800ba24:	00bfffc4 	movi	r2,-1
 800ba28:	d8c00015 	stw	r3,0(sp)
 800ba2c:	d8c00415 	stw	r3,16(sp)
 800ba30:	da00030d 	sth	r8,12(sp)
 800ba34:	d880038d 	sth	r2,14(sp)
 800ba38:	800efec0 	call	800efec <___svfprintf_internal_r>
 800ba3c:	d8c00017 	ldw	r3,0(sp)
 800ba40:	18000005 	stb	zero,0(r3)
 800ba44:	dfc01a17 	ldw	ra,104(sp)
 800ba48:	dec01d04 	addi	sp,sp,116
 800ba4c:	f800283a 	ret

0800ba50 <strcmp>:
 800ba50:	2144b03a 	or	r2,r4,r5
 800ba54:	108000cc 	andi	r2,r2,3
 800ba58:	1000171e 	bne	r2,zero,800bab8 <strcmp+0x68>
 800ba5c:	20800017 	ldw	r2,0(r4)
 800ba60:	28c00017 	ldw	r3,0(r5)
 800ba64:	10c0141e 	bne	r2,r3,800bab8 <strcmp+0x68>
 800ba68:	027fbff4 	movhi	r9,65279
 800ba6c:	4a7fbfc4 	addi	r9,r9,-257
 800ba70:	0086303a 	nor	r3,zero,r2
 800ba74:	02202074 	movhi	r8,32897
 800ba78:	1245883a 	add	r2,r2,r9
 800ba7c:	42202004 	addi	r8,r8,-32640
 800ba80:	10c4703a 	and	r2,r2,r3
 800ba84:	1204703a 	and	r2,r2,r8
 800ba88:	10000226 	beq	r2,zero,800ba94 <strcmp+0x44>
 800ba8c:	00001706 	br	800baec <strcmp+0x9c>
 800ba90:	1000161e 	bne	r2,zero,800baec <strcmp+0x9c>
 800ba94:	21000104 	addi	r4,r4,4
 800ba98:	20c00017 	ldw	r3,0(r4)
 800ba9c:	29400104 	addi	r5,r5,4
 800baa0:	29800017 	ldw	r6,0(r5)
 800baa4:	1a4f883a 	add	r7,r3,r9
 800baa8:	00c4303a 	nor	r2,zero,r3
 800baac:	3884703a 	and	r2,r7,r2
 800bab0:	1204703a 	and	r2,r2,r8
 800bab4:	19bff626 	beq	r3,r6,800ba90 <__alt_data_end+0xf800ba90>
 800bab8:	20800007 	ldb	r2,0(r4)
 800babc:	1000051e 	bne	r2,zero,800bad4 <strcmp+0x84>
 800bac0:	00000606 	br	800badc <strcmp+0x8c>
 800bac4:	21000044 	addi	r4,r4,1
 800bac8:	20800007 	ldb	r2,0(r4)
 800bacc:	29400044 	addi	r5,r5,1
 800bad0:	10000226 	beq	r2,zero,800badc <strcmp+0x8c>
 800bad4:	28c00007 	ldb	r3,0(r5)
 800bad8:	10fffa26 	beq	r2,r3,800bac4 <__alt_data_end+0xf800bac4>
 800badc:	20800003 	ldbu	r2,0(r4)
 800bae0:	28c00003 	ldbu	r3,0(r5)
 800bae4:	10c5c83a 	sub	r2,r2,r3
 800bae8:	f800283a 	ret
 800baec:	0005883a 	mov	r2,zero
 800baf0:	f800283a 	ret

0800baf4 <_strtod_r>:
 800baf4:	deffe104 	addi	sp,sp,-124
 800baf8:	dd801b15 	stw	r22,108(sp)
 800bafc:	dc001515 	stw	r16,84(sp)
 800bb00:	d9400615 	stw	r5,24(sp)
 800bb04:	dfc01e15 	stw	ra,120(sp)
 800bb08:	df001d15 	stw	fp,116(sp)
 800bb0c:	ddc01c15 	stw	r23,112(sp)
 800bb10:	dd401a15 	stw	r21,104(sp)
 800bb14:	dd001915 	stw	r20,100(sp)
 800bb18:	dcc01815 	stw	r19,96(sp)
 800bb1c:	dc801715 	stw	r18,92(sp)
 800bb20:	dc401615 	stw	r17,88(sp)
 800bb24:	2021883a 	mov	r16,r4
 800bb28:	2809883a 	mov	r4,r5
 800bb2c:	20800003 	ldbu	r2,0(r4)
 800bb30:	01c20074 	movhi	r7,2049
 800bb34:	282d883a 	mov	r22,r5
 800bb38:	d9800c15 	stw	r6,48(sp)
 800bb3c:	d8000815 	stw	zero,32(sp)
 800bb40:	d8000715 	stw	zero,28(sp)
 800bb44:	01400b44 	movi	r5,45
 800bb48:	10c03fcc 	andi	r3,r2,255
 800bb4c:	39eed904 	addi	r7,r7,-17564
 800bb50:	28c0bc36 	bltu	r5,r3,800be44 <_strtod_r+0x350>
 800bb54:	180690ba 	slli	r3,r3,2
 800bb58:	19c7883a 	add	r3,r3,r7
 800bb5c:	18c00017 	ldw	r3,0(r3)
 800bb60:	1800683a 	jmp	r3
 800bb64:	0800bc24 	muli	zero,at,752
 800bb68:	0800be44 	addi	zero,at,761
 800bb6c:	0800be44 	addi	zero,at,761
 800bb70:	0800be44 	addi	zero,at,761
 800bb74:	0800be44 	addi	zero,at,761
 800bb78:	0800be44 	addi	zero,at,761
 800bb7c:	0800be44 	addi	zero,at,761
 800bb80:	0800be44 	addi	zero,at,761
 800bb84:	0800be44 	addi	zero,at,761
 800bb88:	0800be30 	cmpltui	zero,at,760
 800bb8c:	0800be30 	cmpltui	zero,at,760
 800bb90:	0800be30 	cmpltui	zero,at,760
 800bb94:	0800be30 	cmpltui	zero,at,760
 800bb98:	0800be30 	cmpltui	zero,at,760
 800bb9c:	0800be44 	addi	zero,at,761
 800bba0:	0800be44 	addi	zero,at,761
 800bba4:	0800be44 	addi	zero,at,761
 800bba8:	0800be44 	addi	zero,at,761
 800bbac:	0800be44 	addi	zero,at,761
 800bbb0:	0800be44 	addi	zero,at,761
 800bbb4:	0800be44 	addi	zero,at,761
 800bbb8:	0800be44 	addi	zero,at,761
 800bbbc:	0800be44 	addi	zero,at,761
 800bbc0:	0800be44 	addi	zero,at,761
 800bbc4:	0800be44 	addi	zero,at,761
 800bbc8:	0800be44 	addi	zero,at,761
 800bbcc:	0800be44 	addi	zero,at,761
 800bbd0:	0800be44 	addi	zero,at,761
 800bbd4:	0800be44 	addi	zero,at,761
 800bbd8:	0800be44 	addi	zero,at,761
 800bbdc:	0800be44 	addi	zero,at,761
 800bbe0:	0800be44 	addi	zero,at,761
 800bbe4:	0800be30 	cmpltui	zero,at,760
 800bbe8:	0800be44 	addi	zero,at,761
 800bbec:	0800be44 	addi	zero,at,761
 800bbf0:	0800be44 	addi	zero,at,761
 800bbf4:	0800be44 	addi	zero,at,761
 800bbf8:	0800be44 	addi	zero,at,761
 800bbfc:	0800be44 	addi	zero,at,761
 800bc00:	0800be44 	addi	zero,at,761
 800bc04:	0800be44 	addi	zero,at,761
 800bc08:	0800be44 	addi	zero,at,761
 800bc0c:	0800be44 	addi	zero,at,761
 800bc10:	0800bc84 	addi	zero,at,754
 800bc14:	0800be44 	addi	zero,at,761
 800bc18:	0800be24 	muli	zero,at,760
 800bc1c:	00801244 	movi	r2,73
 800bc20:	98849c26 	beq	r19,r2,800ce94 <_strtod_r+0x13a0>
 800bc24:	002b883a 	mov	r21,zero
 800bc28:	0023883a 	mov	r17,zero
 800bc2c:	d8800c17 	ldw	r2,48(sp)
 800bc30:	10000626 	beq	r2,zero,800bc4c <_strtod_r+0x158>
 800bc34:	d8001015 	stw	zero,64(sp)
 800bc38:	d8800c17 	ldw	r2,48(sp)
 800bc3c:	15800015 	stw	r22,0(r2)
 800bc40:	d8c01017 	ldw	r3,64(sp)
 800bc44:	18000126 	beq	r3,zero,800bc4c <_strtod_r+0x158>
 800bc48:	8c60003c 	xorhi	r17,r17,32768
 800bc4c:	a805883a 	mov	r2,r21
 800bc50:	8807883a 	mov	r3,r17
 800bc54:	dfc01e17 	ldw	ra,120(sp)
 800bc58:	df001d17 	ldw	fp,116(sp)
 800bc5c:	ddc01c17 	ldw	r23,112(sp)
 800bc60:	dd801b17 	ldw	r22,108(sp)
 800bc64:	dd401a17 	ldw	r21,104(sp)
 800bc68:	dd001917 	ldw	r20,100(sp)
 800bc6c:	dcc01817 	ldw	r19,96(sp)
 800bc70:	dc801717 	ldw	r18,92(sp)
 800bc74:	dc401617 	ldw	r17,88(sp)
 800bc78:	dc001517 	ldw	r16,84(sp)
 800bc7c:	dec01f04 	addi	sp,sp,124
 800bc80:	f800283a 	ret
 800bc84:	d8001015 	stw	zero,64(sp)
 800bc88:	24800044 	addi	r18,r4,1
 800bc8c:	dc800615 	stw	r18,24(sp)
 800bc90:	20800043 	ldbu	r2,1(r4)
 800bc94:	10c03fcc 	andi	r3,r2,255
 800bc98:	18c0201c 	xori	r3,r3,128
 800bc9c:	18ffe004 	addi	r3,r3,-128
 800bca0:	183fe026 	beq	r3,zero,800bc24 <__alt_data_end+0xf800bc24>
 800bca4:	11403fcc 	andi	r5,r2,255
 800bca8:	2940201c 	xori	r5,r5,128
 800bcac:	297fe004 	addi	r5,r5,-128
 800bcb0:	00c00c04 	movi	r3,48
 800bcb4:	28c0f226 	beq	r5,r3,800c080 <_strtod_r+0x58c>
 800bcb8:	0023883a 	mov	r17,zero
 800bcbc:	10fff404 	addi	r3,r2,-48
 800bcc0:	18c03fcc 	andi	r3,r3,255
 800bcc4:	01800244 	movi	r6,9
 800bcc8:	30c3d336 	bltu	r6,r3,800cc18 <_strtod_r+0x1124>
 800bccc:	91000044 	addi	r4,r18,1
 800bcd0:	002b883a 	mov	r21,zero
 800bcd4:	002f883a 	mov	r23,zero
 800bcd8:	0029883a 	mov	r20,zero
 800bcdc:	02000204 	movi	r8,8
 800bce0:	024003c4 	movi	r9,15
 800bce4:	45005a16 	blt	r8,r20,800be50 <_strtod_r+0x35c>
 800bce8:	bdc002a4 	muli	r23,r23,10
 800bcec:	10803fcc 	andi	r2,r2,255
 800bcf0:	1080201c 	xori	r2,r2,128
 800bcf4:	10bfe004 	addi	r2,r2,-128
 800bcf8:	b885883a 	add	r2,r23,r2
 800bcfc:	15fff404 	addi	r23,r2,-48
 800bd00:	d9000615 	stw	r4,24(sp)
 800bd04:	20800003 	ldbu	r2,0(r4)
 800bd08:	2039883a 	mov	fp,r4
 800bd0c:	a5000044 	addi	r20,r20,1
 800bd10:	10fff404 	addi	r3,r2,-48
 800bd14:	18c03fcc 	andi	r3,r3,255
 800bd18:	21000044 	addi	r4,r4,1
 800bd1c:	30fff12e 	bgeu	r6,r3,800bce4 <__alt_data_end+0xf800bce4>
 800bd20:	14c03fcc 	andi	r19,r2,255
 800bd24:	9cc0201c 	xori	r19,r19,128
 800bd28:	9cffe004 	addi	r19,r19,-128
 800bd2c:	8009883a 	mov	r4,r16
 800bd30:	80097b00 	call	80097b0 <_localeconv_r>
 800bd34:	11400017 	ldw	r5,0(r2)
 800bd38:	8009883a 	mov	r4,r16
 800bd3c:	d9401315 	stw	r5,76(sp)
 800bd40:	80097b00 	call	80097b0 <_localeconv_r>
 800bd44:	11000017 	ldw	r4,0(r2)
 800bd48:	800338c0 	call	800338c <strlen>
 800bd4c:	d9401317 	ldw	r5,76(sp)
 800bd50:	e009883a 	mov	r4,fp
 800bd54:	100d883a 	mov	r6,r2
 800bd58:	801388c0 	call	801388c <strncmp>
 800bd5c:	1000d926 	beq	r2,zero,800c0c4 <_strtod_r+0x5d0>
 800bd60:	a039883a 	mov	fp,r20
 800bd64:	000b883a 	mov	r5,zero
 800bd68:	0011883a 	mov	r8,zero
 800bd6c:	0013883a 	mov	r9,zero
 800bd70:	00801944 	movi	r2,101
 800bd74:	98804426 	beq	r19,r2,800be88 <_strtod_r+0x394>
 800bd78:	00801144 	movi	r2,69
 800bd7c:	98804226 	beq	r19,r2,800be88 <_strtod_r+0x394>
 800bd80:	000f883a 	mov	r7,zero
 800bd84:	e0007f1e 	bne	fp,zero,800bf84 <_strtod_r+0x490>
 800bd88:	2800391e 	bne	r5,zero,800be70 <_strtod_r+0x37c>
 800bd8c:	8800381e 	bne	r17,zero,800be70 <_strtod_r+0x37c>
 800bd90:	4800b71e 	bne	r9,zero,800c070 <_strtod_r+0x57c>
 800bd94:	00801384 	movi	r2,78
 800bd98:	98800526 	beq	r19,r2,800bdb0 <_strtod_r+0x2bc>
 800bd9c:	14ff9f0e 	bge	r2,r19,800bc1c <__alt_data_end+0xf800bc1c>
 800bda0:	00801a44 	movi	r2,105
 800bda4:	98843b26 	beq	r19,r2,800ce94 <_strtod_r+0x13a0>
 800bda8:	00801b84 	movi	r2,110
 800bdac:	98bf9d1e 	bne	r19,r2,800bc24 <__alt_data_end+0xf800bc24>
 800bdb0:	014200b4 	movhi	r5,2050
 800bdb4:	d9000617 	ldw	r4,24(sp)
 800bdb8:	29733604 	addi	r5,r5,-13096
 800bdbc:	01c00644 	movi	r7,25
 800bdc0:	00000b06 	br	800bdf0 <_strtod_r+0x2fc>
 800bdc4:	21000044 	addi	r4,r4,1
 800bdc8:	20800003 	ldbu	r2,0(r4)
 800bdcc:	10ffefc4 	addi	r3,r2,-65
 800bdd0:	10803fcc 	andi	r2,r2,255
 800bdd4:	1080201c 	xori	r2,r2,128
 800bdd8:	18c03fcc 	andi	r3,r3,255
 800bddc:	10bfe004 	addi	r2,r2,-128
 800bde0:	38c00136 	bltu	r7,r3,800bde8 <_strtod_r+0x2f4>
 800bde4:	10800804 	addi	r2,r2,32
 800bde8:	29400044 	addi	r5,r5,1
 800bdec:	11bf8d1e 	bne	r2,r6,800bc24 <__alt_data_end+0xf800bc24>
 800bdf0:	29800007 	ldb	r6,0(r5)
 800bdf4:	303ff31e 	bne	r6,zero,800bdc4 <__alt_data_end+0xf800bdc4>
 800bdf8:	20800044 	addi	r2,r4,1
 800bdfc:	d8800615 	stw	r2,24(sp)
 800be00:	20c00047 	ldb	r3,1(r4)
 800be04:	00800a04 	movi	r2,40
 800be08:	18846d26 	beq	r3,r2,800cfc0 <_strtod_r+0x14cc>
 800be0c:	013ffe34 	movhi	r4,65528
 800be10:	d9000715 	stw	r4,28(sp)
 800be14:	d8000815 	stw	zero,32(sp)
 800be18:	dd400817 	ldw	r21,32(sp)
 800be1c:	dc400717 	ldw	r17,28(sp)
 800be20:	00001506 	br	800be78 <_strtod_r+0x384>
 800be24:	00800044 	movi	r2,1
 800be28:	d8801015 	stw	r2,64(sp)
 800be2c:	003f9606 	br	800bc88 <__alt_data_end+0xf800bc88>
 800be30:	21000044 	addi	r4,r4,1
 800be34:	d9000615 	stw	r4,24(sp)
 800be38:	20800003 	ldbu	r2,0(r4)
 800be3c:	10c03fcc 	andi	r3,r2,255
 800be40:	28ff442e 	bgeu	r5,r3,800bb54 <__alt_data_end+0xf800bb54>
 800be44:	2025883a 	mov	r18,r4
 800be48:	d8001015 	stw	zero,64(sp)
 800be4c:	003f9506 	br	800bca4 <__alt_data_end+0xf800bca4>
 800be50:	4d3fab16 	blt	r9,r20,800bd00 <__alt_data_end+0xf800bd00>
 800be54:	ad4002a4 	muli	r21,r21,10
 800be58:	10c03fcc 	andi	r3,r2,255
 800be5c:	18c0201c 	xori	r3,r3,128
 800be60:	18ffe004 	addi	r3,r3,-128
 800be64:	a8eb883a 	add	r21,r21,r3
 800be68:	ad7ff404 	addi	r21,r21,-48
 800be6c:	003fa406 	br	800bd00 <__alt_data_end+0xf800bd00>
 800be70:	002b883a 	mov	r21,zero
 800be74:	0023883a 	mov	r17,zero
 800be78:	d9000c17 	ldw	r4,48(sp)
 800be7c:	203f7026 	beq	r4,zero,800bc40 <__alt_data_end+0xf800bc40>
 800be80:	dd800617 	ldw	r22,24(sp)
 800be84:	003f6c06 	br	800bc38 <__alt_data_end+0xf800bc38>
 800be88:	e0007726 	beq	fp,zero,800c068 <_strtod_r+0x574>
 800be8c:	dd800617 	ldw	r22,24(sp)
 800be90:	00c00ac4 	movi	r3,43
 800be94:	b0800044 	addi	r2,r22,1
 800be98:	d8800615 	stw	r2,24(sp)
 800be9c:	b0800047 	ldb	r2,1(r22)
 800bea0:	10c25726 	beq	r2,r3,800c800 <_strtod_r+0xd0c>
 800bea4:	00c00b44 	movi	r3,45
 800bea8:	10c25026 	beq	r2,r3,800c7ec <_strtod_r+0xcf8>
 800beac:	1027883a 	mov	r19,r2
 800beb0:	000f883a 	mov	r7,zero
 800beb4:	98fff404 	addi	r3,r19,-48
 800beb8:	01000244 	movi	r4,9
 800bebc:	9805883a 	mov	r2,r19
 800bec0:	20c23836 	bltu	r4,r3,800c7a4 <_strtod_r+0xcb0>
 800bec4:	00c00c04 	movi	r3,48
 800bec8:	98c0071e 	bne	r19,r3,800bee8 <_strtod_r+0x3f4>
 800becc:	d8c00617 	ldw	r3,24(sp)
 800bed0:	18c00044 	addi	r3,r3,1
 800bed4:	d8c00615 	stw	r3,24(sp)
 800bed8:	18800007 	ldb	r2,0(r3)
 800bedc:	18c00044 	addi	r3,r3,1
 800bee0:	14fffc26 	beq	r2,r19,800bed4 <__alt_data_end+0xf800bed4>
 800bee4:	1027883a 	mov	r19,r2
 800bee8:	10bff3c4 	addi	r2,r2,-49
 800beec:	00c00204 	movi	r3,8
 800bef0:	18bfa336 	bltu	r3,r2,800bd80 <__alt_data_end+0xf800bd80>
 800bef4:	db000617 	ldw	r12,24(sp)
 800bef8:	98bff404 	addi	r2,r19,-48
 800befc:	02c00244 	movi	r11,9
 800bf00:	62800044 	addi	r10,r12,1
 800bf04:	da800615 	stw	r10,24(sp)
 800bf08:	64c00043 	ldbu	r19,1(r12)
 800bf0c:	98fff404 	addi	r3,r19,-48
 800bf10:	9cc03fcc 	andi	r19,r19,255
 800bf14:	9cc0201c 	xori	r19,r19,128
 800bf18:	18c03fcc 	andi	r3,r3,255
 800bf1c:	9cffe004 	addi	r19,r19,-128
 800bf20:	58c00e36 	bltu	r11,r3,800bf5c <_strtod_r+0x468>
 800bf24:	61000084 	addi	r4,r12,2
 800bf28:	d9000615 	stw	r4,24(sp)
 800bf2c:	108002a4 	muli	r2,r2,10
 800bf30:	21800003 	ldbu	r6,0(r4)
 800bf34:	2015883a 	mov	r10,r4
 800bf38:	14e7883a 	add	r19,r2,r19
 800bf3c:	30fff404 	addi	r3,r6,-48
 800bf40:	98bff404 	addi	r2,r19,-48
 800bf44:	34c03fcc 	andi	r19,r6,255
 800bf48:	9cc0201c 	xori	r19,r19,128
 800bf4c:	18c03fcc 	andi	r3,r3,255
 800bf50:	9cffe004 	addi	r19,r19,-128
 800bf54:	21000044 	addi	r4,r4,1
 800bf58:	58fff32e 	bgeu	r11,r3,800bf28 <__alt_data_end+0xf800bf28>
 800bf5c:	5315c83a 	sub	r10,r10,r12
 800bf60:	00c00204 	movi	r3,8
 800bf64:	1a832a16 	blt	r3,r10,800cc10 <_strtod_r+0x111c>
 800bf68:	00d387c4 	movi	r3,19999
 800bf6c:	1880010e 	bge	r3,r2,800bf74 <_strtod_r+0x480>
 800bf70:	1805883a 	mov	r2,r3
 800bf74:	01c7c83a 	sub	r3,zero,r7
 800bf78:	10c4f03a 	xor	r2,r2,r3
 800bf7c:	11cf883a 	add	r7,r2,r7
 800bf80:	e03f8126 	beq	fp,zero,800bd88 <__alt_data_end+0xf800bd88>
 800bf84:	3a11c83a 	sub	r8,r7,r8
 800bf88:	da000e15 	stw	r8,56(sp)
 800bf8c:	a000011e 	bne	r20,zero,800bf94 <_strtod_r+0x4a0>
 800bf90:	e029883a 	mov	r20,fp
 800bf94:	00800404 	movi	r2,16
 800bf98:	e023883a 	mov	r17,fp
 800bf9c:	1700010e 	bge	r2,fp,800bfa4 <_strtod_r+0x4b0>
 800bfa0:	1023883a 	mov	r17,r2
 800bfa4:	b809883a 	mov	r4,r23
 800bfa8:	801807c0 	call	801807c <__floatunsidf>
 800bfac:	d8800815 	stw	r2,32(sp)
 800bfb0:	d8c00715 	stw	r3,28(sp)
 800bfb4:	00800244 	movi	r2,9
 800bfb8:	1440150e 	bge	r2,r17,800c010 <_strtod_r+0x51c>
 800bfbc:	88bffdc4 	addi	r2,r17,-9
 800bfc0:	100490fa 	slli	r2,r2,3
 800bfc4:	180b883a 	mov	r5,r3
 800bfc8:	00c200b4 	movhi	r3,2050
 800bfcc:	18f30104 	addi	r3,r3,-13308
 800bfd0:	1885883a 	add	r2,r3,r2
 800bfd4:	d9000817 	ldw	r4,32(sp)
 800bfd8:	11800017 	ldw	r6,0(r2)
 800bfdc:	11c00117 	ldw	r7,4(r2)
 800bfe0:	8016f300 	call	8016f30 <__muldf3>
 800bfe4:	a809883a 	mov	r4,r21
 800bfe8:	102d883a 	mov	r22,r2
 800bfec:	1827883a 	mov	r19,r3
 800bff0:	801807c0 	call	801807c <__floatunsidf>
 800bff4:	b009883a 	mov	r4,r22
 800bff8:	980b883a 	mov	r5,r19
 800bffc:	100d883a 	mov	r6,r2
 800c000:	180f883a 	mov	r7,r3
 800c004:	8015b840 	call	8015b84 <__adddf3>
 800c008:	d8800815 	stw	r2,32(sp)
 800c00c:	d8c00715 	stw	r3,28(sp)
 800c010:	008003c4 	movi	r2,15
 800c014:	17004916 	blt	r2,fp,800c13c <_strtod_r+0x648>
 800c018:	d8c00e17 	ldw	r3,56(sp)
 800c01c:	183f7e26 	beq	r3,zero,800be18 <__alt_data_end+0xf800be18>
 800c020:	d9000e17 	ldw	r4,56(sp)
 800c024:	0103730e 	bge	zero,r4,800cdf4 <_strtod_r+0x1300>
 800c028:	00c00584 	movi	r3,22
 800c02c:	19030216 	blt	r3,r4,800cc38 <_strtod_r+0x1144>
 800c030:	200490fa 	slli	r2,r4,3
 800c034:	00c200b4 	movhi	r3,2050
 800c038:	18f30104 	addi	r3,r3,-13308
 800c03c:	1885883a 	add	r2,r3,r2
 800c040:	d9800817 	ldw	r6,32(sp)
 800c044:	d9c00717 	ldw	r7,28(sp)
 800c048:	11000017 	ldw	r4,0(r2)
 800c04c:	11400117 	ldw	r5,4(r2)
 800c050:	8016f300 	call	8016f30 <__muldf3>
 800c054:	102b883a 	mov	r21,r2
 800c058:	1823883a 	mov	r17,r3
 800c05c:	003f8606 	br	800be78 <__alt_data_end+0xf800be78>
 800c060:	0011883a 	mov	r8,zero
 800c064:	02400044 	movi	r9,1
 800c068:	2800031e 	bne	r5,zero,800c078 <_strtod_r+0x584>
 800c06c:	8800021e 	bne	r17,zero,800c078 <_strtod_r+0x584>
 800c070:	002b883a 	mov	r21,zero
 800c074:	003eed06 	br	800bc2c <__alt_data_end+0xf800bc2c>
 800c078:	0039883a 	mov	fp,zero
 800c07c:	003f8306 	br	800be8c <__alt_data_end+0xf800be8c>
 800c080:	90800047 	ldb	r2,1(r18)
 800c084:	00c01604 	movi	r3,88
 800c088:	10c21d26 	beq	r2,r3,800c900 <_strtod_r+0xe0c>
 800c08c:	00c01e04 	movi	r3,120
 800c090:	10c21b26 	beq	r2,r3,800c900 <_strtod_r+0xe0c>
 800c094:	90c00044 	addi	r3,r18,1
 800c098:	1825883a 	mov	r18,r3
 800c09c:	d8c00615 	stw	r3,24(sp)
 800c0a0:	18c00044 	addi	r3,r3,1
 800c0a4:	18bfffc3 	ldbu	r2,-1(r3)
 800c0a8:	11003fcc 	andi	r4,r2,255
 800c0ac:	2100201c 	xori	r4,r4,128
 800c0b0:	213fe004 	addi	r4,r4,-128
 800c0b4:	217ff826 	beq	r4,r5,800c098 <__alt_data_end+0xf800c098>
 800c0b8:	203f6d26 	beq	r4,zero,800be70 <__alt_data_end+0xf800be70>
 800c0bc:	04400044 	movi	r17,1
 800c0c0:	003efe06 	br	800bcbc <__alt_data_end+0xf800bcbc>
 800c0c4:	8009883a 	mov	r4,r16
 800c0c8:	80097b00 	call	80097b0 <_localeconv_r>
 800c0cc:	11000017 	ldw	r4,0(r2)
 800c0d0:	800338c0 	call	800338c <strlen>
 800c0d4:	d9000617 	ldw	r4,24(sp)
 800c0d8:	2085883a 	add	r2,r4,r2
 800c0dc:	d8800615 	stw	r2,24(sp)
 800c0e0:	14c00007 	ldb	r19,0(r2)
 800c0e4:	a001b21e 	bne	r20,zero,800c7b0 <_strtod_r+0xcbc>
 800c0e8:	00c00c04 	movi	r3,48
 800c0ec:	98c3931e 	bne	r19,r3,800cf3c <_strtod_r+0x1448>
 800c0f0:	10c00044 	addi	r3,r2,1
 800c0f4:	9809883a 	mov	r4,r19
 800c0f8:	d8c00615 	stw	r3,24(sp)
 800c0fc:	1cc00007 	ldb	r19,0(r3)
 800c100:	188bc83a 	sub	r5,r3,r2
 800c104:	18c00044 	addi	r3,r3,1
 800c108:	993ffb26 	beq	r19,r4,800c0f8 <__alt_data_end+0xf800c0f8>
 800c10c:	98bff3c4 	addi	r2,r19,-49
 800c110:	00c00204 	movi	r3,8
 800c114:	1881ee36 	bltu	r3,r2,800c8d0 <_strtod_r+0xddc>
 800c118:	dc800617 	ldw	r18,24(sp)
 800c11c:	9cfff404 	addi	r19,r19,-48
 800c120:	2a000044 	addi	r8,r5,1
 800c124:	9009883a 	mov	r4,r18
 800c128:	07000044 	movi	fp,1
 800c12c:	b88002a4 	muli	r2,r23,10
 800c130:	000b883a 	mov	r5,zero
 800c134:	98af883a 	add	r23,r19,r2
 800c138:	0001a806 	br	800c7dc <_strtod_r+0xce8>
 800c13c:	d9000e17 	ldw	r4,56(sp)
 800c140:	e463c83a 	sub	r17,fp,r17
 800c144:	2463883a 	add	r17,r4,r17
 800c148:	0442670e 	bge	zero,r17,800cae8 <_strtod_r+0xff4>
 800c14c:	888003cc 	andi	r2,r17,15
 800c150:	10000b26 	beq	r2,zero,800c180 <_strtod_r+0x68c>
 800c154:	100490fa 	slli	r2,r2,3
 800c158:	00c200b4 	movhi	r3,2050
 800c15c:	18f30104 	addi	r3,r3,-13308
 800c160:	1885883a 	add	r2,r3,r2
 800c164:	d9800817 	ldw	r6,32(sp)
 800c168:	d9c00717 	ldw	r7,28(sp)
 800c16c:	11000017 	ldw	r4,0(r2)
 800c170:	11400117 	ldw	r5,4(r2)
 800c174:	8016f300 	call	8016f30 <__muldf3>
 800c178:	d8800815 	stw	r2,32(sp)
 800c17c:	d8c00715 	stw	r3,28(sp)
 800c180:	04fffc04 	movi	r19,-16
 800c184:	8ce2703a 	and	r17,r17,r19
 800c188:	8801a11e 	bne	r17,zero,800c810 <_strtod_r+0xd1c>
 800c18c:	dd400817 	ldw	r21,32(sp)
 800c190:	dc400717 	ldw	r17,28(sp)
 800c194:	d8001215 	stw	zero,72(sp)
 800c198:	8009883a 	mov	r4,r16
 800c19c:	ddc00015 	stw	r23,0(sp)
 800c1a0:	900b883a 	mov	r5,r18
 800c1a4:	a00d883a 	mov	r6,r20
 800c1a8:	e00f883a 	mov	r7,fp
 800c1ac:	800a1800 	call	800a180 <__s2b>
 800c1b0:	d8800d15 	stw	r2,52(sp)
 800c1b4:	d8800e17 	ldw	r2,56(sp)
 800c1b8:	d9000d17 	ldw	r4,52(sp)
 800c1bc:	dd801217 	ldw	r22,72(sp)
 800c1c0:	1007d7fa 	srai	r3,r2,31
 800c1c4:	0085c83a 	sub	r2,zero,r2
 800c1c8:	21000304 	addi	r4,r4,12
 800c1cc:	1886703a 	and	r3,r3,r2
 800c1d0:	d9001115 	stw	r4,68(sp)
 800c1d4:	d8c00915 	stw	r3,36(sp)
 800c1d8:	d8800d17 	ldw	r2,52(sp)
 800c1dc:	8009883a 	mov	r4,r16
 800c1e0:	0029883a 	mov	r20,zero
 800c1e4:	11400117 	ldw	r5,4(r2)
 800c1e8:	8009f9c0 	call	8009f9c <_Balloc>
 800c1ec:	d8c00d17 	ldw	r3,52(sp)
 800c1f0:	d9401117 	ldw	r5,68(sp)
 800c1f4:	11000304 	addi	r4,r2,12
 800c1f8:	19800417 	ldw	r6,16(r3)
 800c1fc:	1027883a 	mov	r19,r2
 800c200:	31800084 	addi	r6,r6,2
 800c204:	318d883a 	add	r6,r6,r6
 800c208:	318d883a 	add	r6,r6,r6
 800c20c:	8002df40 	call	8002df4 <memcpy>
 800c210:	d8800204 	addi	r2,sp,8
 800c214:	8009883a 	mov	r4,r16
 800c218:	a80b883a 	mov	r5,r21
 800c21c:	880d883a 	mov	r6,r17
 800c220:	d9c00404 	addi	r7,sp,16
 800c224:	d8800015 	stw	r2,0(sp)
 800c228:	800abd00 	call	800abd0 <__d2b>
 800c22c:	8009883a 	mov	r4,r16
 800c230:	01400044 	movi	r5,1
 800c234:	d8800515 	stw	r2,20(sp)
 800c238:	800a39c0 	call	800a39c <__i2b>
 800c23c:	d8c00e17 	ldw	r3,56(sp)
 800c240:	1025883a 	mov	r18,r2
 800c244:	00c0010e 	bge	zero,r3,800c24c <_strtod_r+0x758>
 800c248:	1829883a 	mov	r20,r3
 800c24c:	d8800417 	ldw	r2,16(sp)
 800c250:	1000dc16 	blt	r2,zero,800c5c4 <_strtod_r+0xad0>
 800c254:	d9000917 	ldw	r4,36(sp)
 800c258:	a02f883a 	mov	r23,r20
 800c25c:	20b9883a 	add	fp,r4,r2
 800c260:	d9000217 	ldw	r4,8(sp)
 800c264:	1585c83a 	sub	r2,r2,r22
 800c268:	00ff00c4 	movi	r3,-1021
 800c26c:	110b883a 	add	r5,r2,r4
 800c270:	28c09e0e 	bge	r5,r3,800c4ec <_strtod_r+0x9f8>
 800c274:	10810cc4 	addi	r2,r2,1075
 800c278:	e087883a 	add	r3,fp,r2
 800c27c:	b885883a 	add	r2,r23,r2
 800c280:	15af883a 	add	r23,r2,r22
 800c284:	1805883a 	mov	r2,r3
 800c288:	e0c0010e 	bge	fp,r3,800c290 <_strtod_r+0x79c>
 800c28c:	e005883a 	mov	r2,fp
 800c290:	b880010e 	bge	r23,r2,800c298 <_strtod_r+0x7a4>
 800c294:	b805883a 	mov	r2,r23
 800c298:	0080030e 	bge	zero,r2,800c2a8 <_strtod_r+0x7b4>
 800c29c:	1887c83a 	sub	r3,r3,r2
 800c2a0:	b8afc83a 	sub	r23,r23,r2
 800c2a4:	e0b9c83a 	sub	fp,fp,r2
 800c2a8:	d8800917 	ldw	r2,36(sp)
 800c2ac:	10001126 	beq	r2,zero,800c2f4 <_strtod_r+0x800>
 800c2b0:	900b883a 	mov	r5,r18
 800c2b4:	100d883a 	mov	r6,r2
 800c2b8:	8009883a 	mov	r4,r16
 800c2bc:	d8c01415 	stw	r3,80(sp)
 800c2c0:	800a5d40 	call	800a5d4 <__pow5mult>
 800c2c4:	d9800517 	ldw	r6,20(sp)
 800c2c8:	8009883a 	mov	r4,r16
 800c2cc:	100b883a 	mov	r5,r2
 800c2d0:	1025883a 	mov	r18,r2
 800c2d4:	800a3d80 	call	800a3d8 <__multiply>
 800c2d8:	d9400517 	ldw	r5,20(sp)
 800c2dc:	8009883a 	mov	r4,r16
 800c2e0:	d8801315 	stw	r2,76(sp)
 800c2e4:	800a0440 	call	800a044 <_Bfree>
 800c2e8:	d8801317 	ldw	r2,76(sp)
 800c2ec:	d8c01417 	ldw	r3,80(sp)
 800c2f0:	d8800515 	stw	r2,20(sp)
 800c2f4:	00c0050e 	bge	zero,r3,800c30c <_strtod_r+0x818>
 800c2f8:	d9400517 	ldw	r5,20(sp)
 800c2fc:	8009883a 	mov	r4,r16
 800c300:	180d883a 	mov	r6,r3
 800c304:	800a7140 	call	800a714 <__lshift>
 800c308:	d8800515 	stw	r2,20(sp)
 800c30c:	a0000526 	beq	r20,zero,800c324 <_strtod_r+0x830>
 800c310:	980b883a 	mov	r5,r19
 800c314:	8009883a 	mov	r4,r16
 800c318:	a00d883a 	mov	r6,r20
 800c31c:	800a5d40 	call	800a5d4 <__pow5mult>
 800c320:	1027883a 	mov	r19,r2
 800c324:	05c0050e 	bge	zero,r23,800c33c <_strtod_r+0x848>
 800c328:	980b883a 	mov	r5,r19
 800c32c:	8009883a 	mov	r4,r16
 800c330:	b80d883a 	mov	r6,r23
 800c334:	800a7140 	call	800a714 <__lshift>
 800c338:	1027883a 	mov	r19,r2
 800c33c:	0700050e 	bge	zero,fp,800c354 <_strtod_r+0x860>
 800c340:	900b883a 	mov	r5,r18
 800c344:	8009883a 	mov	r4,r16
 800c348:	e00d883a 	mov	r6,fp
 800c34c:	800a7140 	call	800a714 <__lshift>
 800c350:	1025883a 	mov	r18,r2
 800c354:	d9400517 	ldw	r5,20(sp)
 800c358:	8009883a 	mov	r4,r16
 800c35c:	980d883a 	mov	r6,r19
 800c360:	800a8bc0 	call	800a8bc <__mdiff>
 800c364:	10c00317 	ldw	r3,12(r2)
 800c368:	1009883a 	mov	r4,r2
 800c36c:	10000315 	stw	zero,12(r2)
 800c370:	900b883a 	mov	r5,r18
 800c374:	1029883a 	mov	r20,r2
 800c378:	d8c00b15 	stw	r3,44(sp)
 800c37c:	800a85c0 	call	800a85c <__mcmp>
 800c380:	10017316 	blt	r2,zero,800c950 <_strtod_r+0xe5c>
 800c384:	1001b526 	beq	r2,zero,800ca5c <_strtod_r+0xf68>
 800c388:	a009883a 	mov	r4,r20
 800c38c:	900b883a 	mov	r5,r18
 800c390:	800ad0c0 	call	800ad0c <__ratio>
 800c394:	1009883a 	mov	r4,r2
 800c398:	180b883a 	mov	r5,r3
 800c39c:	000d883a 	mov	r6,zero
 800c3a0:	01d00034 	movhi	r7,16384
 800c3a4:	182f883a 	mov	r23,r3
 800c3a8:	d8801315 	stw	r2,76(sp)
 800c3ac:	8016e500 	call	8016e50 <__ledf2>
 800c3b0:	da001317 	ldw	r8,76(sp)
 800c3b4:	00805016 	blt	zero,r2,800c4f8 <_strtod_r+0xa04>
 800c3b8:	d9000b17 	ldw	r4,44(sp)
 800c3bc:	20008426 	beq	r4,zero,800c5d0 <_strtod_r+0xadc>
 800c3c0:	05cffc34 	movhi	r23,16368
 800c3c4:	0039883a 	mov	fp,zero
 800c3c8:	d8000f15 	stw	zero,60(sp)
 800c3cc:	ddc00a15 	stw	r23,40(sp)
 800c3d0:	d8800717 	ldw	r2,28(sp)
 800c3d4:	125ffc2c 	andhi	r9,r2,32752
 800c3d8:	009ff834 	movhi	r2,32736
 800c3dc:	48805626 	beq	r9,r2,800c538 <_strtod_r+0xa44>
 800c3e0:	b0001e26 	beq	r22,zero,800c45c <_strtod_r+0x968>
 800c3e4:	0081a834 	movhi	r2,1696
 800c3e8:	12401c36 	bltu	r2,r9,800c45c <_strtod_r+0x968>
 800c3ec:	d9000f17 	ldw	r4,60(sp)
 800c3f0:	d9400a17 	ldw	r5,40(sp)
 800c3f4:	01d07834 	movhi	r7,16864
 800c3f8:	39ffffc4 	addi	r7,r7,-1
 800c3fc:	01bff034 	movhi	r6,65472
 800c400:	da401315 	stw	r9,76(sp)
 800c404:	8016e500 	call	8016e50 <__ledf2>
 800c408:	da401317 	ldw	r9,76(sp)
 800c40c:	00801016 	blt	zero,r2,800c450 <_strtod_r+0x95c>
 800c410:	d9000f17 	ldw	r4,60(sp)
 800c414:	d9400a17 	ldw	r5,40(sp)
 800c418:	8014ddc0 	call	8014ddc <__fixunsdfsi>
 800c41c:	da401317 	ldw	r9,76(sp)
 800c420:	1000dc26 	beq	r2,zero,800c794 <_strtod_r+0xca0>
 800c424:	1009883a 	mov	r4,r2
 800c428:	801807c0 	call	801807c <__floatunsidf>
 800c42c:	da401317 	ldw	r9,76(sp)
 800c430:	d8800f15 	stw	r2,60(sp)
 800c434:	d8c00a15 	stw	r3,40(sp)
 800c438:	d8c00b17 	ldw	r3,44(sp)
 800c43c:	1800d31e 	bne	r3,zero,800c78c <_strtod_r+0xc98>
 800c440:	d9000a17 	ldw	r4,40(sp)
 800c444:	2220003c 	xorhi	r8,r4,32768
 800c448:	df000f17 	ldw	fp,60(sp)
 800c44c:	402f883a 	mov	r23,r8
 800c450:	0081ac34 	movhi	r2,1712
 800c454:	b891883a 	add	r8,r23,r2
 800c458:	426fc83a 	sub	r23,r8,r9
 800c45c:	a809883a 	mov	r4,r21
 800c460:	880b883a 	mov	r5,r17
 800c464:	da401315 	stw	r9,76(sp)
 800c468:	800aa540 	call	800aa54 <__ulp>
 800c46c:	b80b883a 	mov	r5,r23
 800c470:	e009883a 	mov	r4,fp
 800c474:	100d883a 	mov	r6,r2
 800c478:	180f883a 	mov	r7,r3
 800c47c:	8016f300 	call	8016f30 <__muldf3>
 800c480:	a809883a 	mov	r4,r21
 800c484:	880b883a 	mov	r5,r17
 800c488:	100d883a 	mov	r6,r2
 800c48c:	180f883a 	mov	r7,r3
 800c490:	8015b840 	call	8015b84 <__adddf3>
 800c494:	da401317 	ldw	r9,76(sp)
 800c498:	102b883a 	mov	r21,r2
 800c49c:	1823883a 	mov	r17,r3
 800c4a0:	d8800815 	stw	r2,32(sp)
 800c4a4:	d8c00715 	stw	r3,28(sp)
 800c4a8:	182f883a 	mov	r23,r3
 800c4ac:	b000021e 	bne	r22,zero,800c4b8 <_strtod_r+0x9c4>
 800c4b0:	b89ffc2c 	andhi	r2,r23,32752
 800c4b4:	48806e26 	beq	r9,r2,800c670 <_strtod_r+0xb7c>
 800c4b8:	d9400517 	ldw	r5,20(sp)
 800c4bc:	8009883a 	mov	r4,r16
 800c4c0:	800a0440 	call	800a044 <_Bfree>
 800c4c4:	8009883a 	mov	r4,r16
 800c4c8:	980b883a 	mov	r5,r19
 800c4cc:	800a0440 	call	800a044 <_Bfree>
 800c4d0:	8009883a 	mov	r4,r16
 800c4d4:	900b883a 	mov	r5,r18
 800c4d8:	800a0440 	call	800a044 <_Bfree>
 800c4dc:	8009883a 	mov	r4,r16
 800c4e0:	a00b883a 	mov	r5,r20
 800c4e4:	800a0440 	call	800a044 <_Bfree>
 800c4e8:	003f3b06 	br	800c1d8 <__alt_data_end+0xf800c1d8>
 800c4ec:	00c00d84 	movi	r3,54
 800c4f0:	1905c83a 	sub	r2,r3,r4
 800c4f4:	003f6006 	br	800c278 <__alt_data_end+0xf800c278>
 800c4f8:	4009883a 	mov	r4,r8
 800c4fc:	b80b883a 	mov	r5,r23
 800c500:	000d883a 	mov	r6,zero
 800c504:	01cff834 	movhi	r7,16352
 800c508:	8016f300 	call	8016f30 <__muldf3>
 800c50c:	d9000b17 	ldw	r4,44(sp)
 800c510:	d8800f15 	stw	r2,60(sp)
 800c514:	d8c00a15 	stw	r3,40(sp)
 800c518:	2000481e 	bne	r4,zero,800c63c <_strtod_r+0xb48>
 800c51c:	1a20003c 	xorhi	r8,r3,32768
 800c520:	1039883a 	mov	fp,r2
 800c524:	d8800717 	ldw	r2,28(sp)
 800c528:	402f883a 	mov	r23,r8
 800c52c:	125ffc2c 	andhi	r9,r2,32752
 800c530:	009ff834 	movhi	r2,32736
 800c534:	48bfaa1e 	bne	r9,r2,800c3e0 <__alt_data_end+0xf800c3e0>
 800c538:	d8c00717 	ldw	r3,28(sp)
 800c53c:	00bf2c34 	movhi	r2,64688
 800c540:	d9000817 	ldw	r4,32(sp)
 800c544:	1887883a 	add	r3,r3,r2
 800c548:	180b883a 	mov	r5,r3
 800c54c:	da401315 	stw	r9,76(sp)
 800c550:	d8c00715 	stw	r3,28(sp)
 800c554:	800aa540 	call	800aa54 <__ulp>
 800c558:	e009883a 	mov	r4,fp
 800c55c:	b80b883a 	mov	r5,r23
 800c560:	100d883a 	mov	r6,r2
 800c564:	180f883a 	mov	r7,r3
 800c568:	8016f300 	call	8016f30 <__muldf3>
 800c56c:	d9000817 	ldw	r4,32(sp)
 800c570:	d9400717 	ldw	r5,28(sp)
 800c574:	100d883a 	mov	r6,r2
 800c578:	180f883a 	mov	r7,r3
 800c57c:	8015b840 	call	8015b84 <__adddf3>
 800c580:	011f2834 	movhi	r4,31904
 800c584:	d8800815 	stw	r2,32(sp)
 800c588:	213fffc4 	addi	r4,r4,-1
 800c58c:	189ffc2c 	andhi	r2,r3,32752
 800c590:	da401317 	ldw	r9,76(sp)
 800c594:	2080762e 	bgeu	r4,r2,800c770 <_strtod_r+0xc7c>
 800c598:	009ffc34 	movhi	r2,32752
 800c59c:	10bfffc4 	addi	r2,r2,-1
 800c5a0:	88814426 	beq	r17,r2,800cab4 <_strtod_r+0xfc0>
 800c5a4:	00dffc34 	movhi	r3,32752
 800c5a8:	18ffffc4 	addi	r3,r3,-1
 800c5ac:	013fffc4 	movi	r4,-1
 800c5b0:	d8c00715 	stw	r3,28(sp)
 800c5b4:	d9000815 	stw	r4,32(sp)
 800c5b8:	202b883a 	mov	r21,r4
 800c5bc:	1823883a 	mov	r17,r3
 800c5c0:	003fbd06 	br	800c4b8 <__alt_data_end+0xf800c4b8>
 800c5c4:	a0afc83a 	sub	r23,r20,r2
 800c5c8:	df000917 	ldw	fp,36(sp)
 800c5cc:	003f2406 	br	800c260 <__alt_data_end+0xf800c260>
 800c5d0:	d8800817 	ldw	r2,32(sp)
 800c5d4:	10001b1e 	bne	r2,zero,800c644 <_strtod_r+0xb50>
 800c5d8:	d8c00717 	ldw	r3,28(sp)
 800c5dc:	01000434 	movhi	r4,16
 800c5e0:	213fffc4 	addi	r4,r4,-1
 800c5e4:	1904703a 	and	r2,r3,r4
 800c5e8:	10001b1e 	bne	r2,zero,800c658 <_strtod_r+0xb64>
 800c5ec:	4009883a 	mov	r4,r8
 800c5f0:	b80b883a 	mov	r5,r23
 800c5f4:	000d883a 	mov	r6,zero
 800c5f8:	01cffc34 	movhi	r7,16368
 800c5fc:	da001315 	stw	r8,76(sp)
 800c600:	8016e500 	call	8016e50 <__ledf2>
 800c604:	da001317 	ldw	r8,76(sp)
 800c608:	10017b16 	blt	r2,zero,800cbf8 <_strtod_r+0x1104>
 800c60c:	4009883a 	mov	r4,r8
 800c610:	b80b883a 	mov	r5,r23
 800c614:	000d883a 	mov	r6,zero
 800c618:	01cff834 	movhi	r7,16352
 800c61c:	8016f300 	call	8016f30 <__muldf3>
 800c620:	d8800f15 	stw	r2,60(sp)
 800c624:	d8c00a15 	stw	r3,40(sp)
 800c628:	102f883a 	mov	r23,r2
 800c62c:	1a20003c 	xorhi	r8,r3,32768
 800c630:	b839883a 	mov	fp,r23
 800c634:	402f883a 	mov	r23,r8
 800c638:	003f6506 	br	800c3d0 <__alt_data_end+0xf800c3d0>
 800c63c:	da000a17 	ldw	r8,40(sp)
 800c640:	003fb706 	br	800c520 <__alt_data_end+0xf800c520>
 800c644:	d8c00817 	ldw	r3,32(sp)
 800c648:	00800044 	movi	r2,1
 800c64c:	1880021e 	bne	r3,r2,800c658 <_strtod_r+0xb64>
 800c650:	d9000717 	ldw	r4,28(sp)
 800c654:	2000a426 	beq	r4,zero,800c8e8 <_strtod_r+0xdf4>
 800c658:	008ffc34 	movhi	r2,16368
 800c65c:	0039883a 	mov	fp,zero
 800c660:	05effc34 	movhi	r23,49136
 800c664:	d8000f15 	stw	zero,60(sp)
 800c668:	d8800a15 	stw	r2,40(sp)
 800c66c:	003f5806 	br	800c3d0 <__alt_data_end+0xf800c3d0>
 800c670:	d9400a17 	ldw	r5,40(sp)
 800c674:	d9000f17 	ldw	r4,60(sp)
 800c678:	8017f240 	call	8017f24 <__fixdfsi>
 800c67c:	1009883a 	mov	r4,r2
 800c680:	8017fac0 	call	8017fac <__floatsidf>
 800c684:	d9000f17 	ldw	r4,60(sp)
 800c688:	d9400a17 	ldw	r5,40(sp)
 800c68c:	100d883a 	mov	r6,r2
 800c690:	180f883a 	mov	r7,r3
 800c694:	80176540 	call	8017654 <__subdf3>
 800c698:	1011883a 	mov	r8,r2
 800c69c:	d8800b17 	ldw	r2,44(sp)
 800c6a0:	10001f1e 	bne	r2,zero,800c720 <_strtod_r+0xc2c>
 800c6a4:	d9000817 	ldw	r4,32(sp)
 800c6a8:	20001d1e 	bne	r4,zero,800c720 <_strtod_r+0xc2c>
 800c6ac:	00800434 	movhi	r2,16
 800c6b0:	10bfffc4 	addi	r2,r2,-1
 800c6b4:	b8ae703a 	and	r23,r23,r2
 800c6b8:	b800191e 	bne	r23,zero,800c720 <_strtod_r+0xc2c>
 800c6bc:	01a52834 	movhi	r6,38048
 800c6c0:	01cff434 	movhi	r7,16336
 800c6c4:	318d6544 	addi	r6,r6,13717
 800c6c8:	39ffffc4 	addi	r7,r7,-1
 800c6cc:	4009883a 	mov	r4,r8
 800c6d0:	180b883a 	mov	r5,r3
 800c6d4:	8016e500 	call	8016e50 <__ledf2>
 800c6d8:	103f770e 	bge	r2,zero,800c4b8 <__alt_data_end+0xf800c4b8>
 800c6dc:	a02d883a 	mov	r22,r20
 800c6e0:	d9400517 	ldw	r5,20(sp)
 800c6e4:	8009883a 	mov	r4,r16
 800c6e8:	800a0440 	call	800a044 <_Bfree>
 800c6ec:	8009883a 	mov	r4,r16
 800c6f0:	980b883a 	mov	r5,r19
 800c6f4:	800a0440 	call	800a044 <_Bfree>
 800c6f8:	8009883a 	mov	r4,r16
 800c6fc:	900b883a 	mov	r5,r18
 800c700:	800a0440 	call	800a044 <_Bfree>
 800c704:	d9400d17 	ldw	r5,52(sp)
 800c708:	8009883a 	mov	r4,r16
 800c70c:	800a0440 	call	800a044 <_Bfree>
 800c710:	8009883a 	mov	r4,r16
 800c714:	b00b883a 	mov	r5,r22
 800c718:	800a0440 	call	800a044 <_Bfree>
 800c71c:	003dd606 	br	800be78 <__alt_data_end+0xf800be78>
 800c720:	01a52834 	movhi	r6,38048
 800c724:	01cff834 	movhi	r7,16352
 800c728:	4009883a 	mov	r4,r8
 800c72c:	180b883a 	mov	r5,r3
 800c730:	318d6544 	addi	r6,r6,13717
 800c734:	39ffffc4 	addi	r7,r7,-1
 800c738:	d8c01415 	stw	r3,80(sp)
 800c73c:	da001315 	stw	r8,76(sp)
 800c740:	8016e500 	call	8016e50 <__ledf2>
 800c744:	d8c01417 	ldw	r3,80(sp)
 800c748:	da001317 	ldw	r8,76(sp)
 800c74c:	103fe316 	blt	r2,zero,800c6dc <__alt_data_end+0xf800c6dc>
 800c750:	018d6c34 	movhi	r6,13744
 800c754:	31b94d44 	addi	r6,r6,-6859
 800c758:	4009883a 	mov	r4,r8
 800c75c:	180b883a 	mov	r5,r3
 800c760:	01cff834 	movhi	r7,16352
 800c764:	8016d700 	call	8016d70 <__gedf2>
 800c768:	00bf530e 	bge	zero,r2,800c4b8 <__alt_data_end+0xf800c4b8>
 800c76c:	003fdb06 	br	800c6dc <__alt_data_end+0xf800c6dc>
 800c770:	0080d434 	movhi	r2,848
 800c774:	1887883a 	add	r3,r3,r2
 800c778:	d8c00715 	stw	r3,28(sp)
 800c77c:	182f883a 	mov	r23,r3
 800c780:	dd400817 	ldw	r21,32(sp)
 800c784:	1823883a 	mov	r17,r3
 800c788:	003f4806 	br	800c4ac <__alt_data_end+0xf800c4ac>
 800c78c:	da000a17 	ldw	r8,40(sp)
 800c790:	003f2d06 	br	800c448 <__alt_data_end+0xf800c448>
 800c794:	008ffc34 	movhi	r2,16368
 800c798:	d8000f15 	stw	zero,60(sp)
 800c79c:	d8800a15 	stw	r2,40(sp)
 800c7a0:	003f2506 	br	800c438 <__alt_data_end+0xf800c438>
 800c7a4:	dd800615 	stw	r22,24(sp)
 800c7a8:	000f883a 	mov	r7,zero
 800c7ac:	003d7506 	br	800bd84 <__alt_data_end+0xf800bd84>
 800c7b0:	a039883a 	mov	fp,r20
 800c7b4:	000b883a 	mov	r5,zero
 800c7b8:	0011883a 	mov	r8,zero
 800c7bc:	99bff404 	addi	r6,r19,-48
 800c7c0:	00800244 	movi	r2,9
 800c7c4:	11801036 	bltu	r2,r6,800c808 <_strtod_r+0xd14>
 800c7c8:	28c00044 	addi	r3,r5,1
 800c7cc:	3027883a 	mov	r19,r6
 800c7d0:	3001331e 	bne	r6,zero,800cca0 <_strtod_r+0x11ac>
 800c7d4:	d9000617 	ldw	r4,24(sp)
 800c7d8:	180b883a 	mov	r5,r3
 800c7dc:	20800044 	addi	r2,r4,1
 800c7e0:	d8800615 	stw	r2,24(sp)
 800c7e4:	24c00047 	ldb	r19,1(r4)
 800c7e8:	003ff406 	br	800c7bc <__alt_data_end+0xf800c7bc>
 800c7ec:	01c00044 	movi	r7,1
 800c7f0:	b0800084 	addi	r2,r22,2
 800c7f4:	d8800615 	stw	r2,24(sp)
 800c7f8:	b4c00087 	ldb	r19,2(r22)
 800c7fc:	003dad06 	br	800beb4 <__alt_data_end+0xf800beb4>
 800c800:	000f883a 	mov	r7,zero
 800c804:	003ffa06 	br	800c7f0 <__alt_data_end+0xf800c7f0>
 800c808:	02400044 	movi	r9,1
 800c80c:	003d5806 	br	800bd70 <__alt_data_end+0xf800bd70>
 800c810:	00804d04 	movi	r2,308
 800c814:	1440af16 	blt	r2,r17,800cad4 <_strtod_r+0xfe0>
 800c818:	8827d13a 	srai	r19,r17,4
 800c81c:	05800044 	movi	r22,1
 800c820:	044200b4 	movhi	r17,2050
 800c824:	8c72f704 	addi	r17,r17,-13348
 800c828:	b4c1db0e 	bge	r22,r19,800cf98 <_strtod_r+0x14a4>
 800c82c:	d8800817 	ldw	r2,32(sp)
 800c830:	d8c00717 	ldw	r3,28(sp)
 800c834:	002b883a 	mov	r21,zero
 800c838:	9980004c 	andi	r6,r19,1
 800c83c:	30000726 	beq	r6,zero,800c85c <_strtod_r+0xd68>
 800c840:	a80c90fa 	slli	r6,r21,3
 800c844:	1009883a 	mov	r4,r2
 800c848:	180b883a 	mov	r5,r3
 800c84c:	8985883a 	add	r2,r17,r6
 800c850:	11800017 	ldw	r6,0(r2)
 800c854:	11c00117 	ldw	r7,4(r2)
 800c858:	8016f300 	call	8016f30 <__muldf3>
 800c85c:	9827d07a 	srai	r19,r19,1
 800c860:	ad400044 	addi	r21,r21,1
 800c864:	9dbff41e 	bne	r19,r22,800c838 <__alt_data_end+0xf800c838>
 800c868:	d8800815 	stw	r2,32(sp)
 800c86c:	d8c00715 	stw	r3,28(sp)
 800c870:	a82a90fa 	slli	r21,r21,3
 800c874:	d8800717 	ldw	r2,28(sp)
 800c878:	d9800817 	ldw	r6,32(sp)
 800c87c:	8d63883a 	add	r17,r17,r21
 800c880:	89000017 	ldw	r4,0(r17)
 800c884:	89400117 	ldw	r5,4(r17)
 800c888:	01ff2c34 	movhi	r7,64688
 800c88c:	11cf883a 	add	r7,r2,r7
 800c890:	8016f300 	call	8016f30 <__muldf3>
 800c894:	d8800815 	stw	r2,32(sp)
 800c898:	011f2834 	movhi	r4,31904
 800c89c:	189ffc2c 	andhi	r2,r3,32752
 800c8a0:	20808c36 	bltu	r4,r2,800cad4 <_strtod_r+0xfe0>
 800c8a4:	011f2434 	movhi	r4,31888
 800c8a8:	2081a62e 	bgeu	r4,r2,800cf44 <_strtod_r+0x1450>
 800c8ac:	00dffc34 	movhi	r3,32752
 800c8b0:	18ffffc4 	addi	r3,r3,-1
 800c8b4:	013fffc4 	movi	r4,-1
 800c8b8:	d8c00715 	stw	r3,28(sp)
 800c8bc:	d9000815 	stw	r4,32(sp)
 800c8c0:	202b883a 	mov	r21,r4
 800c8c4:	1823883a 	mov	r17,r3
 800c8c8:	d8001215 	stw	zero,72(sp)
 800c8cc:	003e3206 	br	800c198 <__alt_data_end+0xf800c198>
 800c8d0:	00801944 	movi	r2,101
 800c8d4:	98bde226 	beq	r19,r2,800c060 <__alt_data_end+0xf800c060>
 800c8d8:	0039883a 	mov	fp,zero
 800c8dc:	0011883a 	mov	r8,zero
 800c8e0:	02400044 	movi	r9,1
 800c8e4:	003d2406 	br	800bd78 <__alt_data_end+0xf800bd78>
 800c8e8:	a02d883a 	mov	r22,r20
 800c8ec:	00800884 	movi	r2,34
 800c8f0:	80800015 	stw	r2,0(r16)
 800c8f4:	002b883a 	mov	r21,zero
 800c8f8:	0023883a 	mov	r17,zero
 800c8fc:	003f7806 	br	800c6e0 <__alt_data_end+0xf800c6e0>
 800c900:	d8c01017 	ldw	r3,64(sp)
 800c904:	04c200b4 	movhi	r19,2050
 800c908:	d8800504 	addi	r2,sp,20
 800c90c:	9cf5f004 	addi	r19,r19,-10304
 800c910:	d8800015 	stw	r2,0(sp)
 800c914:	d8c00115 	stw	r3,4(sp)
 800c918:	8009883a 	mov	r4,r16
 800c91c:	d9400604 	addi	r5,sp,24
 800c920:	980d883a 	mov	r6,r19
 800c924:	d9c00404 	addi	r7,sp,16
 800c928:	8012d880 	call	8012d88 <__gethex>
 800c92c:	144001cc 	andi	r17,r2,7
 800c930:	883d4f26 	beq	r17,zero,800be70 <__alt_data_end+0xf800be70>
 800c934:	00c00184 	movi	r3,6
 800c938:	88c0f21e 	bne	r17,r3,800cd04 <_strtod_r+0x1210>
 800c93c:	94800044 	addi	r18,r18,1
 800c940:	dc800615 	stw	r18,24(sp)
 800c944:	002b883a 	mov	r21,zero
 800c948:	0023883a 	mov	r17,zero
 800c94c:	003d4a06 	br	800be78 <__alt_data_end+0xf800be78>
 800c950:	df000b17 	ldw	fp,44(sp)
 800c954:	a02d883a 	mov	r22,r20
 800c958:	e0003d1e 	bne	fp,zero,800ca50 <_strtod_r+0xf5c>
 800c95c:	d9000817 	ldw	r4,32(sp)
 800c960:	20003b1e 	bne	r4,zero,800ca50 <_strtod_r+0xf5c>
 800c964:	d8c00717 	ldw	r3,28(sp)
 800c968:	00800434 	movhi	r2,16
 800c96c:	10bfffc4 	addi	r2,r2,-1
 800c970:	1884703a 	and	r2,r3,r2
 800c974:	1000361e 	bne	r2,zero,800ca50 <_strtod_r+0xf5c>
 800c978:	18dffc2c 	andhi	r3,r3,32752
 800c97c:	0081ac34 	movhi	r2,1712
 800c980:	10c0332e 	bgeu	r2,r3,800ca50 <_strtod_r+0xf5c>
 800c984:	a0800517 	ldw	r2,20(r20)
 800c988:	1000031e 	bne	r2,zero,800c998 <_strtod_r+0xea4>
 800c98c:	a0800417 	ldw	r2,16(r20)
 800c990:	01000044 	movi	r4,1
 800c994:	20802e0e 	bge	r4,r2,800ca50 <_strtod_r+0xf5c>
 800c998:	8009883a 	mov	r4,r16
 800c99c:	a00b883a 	mov	r5,r20
 800c9a0:	01800044 	movi	r6,1
 800c9a4:	d8c01415 	stw	r3,80(sp)
 800c9a8:	800a7140 	call	800a714 <__lshift>
 800c9ac:	1009883a 	mov	r4,r2
 800c9b0:	900b883a 	mov	r5,r18
 800c9b4:	102d883a 	mov	r22,r2
 800c9b8:	800a85c0 	call	800a85c <__mcmp>
 800c9bc:	d8c01417 	ldw	r3,80(sp)
 800c9c0:	0080230e 	bge	zero,r2,800ca50 <_strtod_r+0xf5c>
 800c9c4:	d8801217 	ldw	r2,72(sp)
 800c9c8:	10016a26 	beq	r2,zero,800cf74 <_strtod_r+0x1480>
 800c9cc:	0081ac34 	movhi	r2,1712
 800c9d0:	10c16816 	blt	r2,r3,800cf74 <_strtod_r+0x1480>
 800c9d4:	0080dc34 	movhi	r2,880
 800c9d8:	10ffc40e 	bge	r2,r3,800c8ec <__alt_data_end+0xf800c8ec>
 800c9dc:	a809883a 	mov	r4,r21
 800c9e0:	880b883a 	mov	r5,r17
 800c9e4:	000d883a 	mov	r6,zero
 800c9e8:	01ce5434 	movhi	r7,14672
 800c9ec:	8016f300 	call	8016f30 <__muldf3>
 800c9f0:	102b883a 	mov	r21,r2
 800c9f4:	1823883a 	mov	r17,r3
 800c9f8:	183f391e 	bne	r3,zero,800c6e0 <__alt_data_end+0xf800c6e0>
 800c9fc:	103f381e 	bne	r2,zero,800c6e0 <__alt_data_end+0xf800c6e0>
 800ca00:	00800884 	movi	r2,34
 800ca04:	80800015 	stw	r2,0(r16)
 800ca08:	003f3506 	br	800c6e0 <__alt_data_end+0xf800c6e0>
 800ca0c:	d8801217 	ldw	r2,72(sp)
 800ca10:	10015f26 	beq	r2,zero,800cf90 <_strtod_r+0x149c>
 800ca14:	209ffc2c 	andhi	r2,r4,32752
 800ca18:	00c1a834 	movhi	r3,1696
 800ca1c:	18815c36 	bltu	r3,r2,800cf90 <_strtod_r+0x149c>
 800ca20:	1004d53a 	srli	r2,r2,20
 800ca24:	00c01ac4 	movi	r3,107
 800ca28:	1887c83a 	sub	r3,r3,r2
 800ca2c:	00bfffc4 	movi	r2,-1
 800ca30:	10c4983a 	sll	r2,r2,r3
 800ca34:	d8c00817 	ldw	r3,32(sp)
 800ca38:	1880101e 	bne	r3,r2,800ca7c <_strtod_r+0xf88>
 800ca3c:	d9000717 	ldw	r4,28(sp)
 800ca40:	00800434 	movhi	r2,16
 800ca44:	002b883a 	mov	r21,zero
 800ca48:	245ffc2c 	andhi	r17,r4,32752
 800ca4c:	88a3883a 	add	r17,r17,r2
 800ca50:	d8c01217 	ldw	r3,72(sp)
 800ca54:	183fe11e 	bne	r3,zero,800c9dc <__alt_data_end+0xf800c9dc>
 800ca58:	003f2106 	br	800c6e0 <__alt_data_end+0xf800c6e0>
 800ca5c:	df000b17 	ldw	fp,44(sp)
 800ca60:	00800434 	movhi	r2,16
 800ca64:	a02d883a 	mov	r22,r20
 800ca68:	10bfffc4 	addi	r2,r2,-1
 800ca6c:	e0009e26 	beq	fp,zero,800cce8 <_strtod_r+0x11f4>
 800ca70:	d9000717 	ldw	r4,28(sp)
 800ca74:	2086703a 	and	r3,r4,r2
 800ca78:	18bfe426 	beq	r3,r2,800ca0c <__alt_data_end+0xf800ca0c>
 800ca7c:	d8c00817 	ldw	r3,32(sp)
 800ca80:	1880004c 	andi	r2,r3,1
 800ca84:	103ff226 	beq	r2,zero,800ca50 <__alt_data_end+0xf800ca50>
 800ca88:	a809883a 	mov	r4,r21
 800ca8c:	880b883a 	mov	r5,r17
 800ca90:	800aa540 	call	800aa54 <__ulp>
 800ca94:	a809883a 	mov	r4,r21
 800ca98:	880b883a 	mov	r5,r17
 800ca9c:	100d883a 	mov	r6,r2
 800caa0:	180f883a 	mov	r7,r3
 800caa4:	8015b840 	call	8015b84 <__adddf3>
 800caa8:	102b883a 	mov	r21,r2
 800caac:	1823883a 	mov	r17,r3
 800cab0:	003fe706 	br	800ca50 <__alt_data_end+0xf800ca50>
 800cab4:	00bfffc4 	movi	r2,-1
 800cab8:	a8beba1e 	bne	r21,r2,800c5a4 <__alt_data_end+0xf800c5a4>
 800cabc:	00800884 	movi	r2,34
 800cac0:	80800015 	stw	r2,0(r16)
 800cac4:	002b883a 	mov	r21,zero
 800cac8:	045ffc34 	movhi	r17,32752
 800cacc:	a02d883a 	mov	r22,r20
 800cad0:	003f0306 	br	800c6e0 <__alt_data_end+0xf800c6e0>
 800cad4:	00800884 	movi	r2,34
 800cad8:	80800015 	stw	r2,0(r16)
 800cadc:	002b883a 	mov	r21,zero
 800cae0:	045ffc34 	movhi	r17,32752
 800cae4:	003ce406 	br	800be78 <__alt_data_end+0xf800be78>
 800cae8:	883da826 	beq	r17,zero,800c18c <__alt_data_end+0xf800c18c>
 800caec:	0463c83a 	sub	r17,zero,r17
 800caf0:	888003cc 	andi	r2,r17,15
 800caf4:	10000b26 	beq	r2,zero,800cb24 <_strtod_r+0x1030>
 800caf8:	100490fa 	slli	r2,r2,3
 800cafc:	00c200b4 	movhi	r3,2050
 800cb00:	18f30104 	addi	r3,r3,-13308
 800cb04:	1885883a 	add	r2,r3,r2
 800cb08:	d9000817 	ldw	r4,32(sp)
 800cb0c:	d9400717 	ldw	r5,28(sp)
 800cb10:	11800017 	ldw	r6,0(r2)
 800cb14:	11c00117 	ldw	r7,4(r2)
 800cb18:	80164200 	call	8016420 <__divdf3>
 800cb1c:	d8800815 	stw	r2,32(sp)
 800cb20:	d8c00715 	stw	r3,28(sp)
 800cb24:	8823d13a 	srai	r17,r17,4
 800cb28:	883d9826 	beq	r17,zero,800c18c <__alt_data_end+0xf800c18c>
 800cb2c:	008007c4 	movi	r2,31
 800cb30:	14402c16 	blt	r2,r17,800cbe4 <_strtod_r+0x10f0>
 800cb34:	8880040c 	andi	r2,r17,16
 800cb38:	10011e26 	beq	r2,zero,800cfb4 <_strtod_r+0x14c0>
 800cb3c:	0441330e 	bge	zero,r17,800d00c <_strtod_r+0x1518>
 800cb40:	00801a84 	movi	r2,106
 800cb44:	d8801215 	stw	r2,72(sp)
 800cb48:	d8800817 	ldw	r2,32(sp)
 800cb4c:	d8c00717 	ldw	r3,28(sp)
 800cb50:	04c200b4 	movhi	r19,2050
 800cb54:	9cf33704 	addi	r19,r19,-13092
 800cb58:	8980004c 	andi	r6,r17,1
 800cb5c:	30000526 	beq	r6,zero,800cb74 <_strtod_r+0x1080>
 800cb60:	99800017 	ldw	r6,0(r19)
 800cb64:	99c00117 	ldw	r7,4(r19)
 800cb68:	1009883a 	mov	r4,r2
 800cb6c:	180b883a 	mov	r5,r3
 800cb70:	8016f300 	call	8016f30 <__muldf3>
 800cb74:	8823d07a 	srai	r17,r17,1
 800cb78:	9cc00204 	addi	r19,r19,8
 800cb7c:	047ff616 	blt	zero,r17,800cb58 <__alt_data_end+0xf800cb58>
 800cb80:	d8c00715 	stw	r3,28(sp)
 800cb84:	d8c01217 	ldw	r3,72(sp)
 800cb88:	d8800815 	stw	r2,32(sp)
 800cb8c:	18000d26 	beq	r3,zero,800cbc4 <_strtod_r+0x10d0>
 800cb90:	d9000717 	ldw	r4,28(sp)
 800cb94:	00801ac4 	movi	r2,107
 800cb98:	20dffc2c 	andhi	r3,r4,32752
 800cb9c:	1806d53a 	srli	r3,r3,20
 800cba0:	10c5c83a 	sub	r2,r2,r3
 800cba4:	0080070e 	bge	zero,r2,800cbc4 <_strtod_r+0x10d0>
 800cba8:	00c007c4 	movi	r3,31
 800cbac:	1881110e 	bge	r3,r2,800cff4 <_strtod_r+0x1500>
 800cbb0:	d8000815 	stw	zero,32(sp)
 800cbb4:	00c00d04 	movi	r3,52
 800cbb8:	1881170e 	bge	r3,r2,800d018 <_strtod_r+0x1524>
 800cbbc:	0080dc34 	movhi	r2,880
 800cbc0:	d8800715 	stw	r2,28(sp)
 800cbc4:	d9000817 	ldw	r4,32(sp)
 800cbc8:	d9400717 	ldw	r5,28(sp)
 800cbcc:	000d883a 	mov	r6,zero
 800cbd0:	000f883a 	mov	r7,zero
 800cbd4:	202b883a 	mov	r21,r4
 800cbd8:	2823883a 	mov	r17,r5
 800cbdc:	8016cec0 	call	8016cec <__eqdf2>
 800cbe0:	103d6d1e 	bne	r2,zero,800c198 <__alt_data_end+0xf800c198>
 800cbe4:	00800884 	movi	r2,34
 800cbe8:	80800015 	stw	r2,0(r16)
 800cbec:	002b883a 	mov	r21,zero
 800cbf0:	0023883a 	mov	r17,zero
 800cbf4:	003ca006 	br	800be78 <__alt_data_end+0xf800be78>
 800cbf8:	00cff834 	movhi	r3,16352
 800cbfc:	002f883a 	mov	r23,zero
 800cc00:	022ff834 	movhi	r8,49120
 800cc04:	d8000f15 	stw	zero,60(sp)
 800cc08:	d8c00a15 	stw	r3,40(sp)
 800cc0c:	003e8806 	br	800c630 <__alt_data_end+0xf800c630>
 800cc10:	009387c4 	movi	r2,19999
 800cc14:	003cd706 	br	800bf74 <__alt_data_end+0xf800bf74>
 800cc18:	14c03fcc 	andi	r19,r2,255
 800cc1c:	9cc0201c 	xori	r19,r19,128
 800cc20:	9cffe004 	addi	r19,r19,-128
 800cc24:	9039883a 	mov	fp,r18
 800cc28:	002b883a 	mov	r21,zero
 800cc2c:	002f883a 	mov	r23,zero
 800cc30:	0029883a 	mov	r20,zero
 800cc34:	003c3d06 	br	800bd2c <__alt_data_end+0xf800bd2c>
 800cc38:	d9000e17 	ldw	r4,56(sp)
 800cc3c:	00c00944 	movi	r3,37
 800cc40:	1f07c83a 	sub	r3,r3,fp
 800cc44:	193d3d16 	blt	r3,r4,800c13c <__alt_data_end+0xf800c13c>
 800cc48:	1739c83a 	sub	fp,r2,fp
 800cc4c:	e00690fa 	slli	r3,fp,3
 800cc50:	040200b4 	movhi	r16,2050
 800cc54:	84330104 	addi	r16,r16,-13308
 800cc58:	80c7883a 	add	r3,r16,r3
 800cc5c:	d9800817 	ldw	r6,32(sp)
 800cc60:	d9c00717 	ldw	r7,28(sp)
 800cc64:	19000017 	ldw	r4,0(r3)
 800cc68:	19400117 	ldw	r5,4(r3)
 800cc6c:	8016f300 	call	8016f30 <__muldf3>
 800cc70:	d9000e17 	ldw	r4,56(sp)
 800cc74:	180b883a 	mov	r5,r3
 800cc78:	2739c83a 	sub	fp,r4,fp
 800cc7c:	e00c90fa 	slli	r6,fp,3
 800cc80:	1009883a 	mov	r4,r2
 800cc84:	8185883a 	add	r2,r16,r6
 800cc88:	11800017 	ldw	r6,0(r2)
 800cc8c:	11c00117 	ldw	r7,4(r2)
 800cc90:	8016f300 	call	8016f30 <__muldf3>
 800cc94:	102b883a 	mov	r21,r2
 800cc98:	1823883a 	mov	r17,r3
 800cc9c:	003c7606 	br	800be78 <__alt_data_end+0xf800be78>
 800cca0:	40d1883a 	add	r8,r8,r3
 800cca4:	2800c126 	beq	r5,zero,800cfac <_strtod_r+0x14b8>
 800cca8:	2f0b883a 	add	r5,r5,fp
 800ccac:	01000204 	movi	r4,8
 800ccb0:	01c00404 	movi	r7,16
 800ccb4:	e7000044 	addi	fp,fp,1
 800ccb8:	e0bfffc4 	addi	r2,fp,-1
 800ccbc:	20800716 	blt	r4,r2,800ccdc <_strtod_r+0x11e8>
 800ccc0:	bdc002a4 	muli	r23,r23,10
 800ccc4:	e17ffb1e 	bne	fp,r5,800ccb4 <__alt_data_end+0xf800ccb4>
 800ccc8:	00800204 	movi	r2,8
 800cccc:	2f000044 	addi	fp,r5,1
 800ccd0:	11406b16 	blt	r2,r5,800ce80 <_strtod_r+0x138c>
 800ccd4:	d9000617 	ldw	r4,24(sp)
 800ccd8:	003d1406 	br	800c12c <__alt_data_end+0xf800c12c>
 800ccdc:	3f3ff916 	blt	r7,fp,800ccc4 <__alt_data_end+0xf800ccc4>
 800cce0:	ad4002a4 	muli	r21,r21,10
 800cce4:	003ff706 	br	800ccc4 <__alt_data_end+0xf800ccc4>
 800cce8:	d8c00717 	ldw	r3,28(sp)
 800ccec:	1884703a 	and	r2,r3,r2
 800ccf0:	10004f1e 	bne	r2,zero,800ce30 <_strtod_r+0x133c>
 800ccf4:	d9000817 	ldw	r4,32(sp)
 800ccf8:	20004d1e 	bne	r4,zero,800ce30 <_strtod_r+0x133c>
 800ccfc:	18dffc2c 	andhi	r3,r3,32752
 800cd00:	003f3006 	br	800c9c4 <__alt_data_end+0xf800c9c4>
 800cd04:	d9800517 	ldw	r6,20(sp)
 800cd08:	30000826 	beq	r6,zero,800cd2c <_strtod_r+0x1238>
 800cd0c:	99400017 	ldw	r5,0(r19)
 800cd10:	d9000204 	addi	r4,sp,8
 800cd14:	d8801315 	stw	r2,76(sp)
 800cd18:	800ae240 	call	800ae24 <__copybits>
 800cd1c:	d9400517 	ldw	r5,20(sp)
 800cd20:	8009883a 	mov	r4,r16
 800cd24:	800a0440 	call	800a044 <_Bfree>
 800cd28:	d8801317 	ldw	r2,76(sp)
 800cd2c:	00c00184 	movi	r3,6
 800cd30:	d9000417 	ldw	r4,16(sp)
 800cd34:	1c401036 	bltu	r3,r17,800cd78 <_strtod_r+0x1284>
 800cd38:	882290ba 	slli	r17,r17,2
 800cd3c:	00c20074 	movhi	r3,2049
 800cd40:	18f35404 	addi	r3,r3,-12976
 800cd44:	88e3883a 	add	r17,r17,r3
 800cd48:	88c00017 	ldw	r3,0(r17)
 800cd4c:	1800683a 	jmp	r3
 800cd50:	0800cd90 	cmplti	zero,at,822
 800cd54:	0800cdc8 	cmpgei	zero,at,823
 800cd58:	0800cdb4 	orhi	zero,at,822
 800cd5c:	0800cd6c 	andhi	zero,at,821
 800cd60:	0800cd9c 	xori	zero,at,822
 800cd64:	0800cdc8 	cmpgei	zero,at,823
 800cd68:	0800cd90 	cmplti	zero,at,822
 800cd6c:	00dffc34 	movhi	r3,32752
 800cd70:	d8c00715 	stw	r3,28(sp)
 800cd74:	d8000815 	stw	zero,32(sp)
 800cd78:	1080020c 	andi	r2,r2,8
 800cd7c:	dd400817 	ldw	r21,32(sp)
 800cd80:	103c2626 	beq	r2,zero,800be1c <__alt_data_end+0xf800be1c>
 800cd84:	d9000717 	ldw	r4,28(sp)
 800cd88:	24600034 	orhi	r17,r4,32768
 800cd8c:	003c3a06 	br	800be78 <__alt_data_end+0xf800be78>
 800cd90:	d8000715 	stw	zero,28(sp)
 800cd94:	d8000815 	stw	zero,32(sp)
 800cd98:	003ff706 	br	800cd78 <__alt_data_end+0xf800cd78>
 800cd9c:	01200034 	movhi	r4,32768
 800cda0:	213fffc4 	addi	r4,r4,-1
 800cda4:	00ffffc4 	movi	r3,-1
 800cda8:	d9000715 	stw	r4,28(sp)
 800cdac:	d8c00815 	stw	r3,32(sp)
 800cdb0:	003ff106 	br	800cd78 <__alt_data_end+0xf800cd78>
 800cdb4:	d9000217 	ldw	r4,8(sp)
 800cdb8:	d8c00317 	ldw	r3,12(sp)
 800cdbc:	d9000815 	stw	r4,32(sp)
 800cdc0:	d8c00715 	stw	r3,28(sp)
 800cdc4:	003fec06 	br	800cd78 <__alt_data_end+0xf800cd78>
 800cdc8:	20c10cc4 	addi	r3,r4,1075
 800cdcc:	d9000217 	ldw	r4,8(sp)
 800cdd0:	d9400317 	ldw	r5,12(sp)
 800cdd4:	1806953a 	slli	r3,r3,20
 800cdd8:	d9000815 	stw	r4,32(sp)
 800cddc:	013ffc34 	movhi	r4,65520
 800cde0:	213fffc4 	addi	r4,r4,-1
 800cde4:	2908703a 	and	r4,r5,r4
 800cde8:	1908b03a 	or	r4,r3,r4
 800cdec:	d9000715 	stw	r4,28(sp)
 800cdf0:	003fe106 	br	800cd78 <__alt_data_end+0xf800cd78>
 800cdf4:	d8c00e17 	ldw	r3,56(sp)
 800cdf8:	00bffa84 	movi	r2,-22
 800cdfc:	18bccf16 	blt	r3,r2,800c13c <__alt_data_end+0xf800c13c>
 800ce00:	180690fa 	slli	r3,r3,3
 800ce04:	008200b4 	movhi	r2,2050
 800ce08:	10b30104 	addi	r2,r2,-13308
 800ce0c:	10c5c83a 	sub	r2,r2,r3
 800ce10:	d9000817 	ldw	r4,32(sp)
 800ce14:	d9400717 	ldw	r5,28(sp)
 800ce18:	11800017 	ldw	r6,0(r2)
 800ce1c:	11c00117 	ldw	r7,4(r2)
 800ce20:	80164200 	call	8016420 <__divdf3>
 800ce24:	102b883a 	mov	r21,r2
 800ce28:	1823883a 	mov	r17,r3
 800ce2c:	003c1206 	br	800be78 <__alt_data_end+0xf800be78>
 800ce30:	d8c00817 	ldw	r3,32(sp)
 800ce34:	1880004c 	andi	r2,r3,1
 800ce38:	103f0526 	beq	r2,zero,800ca50 <__alt_data_end+0xf800ca50>
 800ce3c:	a809883a 	mov	r4,r21
 800ce40:	880b883a 	mov	r5,r17
 800ce44:	800aa540 	call	800aa54 <__ulp>
 800ce48:	a809883a 	mov	r4,r21
 800ce4c:	880b883a 	mov	r5,r17
 800ce50:	100d883a 	mov	r6,r2
 800ce54:	180f883a 	mov	r7,r3
 800ce58:	80176540 	call	8017654 <__subdf3>
 800ce5c:	1009883a 	mov	r4,r2
 800ce60:	180b883a 	mov	r5,r3
 800ce64:	000d883a 	mov	r6,zero
 800ce68:	000f883a 	mov	r7,zero
 800ce6c:	102b883a 	mov	r21,r2
 800ce70:	1823883a 	mov	r17,r3
 800ce74:	8016cec0 	call	8016cec <__eqdf2>
 800ce78:	103e9c26 	beq	r2,zero,800c8ec <__alt_data_end+0xf800c8ec>
 800ce7c:	003ef406 	br	800ca50 <__alt_data_end+0xf800ca50>
 800ce80:	00800404 	movi	r2,16
 800ce84:	1700360e 	bge	r2,fp,800cf60 <_strtod_r+0x146c>
 800ce88:	d9000617 	ldw	r4,24(sp)
 800ce8c:	000b883a 	mov	r5,zero
 800ce90:	003e5206 	br	800c7dc <__alt_data_end+0xf800c7dc>
 800ce94:	014200b4 	movhi	r5,2050
 800ce98:	d9000617 	ldw	r4,24(sp)
 800ce9c:	29733304 	addi	r5,r5,-13108
 800cea0:	01c00644 	movi	r7,25
 800cea4:	00000b06 	br	800ced4 <_strtod_r+0x13e0>
 800cea8:	21000044 	addi	r4,r4,1
 800ceac:	20800003 	ldbu	r2,0(r4)
 800ceb0:	10ffefc4 	addi	r3,r2,-65
 800ceb4:	10803fcc 	andi	r2,r2,255
 800ceb8:	1080201c 	xori	r2,r2,128
 800cebc:	18c03fcc 	andi	r3,r3,255
 800cec0:	10bfe004 	addi	r2,r2,-128
 800cec4:	38c00136 	bltu	r7,r3,800cecc <_strtod_r+0x13d8>
 800cec8:	10800804 	addi	r2,r2,32
 800cecc:	29400044 	addi	r5,r5,1
 800ced0:	11bb541e 	bne	r2,r6,800bc24 <__alt_data_end+0xf800bc24>
 800ced4:	29800007 	ldb	r6,0(r5)
 800ced8:	303ff31e 	bne	r6,zero,800cea8 <__alt_data_end+0xf800cea8>
 800cedc:	018200b4 	movhi	r6,2050
 800cee0:	200b883a 	mov	r5,r4
 800cee4:	d9000615 	stw	r4,24(sp)
 800cee8:	31b33404 	addi	r6,r6,-13104
 800ceec:	02000644 	movi	r8,25
 800cef0:	00000a06 	br	800cf1c <_strtod_r+0x1428>
 800cef4:	28800003 	ldbu	r2,0(r5)
 800cef8:	10ffefc4 	addi	r3,r2,-65
 800cefc:	10803fcc 	andi	r2,r2,255
 800cf00:	1080201c 	xori	r2,r2,128
 800cf04:	18c03fcc 	andi	r3,r3,255
 800cf08:	10bfe004 	addi	r2,r2,-128
 800cf0c:	40c00136 	bltu	r8,r3,800cf14 <_strtod_r+0x1420>
 800cf10:	10800804 	addi	r2,r2,32
 800cf14:	31800044 	addi	r6,r6,1
 800cf18:	11c0211e 	bne	r2,r7,800cfa0 <_strtod_r+0x14ac>
 800cf1c:	31c00007 	ldb	r7,0(r6)
 800cf20:	29400044 	addi	r5,r5,1
 800cf24:	383ff31e 	bne	r7,zero,800cef4 <__alt_data_end+0xf800cef4>
 800cf28:	d9400615 	stw	r5,24(sp)
 800cf2c:	009ffc34 	movhi	r2,32752
 800cf30:	d8800715 	stw	r2,28(sp)
 800cf34:	d8000815 	stw	zero,32(sp)
 800cf38:	003bb706 	br	800be18 <__alt_data_end+0xf800be18>
 800cf3c:	000b883a 	mov	r5,zero
 800cf40:	003c7206 	br	800c10c <__alt_data_end+0xf800c10c>
 800cf44:	0080d434 	movhi	r2,848
 800cf48:	1887883a 	add	r3,r3,r2
 800cf4c:	d8c00715 	stw	r3,28(sp)
 800cf50:	dd400817 	ldw	r21,32(sp)
 800cf54:	1823883a 	mov	r17,r3
 800cf58:	d8001215 	stw	zero,72(sp)
 800cf5c:	003c8e06 	br	800c198 <__alt_data_end+0xf800c198>
 800cf60:	a9c002a4 	muli	r7,r21,10
 800cf64:	d9000617 	ldw	r4,24(sp)
 800cf68:	000b883a 	mov	r5,zero
 800cf6c:	31eb883a 	add	r21,r6,r7
 800cf70:	003e1a06 	br	800c7dc <__alt_data_end+0xf800c7dc>
 800cf74:	047ffc34 	movhi	r17,65520
 800cf78:	1c47883a 	add	r3,r3,r17
 800cf7c:	057fffc4 	movi	r21,-1
 800cf80:	04400434 	movhi	r17,16
 800cf84:	8d63883a 	add	r17,r17,r21
 800cf88:	1c62b03a 	or	r17,r3,r17
 800cf8c:	003eb006 	br	800ca50 <__alt_data_end+0xf800ca50>
 800cf90:	00bfffc4 	movi	r2,-1
 800cf94:	003ea706 	br	800ca34 <__alt_data_end+0xf800ca34>
 800cf98:	002b883a 	mov	r21,zero
 800cf9c:	003e3406 	br	800c870 <__alt_data_end+0xf800c870>
 800cfa0:	21000044 	addi	r4,r4,1
 800cfa4:	d9000615 	stw	r4,24(sp)
 800cfa8:	003fe006 	br	800cf2c <__alt_data_end+0xf800cf2c>
 800cfac:	e00b883a 	mov	r5,fp
 800cfb0:	003f4506 	br	800ccc8 <__alt_data_end+0xf800ccc8>
 800cfb4:	d8001215 	stw	zero,72(sp)
 800cfb8:	047ee316 	blt	zero,r17,800cb48 <__alt_data_end+0xf800cb48>
 800cfbc:	003f0106 	br	800cbc4 <__alt_data_end+0xf800cbc4>
 800cfc0:	014200b4 	movhi	r5,2050
 800cfc4:	2975eb04 	addi	r5,r5,-10324
 800cfc8:	d9000604 	addi	r4,sp,24
 800cfcc:	d9800204 	addi	r6,sp,8
 800cfd0:	80135a40 	call	80135a4 <__hexnan>
 800cfd4:	00c00144 	movi	r3,5
 800cfd8:	10fb8c1e 	bne	r2,r3,800be0c <__alt_data_end+0xf800be0c>
 800cfdc:	d8800317 	ldw	r2,12(sp)
 800cfe0:	d8c00217 	ldw	r3,8(sp)
 800cfe4:	109ffc34 	orhi	r2,r2,32752
 800cfe8:	d8c00815 	stw	r3,32(sp)
 800cfec:	d8800715 	stw	r2,28(sp)
 800cff0:	003b8906 	br	800be18 <__alt_data_end+0xf800be18>
 800cff4:	00ffffc4 	movi	r3,-1
 800cff8:	d9000817 	ldw	r4,32(sp)
 800cffc:	1884983a 	sll	r2,r3,r2
 800d000:	1108703a 	and	r4,r2,r4
 800d004:	d9000815 	stw	r4,32(sp)
 800d008:	003eee06 	br	800cbc4 <__alt_data_end+0xf800cbc4>
 800d00c:	01001a84 	movi	r4,106
 800d010:	d9001215 	stw	r4,72(sp)
 800d014:	003ede06 	br	800cb90 <__alt_data_end+0xf800cb90>
 800d018:	00ffffc4 	movi	r3,-1
 800d01c:	10bff804 	addi	r2,r2,-32
 800d020:	1884983a 	sll	r2,r3,r2
 800d024:	d8c00717 	ldw	r3,28(sp)
 800d028:	10c6703a 	and	r3,r2,r3
 800d02c:	d8c00715 	stw	r3,28(sp)
 800d030:	003ee406 	br	800cbc4 <__alt_data_end+0xf800cbc4>

0800d034 <strtod>:
 800d034:	00c200b4 	movhi	r3,2050
 800d038:	18fab604 	addi	r3,r3,-5416
 800d03c:	2005883a 	mov	r2,r4
 800d040:	19000017 	ldw	r4,0(r3)
 800d044:	280d883a 	mov	r6,r5
 800d048:	100b883a 	mov	r5,r2
 800d04c:	800baf41 	jmpi	800baf4 <_strtod_r>

0800d050 <strtof>:
 800d050:	defffb04 	addi	sp,sp,-20
 800d054:	dcc00315 	stw	r19,12(sp)
 800d058:	04c200b4 	movhi	r19,2050
 800d05c:	9cfab604 	addi	r19,r19,-5416
 800d060:	2005883a 	mov	r2,r4
 800d064:	99000017 	ldw	r4,0(r19)
 800d068:	280d883a 	mov	r6,r5
 800d06c:	100b883a 	mov	r5,r2
 800d070:	dfc00415 	stw	ra,16(sp)
 800d074:	dc800215 	stw	r18,8(sp)
 800d078:	dc400115 	stw	r17,4(sp)
 800d07c:	dc000015 	stw	r16,0(sp)
 800d080:	800baf40 	call	800baf4 <_strtod_r>
 800d084:	1009883a 	mov	r4,r2
 800d088:	180b883a 	mov	r5,r3
 800d08c:	1025883a 	mov	r18,r2
 800d090:	1823883a 	mov	r17,r3
 800d094:	80181200 	call	8018120 <__truncdfsf2>
 800d098:	1009883a 	mov	r4,r2
 800d09c:	000b883a 	mov	r5,zero
 800d0a0:	1021883a 	mov	r16,r2
 800d0a4:	80159a00 	call	80159a0 <__eqsf2>
 800d0a8:	1000111e 	bne	r2,zero,800d0f0 <strtof+0xa0>
 800d0ac:	9009883a 	mov	r4,r18
 800d0b0:	880b883a 	mov	r5,r17
 800d0b4:	000d883a 	mov	r6,zero
 800d0b8:	000f883a 	mov	r7,zero
 800d0bc:	8016cec0 	call	8016cec <__eqdf2>
 800d0c0:	10000b26 	beq	r2,zero,800d0f0 <strtof+0xa0>
 800d0c4:	98800017 	ldw	r2,0(r19)
 800d0c8:	00c00884 	movi	r3,34
 800d0cc:	10c00015 	stw	r3,0(r2)
 800d0d0:	8005883a 	mov	r2,r16
 800d0d4:	dfc00417 	ldw	ra,16(sp)
 800d0d8:	dcc00317 	ldw	r19,12(sp)
 800d0dc:	dc800217 	ldw	r18,8(sp)
 800d0e0:	dc400117 	ldw	r17,4(sp)
 800d0e4:	dc000017 	ldw	r16,0(sp)
 800d0e8:	dec00504 	addi	sp,sp,20
 800d0ec:	f800283a 	ret
 800d0f0:	015fe034 	movhi	r5,32640
 800d0f4:	297fffc4 	addi	r5,r5,-1
 800d0f8:	8009883a 	mov	r4,r16
 800d0fc:	8015a140 	call	8015a14 <__gesf2>
 800d100:	0080070e 	bge	zero,r2,800d120 <strtof+0xd0>
 800d104:	01dffc34 	movhi	r7,32752
 800d108:	39ffffc4 	addi	r7,r7,-1
 800d10c:	9009883a 	mov	r4,r18
 800d110:	880b883a 	mov	r5,r17
 800d114:	01bfffc4 	movi	r6,-1
 800d118:	8016d700 	call	8016d70 <__gedf2>
 800d11c:	00bfe90e 	bge	zero,r2,800d0c4 <__alt_data_end+0xf800d0c4>
 800d120:	017fe034 	movhi	r5,65408
 800d124:	297fffc4 	addi	r5,r5,-1
 800d128:	8009883a 	mov	r4,r16
 800d12c:	8015acc0 	call	8015acc <__lesf2>
 800d130:	103fe70e 	bge	r2,zero,800d0d0 <__alt_data_end+0xf800d0d0>
 800d134:	01fffc34 	movhi	r7,65520
 800d138:	39ffffc4 	addi	r7,r7,-1
 800d13c:	9009883a 	mov	r4,r18
 800d140:	880b883a 	mov	r5,r17
 800d144:	01bfffc4 	movi	r6,-1
 800d148:	8016e500 	call	8016e50 <__ledf2>
 800d14c:	103fdd0e 	bge	r2,zero,800d0c4 <__alt_data_end+0xf800d0c4>
 800d150:	003fdf06 	br	800d0d0 <__alt_data_end+0xf800d0d0>

0800d154 <_strtol_r>:
 800d154:	008200b4 	movhi	r2,2050
 800d158:	defff404 	addi	sp,sp,-48
 800d15c:	10bab904 	addi	r2,r2,-5404
 800d160:	dcc00515 	stw	r19,20(sp)
 800d164:	14c00017 	ldw	r19,0(r2)
 800d168:	dd800815 	stw	r22,32(sp)
 800d16c:	dd400715 	stw	r21,28(sp)
 800d170:	dd000615 	stw	r20,24(sp)
 800d174:	dfc00b15 	stw	ra,44(sp)
 800d178:	df000a15 	stw	fp,40(sp)
 800d17c:	ddc00915 	stw	r23,36(sp)
 800d180:	dc800415 	stw	r18,16(sp)
 800d184:	dc400315 	stw	r17,12(sp)
 800d188:	dc000215 	stw	r16,8(sp)
 800d18c:	282b883a 	mov	r21,r5
 800d190:	d9000015 	stw	r4,0(sp)
 800d194:	3029883a 	mov	r20,r6
 800d198:	382d883a 	mov	r22,r7
 800d19c:	2813883a 	mov	r9,r5
 800d1a0:	4a000007 	ldb	r8,0(r9)
 800d1a4:	4807883a 	mov	r3,r9
 800d1a8:	4a400044 	addi	r9,r9,1
 800d1ac:	9a05883a 	add	r2,r19,r8
 800d1b0:	10800043 	ldbu	r2,1(r2)
 800d1b4:	1080020c 	andi	r2,r2,8
 800d1b8:	103ff91e 	bne	r2,zero,800d1a0 <__alt_data_end+0xf800d1a0>
 800d1bc:	00800b44 	movi	r2,45
 800d1c0:	4025883a 	mov	r18,r8
 800d1c4:	4823883a 	mov	r17,r9
 800d1c8:	40805826 	beq	r8,r2,800d32c <_strtol_r+0x1d8>
 800d1cc:	00800ac4 	movi	r2,43
 800d1d0:	40805a26 	beq	r8,r2,800d33c <_strtol_r+0x1e8>
 800d1d4:	0039883a 	mov	fp,zero
 800d1d8:	b0000426 	beq	r22,zero,800d1ec <_strtol_r+0x98>
 800d1dc:	00800404 	movi	r2,16
 800d1e0:	b0805a26 	beq	r22,r2,800d34c <_strtol_r+0x1f8>
 800d1e4:	b02f883a 	mov	r23,r22
 800d1e8:	00000406 	br	800d1fc <_strtol_r+0xa8>
 800d1ec:	00800c04 	movi	r2,48
 800d1f0:	90806526 	beq	r18,r2,800d388 <_strtol_r+0x234>
 800d1f4:	05800284 	movi	r22,10
 800d1f8:	b02f883a 	mov	r23,r22
 800d1fc:	00e00034 	movhi	r3,32768
 800d200:	18ffffc4 	addi	r3,r3,-1
 800d204:	e0e1883a 	add	r16,fp,r3
 800d208:	b80b883a 	mov	r5,r23
 800d20c:	8009883a 	mov	r4,r16
 800d210:	80024980 	call	8002498 <__umodsi3>
 800d214:	8009883a 	mov	r4,r16
 800d218:	b80b883a 	mov	r5,r23
 800d21c:	d8800115 	stw	r2,4(sp)
 800d220:	80024900 	call	8002490 <__udivsi3>
 800d224:	9c91883a 	add	r8,r19,r18
 800d228:	42000043 	ldbu	r8,1(r8)
 800d22c:	8807883a 	mov	r3,r17
 800d230:	000d883a 	mov	r6,zero
 800d234:	4240010c 	andi	r9,r8,4
 800d238:	0009883a 	mov	r4,zero
 800d23c:	02800044 	movi	r10,1
 800d240:	017fffc4 	movi	r5,-1
 800d244:	d9c00117 	ldw	r7,4(sp)
 800d248:	48000e26 	beq	r9,zero,800d284 <_strtol_r+0x130>
 800d24c:	923ff404 	addi	r8,r18,-48
 800d250:	4580120e 	bge	r8,r22,800d29c <_strtol_r+0x148>
 800d254:	31400526 	beq	r6,r5,800d26c <_strtol_r+0x118>
 800d258:	11002736 	bltu	r2,r4,800d2f8 <_strtol_r+0x1a4>
 800d25c:	20802526 	beq	r4,r2,800d2f4 <_strtol_r+0x1a0>
 800d260:	25c9383a 	mul	r4,r4,r23
 800d264:	01800044 	movi	r6,1
 800d268:	4109883a 	add	r4,r8,r4
 800d26c:	1c800007 	ldb	r18,0(r3)
 800d270:	18c00044 	addi	r3,r3,1
 800d274:	9c91883a 	add	r8,r19,r18
 800d278:	42000043 	ldbu	r8,1(r8)
 800d27c:	4240010c 	andi	r9,r8,4
 800d280:	483ff21e 	bne	r9,zero,800d24c <__alt_data_end+0xf800d24c>
 800d284:	420000cc 	andi	r8,r8,3
 800d288:	40000426 	beq	r8,zero,800d29c <_strtol_r+0x148>
 800d28c:	42801c26 	beq	r8,r10,800d300 <_strtol_r+0x1ac>
 800d290:	024015c4 	movi	r9,87
 800d294:	9251c83a 	sub	r8,r18,r9
 800d298:	45bfee16 	blt	r8,r22,800d254 <__alt_data_end+0xf800d254>
 800d29c:	00bfffc4 	movi	r2,-1
 800d2a0:	30801926 	beq	r6,r2,800d308 <_strtol_r+0x1b4>
 800d2a4:	0705c83a 	sub	r2,zero,fp
 800d2a8:	2084f03a 	xor	r2,r4,r2
 800d2ac:	1739883a 	add	fp,r2,fp
 800d2b0:	e005883a 	mov	r2,fp
 800d2b4:	a0000326 	beq	r20,zero,800d2c4 <_strtol_r+0x170>
 800d2b8:	30001a1e 	bne	r6,zero,800d324 <_strtol_r+0x1d0>
 800d2bc:	a80b883a 	mov	r5,r21
 800d2c0:	a1400015 	stw	r5,0(r20)
 800d2c4:	dfc00b17 	ldw	ra,44(sp)
 800d2c8:	df000a17 	ldw	fp,40(sp)
 800d2cc:	ddc00917 	ldw	r23,36(sp)
 800d2d0:	dd800817 	ldw	r22,32(sp)
 800d2d4:	dd400717 	ldw	r21,28(sp)
 800d2d8:	dd000617 	ldw	r20,24(sp)
 800d2dc:	dcc00517 	ldw	r19,20(sp)
 800d2e0:	dc800417 	ldw	r18,16(sp)
 800d2e4:	dc400317 	ldw	r17,12(sp)
 800d2e8:	dc000217 	ldw	r16,8(sp)
 800d2ec:	dec00c04 	addi	sp,sp,48
 800d2f0:	f800283a 	ret
 800d2f4:	3a3fda0e 	bge	r7,r8,800d260 <__alt_data_end+0xf800d260>
 800d2f8:	01bfffc4 	movi	r6,-1
 800d2fc:	003fdb06 	br	800d26c <__alt_data_end+0xf800d26c>
 800d300:	02400dc4 	movi	r9,55
 800d304:	003fe306 	br	800d294 <__alt_data_end+0xf800d294>
 800d308:	d9000017 	ldw	r4,0(sp)
 800d30c:	00800884 	movi	r2,34
 800d310:	20800015 	stw	r2,0(r4)
 800d314:	00a00034 	movhi	r2,32768
 800d318:	10bfffc4 	addi	r2,r2,-1
 800d31c:	e085883a 	add	r2,fp,r2
 800d320:	a03fe826 	beq	r20,zero,800d2c4 <__alt_data_end+0xf800d2c4>
 800d324:	197fffc4 	addi	r5,r3,-1
 800d328:	003fe506 	br	800d2c0 <__alt_data_end+0xf800d2c0>
 800d32c:	1c400084 	addi	r17,r3,2
 800d330:	1c800047 	ldb	r18,1(r3)
 800d334:	07000044 	movi	fp,1
 800d338:	003fa706 	br	800d1d8 <__alt_data_end+0xf800d1d8>
 800d33c:	1c400084 	addi	r17,r3,2
 800d340:	1c800047 	ldb	r18,1(r3)
 800d344:	0039883a 	mov	fp,zero
 800d348:	003fa306 	br	800d1d8 <__alt_data_end+0xf800d1d8>
 800d34c:	00800c04 	movi	r2,48
 800d350:	90bfa41e 	bne	r18,r2,800d1e4 <__alt_data_end+0xf800d1e4>
 800d354:	88c00003 	ldbu	r3,0(r17)
 800d358:	00bff7c4 	movi	r2,-33
 800d35c:	1884703a 	and	r2,r3,r2
 800d360:	10803fcc 	andi	r2,r2,255
 800d364:	1080201c 	xori	r2,r2,128
 800d368:	10bfe004 	addi	r2,r2,-128
 800d36c:	00c01604 	movi	r3,88
 800d370:	10ff9c1e 	bne	r2,r3,800d1e4 <__alt_data_end+0xf800d1e4>
 800d374:	05c00404 	movi	r23,16
 800d378:	8c800047 	ldb	r18,1(r17)
 800d37c:	b82d883a 	mov	r22,r23
 800d380:	8c400084 	addi	r17,r17,2
 800d384:	003f9d06 	br	800d1fc <__alt_data_end+0xf800d1fc>
 800d388:	88c00003 	ldbu	r3,0(r17)
 800d38c:	00bff7c4 	movi	r2,-33
 800d390:	1884703a 	and	r2,r3,r2
 800d394:	10803fcc 	andi	r2,r2,255
 800d398:	1080201c 	xori	r2,r2,128
 800d39c:	10bfe004 	addi	r2,r2,-128
 800d3a0:	00c01604 	movi	r3,88
 800d3a4:	10fff326 	beq	r2,r3,800d374 <__alt_data_end+0xf800d374>
 800d3a8:	05800204 	movi	r22,8
 800d3ac:	b02f883a 	mov	r23,r22
 800d3b0:	003f9206 	br	800d1fc <__alt_data_end+0xf800d1fc>

0800d3b4 <strtol>:
 800d3b4:	2007883a 	mov	r3,r4
 800d3b8:	010200b4 	movhi	r4,2050
 800d3bc:	213ab604 	addi	r4,r4,-5416
 800d3c0:	21000017 	ldw	r4,0(r4)
 800d3c4:	2805883a 	mov	r2,r5
 800d3c8:	300f883a 	mov	r7,r6
 800d3cc:	180b883a 	mov	r5,r3
 800d3d0:	100d883a 	mov	r6,r2
 800d3d4:	800d1541 	jmpi	800d154 <_strtol_r>

0800d3d8 <_strtoll_r>:
 800d3d8:	008200b4 	movhi	r2,2050
 800d3dc:	deffef04 	addi	sp,sp,-68
 800d3e0:	10bab904 	addi	r2,r2,-5404
 800d3e4:	dd800d15 	stw	r22,52(sp)
 800d3e8:	15800017 	ldw	r22,0(r2)
 800d3ec:	df000f15 	stw	fp,60(sp)
 800d3f0:	dfc01015 	stw	ra,64(sp)
 800d3f4:	ddc00e15 	stw	r23,56(sp)
 800d3f8:	dd400c15 	stw	r21,48(sp)
 800d3fc:	dd000b15 	stw	r20,44(sp)
 800d400:	dcc00a15 	stw	r19,40(sp)
 800d404:	dc800915 	stw	r18,36(sp)
 800d408:	dc400815 	stw	r17,32(sp)
 800d40c:	dc000715 	stw	r16,28(sp)
 800d410:	d9400415 	stw	r5,16(sp)
 800d414:	d9000515 	stw	r4,20(sp)
 800d418:	d9800215 	stw	r6,8(sp)
 800d41c:	3839883a 	mov	fp,r7
 800d420:	2811883a 	mov	r8,r5
 800d424:	42400007 	ldb	r9,0(r8)
 800d428:	4007883a 	mov	r3,r8
 800d42c:	42000044 	addi	r8,r8,1
 800d430:	b245883a 	add	r2,r22,r9
 800d434:	10800043 	ldbu	r2,1(r2)
 800d438:	1080020c 	andi	r2,r2,8
 800d43c:	103ff91e 	bne	r2,zero,800d424 <__alt_data_end+0xf800d424>
 800d440:	00800b44 	movi	r2,45
 800d444:	4025883a 	mov	r18,r8
 800d448:	48807d26 	beq	r9,r2,800d640 <_strtoll_r+0x268>
 800d44c:	00800ac4 	movi	r2,43
 800d450:	48808026 	beq	r9,r2,800d654 <_strtoll_r+0x27c>
 800d454:	d8000115 	stw	zero,4(sp)
 800d458:	e0000a26 	beq	fp,zero,800d484 <_strtoll_r+0xac>
 800d45c:	00800404 	movi	r2,16
 800d460:	e0808c26 	beq	fp,r2,800d694 <_strtoll_r+0x2bc>
 800d464:	e005d7fa 	srai	r2,fp,31
 800d468:	d8c00117 	ldw	r3,4(sp)
 800d46c:	e027883a 	mov	r19,fp
 800d470:	d8800015 	stw	r2,0(sp)
 800d474:	18000a26 	beq	r3,zero,800d4a0 <_strtoll_r+0xc8>
 800d478:	0023883a 	mov	r17,zero
 800d47c:	04200034 	movhi	r16,32768
 800d480:	00000a06 	br	800d4ac <_strtoll_r+0xd4>
 800d484:	00800c04 	movi	r2,48
 800d488:	48807626 	beq	r9,r2,800d664 <_strtoll_r+0x28c>
 800d48c:	04c00284 	movi	r19,10
 800d490:	d8000015 	stw	zero,0(sp)
 800d494:	9839883a 	mov	fp,r19
 800d498:	d8c00117 	ldw	r3,4(sp)
 800d49c:	183ff61e 	bne	r3,zero,800d478 <__alt_data_end+0xf800d478>
 800d4a0:	047fffc4 	movi	r17,-1
 800d4a4:	04200034 	movhi	r16,32768
 800d4a8:	8461883a 	add	r16,r16,r17
 800d4ac:	d9c00017 	ldw	r7,0(sp)
 800d4b0:	8809883a 	mov	r4,r17
 800d4b4:	800b883a 	mov	r5,r16
 800d4b8:	980d883a 	mov	r6,r19
 800d4bc:	da400615 	stw	r9,24(sp)
 800d4c0:	80154100 	call	8015410 <__umoddi3>
 800d4c4:	d9c00017 	ldw	r7,0(sp)
 800d4c8:	8809883a 	mov	r4,r17
 800d4cc:	800b883a 	mov	r5,r16
 800d4d0:	980d883a 	mov	r6,r19
 800d4d4:	d8800315 	stw	r2,12(sp)
 800d4d8:	8014e500 	call	8014e50 <__udivdi3>
 800d4dc:	da400617 	ldw	r9,24(sp)
 800d4e0:	1823883a 	mov	r17,r3
 800d4e4:	902f883a 	mov	r23,r18
 800d4e8:	b247883a 	add	r3,r22,r9
 800d4ec:	19800043 	ldbu	r6,1(r3)
 800d4f0:	1021883a 	mov	r16,r2
 800d4f4:	000f883a 	mov	r7,zero
 800d4f8:	30c0010c 	andi	r3,r6,4
 800d4fc:	0009883a 	mov	r4,zero
 800d500:	000b883a 	mov	r5,zero
 800d504:	04800044 	movi	r18,1
 800d508:	057fffc4 	movi	r21,-1
 800d50c:	18000d26 	beq	r3,zero,800d544 <_strtoll_r+0x16c>
 800d510:	4d3ff404 	addi	r20,r9,-48
 800d514:	a700110e 	bge	r20,fp,800d55c <_strtoll_r+0x184>
 800d518:	3d400426 	beq	r7,r21,800d52c <_strtoll_r+0x154>
 800d51c:	89400236 	bltu	r17,r5,800d528 <_strtoll_r+0x150>
 800d520:	2c40291e 	bne	r5,r17,800d5c8 <_strtoll_r+0x1f0>
 800d524:	8100282e 	bgeu	r16,r4,800d5c8 <_strtoll_r+0x1f0>
 800d528:	01ffffc4 	movi	r7,-1
 800d52c:	ba400007 	ldb	r9,0(r23)
 800d530:	bdc00044 	addi	r23,r23,1
 800d534:	b247883a 	add	r3,r22,r9
 800d538:	19800043 	ldbu	r6,1(r3)
 800d53c:	30c0010c 	andi	r3,r6,4
 800d540:	183ff31e 	bne	r3,zero,800d510 <__alt_data_end+0xf800d510>
 800d544:	318000cc 	andi	r6,r6,3
 800d548:	30000426 	beq	r6,zero,800d55c <_strtoll_r+0x184>
 800d54c:	34802a26 	beq	r6,r18,800d5f8 <_strtoll_r+0x220>
 800d550:	00c015c4 	movi	r3,87
 800d554:	48e9c83a 	sub	r20,r9,r3
 800d558:	a73fef16 	blt	r20,fp,800d518 <__alt_data_end+0xf800d518>
 800d55c:	00bfffc4 	movi	r2,-1
 800d560:	38802b26 	beq	r7,r2,800d610 <_strtoll_r+0x238>
 800d564:	d8800117 	ldw	r2,4(sp)
 800d568:	0093c83a 	sub	r9,zero,r2
 800d56c:	2248f03a 	xor	r4,r4,r9
 800d570:	2085883a 	add	r2,r4,r2
 800d574:	1109803a 	cmpltu	r4,r2,r4
 800d578:	2a46f03a 	xor	r3,r5,r9
 800d57c:	20c7883a 	add	r3,r4,r3
 800d580:	d9000217 	ldw	r4,8(sp)
 800d584:	20000426 	beq	r4,zero,800d598 <_strtoll_r+0x1c0>
 800d588:	38002b1e 	bne	r7,zero,800d638 <_strtoll_r+0x260>
 800d58c:	dd800417 	ldw	r22,16(sp)
 800d590:	d9400217 	ldw	r5,8(sp)
 800d594:	2d800015 	stw	r22,0(r5)
 800d598:	dfc01017 	ldw	ra,64(sp)
 800d59c:	df000f17 	ldw	fp,60(sp)
 800d5a0:	ddc00e17 	ldw	r23,56(sp)
 800d5a4:	dd800d17 	ldw	r22,52(sp)
 800d5a8:	dd400c17 	ldw	r21,48(sp)
 800d5ac:	dd000b17 	ldw	r20,44(sp)
 800d5b0:	dcc00a17 	ldw	r19,40(sp)
 800d5b4:	dc800917 	ldw	r18,36(sp)
 800d5b8:	dc400817 	ldw	r17,32(sp)
 800d5bc:	dc000717 	ldw	r16,28(sp)
 800d5c0:	dec01104 	addi	sp,sp,68
 800d5c4:	f800283a 	ret
 800d5c8:	24000d26 	beq	r4,r16,800d600 <_strtoll_r+0x228>
 800d5cc:	d9c00017 	ldw	r7,0(sp)
 800d5d0:	980d883a 	mov	r6,r19
 800d5d4:	8014d7c0 	call	8014d7c <__muldi3>
 800d5d8:	a00bd7fa 	srai	r5,r20,31
 800d5dc:	a085883a 	add	r2,r20,r2
 800d5e0:	1513803a 	cmpltu	r9,r2,r20
 800d5e4:	28c7883a 	add	r3,r5,r3
 800d5e8:	1009883a 	mov	r4,r2
 800d5ec:	48cb883a 	add	r5,r9,r3
 800d5f0:	01c00044 	movi	r7,1
 800d5f4:	003fcd06 	br	800d52c <__alt_data_end+0xf800d52c>
 800d5f8:	00c00dc4 	movi	r3,55
 800d5fc:	003fd506 	br	800d554 <__alt_data_end+0xf800d554>
 800d600:	2c7ff21e 	bne	r5,r17,800d5cc <__alt_data_end+0xf800d5cc>
 800d604:	d8800317 	ldw	r2,12(sp)
 800d608:	153fc716 	blt	r2,r20,800d528 <__alt_data_end+0xf800d528>
 800d60c:	003fef06 	br	800d5cc <__alt_data_end+0xf800d5cc>
 800d610:	d8c00117 	ldw	r3,4(sp)
 800d614:	1800241e 	bne	r3,zero,800d6a8 <_strtoll_r+0x2d0>
 800d618:	00e00034 	movhi	r3,32768
 800d61c:	3805883a 	mov	r2,r7
 800d620:	18ffffc4 	addi	r3,r3,-1
 800d624:	d9400517 	ldw	r5,20(sp)
 800d628:	01000884 	movi	r4,34
 800d62c:	29000015 	stw	r4,0(r5)
 800d630:	d9000217 	ldw	r4,8(sp)
 800d634:	203fd826 	beq	r4,zero,800d598 <__alt_data_end+0xf800d598>
 800d638:	bdbfffc4 	addi	r22,r23,-1
 800d63c:	003fd406 	br	800d590 <__alt_data_end+0xf800d590>
 800d640:	00800044 	movi	r2,1
 800d644:	1c800084 	addi	r18,r3,2
 800d648:	1a400047 	ldb	r9,1(r3)
 800d64c:	d8800115 	stw	r2,4(sp)
 800d650:	003f8106 	br	800d458 <__alt_data_end+0xf800d458>
 800d654:	1c800084 	addi	r18,r3,2
 800d658:	1a400047 	ldb	r9,1(r3)
 800d65c:	d8000115 	stw	zero,4(sp)
 800d660:	003f7d06 	br	800d458 <__alt_data_end+0xf800d458>
 800d664:	90c00003 	ldbu	r3,0(r18)
 800d668:	00bff7c4 	movi	r2,-33
 800d66c:	1884703a 	and	r2,r3,r2
 800d670:	10803fcc 	andi	r2,r2,255
 800d674:	1080201c 	xori	r2,r2,128
 800d678:	10bfe004 	addi	r2,r2,-128
 800d67c:	00c01604 	movi	r3,88
 800d680:	10c01426 	beq	r2,r3,800d6d4 <_strtoll_r+0x2fc>
 800d684:	04c00204 	movi	r19,8
 800d688:	d8000015 	stw	zero,0(sp)
 800d68c:	9839883a 	mov	fp,r19
 800d690:	003f8106 	br	800d498 <__alt_data_end+0xf800d498>
 800d694:	00800c04 	movi	r2,48
 800d698:	48800626 	beq	r9,r2,800d6b4 <_strtoll_r+0x2dc>
 800d69c:	e027883a 	mov	r19,fp
 800d6a0:	d8000015 	stw	zero,0(sp)
 800d6a4:	003f7c06 	br	800d498 <__alt_data_end+0xf800d498>
 800d6a8:	0005883a 	mov	r2,zero
 800d6ac:	00e00034 	movhi	r3,32768
 800d6b0:	003fdc06 	br	800d624 <__alt_data_end+0xf800d624>
 800d6b4:	90c00003 	ldbu	r3,0(r18)
 800d6b8:	00bff7c4 	movi	r2,-33
 800d6bc:	1884703a 	and	r2,r3,r2
 800d6c0:	10803fcc 	andi	r2,r2,255
 800d6c4:	1080201c 	xori	r2,r2,128
 800d6c8:	10bfe004 	addi	r2,r2,-128
 800d6cc:	00c01604 	movi	r3,88
 800d6d0:	10fff21e 	bne	r2,r3,800d69c <__alt_data_end+0xf800d69c>
 800d6d4:	04c00404 	movi	r19,16
 800d6d8:	92400047 	ldb	r9,1(r18)
 800d6dc:	d8000015 	stw	zero,0(sp)
 800d6e0:	94800084 	addi	r18,r18,2
 800d6e4:	9839883a 	mov	fp,r19
 800d6e8:	003f6b06 	br	800d498 <__alt_data_end+0xf800d498>

0800d6ec <_strtoul_r>:
 800d6ec:	008200b4 	movhi	r2,2050
 800d6f0:	defff604 	addi	sp,sp,-40
 800d6f4:	10bab904 	addi	r2,r2,-5404
 800d6f8:	dc800315 	stw	r18,12(sp)
 800d6fc:	14800017 	ldw	r18,0(r2)
 800d700:	dd400615 	stw	r21,24(sp)
 800d704:	dd000515 	stw	r20,20(sp)
 800d708:	dcc00415 	stw	r19,16(sp)
 800d70c:	dfc00915 	stw	ra,36(sp)
 800d710:	ddc00815 	stw	r23,32(sp)
 800d714:	dd800715 	stw	r22,28(sp)
 800d718:	dc400215 	stw	r17,8(sp)
 800d71c:	dc000115 	stw	r16,4(sp)
 800d720:	2827883a 	mov	r19,r5
 800d724:	2029883a 	mov	r20,r4
 800d728:	382b883a 	mov	r21,r7
 800d72c:	2813883a 	mov	r9,r5
 800d730:	4a000007 	ldb	r8,0(r9)
 800d734:	4807883a 	mov	r3,r9
 800d738:	4a400044 	addi	r9,r9,1
 800d73c:	9205883a 	add	r2,r18,r8
 800d740:	10800043 	ldbu	r2,1(r2)
 800d744:	1080020c 	andi	r2,r2,8
 800d748:	103ff91e 	bne	r2,zero,800d730 <__alt_data_end+0xf800d730>
 800d74c:	00800b44 	movi	r2,45
 800d750:	4023883a 	mov	r17,r8
 800d754:	4821883a 	mov	r16,r9
 800d758:	40805426 	beq	r8,r2,800d8ac <_strtoul_r+0x1c0>
 800d75c:	00800ac4 	movi	r2,43
 800d760:	40805626 	beq	r8,r2,800d8bc <_strtoul_r+0x1d0>
 800d764:	002f883a 	mov	r23,zero
 800d768:	a8000e26 	beq	r21,zero,800d7a4 <_strtoul_r+0xb8>
 800d76c:	00800404 	movi	r2,16
 800d770:	a8805626 	beq	r21,r2,800d8cc <_strtoul_r+0x1e0>
 800d774:	013fffc4 	movi	r4,-1
 800d778:	a80b883a 	mov	r5,r21
 800d77c:	d9800015 	stw	r6,0(sp)
 800d780:	80024900 	call	8002490 <__udivsi3>
 800d784:	013fffc4 	movi	r4,-1
 800d788:	a80b883a 	mov	r5,r21
 800d78c:	102d883a 	mov	r22,r2
 800d790:	80024980 	call	8002498 <__umodsi3>
 800d794:	d9800017 	ldw	r6,0(sp)
 800d798:	a819883a 	mov	r12,r21
 800d79c:	b00b883a 	mov	r5,r22
 800d7a0:	00000706 	br	800d7c0 <_strtoul_r+0xd4>
 800d7a4:	00800c04 	movi	r2,48
 800d7a8:	88804f26 	beq	r17,r2,800d8e8 <_strtoul_r+0x1fc>
 800d7ac:	05400284 	movi	r21,10
 800d7b0:	014666b4 	movhi	r5,6554
 800d7b4:	00800144 	movi	r2,5
 800d7b8:	29666644 	addi	r5,r5,-26215
 800d7bc:	a819883a 	mov	r12,r21
 800d7c0:	9451883a 	add	r8,r18,r17
 800d7c4:	42000043 	ldbu	r8,1(r8)
 800d7c8:	8007883a 	mov	r3,r16
 800d7cc:	0009883a 	mov	r4,zero
 800d7d0:	4240010c 	andi	r9,r8,4
 800d7d4:	0015883a 	mov	r10,zero
 800d7d8:	02c00044 	movi	r11,1
 800d7dc:	01ffffc4 	movi	r7,-1
 800d7e0:	48000e26 	beq	r9,zero,800d81c <_strtoul_r+0x130>
 800d7e4:	8a3ff404 	addi	r8,r17,-48
 800d7e8:	4540120e 	bge	r8,r21,800d834 <_strtoul_r+0x148>
 800d7ec:	21c00526 	beq	r4,r7,800d804 <_strtoul_r+0x118>
 800d7f0:	2a802436 	bltu	r5,r10,800d884 <_strtoul_r+0x198>
 800d7f4:	51402226 	beq	r10,r5,800d880 <_strtoul_r+0x194>
 800d7f8:	5315383a 	mul	r10,r10,r12
 800d7fc:	01000044 	movi	r4,1
 800d800:	4295883a 	add	r10,r8,r10
 800d804:	1c400007 	ldb	r17,0(r3)
 800d808:	18c00044 	addi	r3,r3,1
 800d80c:	9451883a 	add	r8,r18,r17
 800d810:	42000043 	ldbu	r8,1(r8)
 800d814:	4240010c 	andi	r9,r8,4
 800d818:	483ff21e 	bne	r9,zero,800d7e4 <__alt_data_end+0xf800d7e4>
 800d81c:	420000cc 	andi	r8,r8,3
 800d820:	40000426 	beq	r8,zero,800d834 <_strtoul_r+0x148>
 800d824:	42c01926 	beq	r8,r11,800d88c <_strtoul_r+0x1a0>
 800d828:	024015c4 	movi	r9,87
 800d82c:	8a51c83a 	sub	r8,r17,r9
 800d830:	457fee16 	blt	r8,r21,800d7ec <__alt_data_end+0xf800d7ec>
 800d834:	20001916 	blt	r4,zero,800d89c <_strtoul_r+0x1b0>
 800d838:	05c5c83a 	sub	r2,zero,r23
 800d83c:	5084f03a 	xor	r2,r10,r2
 800d840:	15c5883a 	add	r2,r2,r23
 800d844:	30000326 	beq	r6,zero,800d854 <_strtoul_r+0x168>
 800d848:	20001226 	beq	r4,zero,800d894 <_strtoul_r+0x1a8>
 800d84c:	197fffc4 	addi	r5,r3,-1
 800d850:	31400015 	stw	r5,0(r6)
 800d854:	dfc00917 	ldw	ra,36(sp)
 800d858:	ddc00817 	ldw	r23,32(sp)
 800d85c:	dd800717 	ldw	r22,28(sp)
 800d860:	dd400617 	ldw	r21,24(sp)
 800d864:	dd000517 	ldw	r20,20(sp)
 800d868:	dcc00417 	ldw	r19,16(sp)
 800d86c:	dc800317 	ldw	r18,12(sp)
 800d870:	dc400217 	ldw	r17,8(sp)
 800d874:	dc000117 	ldw	r16,4(sp)
 800d878:	dec00a04 	addi	sp,sp,40
 800d87c:	f800283a 	ret
 800d880:	123fdd0e 	bge	r2,r8,800d7f8 <__alt_data_end+0xf800d7f8>
 800d884:	013fffc4 	movi	r4,-1
 800d888:	003fde06 	br	800d804 <__alt_data_end+0xf800d804>
 800d88c:	02400dc4 	movi	r9,55
 800d890:	003fe606 	br	800d82c <__alt_data_end+0xf800d82c>
 800d894:	980b883a 	mov	r5,r19
 800d898:	003fed06 	br	800d850 <__alt_data_end+0xf800d850>
 800d89c:	00800884 	movi	r2,34
 800d8a0:	a0800015 	stw	r2,0(r20)
 800d8a4:	00bfffc4 	movi	r2,-1
 800d8a8:	003fe606 	br	800d844 <__alt_data_end+0xf800d844>
 800d8ac:	1c000084 	addi	r16,r3,2
 800d8b0:	1c400047 	ldb	r17,1(r3)
 800d8b4:	05c00044 	movi	r23,1
 800d8b8:	003fab06 	br	800d768 <__alt_data_end+0xf800d768>
 800d8bc:	1c000084 	addi	r16,r3,2
 800d8c0:	1c400047 	ldb	r17,1(r3)
 800d8c4:	002f883a 	mov	r23,zero
 800d8c8:	003fa706 	br	800d768 <__alt_data_end+0xf800d768>
 800d8cc:	00800c04 	movi	r2,48
 800d8d0:	88801b26 	beq	r17,r2,800d940 <_strtoul_r+0x254>
 800d8d4:	01440034 	movhi	r5,4096
 800d8d8:	297fffc4 	addi	r5,r5,-1
 800d8dc:	008003c4 	movi	r2,15
 800d8e0:	a819883a 	mov	r12,r21
 800d8e4:	003fb606 	br	800d7c0 <__alt_data_end+0xf800d7c0>
 800d8e8:	80c00003 	ldbu	r3,0(r16)
 800d8ec:	00bff7c4 	movi	r2,-33
 800d8f0:	1884703a 	and	r2,r3,r2
 800d8f4:	10803fcc 	andi	r2,r2,255
 800d8f8:	1080201c 	xori	r2,r2,128
 800d8fc:	10bfe004 	addi	r2,r2,-128
 800d900:	00c01604 	movi	r3,88
 800d904:	10c00626 	beq	r2,r3,800d920 <_strtoul_r+0x234>
 800d908:	05400204 	movi	r21,8
 800d90c:	01480034 	movhi	r5,8192
 800d910:	008001c4 	movi	r2,7
 800d914:	297fffc4 	addi	r5,r5,-1
 800d918:	a819883a 	mov	r12,r21
 800d91c:	003fa806 	br	800d7c0 <__alt_data_end+0xf800d7c0>
 800d920:	03000404 	movi	r12,16
 800d924:	05840034 	movhi	r22,4096
 800d928:	84400047 	ldb	r17,1(r16)
 800d92c:	008003c4 	movi	r2,15
 800d930:	84000084 	addi	r16,r16,2
 800d934:	b5bfffc4 	addi	r22,r22,-1
 800d938:	602b883a 	mov	r21,r12
 800d93c:	003f9706 	br	800d79c <__alt_data_end+0xf800d79c>
 800d940:	80c00003 	ldbu	r3,0(r16)
 800d944:	00bff7c4 	movi	r2,-33
 800d948:	1884703a 	and	r2,r3,r2
 800d94c:	10803fcc 	andi	r2,r2,255
 800d950:	1080201c 	xori	r2,r2,128
 800d954:	10bfe004 	addi	r2,r2,-128
 800d958:	00c01604 	movi	r3,88
 800d95c:	10fff026 	beq	r2,r3,800d920 <__alt_data_end+0xf800d920>
 800d960:	01440034 	movhi	r5,4096
 800d964:	008003c4 	movi	r2,15
 800d968:	297fffc4 	addi	r5,r5,-1
 800d96c:	a819883a 	mov	r12,r21
 800d970:	003f9306 	br	800d7c0 <__alt_data_end+0xf800d7c0>

0800d974 <strtoul>:
 800d974:	2007883a 	mov	r3,r4
 800d978:	010200b4 	movhi	r4,2050
 800d97c:	213ab604 	addi	r4,r4,-5416
 800d980:	21000017 	ldw	r4,0(r4)
 800d984:	2805883a 	mov	r2,r5
 800d988:	300f883a 	mov	r7,r6
 800d98c:	180b883a 	mov	r5,r3
 800d990:	100d883a 	mov	r6,r2
 800d994:	800d6ec1 	jmpi	800d6ec <_strtoul_r>

0800d998 <_strtoull_r>:
 800d998:	008200b4 	movhi	r2,2050
 800d99c:	deffee04 	addi	sp,sp,-72
 800d9a0:	10bab904 	addi	r2,r2,-5404
 800d9a4:	ddc00f15 	stw	r23,60(sp)
 800d9a8:	15c00017 	ldw	r23,0(r2)
 800d9ac:	df001015 	stw	fp,64(sp)
 800d9b0:	dfc01115 	stw	ra,68(sp)
 800d9b4:	dd800e15 	stw	r22,56(sp)
 800d9b8:	dd400d15 	stw	r21,52(sp)
 800d9bc:	dd000c15 	stw	r20,48(sp)
 800d9c0:	dcc00b15 	stw	r19,44(sp)
 800d9c4:	dc800a15 	stw	r18,40(sp)
 800d9c8:	dc400915 	stw	r17,36(sp)
 800d9cc:	dc000815 	stw	r16,32(sp)
 800d9d0:	d9400215 	stw	r5,8(sp)
 800d9d4:	d9000515 	stw	r4,20(sp)
 800d9d8:	d9800115 	stw	r6,4(sp)
 800d9dc:	3839883a 	mov	fp,r7
 800d9e0:	2811883a 	mov	r8,r5
 800d9e4:	42400007 	ldb	r9,0(r8)
 800d9e8:	4007883a 	mov	r3,r8
 800d9ec:	42000044 	addi	r8,r8,1
 800d9f0:	ba45883a 	add	r2,r23,r9
 800d9f4:	10800043 	ldbu	r2,1(r2)
 800d9f8:	1080020c 	andi	r2,r2,8
 800d9fc:	103ff91e 	bne	r2,zero,800d9e4 <__alt_data_end+0xf800d9e4>
 800da00:	00800b44 	movi	r2,45
 800da04:	48807826 	beq	r9,r2,800dbe8 <_strtoull_r+0x250>
 800da08:	00800ac4 	movi	r2,43
 800da0c:	48807b26 	beq	r9,r2,800dbfc <_strtoull_r+0x264>
 800da10:	d8000415 	stw	zero,16(sp)
 800da14:	e0001726 	beq	fp,zero,800da74 <_strtoull_r+0xdc>
 800da18:	00800404 	movi	r2,16
 800da1c:	e0808d26 	beq	fp,r2,800dc54 <_strtoull_r+0x2bc>
 800da20:	e027d7fa 	srai	r19,fp,31
 800da24:	013fffc4 	movi	r4,-1
 800da28:	200b883a 	mov	r5,r4
 800da2c:	e00d883a 	mov	r6,fp
 800da30:	980f883a 	mov	r7,r19
 800da34:	da000615 	stw	r8,24(sp)
 800da38:	da400715 	stw	r9,28(sp)
 800da3c:	8014e500 	call	8014e50 <__udivdi3>
 800da40:	013fffc4 	movi	r4,-1
 800da44:	200b883a 	mov	r5,r4
 800da48:	e00d883a 	mov	r6,fp
 800da4c:	980f883a 	mov	r7,r19
 800da50:	1021883a 	mov	r16,r2
 800da54:	1823883a 	mov	r17,r3
 800da58:	80154100 	call	8015410 <__umoddi3>
 800da5c:	da400717 	ldw	r9,28(sp)
 800da60:	da000617 	ldw	r8,24(sp)
 800da64:	d8800315 	stw	r2,12(sp)
 800da68:	df000015 	stw	fp,0(sp)
 800da6c:	8825883a 	mov	r18,r17
 800da70:	00000c06 	br	800daa4 <_strtoull_r+0x10c>
 800da74:	00800c04 	movi	r2,48
 800da78:	48806426 	beq	r9,r2,800dc0c <_strtoull_r+0x274>
 800da7c:	00800284 	movi	r2,10
 800da80:	01000144 	movi	r4,5
 800da84:	042666b4 	movhi	r16,39322
 800da88:	048666b4 	movhi	r18,6554
 800da8c:	d8800015 	stw	r2,0(sp)
 800da90:	d9000315 	stw	r4,12(sp)
 800da94:	84266644 	addi	r16,r16,-26215
 800da98:	94a66644 	addi	r18,r18,-26215
 800da9c:	0027883a 	mov	r19,zero
 800daa0:	1039883a 	mov	fp,r2
 800daa4:	ba45883a 	add	r2,r23,r9
 800daa8:	12800043 	ldbu	r10,1(r2)
 800daac:	402d883a 	mov	r22,r8
 800dab0:	000d883a 	mov	r6,zero
 800dab4:	5080010c 	andi	r2,r10,4
 800dab8:	0009883a 	mov	r4,zero
 800dabc:	000b883a 	mov	r5,zero
 800dac0:	04400044 	movi	r17,1
 800dac4:	057fffc4 	movi	r21,-1
 800dac8:	10000d26 	beq	r2,zero,800db00 <_strtoull_r+0x168>
 800dacc:	4d3ff404 	addi	r20,r9,-48
 800dad0:	a700110e 	bge	r20,fp,800db18 <_strtoull_r+0x180>
 800dad4:	35400426 	beq	r6,r21,800dae8 <_strtoull_r+0x150>
 800dad8:	91400236 	bltu	r18,r5,800dae4 <_strtoull_r+0x14c>
 800dadc:	2c80281e 	bne	r5,r18,800db80 <_strtoull_r+0x1e8>
 800dae0:	8100272e 	bgeu	r16,r4,800db80 <_strtoull_r+0x1e8>
 800dae4:	01bfffc4 	movi	r6,-1
 800dae8:	b2400007 	ldb	r9,0(r22)
 800daec:	b5800044 	addi	r22,r22,1
 800daf0:	ba45883a 	add	r2,r23,r9
 800daf4:	12800043 	ldbu	r10,1(r2)
 800daf8:	5080010c 	andi	r2,r10,4
 800dafc:	103ff31e 	bne	r2,zero,800dacc <__alt_data_end+0xf800dacc>
 800db00:	528000cc 	andi	r10,r10,3
 800db04:	50000426 	beq	r10,zero,800db18 <_strtoull_r+0x180>
 800db08:	54402926 	beq	r10,r17,800dbb0 <_strtoull_r+0x218>
 800db0c:	00c015c4 	movi	r3,87
 800db10:	48e9c83a 	sub	r20,r9,r3
 800db14:	a73fef16 	blt	r20,fp,800dad4 <__alt_data_end+0xf800dad4>
 800db18:	30002d16 	blt	r6,zero,800dbd0 <_strtoull_r+0x238>
 800db1c:	d9c00417 	ldw	r7,16(sp)
 800db20:	01c7c83a 	sub	r3,zero,r7
 800db24:	20c8f03a 	xor	r4,r4,r3
 800db28:	21c5883a 	add	r2,r4,r7
 800db2c:	1109803a 	cmpltu	r4,r2,r4
 800db30:	28c6f03a 	xor	r3,r5,r3
 800db34:	20c7883a 	add	r3,r4,r3
 800db38:	d9000117 	ldw	r4,4(sp)
 800db3c:	20000426 	beq	r4,zero,800db50 <_strtoull_r+0x1b8>
 800db40:	30002126 	beq	r6,zero,800dbc8 <_strtoull_r+0x230>
 800db44:	b5bfffc4 	addi	r22,r22,-1
 800db48:	d9c00117 	ldw	r7,4(sp)
 800db4c:	3d800015 	stw	r22,0(r7)
 800db50:	dfc01117 	ldw	ra,68(sp)
 800db54:	df001017 	ldw	fp,64(sp)
 800db58:	ddc00f17 	ldw	r23,60(sp)
 800db5c:	dd800e17 	ldw	r22,56(sp)
 800db60:	dd400d17 	ldw	r21,52(sp)
 800db64:	dd000c17 	ldw	r20,48(sp)
 800db68:	dcc00b17 	ldw	r19,44(sp)
 800db6c:	dc800a17 	ldw	r18,40(sp)
 800db70:	dc400917 	ldw	r17,36(sp)
 800db74:	dc000817 	ldw	r16,32(sp)
 800db78:	dec01204 	addi	sp,sp,72
 800db7c:	f800283a 	ret
 800db80:	24000d26 	beq	r4,r16,800dbb8 <_strtoull_r+0x220>
 800db84:	d9800017 	ldw	r6,0(sp)
 800db88:	980f883a 	mov	r7,r19
 800db8c:	8014d7c0 	call	8014d7c <__muldi3>
 800db90:	a00bd7fa 	srai	r5,r20,31
 800db94:	a085883a 	add	r2,r20,r2
 800db98:	1513803a 	cmpltu	r9,r2,r20
 800db9c:	28c7883a 	add	r3,r5,r3
 800dba0:	1009883a 	mov	r4,r2
 800dba4:	48cb883a 	add	r5,r9,r3
 800dba8:	01800044 	movi	r6,1
 800dbac:	003fce06 	br	800dae8 <__alt_data_end+0xf800dae8>
 800dbb0:	00c00dc4 	movi	r3,55
 800dbb4:	003fd606 	br	800db10 <__alt_data_end+0xf800db10>
 800dbb8:	2cbff21e 	bne	r5,r18,800db84 <__alt_data_end+0xf800db84>
 800dbbc:	d9c00317 	ldw	r7,12(sp)
 800dbc0:	3d3fc816 	blt	r7,r20,800dae4 <__alt_data_end+0xf800dae4>
 800dbc4:	003fef06 	br	800db84 <__alt_data_end+0xf800db84>
 800dbc8:	dd800217 	ldw	r22,8(sp)
 800dbcc:	003fde06 	br	800db48 <__alt_data_end+0xf800db48>
 800dbd0:	d9000517 	ldw	r4,20(sp)
 800dbd4:	00c00884 	movi	r3,34
 800dbd8:	00bfffc4 	movi	r2,-1
 800dbdc:	20c00015 	stw	r3,0(r4)
 800dbe0:	1007883a 	mov	r3,r2
 800dbe4:	003fd406 	br	800db38 <__alt_data_end+0xf800db38>
 800dbe8:	00800044 	movi	r2,1
 800dbec:	1a000084 	addi	r8,r3,2
 800dbf0:	1a400047 	ldb	r9,1(r3)
 800dbf4:	d8800415 	stw	r2,16(sp)
 800dbf8:	003f8606 	br	800da14 <__alt_data_end+0xf800da14>
 800dbfc:	1a000084 	addi	r8,r3,2
 800dc00:	1a400047 	ldb	r9,1(r3)
 800dc04:	d8000415 	stw	zero,16(sp)
 800dc08:	003f8206 	br	800da14 <__alt_data_end+0xf800da14>
 800dc0c:	40c00003 	ldbu	r3,0(r8)
 800dc10:	00bff7c4 	movi	r2,-33
 800dc14:	1884703a 	and	r2,r3,r2
 800dc18:	10803fcc 	andi	r2,r2,255
 800dc1c:	1080201c 	xori	r2,r2,128
 800dc20:	10bfe004 	addi	r2,r2,-128
 800dc24:	00c01604 	movi	r3,88
 800dc28:	10c01426 	beq	r2,r3,800dc7c <_strtoull_r+0x2e4>
 800dc2c:	00800204 	movi	r2,8
 800dc30:	010001c4 	movi	r4,7
 800dc34:	043fffc4 	movi	r16,-1
 800dc38:	04880034 	movhi	r18,8192
 800dc3c:	d8800015 	stw	r2,0(sp)
 800dc40:	d9000315 	stw	r4,12(sp)
 800dc44:	9425883a 	add	r18,r18,r16
 800dc48:	0027883a 	mov	r19,zero
 800dc4c:	1039883a 	mov	fp,r2
 800dc50:	003f9406 	br	800daa4 <__alt_data_end+0xf800daa4>
 800dc54:	00800c04 	movi	r2,48
 800dc58:	48801426 	beq	r9,r2,800dcac <_strtoull_r+0x314>
 800dc5c:	04840034 	movhi	r18,4096
 800dc60:	008003c4 	movi	r2,15
 800dc64:	94bfffc4 	addi	r18,r18,-1
 800dc68:	d8800315 	stw	r2,12(sp)
 800dc6c:	043fffc4 	movi	r16,-1
 800dc70:	df000015 	stw	fp,0(sp)
 800dc74:	0027883a 	mov	r19,zero
 800dc78:	003f8a06 	br	800daa4 <__alt_data_end+0xf800daa4>
 800dc7c:	01000404 	movi	r4,16
 800dc80:	01c003c4 	movi	r7,15
 800dc84:	043fffc4 	movi	r16,-1
 800dc88:	04440034 	movhi	r17,4096
 800dc8c:	42400047 	ldb	r9,1(r8)
 800dc90:	d9000015 	stw	r4,0(sp)
 800dc94:	d9c00315 	stw	r7,12(sp)
 800dc98:	42000084 	addi	r8,r8,2
 800dc9c:	8c23883a 	add	r17,r17,r16
 800dca0:	0027883a 	mov	r19,zero
 800dca4:	2039883a 	mov	fp,r4
 800dca8:	003f7006 	br	800da6c <__alt_data_end+0xf800da6c>
 800dcac:	40c00003 	ldbu	r3,0(r8)
 800dcb0:	00bff7c4 	movi	r2,-33
 800dcb4:	1884703a 	and	r2,r3,r2
 800dcb8:	10803fcc 	andi	r2,r2,255
 800dcbc:	1080201c 	xori	r2,r2,128
 800dcc0:	10bfe004 	addi	r2,r2,-128
 800dcc4:	00c01604 	movi	r3,88
 800dcc8:	10ffec26 	beq	r2,r3,800dc7c <__alt_data_end+0xf800dc7c>
 800dccc:	01c003c4 	movi	r7,15
 800dcd0:	043fffc4 	movi	r16,-1
 800dcd4:	04840034 	movhi	r18,4096
 800dcd8:	d9c00315 	stw	r7,12(sp)
 800dcdc:	9425883a 	add	r18,r18,r16
 800dce0:	df000015 	stw	fp,0(sp)
 800dce4:	0027883a 	mov	r19,zero
 800dce8:	003f6e06 	br	800daa4 <__alt_data_end+0xf800daa4>

0800dcec <_sungetc_r>:
 800dcec:	00bfffc4 	movi	r2,-1
 800dcf0:	28803426 	beq	r5,r2,800ddc4 <_sungetc_r+0xd8>
 800dcf4:	3080030b 	ldhu	r2,12(r6)
 800dcf8:	30c00c17 	ldw	r3,48(r6)
 800dcfc:	defffd04 	addi	sp,sp,-12
 800dd00:	10bff7cc 	andi	r2,r2,65503
 800dd04:	dc400115 	stw	r17,4(sp)
 800dd08:	dfc00215 	stw	ra,8(sp)
 800dd0c:	dc000015 	stw	r16,0(sp)
 800dd10:	3080030d 	sth	r2,12(r6)
 800dd14:	2c403fcc 	andi	r17,r5,255
 800dd18:	18001626 	beq	r3,zero,800dd74 <_sungetc_r+0x88>
 800dd1c:	30c00117 	ldw	r3,4(r6)
 800dd20:	30800d17 	ldw	r2,52(r6)
 800dd24:	3021883a 	mov	r16,r6
 800dd28:	18800d0e 	bge	r3,r2,800dd60 <_sungetc_r+0x74>
 800dd2c:	80c00017 	ldw	r3,0(r16)
 800dd30:	8805883a 	mov	r2,r17
 800dd34:	193fffc4 	addi	r4,r3,-1
 800dd38:	81000015 	stw	r4,0(r16)
 800dd3c:	1c7fffc5 	stb	r17,-1(r3)
 800dd40:	80c00117 	ldw	r3,4(r16)
 800dd44:	18c00044 	addi	r3,r3,1
 800dd48:	80c00115 	stw	r3,4(r16)
 800dd4c:	dfc00217 	ldw	ra,8(sp)
 800dd50:	dc400117 	ldw	r17,4(sp)
 800dd54:	dc000017 	ldw	r16,0(sp)
 800dd58:	dec00304 	addi	sp,sp,12
 800dd5c:	f800283a 	ret
 800dd60:	300b883a 	mov	r5,r6
 800dd64:	8010f7c0 	call	8010f7c <__submore>
 800dd68:	103ff026 	beq	r2,zero,800dd2c <__alt_data_end+0xf800dd2c>
 800dd6c:	00bfffc4 	movi	r2,-1
 800dd70:	003ff606 	br	800dd4c <__alt_data_end+0xf800dd4c>
 800dd74:	30800417 	ldw	r2,16(r6)
 800dd78:	30c00017 	ldw	r3,0(r6)
 800dd7c:	10000326 	beq	r2,zero,800dd8c <_sungetc_r+0xa0>
 800dd80:	10c0022e 	bgeu	r2,r3,800dd8c <_sungetc_r+0xa0>
 800dd84:	18bfffc3 	ldbu	r2,-1(r3)
 800dd88:	14401026 	beq	r2,r17,800ddcc <_sungetc_r+0xe0>
 800dd8c:	31400117 	ldw	r5,4(r6)
 800dd90:	30801084 	addi	r2,r6,66
 800dd94:	31001004 	addi	r4,r6,64
 800dd98:	30c00e15 	stw	r3,56(r6)
 800dd9c:	30800015 	stw	r2,0(r6)
 800dda0:	00c000c4 	movi	r3,3
 800dda4:	00800044 	movi	r2,1
 800dda8:	30800115 	stw	r2,4(r6)
 800ddac:	31400f15 	stw	r5,60(r6)
 800ddb0:	31000c15 	stw	r4,48(r6)
 800ddb4:	30c00d15 	stw	r3,52(r6)
 800ddb8:	34401085 	stb	r17,66(r6)
 800ddbc:	8805883a 	mov	r2,r17
 800ddc0:	003fe206 	br	800dd4c <__alt_data_end+0xf800dd4c>
 800ddc4:	00bfffc4 	movi	r2,-1
 800ddc8:	f800283a 	ret
 800ddcc:	31000117 	ldw	r4,4(r6)
 800ddd0:	18ffffc4 	addi	r3,r3,-1
 800ddd4:	30c00015 	stw	r3,0(r6)
 800ddd8:	20c00044 	addi	r3,r4,1
 800dddc:	30c00115 	stw	r3,4(r6)
 800dde0:	003fda06 	br	800dd4c <__alt_data_end+0xf800dd4c>

0800dde4 <__ssrefill_r>:
 800dde4:	defffe04 	addi	sp,sp,-8
 800dde8:	dc000015 	stw	r16,0(sp)
 800ddec:	2821883a 	mov	r16,r5
 800ddf0:	29400c17 	ldw	r5,48(r5)
 800ddf4:	dfc00115 	stw	ra,4(sp)
 800ddf8:	28000e26 	beq	r5,zero,800de34 <__ssrefill_r+0x50>
 800ddfc:	80801004 	addi	r2,r16,64
 800de00:	28800126 	beq	r5,r2,800de08 <__ssrefill_r+0x24>
 800de04:	8008dd00 	call	8008dd0 <_free_r>
 800de08:	80800f17 	ldw	r2,60(r16)
 800de0c:	80000c15 	stw	zero,48(r16)
 800de10:	80800115 	stw	r2,4(r16)
 800de14:	10000726 	beq	r2,zero,800de34 <__ssrefill_r+0x50>
 800de18:	80c00e17 	ldw	r3,56(r16)
 800de1c:	0005883a 	mov	r2,zero
 800de20:	80c00015 	stw	r3,0(r16)
 800de24:	dfc00117 	ldw	ra,4(sp)
 800de28:	dc000017 	ldw	r16,0(sp)
 800de2c:	dec00204 	addi	sp,sp,8
 800de30:	f800283a 	ret
 800de34:	8080030b 	ldhu	r2,12(r16)
 800de38:	80c00417 	ldw	r3,16(r16)
 800de3c:	80000115 	stw	zero,4(r16)
 800de40:	10800814 	ori	r2,r2,32
 800de44:	8080030d 	sth	r2,12(r16)
 800de48:	80c00015 	stw	r3,0(r16)
 800de4c:	00bfffc4 	movi	r2,-1
 800de50:	003ff406 	br	800de24 <__alt_data_end+0xf800de24>

0800de54 <_sfread_r>:
 800de54:	defff704 	addi	sp,sp,-36
 800de58:	dd800615 	stw	r22,24(sp)
 800de5c:	39ad383a 	mul	r22,r7,r6
 800de60:	ddc00715 	stw	r23,28(sp)
 800de64:	dd400515 	stw	r21,20(sp)
 800de68:	dc400115 	stw	r17,4(sp)
 800de6c:	dfc00815 	stw	ra,32(sp)
 800de70:	dd000415 	stw	r20,16(sp)
 800de74:	dcc00315 	stw	r19,12(sp)
 800de78:	dc800215 	stw	r18,8(sp)
 800de7c:	dc000015 	stw	r16,0(sp)
 800de80:	302f883a 	mov	r23,r6
 800de84:	382b883a 	mov	r21,r7
 800de88:	dc400917 	ldw	r17,36(sp)
 800de8c:	b0002826 	beq	r22,zero,800df30 <_sfread_r+0xdc>
 800de90:	2029883a 	mov	r20,r4
 800de94:	2827883a 	mov	r19,r5
 800de98:	b025883a 	mov	r18,r22
 800de9c:	00000b06 	br	800decc <_sfread_r+0x78>
 800dea0:	8002df40 	call	8002df4 <memcpy>
 800dea4:	88800017 	ldw	r2,0(r17)
 800dea8:	9c27883a 	add	r19,r19,r16
 800deac:	9425c83a 	sub	r18,r18,r16
 800deb0:	1421883a 	add	r16,r2,r16
 800deb4:	88000115 	stw	zero,4(r17)
 800deb8:	a009883a 	mov	r4,r20
 800debc:	8c000015 	stw	r16,0(r17)
 800dec0:	880b883a 	mov	r5,r17
 800dec4:	800dde40 	call	800dde4 <__ssrefill_r>
 800dec8:	10001b1e 	bne	r2,zero,800df38 <_sfread_r+0xe4>
 800decc:	8c000117 	ldw	r16,4(r17)
 800ded0:	9809883a 	mov	r4,r19
 800ded4:	89400017 	ldw	r5,0(r17)
 800ded8:	800d883a 	mov	r6,r16
 800dedc:	84bff036 	bltu	r16,r18,800dea0 <__alt_data_end+0xf800dea0>
 800dee0:	900d883a 	mov	r6,r18
 800dee4:	8002df40 	call	8002df4 <memcpy>
 800dee8:	88c00117 	ldw	r3,4(r17)
 800deec:	89000017 	ldw	r4,0(r17)
 800def0:	a805883a 	mov	r2,r21
 800def4:	1c87c83a 	sub	r3,r3,r18
 800def8:	24a5883a 	add	r18,r4,r18
 800defc:	88c00115 	stw	r3,4(r17)
 800df00:	8c800015 	stw	r18,0(r17)
 800df04:	dfc00817 	ldw	ra,32(sp)
 800df08:	ddc00717 	ldw	r23,28(sp)
 800df0c:	dd800617 	ldw	r22,24(sp)
 800df10:	dd400517 	ldw	r21,20(sp)
 800df14:	dd000417 	ldw	r20,16(sp)
 800df18:	dcc00317 	ldw	r19,12(sp)
 800df1c:	dc800217 	ldw	r18,8(sp)
 800df20:	dc400117 	ldw	r17,4(sp)
 800df24:	dc000017 	ldw	r16,0(sp)
 800df28:	dec00904 	addi	sp,sp,36
 800df2c:	f800283a 	ret
 800df30:	0005883a 	mov	r2,zero
 800df34:	003ff306 	br	800df04 <__alt_data_end+0xf800df04>
 800df38:	b489c83a 	sub	r4,r22,r18
 800df3c:	b80b883a 	mov	r5,r23
 800df40:	80024900 	call	8002490 <__udivsi3>
 800df44:	003fef06 	br	800df04 <__alt_data_end+0xf800df04>

0800df48 <__ssvfiscanf_r>:
 800df48:	deff9a04 	addi	sp,sp,-408
 800df4c:	df006415 	stw	fp,400(sp)
 800df50:	dc805e15 	stw	r18,376(sp)
 800df54:	dc005c15 	stw	r16,368(sp)
 800df58:	2839883a 	mov	fp,r5
 800df5c:	dfc06515 	stw	ra,404(sp)
 800df60:	ddc06315 	stw	r23,396(sp)
 800df64:	dd806215 	stw	r22,392(sp)
 800df68:	dd406115 	stw	r21,388(sp)
 800df6c:	dd006015 	stw	r20,384(sp)
 800df70:	dcc05f15 	stw	r19,380(sp)
 800df74:	dc405d15 	stw	r17,372(sp)
 800df78:	2025883a 	mov	r18,r4
 800df7c:	3021883a 	mov	r16,r6
 800df80:	d9c04f15 	stw	r7,316(sp)
 800df84:	8008c6c0 	call	8008c6c <__sfp_lock_acquire>
 800df88:	e080030b 	ldhu	r2,12(fp)
 800df8c:	10c8000c 	andi	r3,r2,8192
 800df90:	1800061e 	bne	r3,zero,800dfac <__ssvfiscanf_r+0x64>
 800df94:	e1001917 	ldw	r4,100(fp)
 800df98:	00f7ffc4 	movi	r3,-8193
 800df9c:	10880014 	ori	r2,r2,8192
 800dfa0:	20c6703a 	and	r3,r4,r3
 800dfa4:	e080030d 	sth	r2,12(fp)
 800dfa8:	e0c01915 	stw	r3,100(fp)
 800dfac:	80800007 	ldb	r2,0(r16)
 800dfb0:	da004104 	addi	r8,sp,260
 800dfb4:	0027883a 	mov	r19,zero
 800dfb8:	050200b4 	movhi	r20,2050
 800dfbc:	d8005115 	stw	zero,324(sp)
 800dfc0:	d8005015 	stw	zero,320(sp)
 800dfc4:	d8005315 	stw	zero,332(sp)
 800dfc8:	da004e15 	stw	r8,312(sp)
 800dfcc:	d8804d15 	stw	r2,308(sp)
 800dfd0:	e02b883a 	mov	r21,fp
 800dfd4:	a53ab904 	addi	r20,r20,-5404
 800dfd8:	9839883a 	mov	fp,r19
 800dfdc:	84400044 	addi	r17,r16,1
 800dfe0:	10001e26 	beq	r2,zero,800e05c <__ssvfiscanf_r+0x114>
 800dfe4:	a1000017 	ldw	r4,0(r20)
 800dfe8:	2087883a 	add	r3,r4,r2
 800dfec:	18c00043 	ldbu	r3,1(r3)
 800dff0:	18c0020c 	andi	r3,r3,8
 800dff4:	18001c26 	beq	r3,zero,800e068 <__ssvfiscanf_r+0x120>
 800dff8:	a8800117 	ldw	r2,4(r21)
 800dffc:	00800e0e 	bge	zero,r2,800e038 <__ssvfiscanf_r+0xf0>
 800e000:	a8c00017 	ldw	r3,0(r21)
 800e004:	a1000017 	ldw	r4,0(r20)
 800e008:	18800003 	ldbu	r2,0(r3)
 800e00c:	2085883a 	add	r2,r4,r2
 800e010:	10800043 	ldbu	r2,1(r2)
 800e014:	1080020c 	andi	r2,r2,8
 800e018:	10000b26 	beq	r2,zero,800e048 <__ssvfiscanf_r+0x100>
 800e01c:	a8800117 	ldw	r2,4(r21)
 800e020:	18c00044 	addi	r3,r3,1
 800e024:	a8c00015 	stw	r3,0(r21)
 800e028:	10bfffc4 	addi	r2,r2,-1
 800e02c:	a8800115 	stw	r2,4(r21)
 800e030:	e7000044 	addi	fp,fp,1
 800e034:	00bff216 	blt	zero,r2,800e000 <__alt_data_end+0xf800e000>
 800e038:	9009883a 	mov	r4,r18
 800e03c:	a80b883a 	mov	r5,r21
 800e040:	800dde40 	call	800dde4 <__ssrefill_r>
 800e044:	103fee26 	beq	r2,zero,800e000 <__alt_data_end+0xf800e000>
 800e048:	8821883a 	mov	r16,r17
 800e04c:	80800007 	ldb	r2,0(r16)
 800e050:	84400044 	addi	r17,r16,1
 800e054:	d8804d15 	stw	r2,308(sp)
 800e058:	103fe21e 	bne	r2,zero,800dfe4 <__alt_data_end+0xf800dfe4>
 800e05c:	8008c700 	call	8008c70 <__sfp_lock_release>
 800e060:	d8805317 	ldw	r2,332(sp)
 800e064:	00016806 	br	800e608 <__ssvfiscanf_r+0x6c0>
 800e068:	00c00944 	movi	r3,37
 800e06c:	10c0881e 	bne	r2,r3,800e290 <__ssvfiscanf_r+0x348>
 800e070:	80c00043 	ldbu	r3,1(r16)
 800e074:	0027883a 	mov	r19,zero
 800e078:	0021883a 	mov	r16,zero
 800e07c:	01801e04 	movi	r6,120
 800e080:	01c01b04 	movi	r7,108
 800e084:	18803fcc 	andi	r2,r3,255
 800e088:	89400044 	addi	r5,r17,1
 800e08c:	30810036 	bltu	r6,r2,800e490 <__ssvfiscanf_r+0x548>
 800e090:	100490ba 	slli	r2,r2,2
 800e094:	02c20074 	movhi	r11,2049
 800e098:	5af82a04 	addi	r11,r11,-8024
 800e09c:	12c5883a 	add	r2,r2,r11
 800e0a0:	10800017 	ldw	r2,0(r2)
 800e0a4:	1000683a 	jmp	r2
 800e0a8:	0800e600 	call	800e60 <__alt_mem_epcs+0x800e60>
 800e0ac:	0800e490 	cmplti	zero,at,914
 800e0b0:	0800e490 	cmplti	zero,at,914
 800e0b4:	0800e490 	cmplti	zero,at,914
 800e0b8:	0800e490 	cmplti	zero,at,914
 800e0bc:	0800e490 	cmplti	zero,at,914
 800e0c0:	0800e490 	cmplti	zero,at,914
 800e0c4:	0800e490 	cmplti	zero,at,914
 800e0c8:	0800e490 	cmplti	zero,at,914
 800e0cc:	0800e490 	cmplti	zero,at,914
 800e0d0:	0800e490 	cmplti	zero,at,914
 800e0d4:	0800e490 	cmplti	zero,at,914
 800e0d8:	0800e490 	cmplti	zero,at,914
 800e0dc:	0800e490 	cmplti	zero,at,914
 800e0e0:	0800e490 	cmplti	zero,at,914
 800e0e4:	0800e490 	cmplti	zero,at,914
 800e0e8:	0800e490 	cmplti	zero,at,914
 800e0ec:	0800e490 	cmplti	zero,at,914
 800e0f0:	0800e490 	cmplti	zero,at,914
 800e0f4:	0800e490 	cmplti	zero,at,914
 800e0f8:	0800e490 	cmplti	zero,at,914
 800e0fc:	0800e490 	cmplti	zero,at,914
 800e100:	0800e490 	cmplti	zero,at,914
 800e104:	0800e490 	cmplti	zero,at,914
 800e108:	0800e490 	cmplti	zero,at,914
 800e10c:	0800e490 	cmplti	zero,at,914
 800e110:	0800e490 	cmplti	zero,at,914
 800e114:	0800e490 	cmplti	zero,at,914
 800e118:	0800e490 	cmplti	zero,at,914
 800e11c:	0800e490 	cmplti	zero,at,914
 800e120:	0800e490 	cmplti	zero,at,914
 800e124:	0800e490 	cmplti	zero,at,914
 800e128:	0800e490 	cmplti	zero,at,914
 800e12c:	0800e490 	cmplti	zero,at,914
 800e130:	0800e490 	cmplti	zero,at,914
 800e134:	0800e490 	cmplti	zero,at,914
 800e138:	0800e490 	cmplti	zero,at,914
 800e13c:	0800e28c 	andi	zero,at,906
 800e140:	0800e490 	cmplti	zero,at,914
 800e144:	0800e490 	cmplti	zero,at,914
 800e148:	0800e490 	cmplti	zero,at,914
 800e14c:	0800e490 	cmplti	zero,at,914
 800e150:	0800e5f0 	cmpltui	zero,at,919
 800e154:	0800e490 	cmplti	zero,at,914
 800e158:	0800e490 	cmplti	zero,at,914
 800e15c:	0800e490 	cmplti	zero,at,914
 800e160:	0800e490 	cmplti	zero,at,914
 800e164:	0800e490 	cmplti	zero,at,914
 800e168:	0800e5cc 	andi	zero,at,919
 800e16c:	0800e5cc 	andi	zero,at,919
 800e170:	0800e5cc 	andi	zero,at,919
 800e174:	0800e5cc 	andi	zero,at,919
 800e178:	0800e5cc 	andi	zero,at,919
 800e17c:	0800e5cc 	andi	zero,at,919
 800e180:	0800e5cc 	andi	zero,at,919
 800e184:	0800e5cc 	andi	zero,at,919
 800e188:	0800e5cc 	andi	zero,at,919
 800e18c:	0800e5cc 	andi	zero,at,919
 800e190:	0800e490 	cmplti	zero,at,914
 800e194:	0800e490 	cmplti	zero,at,914
 800e198:	0800e490 	cmplti	zero,at,914
 800e19c:	0800e490 	cmplti	zero,at,914
 800e1a0:	0800e490 	cmplti	zero,at,914
 800e1a4:	0800e490 	cmplti	zero,at,914
 800e1a8:	0800e490 	cmplti	zero,at,914
 800e1ac:	0800e490 	cmplti	zero,at,914
 800e1b0:	0800e490 	cmplti	zero,at,914
 800e1b4:	0800e490 	cmplti	zero,at,914
 800e1b8:	0800e5a4 	muli	zero,at,918
 800e1bc:	0800e490 	cmplti	zero,at,914
 800e1c0:	0800e490 	cmplti	zero,at,914
 800e1c4:	0800e490 	cmplti	zero,at,914
 800e1c8:	0800e490 	cmplti	zero,at,914
 800e1cc:	0800e490 	cmplti	zero,at,914
 800e1d0:	0800e490 	cmplti	zero,at,914
 800e1d4:	0800e490 	cmplti	zero,at,914
 800e1d8:	0800e594 	ori	zero,at,918
 800e1dc:	0800e490 	cmplti	zero,at,914
 800e1e0:	0800e490 	cmplti	zero,at,914
 800e1e4:	0800e588 	cmpgei	zero,at,918
 800e1e8:	0800e490 	cmplti	zero,at,914
 800e1ec:	0800e490 	cmplti	zero,at,914
 800e1f0:	0800e490 	cmplti	zero,at,914
 800e1f4:	0800e490 	cmplti	zero,at,914
 800e1f8:	0800e490 	cmplti	zero,at,914
 800e1fc:	0800e490 	cmplti	zero,at,914
 800e200:	0800e490 	cmplti	zero,at,914
 800e204:	0800e490 	cmplti	zero,at,914
 800e208:	0800e57c 	xorhi	zero,at,917
 800e20c:	0800e490 	cmplti	zero,at,914
 800e210:	0800e490 	cmplti	zero,at,914
 800e214:	0800e560 	cmpeqi	zero,at,917
 800e218:	0800e490 	cmplti	zero,at,914
 800e21c:	0800e490 	cmplti	zero,at,914
 800e220:	0800e490 	cmplti	zero,at,914
 800e224:	0800e490 	cmplti	zero,at,914
 800e228:	0800e490 	cmplti	zero,at,914
 800e22c:	0800e490 	cmplti	zero,at,914
 800e230:	0800e490 	cmplti	zero,at,914
 800e234:	0800e54c 	andi	zero,at,917
 800e238:	0800e528 	cmpgeui	zero,at,916
 800e23c:	0800e490 	cmplti	zero,at,914
 800e240:	0800e490 	cmplti	zero,at,914
 800e244:	0800e490 	cmplti	zero,at,914
 800e248:	0800e518 	cmpnei	zero,at,916
 800e24c:	0800e4f8 	rdprs	zero,at,915
 800e250:	0800e490 	cmplti	zero,at,914
 800e254:	0800e490 	cmplti	zero,at,914
 800e258:	0800e468 	cmpgeui	zero,at,913
 800e25c:	0800e490 	cmplti	zero,at,914
 800e260:	0800e43c 	xorhi	zero,at,912
 800e264:	0800e4d4 	ori	zero,at,915
 800e268:	0800e3d0 	cmplti	zero,at,911
 800e26c:	0800e490 	cmplti	zero,at,914
 800e270:	0800e490 	cmplti	zero,at,914
 800e274:	0800e42c 	andhi	zero,at,912
 800e278:	0800e490 	cmplti	zero,at,914
 800e27c:	0800e2c8 	cmpgei	zero,at,907
 800e280:	0800e490 	cmplti	zero,at,914
 800e284:	0800e490 	cmplti	zero,at,914
 800e288:	0800e57c 	xorhi	zero,at,917
 800e28c:	2823883a 	mov	r17,r5
 800e290:	a8800117 	ldw	r2,4(r21)
 800e294:	0082d50e 	bge	zero,r2,800edec <__ssvfiscanf_r+0xea4>
 800e298:	a8800017 	ldw	r2,0(r21)
 800e29c:	88ffffc3 	ldbu	r3,-1(r17)
 800e2a0:	11000003 	ldbu	r4,0(r2)
 800e2a4:	20ff6d1e 	bne	r4,r3,800e05c <__alt_data_end+0xf800e05c>
 800e2a8:	a8c00117 	ldw	r3,4(r21)
 800e2ac:	10800044 	addi	r2,r2,1
 800e2b0:	a8800015 	stw	r2,0(r21)
 800e2b4:	18bfffc4 	addi	r2,r3,-1
 800e2b8:	a8800115 	stw	r2,4(r21)
 800e2bc:	e7000044 	addi	fp,fp,1
 800e2c0:	8821883a 	mov	r16,r17
 800e2c4:	003f6106 	br	800e04c <__alt_data_end+0xf800e04c>
 800e2c8:	02c20074 	movhi	r11,2049
 800e2cc:	5af5bb04 	addi	r11,r11,-10516
 800e2d0:	02000284 	movi	r8,10
 800e2d4:	2823883a 	mov	r17,r5
 800e2d8:	982f883a 	mov	r23,r19
 800e2dc:	dac05115 	stw	r11,324(sp)
 800e2e0:	da005015 	stw	r8,320(sp)
 800e2e4:	058000c4 	movi	r22,3
 800e2e8:	a8800117 	ldw	r2,4(r21)
 800e2ec:	0080430e 	bge	zero,r2,800e3fc <__ssvfiscanf_r+0x4b4>
 800e2f0:	8080100c 	andi	r2,r16,64
 800e2f4:	10002626 	beq	r2,zero,800e390 <__ssvfiscanf_r+0x448>
 800e2f8:	00800084 	movi	r2,2
 800e2fc:	b080d026 	beq	r22,r2,800e640 <__ssvfiscanf_r+0x6f8>
 800e300:	008000c4 	movi	r2,3
 800e304:	b0810426 	beq	r22,r2,800e718 <__ssvfiscanf_r+0x7d0>
 800e308:	00800044 	movi	r2,1
 800e30c:	b080e926 	beq	r22,r2,800e6b4 <__ssvfiscanf_r+0x76c>
 800e310:	9800011e 	bne	r19,zero,800e318 <__ssvfiscanf_r+0x3d0>
 800e314:	102f883a 	mov	r23,r2
 800e318:	8080004c 	andi	r2,r16,1
 800e31c:	1002321e 	bne	r2,zero,800ebe8 <__ssvfiscanf_r+0xca0>
 800e320:	8400040c 	andi	r16,r16,16
 800e324:	8002a026 	beq	r16,zero,800eda8 <__ssvfiscanf_r+0xe60>
 800e328:	0021883a 	mov	r16,zero
 800e32c:	00000906 	br	800e354 <__ssvfiscanf_r+0x40c>
 800e330:	a8c00017 	ldw	r3,0(r21)
 800e334:	9009883a 	mov	r4,r18
 800e338:	a80b883a 	mov	r5,r21
 800e33c:	1887883a 	add	r3,r3,r2
 800e340:	a8c00015 	stw	r3,0(r21)
 800e344:	80a1883a 	add	r16,r16,r2
 800e348:	b8afc83a 	sub	r23,r23,r2
 800e34c:	800dde40 	call	800dde4 <__ssrefill_r>
 800e350:	10028e1e 	bne	r2,zero,800ed8c <__ssvfiscanf_r+0xe44>
 800e354:	a8800117 	ldw	r2,4(r21)
 800e358:	15fff516 	blt	r2,r23,800e330 <__alt_data_end+0xf800e330>
 800e35c:	a9000017 	ldw	r4,0(r21)
 800e360:	15c5c83a 	sub	r2,r2,r23
 800e364:	85e1883a 	add	r16,r16,r23
 800e368:	25c7883a 	add	r3,r4,r23
 800e36c:	a8800115 	stw	r2,4(r21)
 800e370:	a8c00015 	stw	r3,0(r21)
 800e374:	e439883a 	add	fp,fp,r16
 800e378:	8821883a 	mov	r16,r17
 800e37c:	003f3306 	br	800e04c <__alt_data_end+0xf800e04c>
 800e380:	9009883a 	mov	r4,r18
 800e384:	a80b883a 	mov	r5,r21
 800e388:	800dde40 	call	800dde4 <__ssrefill_r>
 800e38c:	10001f1e 	bne	r2,zero,800e40c <__ssvfiscanf_r+0x4c4>
 800e390:	a1400017 	ldw	r5,0(r20)
 800e394:	a9000017 	ldw	r4,0(r21)
 800e398:	00000206 	br	800e3a4 <__ssvfiscanf_r+0x45c>
 800e39c:	21000044 	addi	r4,r4,1
 800e3a0:	a9000015 	stw	r4,0(r21)
 800e3a4:	20800003 	ldbu	r2,0(r4)
 800e3a8:	2885883a 	add	r2,r5,r2
 800e3ac:	10800043 	ldbu	r2,1(r2)
 800e3b0:	1080020c 	andi	r2,r2,8
 800e3b4:	103fd026 	beq	r2,zero,800e2f8 <__alt_data_end+0xf800e2f8>
 800e3b8:	a8800117 	ldw	r2,4(r21)
 800e3bc:	e7000044 	addi	fp,fp,1
 800e3c0:	10bfffc4 	addi	r2,r2,-1
 800e3c4:	a8800115 	stw	r2,4(r21)
 800e3c8:	00bff416 	blt	zero,r2,800e39c <__alt_data_end+0xf800e39c>
 800e3cc:	003fec06 	br	800e380 <__alt_data_end+0xf800e380>
 800e3d0:	2823883a 	mov	r17,r5
 800e3d4:	84008814 	ori	r16,r16,544
 800e3d8:	02c20074 	movhi	r11,2049
 800e3dc:	a8800117 	ldw	r2,4(r21)
 800e3e0:	5af5bb04 	addi	r11,r11,-10516
 800e3e4:	02000404 	movi	r8,16
 800e3e8:	dac05115 	stw	r11,324(sp)
 800e3ec:	da005015 	stw	r8,320(sp)
 800e3f0:	982f883a 	mov	r23,r19
 800e3f4:	058000c4 	movi	r22,3
 800e3f8:	00bfbd16 	blt	zero,r2,800e2f0 <__alt_data_end+0xf800e2f0>
 800e3fc:	9009883a 	mov	r4,r18
 800e400:	a80b883a 	mov	r5,r21
 800e404:	800dde40 	call	800dde4 <__ssrefill_r>
 800e408:	103fb926 	beq	r2,zero,800e2f0 <__alt_data_end+0xf800e2f0>
 800e40c:	8008c700 	call	8008c70 <__sfp_lock_release>
 800e410:	da005317 	ldw	r8,332(sp)
 800e414:	40008826 	beq	r8,zero,800e638 <__ssvfiscanf_r+0x6f0>
 800e418:	a880030b 	ldhu	r2,12(r21)
 800e41c:	1080100c 	andi	r2,r2,64
 800e420:	1000851e 	bne	r2,zero,800e638 <__ssvfiscanf_r+0x6f0>
 800e424:	4005883a 	mov	r2,r8
 800e428:	00007706 	br	800e608 <__ssvfiscanf_r+0x6c0>
 800e42c:	2823883a 	mov	r17,r5
 800e430:	982f883a 	mov	r23,r19
 800e434:	05800084 	movi	r22,2
 800e438:	003fab06 	br	800e2e8 <__alt_data_end+0xf800e2e8>
 800e43c:	8080040c 	andi	r2,r16,16
 800e440:	2823883a 	mov	r17,r5
 800e444:	103f001e 	bne	r2,zero,800e048 <__alt_data_end+0xf800e048>
 800e448:	8080010c 	andi	r2,r16,4
 800e44c:	10027a26 	beq	r2,zero,800ee38 <__ssvfiscanf_r+0xef0>
 800e450:	dac04f17 	ldw	r11,316(sp)
 800e454:	58800017 	ldw	r2,0(r11)
 800e458:	5ac00104 	addi	r11,r11,4
 800e45c:	dac04f15 	stw	r11,316(sp)
 800e460:	1700000d 	sth	fp,0(r2)
 800e464:	003ef806 	br	800e048 <__alt_data_end+0xf800e048>
 800e468:	88c00043 	ldbu	r3,1(r17)
 800e46c:	18803fcc 	andi	r2,r3,255
 800e470:	1080201c 	xori	r2,r2,128
 800e474:	10bfe004 	addi	r2,r2,-128
 800e478:	11c26b26 	beq	r2,r7,800ee28 <__ssvfiscanf_r+0xee0>
 800e47c:	2823883a 	mov	r17,r5
 800e480:	18803fcc 	andi	r2,r3,255
 800e484:	84000054 	ori	r16,r16,1
 800e488:	89400044 	addi	r5,r17,1
 800e48c:	30bf002e 	bgeu	r6,r2,800e090 <__alt_data_end+0xf800e090>
 800e490:	18c03fcc 	andi	r3,r3,255
 800e494:	18c0201c 	xori	r3,r3,128
 800e498:	18ffe004 	addi	r3,r3,-128
 800e49c:	20c9883a 	add	r4,r4,r3
 800e4a0:	20800043 	ldbu	r2,1(r4)
 800e4a4:	00c00044 	movi	r3,1
 800e4a8:	2823883a 	mov	r17,r5
 800e4ac:	108000cc 	andi	r2,r2,3
 800e4b0:	10c25b26 	beq	r2,r3,800ee20 <__ssvfiscanf_r+0xed8>
 800e4b4:	00820074 	movhi	r2,2049
 800e4b8:	10b45504 	addi	r2,r2,-11948
 800e4bc:	02000284 	movi	r8,10
 800e4c0:	d8805115 	stw	r2,324(sp)
 800e4c4:	982f883a 	mov	r23,r19
 800e4c8:	da005015 	stw	r8,320(sp)
 800e4cc:	058000c4 	movi	r22,3
 800e4d0:	003f8506 	br	800e2e8 <__alt_data_end+0xf800e2e8>
 800e4d4:	2823883a 	mov	r17,r5
 800e4d8:	02c20074 	movhi	r11,2049
 800e4dc:	5af5bb04 	addi	r11,r11,-10516
 800e4e0:	02000204 	movi	r8,8
 800e4e4:	982f883a 	mov	r23,r19
 800e4e8:	dac05115 	stw	r11,324(sp)
 800e4ec:	da005015 	stw	r8,320(sp)
 800e4f0:	058000c4 	movi	r22,3
 800e4f4:	003f7c06 	br	800e2e8 <__alt_data_end+0xf800e2e8>
 800e4f8:	02c20074 	movhi	r11,2049
 800e4fc:	5af45504 	addi	r11,r11,-11948
 800e500:	982f883a 	mov	r23,r19
 800e504:	2823883a 	mov	r17,r5
 800e508:	dac05115 	stw	r11,324(sp)
 800e50c:	d8005015 	stw	zero,320(sp)
 800e510:	058000c4 	movi	r22,3
 800e514:	003f7406 	br	800e2e8 <__alt_data_end+0xf800e2e8>
 800e518:	88c00043 	ldbu	r3,1(r17)
 800e51c:	84000114 	ori	r16,r16,4
 800e520:	2823883a 	mov	r17,r5
 800e524:	003ed706 	br	800e084 <__alt_data_end+0xf800e084>
 800e528:	00820074 	movhi	r2,2049
 800e52c:	10b45504 	addi	r2,r2,-11948
 800e530:	02000284 	movi	r8,10
 800e534:	2823883a 	mov	r17,r5
 800e538:	982f883a 	mov	r23,r19
 800e53c:	d8805115 	stw	r2,324(sp)
 800e540:	da005015 	stw	r8,320(sp)
 800e544:	058000c4 	movi	r22,3
 800e548:	003f6706 	br	800e2e8 <__alt_data_end+0xf800e2e8>
 800e54c:	2823883a 	mov	r17,r5
 800e550:	84001014 	ori	r16,r16,64
 800e554:	982f883a 	mov	r23,r19
 800e558:	002d883a 	mov	r22,zero
 800e55c:	003f6206 	br	800e2e8 <__alt_data_end+0xf800e2e8>
 800e560:	d9000104 	addi	r4,sp,4
 800e564:	800b8c40 	call	800b8c4 <__sccl>
 800e568:	1023883a 	mov	r17,r2
 800e56c:	84001014 	ori	r16,r16,64
 800e570:	982f883a 	mov	r23,r19
 800e574:	05800044 	movi	r22,1
 800e578:	003f5b06 	br	800e2e8 <__alt_data_end+0xf800e2e8>
 800e57c:	2823883a 	mov	r17,r5
 800e580:	84008014 	ori	r16,r16,512
 800e584:	003f9406 	br	800e3d8 <__alt_data_end+0xf800e3d8>
 800e588:	2823883a 	mov	r17,r5
 800e58c:	84000054 	ori	r16,r16,1
 800e590:	003fd106 	br	800e4d8 <__alt_data_end+0xf800e4d8>
 800e594:	88c00043 	ldbu	r3,1(r17)
 800e598:	84000094 	ori	r16,r16,2
 800e59c:	2823883a 	mov	r17,r5
 800e5a0:	003eb806 	br	800e084 <__alt_data_end+0xf800e084>
 800e5a4:	2823883a 	mov	r17,r5
 800e5a8:	84000054 	ori	r16,r16,1
 800e5ac:	02c20074 	movhi	r11,2049
 800e5b0:	5af45504 	addi	r11,r11,-11948
 800e5b4:	02000284 	movi	r8,10
 800e5b8:	982f883a 	mov	r23,r19
 800e5bc:	dac05115 	stw	r11,324(sp)
 800e5c0:	da005015 	stw	r8,320(sp)
 800e5c4:	058000c4 	movi	r22,3
 800e5c8:	003f4706 	br	800e2e8 <__alt_data_end+0xf800e2e8>
 800e5cc:	18803fcc 	andi	r2,r3,255
 800e5d0:	9cc002a4 	muli	r19,r19,10
 800e5d4:	1080201c 	xori	r2,r2,128
 800e5d8:	10bfe004 	addi	r2,r2,-128
 800e5dc:	98a7883a 	add	r19,r19,r2
 800e5e0:	88c00043 	ldbu	r3,1(r17)
 800e5e4:	9cfff404 	addi	r19,r19,-48
 800e5e8:	2823883a 	mov	r17,r5
 800e5ec:	003ea506 	br	800e084 <__alt_data_end+0xf800e084>
 800e5f0:	88c00043 	ldbu	r3,1(r17)
 800e5f4:	84000414 	ori	r16,r16,16
 800e5f8:	2823883a 	mov	r17,r5
 800e5fc:	003ea106 	br	800e084 <__alt_data_end+0xf800e084>
 800e600:	8008c700 	call	8008c70 <__sfp_lock_release>
 800e604:	00bfffc4 	movi	r2,-1
 800e608:	dfc06517 	ldw	ra,404(sp)
 800e60c:	df006417 	ldw	fp,400(sp)
 800e610:	ddc06317 	ldw	r23,396(sp)
 800e614:	dd806217 	ldw	r22,392(sp)
 800e618:	dd406117 	ldw	r21,388(sp)
 800e61c:	dd006017 	ldw	r20,384(sp)
 800e620:	dcc05f17 	ldw	r19,380(sp)
 800e624:	dc805e17 	ldw	r18,376(sp)
 800e628:	dc405d17 	ldw	r17,372(sp)
 800e62c:	dc005c17 	ldw	r16,368(sp)
 800e630:	dec06604 	addi	sp,sp,408
 800e634:	f800283a 	ret
 800e638:	00bfffc4 	movi	r2,-1
 800e63c:	003ff206 	br	800e608 <__alt_data_end+0xf800e608>
 800e640:	9800011e 	bne	r19,zero,800e648 <__ssvfiscanf_r+0x700>
 800e644:	05ffffc4 	movi	r23,-1
 800e648:	8080004c 	andi	r2,r16,1
 800e64c:	10014c1e 	bne	r2,zero,800eb80 <__ssvfiscanf_r+0xc38>
 800e650:	8400040c 	andi	r16,r16,16
 800e654:	80012126 	beq	r16,zero,800eadc <__ssvfiscanf_r+0xb94>
 800e658:	a1400017 	ldw	r5,0(r20)
 800e65c:	a9000017 	ldw	r4,0(r21)
 800e660:	0021883a 	mov	r16,zero
 800e664:	20800003 	ldbu	r2,0(r4)
 800e668:	2885883a 	add	r2,r5,r2
 800e66c:	10800043 	ldbu	r2,1(r2)
 800e670:	1080020c 	andi	r2,r2,8
 800e674:	103f3f1e 	bne	r2,zero,800e374 <__alt_data_end+0xf800e374>
 800e678:	a8800117 	ldw	r2,4(r21)
 800e67c:	21000044 	addi	r4,r4,1
 800e680:	84000044 	addi	r16,r16,1
 800e684:	10bfffc4 	addi	r2,r2,-1
 800e688:	a8800115 	stw	r2,4(r21)
 800e68c:	a9000015 	stw	r4,0(r21)
 800e690:	bc3f3826 	beq	r23,r16,800e374 <__alt_data_end+0xf800e374>
 800e694:	00bff316 	blt	zero,r2,800e664 <__alt_data_end+0xf800e664>
 800e698:	9009883a 	mov	r4,r18
 800e69c:	a80b883a 	mov	r5,r21
 800e6a0:	800dde40 	call	800dde4 <__ssrefill_r>
 800e6a4:	103f331e 	bne	r2,zero,800e374 <__alt_data_end+0xf800e374>
 800e6a8:	a1400017 	ldw	r5,0(r20)
 800e6ac:	a9000017 	ldw	r4,0(r21)
 800e6b0:	003fec06 	br	800e664 <__alt_data_end+0xf800e664>
 800e6b4:	9800011e 	bne	r19,zero,800e6bc <__ssvfiscanf_r+0x774>
 800e6b8:	05ffffc4 	movi	r23,-1
 800e6bc:	8400040c 	andi	r16,r16,16
 800e6c0:	8000e526 	beq	r16,zero,800ea58 <__ssvfiscanf_r+0xb10>
 800e6c4:	a9000017 	ldw	r4,0(r21)
 800e6c8:	0027883a 	mov	r19,zero
 800e6cc:	20800003 	ldbu	r2,0(r4)
 800e6d0:	dac00104 	addi	r11,sp,4
 800e6d4:	5885883a 	add	r2,r11,r2
 800e6d8:	10800007 	ldb	r2,0(r2)
 800e6dc:	1001ad26 	beq	r2,zero,800ed94 <__ssvfiscanf_r+0xe4c>
 800e6e0:	a8800117 	ldw	r2,4(r21)
 800e6e4:	21000044 	addi	r4,r4,1
 800e6e8:	9cc00044 	addi	r19,r19,1
 800e6ec:	10bfffc4 	addi	r2,r2,-1
 800e6f0:	a8800115 	stw	r2,4(r21)
 800e6f4:	a9000015 	stw	r4,0(r21)
 800e6f8:	bcc0d226 	beq	r23,r19,800ea44 <__ssvfiscanf_r+0xafc>
 800e6fc:	00bff316 	blt	zero,r2,800e6cc <__alt_data_end+0xf800e6cc>
 800e700:	9009883a 	mov	r4,r18
 800e704:	a80b883a 	mov	r5,r21
 800e708:	800dde40 	call	800dde4 <__ssrefill_r>
 800e70c:	1000cd1e 	bne	r2,zero,800ea44 <__ssvfiscanf_r+0xafc>
 800e710:	a9000017 	ldw	r4,0(r21)
 800e714:	003fed06 	br	800e6cc <__alt_data_end+0xf800e6cc>
 800e718:	98bfffc4 	addi	r2,r19,-1
 800e71c:	01000984 	movi	r4,38
 800e720:	2080cb2e 	bgeu	r4,r2,800ea50 <__ssvfiscanf_r+0xb08>
 800e724:	99fff644 	addi	r7,r19,-39
 800e728:	05c009c4 	movi	r23,39
 800e72c:	82036014 	ori	r8,r16,3456
 800e730:	0021883a 	mov	r16,zero
 800e734:	8813883a 	mov	r9,r17
 800e738:	8023883a 	mov	r17,r16
 800e73c:	dc005017 	ldw	r16,320(sp)
 800e740:	dd804104 	addi	r22,sp,260
 800e744:	00c01344 	movi	r3,77
 800e748:	02808004 	movi	r10,512
 800e74c:	01bf7fc4 	movi	r6,-513
 800e750:	04ffdfc4 	movi	r19,-129
 800e754:	a9000017 	ldw	r4,0(r21)
 800e758:	21400003 	ldbu	r5,0(r4)
 800e75c:	28bff544 	addi	r2,r5,-43
 800e760:	10803fcc 	andi	r2,r2,255
 800e764:	18806336 	bltu	r3,r2,800e8f4 <__ssvfiscanf_r+0x9ac>
 800e768:	100490ba 	slli	r2,r2,2
 800e76c:	02c20074 	movhi	r11,2049
 800e770:	5af9e004 	addi	r11,r11,-6272
 800e774:	12c5883a 	add	r2,r2,r11
 800e778:	10800017 	ldw	r2,0(r2)
 800e77c:	1000683a 	jmp	r2
 800e780:	0800ea14 	ori	zero,at,936
 800e784:	0800e8f4 	orhi	zero,at,931
 800e788:	0800ea14 	ori	zero,at,936
 800e78c:	0800e8f4 	orhi	zero,at,931
 800e790:	0800e8f4 	orhi	zero,at,931
 800e794:	0800e98c 	andi	zero,at,934
 800e798:	0800e96c 	andhi	zero,at,933
 800e79c:	0800e96c 	andhi	zero,at,933
 800e7a0:	0800e96c 	andhi	zero,at,933
 800e7a4:	0800e96c 	andhi	zero,at,933
 800e7a8:	0800e96c 	andhi	zero,at,933
 800e7ac:	0800e96c 	andhi	zero,at,933
 800e7b0:	0800e96c 	andhi	zero,at,933
 800e7b4:	0800e94c 	andi	zero,at,933
 800e7b8:	0800e94c 	andi	zero,at,933
 800e7bc:	0800e8f4 	orhi	zero,at,931
 800e7c0:	0800e8f4 	orhi	zero,at,931
 800e7c4:	0800e8f4 	orhi	zero,at,931
 800e7c8:	0800e8f4 	orhi	zero,at,931
 800e7cc:	0800e8f4 	orhi	zero,at,931
 800e7d0:	0800e8f4 	orhi	zero,at,931
 800e7d4:	0800e8f4 	orhi	zero,at,931
 800e7d8:	0800e938 	rdprs	zero,at,932
 800e7dc:	0800e938 	rdprs	zero,at,932
 800e7e0:	0800e938 	rdprs	zero,at,932
 800e7e4:	0800e938 	rdprs	zero,at,932
 800e7e8:	0800e938 	rdprs	zero,at,932
 800e7ec:	0800e938 	rdprs	zero,at,932
 800e7f0:	0800e8f4 	orhi	zero,at,931
 800e7f4:	0800e8f4 	orhi	zero,at,931
 800e7f8:	0800e8f4 	orhi	zero,at,931
 800e7fc:	0800e8f4 	orhi	zero,at,931
 800e800:	0800e8f4 	orhi	zero,at,931
 800e804:	0800e8f4 	orhi	zero,at,931
 800e808:	0800e8f4 	orhi	zero,at,931
 800e80c:	0800e8f4 	orhi	zero,at,931
 800e810:	0800e8f4 	orhi	zero,at,931
 800e814:	0800e8f4 	orhi	zero,at,931
 800e818:	0800e8f4 	orhi	zero,at,931
 800e81c:	0800e8f4 	orhi	zero,at,931
 800e820:	0800e8f4 	orhi	zero,at,931
 800e824:	0800e8f4 	orhi	zero,at,931
 800e828:	0800e8f4 	orhi	zero,at,931
 800e82c:	0800e8f4 	orhi	zero,at,931
 800e830:	0800e8f4 	orhi	zero,at,931
 800e834:	0800e8b8 	rdprs	zero,at,930
 800e838:	0800e8f4 	orhi	zero,at,931
 800e83c:	0800e8f4 	orhi	zero,at,931
 800e840:	0800e8f4 	orhi	zero,at,931
 800e844:	0800e8f4 	orhi	zero,at,931
 800e848:	0800e8f4 	orhi	zero,at,931
 800e84c:	0800e8f4 	orhi	zero,at,931
 800e850:	0800e8f4 	orhi	zero,at,931
 800e854:	0800e8f4 	orhi	zero,at,931
 800e858:	0800e938 	rdprs	zero,at,932
 800e85c:	0800e938 	rdprs	zero,at,932
 800e860:	0800e938 	rdprs	zero,at,932
 800e864:	0800e938 	rdprs	zero,at,932
 800e868:	0800e938 	rdprs	zero,at,932
 800e86c:	0800e938 	rdprs	zero,at,932
 800e870:	0800e8f4 	orhi	zero,at,931
 800e874:	0800e8f4 	orhi	zero,at,931
 800e878:	0800e8f4 	orhi	zero,at,931
 800e87c:	0800e8f4 	orhi	zero,at,931
 800e880:	0800e8f4 	orhi	zero,at,931
 800e884:	0800e8f4 	orhi	zero,at,931
 800e888:	0800e8f4 	orhi	zero,at,931
 800e88c:	0800e8f4 	orhi	zero,at,931
 800e890:	0800e8f4 	orhi	zero,at,931
 800e894:	0800e8f4 	orhi	zero,at,931
 800e898:	0800e8f4 	orhi	zero,at,931
 800e89c:	0800e8f4 	orhi	zero,at,931
 800e8a0:	0800e8f4 	orhi	zero,at,931
 800e8a4:	0800e8f4 	orhi	zero,at,931
 800e8a8:	0800e8f4 	orhi	zero,at,931
 800e8ac:	0800e8f4 	orhi	zero,at,931
 800e8b0:	0800e8f4 	orhi	zero,at,931
 800e8b4:	0800e8b8 	rdprs	zero,at,930
 800e8b8:	4081800c 	andi	r2,r8,1536
 800e8bc:	12800d1e 	bne	r2,r10,800e8f4 <__ssvfiscanf_r+0x9ac>
 800e8c0:	4190703a 	and	r8,r8,r6
 800e8c4:	42014014 	ori	r8,r8,1280
 800e8c8:	04000404 	movi	r16,16
 800e8cc:	a8800117 	ldw	r2,4(r21)
 800e8d0:	b1400005 	stb	r5,0(r22)
 800e8d4:	b5800044 	addi	r22,r22,1
 800e8d8:	10bfffc4 	addi	r2,r2,-1
 800e8dc:	a8800115 	stw	r2,4(r21)
 800e8e0:	00803b0e 	bge	zero,r2,800e9d0 <__ssvfiscanf_r+0xa88>
 800e8e4:	21000044 	addi	r4,r4,1
 800e8e8:	a9000015 	stw	r4,0(r21)
 800e8ec:	bdffffc4 	addi	r23,r23,-1
 800e8f0:	b83f981e 	bne	r23,zero,800e754 <__alt_data_end+0xf800e754>
 800e8f4:	dc005015 	stw	r16,320(sp)
 800e8f8:	4080400c 	andi	r2,r8,256
 800e8fc:	8821883a 	mov	r16,r17
 800e900:	4823883a 	mov	r17,r9
 800e904:	10000426 	beq	r2,zero,800e918 <__ssvfiscanf_r+0x9d0>
 800e908:	dac04e17 	ldw	r11,312(sp)
 800e90c:	5d813c36 	bltu	r11,r22,800ee00 <__ssvfiscanf_r+0xeb8>
 800e910:	dac04e17 	ldw	r11,312(sp)
 800e914:	b2fdd126 	beq	r22,r11,800e05c <__alt_data_end+0xf800e05c>
 800e918:	4080040c 	andi	r2,r8,16
 800e91c:	1000e526 	beq	r2,zero,800ecb4 <__ssvfiscanf_r+0xd6c>
 800e920:	dac04e17 	ldw	r11,312(sp)
 800e924:	b2edc83a 	sub	r22,r22,r11
 800e928:	b42d883a 	add	r22,r22,r16
 800e92c:	e5b9883a 	add	fp,fp,r22
 800e930:	8821883a 	mov	r16,r17
 800e934:	003dc506 	br	800e04c <__alt_data_end+0xf800e04c>
 800e938:	00800284 	movi	r2,10
 800e93c:	143fed0e 	bge	r2,r16,800e8f4 <__alt_data_end+0xf800e8f4>
 800e940:	00bd1fc4 	movi	r2,-2945
 800e944:	4090703a 	and	r8,r8,r2
 800e948:	003fe006 	br	800e8cc <__alt_data_end+0xf800e8cc>
 800e94c:	02c200b4 	movhi	r11,2050
 800e950:	8421883a 	add	r16,r16,r16
 800e954:	5af34104 	addi	r11,r11,-13052
 800e958:	5c05883a 	add	r2,r11,r16
 800e95c:	1400000f 	ldh	r16,0(r2)
 800e960:	00800204 	movi	r2,8
 800e964:	143ff616 	blt	r2,r16,800e940 <__alt_data_end+0xf800e940>
 800e968:	003fe206 	br	800e8f4 <__alt_data_end+0xf800e8f4>
 800e96c:	02c200b4 	movhi	r11,2050
 800e970:	8421883a 	add	r16,r16,r16
 800e974:	5af34104 	addi	r11,r11,-13052
 800e978:	5c05883a 	add	r2,r11,r16
 800e97c:	1400000f 	ldh	r16,0(r2)
 800e980:	00bd1fc4 	movi	r2,-2945
 800e984:	4090703a 	and	r8,r8,r2
 800e988:	003fd006 	br	800e8cc <__alt_data_end+0xf800e8cc>
 800e98c:	4082000c 	andi	r2,r8,2048
 800e990:	103fce26 	beq	r2,zero,800e8cc <__alt_data_end+0xf800e8cc>
 800e994:	8000021e 	bne	r16,zero,800e9a0 <__ssvfiscanf_r+0xa58>
 800e998:	42008014 	ori	r8,r8,512
 800e99c:	04000204 	movi	r16,8
 800e9a0:	4081000c 	andi	r2,r8,1024
 800e9a4:	1000d71e 	bne	r2,zero,800ed04 <__ssvfiscanf_r+0xdbc>
 800e9a8:	00bf1fc4 	movi	r2,-897
 800e9ac:	4090703a 	and	r8,r8,r2
 800e9b0:	38000226 	beq	r7,zero,800e9bc <__ssvfiscanf_r+0xa74>
 800e9b4:	39ffffc4 	addi	r7,r7,-1
 800e9b8:	bdc00044 	addi	r23,r23,1
 800e9bc:	a8800117 	ldw	r2,4(r21)
 800e9c0:	8c400044 	addi	r17,r17,1
 800e9c4:	10bfffc4 	addi	r2,r2,-1
 800e9c8:	a8800115 	stw	r2,4(r21)
 800e9cc:	00bfc516 	blt	zero,r2,800e8e4 <__alt_data_end+0xf800e8e4>
 800e9d0:	9009883a 	mov	r4,r18
 800e9d4:	a80b883a 	mov	r5,r21
 800e9d8:	d8c05a15 	stw	r3,360(sp)
 800e9dc:	d9805715 	stw	r6,348(sp)
 800e9e0:	d9c05815 	stw	r7,352(sp)
 800e9e4:	da005b15 	stw	r8,364(sp)
 800e9e8:	da405915 	stw	r9,356(sp)
 800e9ec:	da805615 	stw	r10,344(sp)
 800e9f0:	800dde40 	call	800dde4 <__ssrefill_r>
 800e9f4:	d8c05a17 	ldw	r3,360(sp)
 800e9f8:	d9805717 	ldw	r6,348(sp)
 800e9fc:	d9c05817 	ldw	r7,352(sp)
 800ea00:	da005b17 	ldw	r8,364(sp)
 800ea04:	da405917 	ldw	r9,356(sp)
 800ea08:	da805617 	ldw	r10,344(sp)
 800ea0c:	103fb726 	beq	r2,zero,800e8ec <__alt_data_end+0xf800e8ec>
 800ea10:	003fb806 	br	800e8f4 <__alt_data_end+0xf800e8f4>
 800ea14:	4080200c 	andi	r2,r8,128
 800ea18:	103fb626 	beq	r2,zero,800e8f4 <__alt_data_end+0xf800e8f4>
 800ea1c:	44d0703a 	and	r8,r8,r19
 800ea20:	003faa06 	br	800e8cc <__alt_data_end+0xf800e8cc>
 800ea24:	2809883a 	mov	r4,r5
 800ea28:	24e7c83a 	sub	r19,r4,r19
 800ea2c:	983d8b26 	beq	r19,zero,800e05c <__alt_data_end+0xf800e05c>
 800ea30:	da005317 	ldw	r8,332(sp)
 800ea34:	20000005 	stb	zero,0(r4)
 800ea38:	dc004f15 	stw	r16,316(sp)
 800ea3c:	42000044 	addi	r8,r8,1
 800ea40:	da005315 	stw	r8,332(sp)
 800ea44:	e4f9883a 	add	fp,fp,r19
 800ea48:	8821883a 	mov	r16,r17
 800ea4c:	003d7f06 	br	800e04c <__alt_data_end+0xf800e04c>
 800ea50:	000f883a 	mov	r7,zero
 800ea54:	003f3506 	br	800e72c <__alt_data_end+0xf800e72c>
 800ea58:	da004f17 	ldw	r8,316(sp)
 800ea5c:	b8ffffc4 	addi	r3,r23,-1
 800ea60:	44c00017 	ldw	r19,0(r8)
 800ea64:	44000104 	addi	r16,r8,4
 800ea68:	980b883a 	mov	r5,r19
 800ea6c:	98ef883a 	add	r23,r19,r3
 800ea70:	00000106 	br	800ea78 <__ssvfiscanf_r+0xb30>
 800ea74:	b00b883a 	mov	r5,r22
 800ea78:	a8c00017 	ldw	r3,0(r21)
 800ea7c:	dac00104 	addi	r11,sp,4
 800ea80:	280d883a 	mov	r6,r5
 800ea84:	18800003 	ldbu	r2,0(r3)
 800ea88:	5885883a 	add	r2,r11,r2
 800ea8c:	10800007 	ldb	r2,0(r2)
 800ea90:	103fe426 	beq	r2,zero,800ea24 <__alt_data_end+0xf800ea24>
 800ea94:	a8800117 	ldw	r2,4(r21)
 800ea98:	19c00044 	addi	r7,r3,1
 800ea9c:	a9c00015 	stw	r7,0(r21)
 800eaa0:	10bfffc4 	addi	r2,r2,-1
 800eaa4:	a8800115 	stw	r2,4(r21)
 800eaa8:	18800003 	ldbu	r2,0(r3)
 800eaac:	35800044 	addi	r22,r6,1
 800eab0:	28800005 	stb	r2,0(r5)
 800eab4:	35c0ba26 	beq	r6,r23,800eda0 <__ssvfiscanf_r+0xe58>
 800eab8:	a8800117 	ldw	r2,4(r21)
 800eabc:	00bfed16 	blt	zero,r2,800ea74 <__alt_data_end+0xf800ea74>
 800eac0:	9009883a 	mov	r4,r18
 800eac4:	a80b883a 	mov	r5,r21
 800eac8:	800dde40 	call	800dde4 <__ssrefill_r>
 800eacc:	103fe926 	beq	r2,zero,800ea74 <__alt_data_end+0xf800ea74>
 800ead0:	b009883a 	mov	r4,r22
 800ead4:	9dbfd41e 	bne	r19,r22,800ea28 <__alt_data_end+0xf800ea28>
 800ead8:	003e4c06 	br	800e40c <__alt_data_end+0xf800e40c>
 800eadc:	da004f17 	ldw	r8,316(sp)
 800eae0:	b8ffffc4 	addi	r3,r23,-1
 800eae4:	44c00017 	ldw	r19,0(r8)
 800eae8:	44000104 	addi	r16,r8,4
 800eaec:	980d883a 	mov	r6,r19
 800eaf0:	98ed883a 	add	r22,r19,r3
 800eaf4:	00000106 	br	800eafc <__ssvfiscanf_r+0xbb4>
 800eaf8:	b80d883a 	mov	r6,r23
 800eafc:	a8c00017 	ldw	r3,0(r21)
 800eb00:	a1c00017 	ldw	r7,0(r20)
 800eb04:	300b883a 	mov	r5,r6
 800eb08:	18800003 	ldbu	r2,0(r3)
 800eb0c:	3885883a 	add	r2,r7,r2
 800eb10:	10800043 	ldbu	r2,1(r2)
 800eb14:	1080020c 	andi	r2,r2,8
 800eb18:	1000101e 	bne	r2,zero,800eb5c <__ssvfiscanf_r+0xc14>
 800eb1c:	a8800117 	ldw	r2,4(r21)
 800eb20:	19c00044 	addi	r7,r3,1
 800eb24:	a9c00015 	stw	r7,0(r21)
 800eb28:	10bfffc4 	addi	r2,r2,-1
 800eb2c:	a8800115 	stw	r2,4(r21)
 800eb30:	18800003 	ldbu	r2,0(r3)
 800eb34:	2dc00044 	addi	r23,r5,1
 800eb38:	30800005 	stb	r2,0(r6)
 800eb3c:	2d800626 	beq	r5,r22,800eb58 <__ssvfiscanf_r+0xc10>
 800eb40:	a8800117 	ldw	r2,4(r21)
 800eb44:	00bfec16 	blt	zero,r2,800eaf8 <__alt_data_end+0xf800eaf8>
 800eb48:	9009883a 	mov	r4,r18
 800eb4c:	a80b883a 	mov	r5,r21
 800eb50:	800dde40 	call	800dde4 <__ssrefill_r>
 800eb54:	103fe826 	beq	r2,zero,800eaf8 <__alt_data_end+0xf800eaf8>
 800eb58:	b80b883a 	mov	r5,r23
 800eb5c:	dac05317 	ldw	r11,332(sp)
 800eb60:	2ce7c83a 	sub	r19,r5,r19
 800eb64:	dc004f15 	stw	r16,316(sp)
 800eb68:	5ac00044 	addi	r11,r11,1
 800eb6c:	28000005 	stb	zero,0(r5)
 800eb70:	e4f9883a 	add	fp,fp,r19
 800eb74:	dac05315 	stw	r11,332(sp)
 800eb78:	8821883a 	mov	r16,r17
 800eb7c:	003d3306 	br	800e04c <__alt_data_end+0xf800e04c>
 800eb80:	dac04b04 	addi	r11,sp,300
 800eb84:	8400040c 	andi	r16,r16,16
 800eb88:	5809883a 	mov	r4,r11
 800eb8c:	000b883a 	mov	r5,zero
 800eb90:	01800204 	movi	r6,8
 800eb94:	dac05215 	stw	r11,328(sp)
 800eb98:	8009e780 	call	8009e78 <memset>
 800eb9c:	80006b26 	beq	r16,zero,800ed4c <__ssvfiscanf_r+0xe04>
 800eba0:	dd804d04 	addi	r22,sp,308
 800eba4:	0007883a 	mov	r3,zero
 800eba8:	1827883a 	mov	r19,r3
 800ebac:	a8800017 	ldw	r2,0(r21)
 800ebb0:	a0c00017 	ldw	r3,0(r20)
 800ebb4:	10800003 	ldbu	r2,0(r2)
 800ebb8:	1885883a 	add	r2,r3,r2
 800ebbc:	10800043 	ldbu	r2,1(r2)
 800ebc0:	1080020c 	andi	r2,r2,8
 800ebc4:	1000011e 	bne	r2,zero,800ebcc <__ssvfiscanf_r+0xc84>
 800ebc8:	b800c11e 	bne	r23,zero,800eed0 <__ssvfiscanf_r+0xf88>
 800ebcc:	803d1e1e 	bne	r16,zero,800e048 <__alt_data_end+0xf800e048>
 800ebd0:	b0000015 	stw	zero,0(r22)
 800ebd4:	dac05317 	ldw	r11,332(sp)
 800ebd8:	8821883a 	mov	r16,r17
 800ebdc:	5ac00044 	addi	r11,r11,1
 800ebe0:	dac05315 	stw	r11,332(sp)
 800ebe4:	003d1906 	br	800e04c <__alt_data_end+0xf800e04c>
 800ebe8:	dac04b04 	addi	r11,sp,300
 800ebec:	8400040c 	andi	r16,r16,16
 800ebf0:	5809883a 	mov	r4,r11
 800ebf4:	000b883a 	mov	r5,zero
 800ebf8:	01800204 	movi	r6,8
 800ebfc:	dc005415 	stw	r16,336(sp)
 800ec00:	dac05215 	stw	r11,328(sp)
 800ec04:	8009e780 	call	8009e78 <memset>
 800ec08:	dc005417 	ldw	r16,336(sp)
 800ec0c:	80005426 	beq	r16,zero,800ed60 <__ssvfiscanf_r+0xe18>
 800ec10:	002d883a 	mov	r22,zero
 800ec14:	dc005417 	ldw	r16,336(sp)
 800ec18:	0027883a 	mov	r19,zero
 800ec1c:	dc405515 	stw	r17,340(sp)
 800ec20:	800978c0 	call	800978c <__locale_mb_cur_max>
 800ec24:	14fdf926 	beq	r2,r19,800e40c <__alt_data_end+0xf800e40c>
 800ec28:	a8800017 	ldw	r2,0(r21)
 800ec2c:	a9000117 	ldw	r4,4(r21)
 800ec30:	d8c05217 	ldw	r3,328(sp)
 800ec34:	12400003 	ldbu	r9,0(r2)
 800ec38:	213fffc4 	addi	r4,r4,-1
 800ec3c:	10800044 	addi	r2,r2,1
 800ec40:	dac04104 	addi	r11,sp,260
 800ec44:	a9000115 	stw	r4,4(r21)
 800ec48:	a8800015 	stw	r2,0(r21)
 800ec4c:	9c400044 	addi	r17,r19,1
 800ec50:	d8c00015 	stw	r3,0(sp)
 800ec54:	5ce7883a 	add	r19,r11,r19
 800ec58:	9009883a 	mov	r4,r18
 800ec5c:	b00b883a 	mov	r5,r22
 800ec60:	580d883a 	mov	r6,r11
 800ec64:	880f883a 	mov	r7,r17
 800ec68:	9a400005 	stb	r9,0(r19)
 800ec6c:	80099f80 	call	80099f8 <_mbrtowc_r>
 800ec70:	013fffc4 	movi	r4,-1
 800ec74:	113de526 	beq	r2,r4,800e40c <__alt_data_end+0xf800e40c>
 800ec78:	10003e1e 	bne	r2,zero,800ed74 <__ssvfiscanf_r+0xe2c>
 800ec7c:	8000011e 	bne	r16,zero,800ec84 <__ssvfiscanf_r+0xd3c>
 800ec80:	b0000015 	stw	zero,0(r22)
 800ec84:	e479883a 	add	fp,fp,r17
 800ec88:	bdffffc4 	addi	r23,r23,-1
 800ec8c:	80003d1e 	bne	r16,zero,800ed84 <__ssvfiscanf_r+0xe3c>
 800ec90:	b5800104 	addi	r22,r22,4
 800ec94:	0027883a 	mov	r19,zero
 800ec98:	a8800117 	ldw	r2,4(r21)
 800ec9c:	0080240e 	bge	zero,r2,800ed30 <__ssvfiscanf_r+0xde8>
 800eca0:	b83fdf1e 	bne	r23,zero,800ec20 <__alt_data_end+0xf800ec20>
 800eca4:	dc405517 	ldw	r17,340(sp)
 800eca8:	da005417 	ldw	r8,336(sp)
 800ecac:	403fc926 	beq	r8,zero,800ebd4 <__alt_data_end+0xf800ebd4>
 800ecb0:	003ce506 	br	800e048 <__alt_data_end+0xf800e048>
 800ecb4:	d9c05017 	ldw	r7,320(sp)
 800ecb8:	dac05117 	ldw	r11,324(sp)
 800ecbc:	b0000005 	stb	zero,0(r22)
 800ecc0:	da005b15 	stw	r8,364(sp)
 800ecc4:	9009883a 	mov	r4,r18
 800ecc8:	d9404104 	addi	r5,sp,260
 800eccc:	000d883a 	mov	r6,zero
 800ecd0:	583ee83a 	callr	r11
 800ecd4:	da005b17 	ldw	r8,364(sp)
 800ecd8:	40c0080c 	andi	r3,r8,32
 800ecdc:	18000c26 	beq	r3,zero,800ed10 <__ssvfiscanf_r+0xdc8>
 800ece0:	da004f17 	ldw	r8,316(sp)
 800ece4:	40c00017 	ldw	r3,0(r8)
 800ece8:	42000104 	addi	r8,r8,4
 800ecec:	da004f15 	stw	r8,316(sp)
 800ecf0:	18800015 	stw	r2,0(r3)
 800ecf4:	da005317 	ldw	r8,332(sp)
 800ecf8:	42000044 	addi	r8,r8,1
 800ecfc:	da005315 	stw	r8,332(sp)
 800ed00:	003f0706 	br	800e920 <__alt_data_end+0xf800e920>
 800ed04:	00be9fc4 	movi	r2,-1409
 800ed08:	4090703a 	and	r8,r8,r2
 800ed0c:	003eef06 	br	800e8cc <__alt_data_end+0xf800e8cc>
 800ed10:	40c0010c 	andi	r3,r8,4
 800ed14:	18005a26 	beq	r3,zero,800ee80 <__ssvfiscanf_r+0xf38>
 800ed18:	dac04f17 	ldw	r11,316(sp)
 800ed1c:	58c00017 	ldw	r3,0(r11)
 800ed20:	5ac00104 	addi	r11,r11,4
 800ed24:	dac04f15 	stw	r11,316(sp)
 800ed28:	1880000d 	sth	r2,0(r3)
 800ed2c:	003ff106 	br	800ecf4 <__alt_data_end+0xf800ecf4>
 800ed30:	9009883a 	mov	r4,r18
 800ed34:	a80b883a 	mov	r5,r21
 800ed38:	800dde40 	call	800dde4 <__ssrefill_r>
 800ed3c:	103fd826 	beq	r2,zero,800eca0 <__alt_data_end+0xf800eca0>
 800ed40:	dc405517 	ldw	r17,340(sp)
 800ed44:	983fd826 	beq	r19,zero,800eca8 <__alt_data_end+0xf800eca8>
 800ed48:	003db006 	br	800e40c <__alt_data_end+0xf800e40c>
 800ed4c:	da004f17 	ldw	r8,316(sp)
 800ed50:	45800017 	ldw	r22,0(r8)
 800ed54:	42000104 	addi	r8,r8,4
 800ed58:	da004f15 	stw	r8,316(sp)
 800ed5c:	003f9106 	br	800eba4 <__alt_data_end+0xf800eba4>
 800ed60:	da004f17 	ldw	r8,316(sp)
 800ed64:	45800017 	ldw	r22,0(r8)
 800ed68:	42000104 	addi	r8,r8,4
 800ed6c:	da004f15 	stw	r8,316(sp)
 800ed70:	003fa806 	br	800ec14 <__alt_data_end+0xf800ec14>
 800ed74:	017fff84 	movi	r5,-2
 800ed78:	117fc21e 	bne	r2,r5,800ec84 <__alt_data_end+0xf800ec84>
 800ed7c:	8827883a 	mov	r19,r17
 800ed80:	003fc506 	br	800ec98 <__alt_data_end+0xf800ec98>
 800ed84:	0027883a 	mov	r19,zero
 800ed88:	003fc306 	br	800ec98 <__alt_data_end+0xf800ec98>
 800ed8c:	803d791e 	bne	r16,zero,800e374 <__alt_data_end+0xf800e374>
 800ed90:	003d9e06 	br	800e40c <__alt_data_end+0xf800e40c>
 800ed94:	983cb126 	beq	r19,zero,800e05c <__alt_data_end+0xf800e05c>
 800ed98:	e4f9883a 	add	fp,fp,r19
 800ed9c:	003f2a06 	br	800ea48 <__alt_data_end+0xf800ea48>
 800eda0:	b009883a 	mov	r4,r22
 800eda4:	003f2006 	br	800ea28 <__alt_data_end+0xf800ea28>
 800eda8:	da004f17 	ldw	r8,316(sp)
 800edac:	dd400015 	stw	r21,0(sp)
 800edb0:	9009883a 	mov	r4,r18
 800edb4:	41400017 	ldw	r5,0(r8)
 800edb8:	01800044 	movi	r6,1
 800edbc:	b80f883a 	mov	r7,r23
 800edc0:	800de540 	call	800de54 <_sfread_r>
 800edc4:	dac04f17 	ldw	r11,316(sp)
 800edc8:	58c00104 	addi	r3,r11,4
 800edcc:	103d8f26 	beq	r2,zero,800e40c <__alt_data_end+0xf800e40c>
 800edd0:	da005317 	ldw	r8,332(sp)
 800edd4:	1739883a 	add	fp,r2,fp
 800edd8:	d8c04f15 	stw	r3,316(sp)
 800eddc:	42000044 	addi	r8,r8,1
 800ede0:	da005315 	stw	r8,332(sp)
 800ede4:	8821883a 	mov	r16,r17
 800ede8:	003c9806 	br	800e04c <__alt_data_end+0xf800e04c>
 800edec:	9009883a 	mov	r4,r18
 800edf0:	a80b883a 	mov	r5,r21
 800edf4:	800dde40 	call	800dde4 <__ssrefill_r>
 800edf8:	103d2726 	beq	r2,zero,800e298 <__alt_data_end+0xf800e298>
 800edfc:	003d8306 	br	800e40c <__alt_data_end+0xf800e40c>
 800ee00:	b17fffc7 	ldb	r5,-1(r22)
 800ee04:	9009883a 	mov	r4,r18
 800ee08:	a80d883a 	mov	r6,r21
 800ee0c:	da005b15 	stw	r8,364(sp)
 800ee10:	800dcec0 	call	800dcec <_sungetc_r>
 800ee14:	b5bfffc4 	addi	r22,r22,-1
 800ee18:	da005b17 	ldw	r8,364(sp)
 800ee1c:	003ebc06 	br	800e910 <__alt_data_end+0xf800e910>
 800ee20:	80e0b03a 	or	r16,r16,r3
 800ee24:	003de106 	br	800e5ac <__alt_data_end+0xf800e5ac>
 800ee28:	88c00083 	ldbu	r3,2(r17)
 800ee2c:	84000094 	ori	r16,r16,2
 800ee30:	8c400084 	addi	r17,r17,2
 800ee34:	003c9306 	br	800e084 <__alt_data_end+0xf800e084>
 800ee38:	8080004c 	andi	r2,r16,1
 800ee3c:	10000a1e 	bne	r2,zero,800ee68 <__ssvfiscanf_r+0xf20>
 800ee40:	8400008c 	andi	r16,r16,2
 800ee44:	80000826 	beq	r16,zero,800ee68 <__ssvfiscanf_r+0xf20>
 800ee48:	dac04f17 	ldw	r11,316(sp)
 800ee4c:	e007d7fa 	srai	r3,fp,31
 800ee50:	58800017 	ldw	r2,0(r11)
 800ee54:	5ac00104 	addi	r11,r11,4
 800ee58:	dac04f15 	stw	r11,316(sp)
 800ee5c:	17000015 	stw	fp,0(r2)
 800ee60:	10c00115 	stw	r3,4(r2)
 800ee64:	003c7806 	br	800e048 <__alt_data_end+0xf800e048>
 800ee68:	da004f17 	ldw	r8,316(sp)
 800ee6c:	40800017 	ldw	r2,0(r8)
 800ee70:	42000104 	addi	r8,r8,4
 800ee74:	da004f15 	stw	r8,316(sp)
 800ee78:	17000015 	stw	fp,0(r2)
 800ee7c:	003c7206 	br	800e048 <__alt_data_end+0xf800e048>
 800ee80:	40c0004c 	andi	r3,r8,1
 800ee84:	183f961e 	bne	r3,zero,800ece0 <__alt_data_end+0xf800ece0>
 800ee88:	45c0008c 	andi	r23,r8,2
 800ee8c:	b8004526 	beq	r23,zero,800efa4 <__ssvfiscanf_r+0x105c>
 800ee90:	dac05117 	ldw	r11,324(sp)
 800ee94:	00820074 	movhi	r2,2049
 800ee98:	10b5bb04 	addi	r2,r2,-10516
 800ee9c:	9009883a 	mov	r4,r18
 800eea0:	d9404104 	addi	r5,sp,260
 800eea4:	000d883a 	mov	r6,zero
 800eea8:	d9c05017 	ldw	r7,320(sp)
 800eeac:	58804d26 	beq	r11,r2,800efe4 <__ssvfiscanf_r+0x109c>
 800eeb0:	800d3d80 	call	800d3d8 <_strtoll_r>
 800eeb4:	da004f17 	ldw	r8,316(sp)
 800eeb8:	41000017 	ldw	r4,0(r8)
 800eebc:	42000104 	addi	r8,r8,4
 800eec0:	da004f15 	stw	r8,316(sp)
 800eec4:	20800015 	stw	r2,0(r4)
 800eec8:	20c00115 	stw	r3,4(r4)
 800eecc:	003f8906 	br	800ecf4 <__alt_data_end+0xf800ecf4>
 800eed0:	800978c0 	call	800978c <__locale_mb_cur_max>
 800eed4:	14fd4d26 	beq	r2,r19,800e40c <__alt_data_end+0xf800e40c>
 800eed8:	a8800017 	ldw	r2,0(r21)
 800eedc:	a9000117 	ldw	r4,4(r21)
 800eee0:	dac04104 	addi	r11,sp,260
 800eee4:	98c00044 	addi	r3,r19,1
 800eee8:	5ce7883a 	add	r19,r11,r19
 800eeec:	dac05217 	ldw	r11,328(sp)
 800eef0:	12000003 	ldbu	r8,0(r2)
 800eef4:	213fffc4 	addi	r4,r4,-1
 800eef8:	10800044 	addi	r2,r2,1
 800eefc:	a9000115 	stw	r4,4(r21)
 800ef00:	a8800015 	stw	r2,0(r21)
 800ef04:	dac00015 	stw	r11,0(sp)
 800ef08:	9009883a 	mov	r4,r18
 800ef0c:	180f883a 	mov	r7,r3
 800ef10:	9a000005 	stb	r8,0(r19)
 800ef14:	b00b883a 	mov	r5,r22
 800ef18:	d9804104 	addi	r6,sp,260
 800ef1c:	d8c05a15 	stw	r3,360(sp)
 800ef20:	80099f80 	call	80099f8 <_mbrtowc_r>
 800ef24:	013fffc4 	movi	r4,-1
 800ef28:	d8c05a17 	ldw	r3,360(sp)
 800ef2c:	113d3726 	beq	r2,r4,800e40c <__alt_data_end+0xf800e40c>
 800ef30:	10000b26 	beq	r2,zero,800ef60 <__ssvfiscanf_r+0x1018>
 800ef34:	017fff84 	movi	r5,-2
 800ef38:	1827883a 	mov	r19,r3
 800ef3c:	1140271e 	bne	r2,r5,800efdc <__ssvfiscanf_r+0x1094>
 800ef40:	a8800117 	ldw	r2,4(r21)
 800ef44:	00bf1916 	blt	zero,r2,800ebac <__alt_data_end+0xf800ebac>
 800ef48:	9009883a 	mov	r4,r18
 800ef4c:	a80b883a 	mov	r5,r21
 800ef50:	800dde40 	call	800dde4 <__ssrefill_r>
 800ef54:	103f1526 	beq	r2,zero,800ebac <__alt_data_end+0xf800ebac>
 800ef58:	983d2c1e 	bne	r19,zero,800e40c <__alt_data_end+0xf800e40c>
 800ef5c:	003f1b06 	br	800ebcc <__alt_data_end+0xf800ebcc>
 800ef60:	b0000015 	stw	zero,0(r22)
 800ef64:	0009883a 	mov	r4,zero
 800ef68:	d8c05a15 	stw	r3,360(sp)
 800ef6c:	80096d40 	call	80096d4 <iswspace>
 800ef70:	d8c05a17 	ldw	r3,360(sp)
 800ef74:	10001126 	beq	r2,zero,800efbc <__ssvfiscanf_r+0x1074>
 800ef78:	1827883a 	mov	r19,r3
 800ef7c:	183f1326 	beq	r3,zero,800ebcc <__alt_data_end+0xf800ebcc>
 800ef80:	9cffffc4 	addi	r19,r19,-1
 800ef84:	da004104 	addi	r8,sp,260
 800ef88:	44c5883a 	add	r2,r8,r19
 800ef8c:	11400003 	ldbu	r5,0(r2)
 800ef90:	9009883a 	mov	r4,r18
 800ef94:	a80d883a 	mov	r6,r21
 800ef98:	800dcec0 	call	800dcec <_sungetc_r>
 800ef9c:	983ff81e 	bne	r19,zero,800ef80 <__alt_data_end+0xf800ef80>
 800efa0:	003f0a06 	br	800ebcc <__alt_data_end+0xf800ebcc>
 800efa4:	dac04f17 	ldw	r11,316(sp)
 800efa8:	58c00017 	ldw	r3,0(r11)
 800efac:	5ac00104 	addi	r11,r11,4
 800efb0:	dac04f15 	stw	r11,316(sp)
 800efb4:	18800015 	stw	r2,0(r3)
 800efb8:	003f4e06 	br	800ecf4 <__alt_data_end+0xf800ecf4>
 800efbc:	e0f9883a 	add	fp,fp,r3
 800efc0:	bdffffc4 	addi	r23,r23,-1
 800efc4:	8000031e 	bne	r16,zero,800efd4 <__ssvfiscanf_r+0x108c>
 800efc8:	b5800104 	addi	r22,r22,4
 800efcc:	0027883a 	mov	r19,zero
 800efd0:	003fdb06 	br	800ef40 <__alt_data_end+0xf800ef40>
 800efd4:	0027883a 	mov	r19,zero
 800efd8:	003fd906 	br	800ef40 <__alt_data_end+0xf800ef40>
 800efdc:	b1000017 	ldw	r4,0(r22)
 800efe0:	003fe106 	br	800ef68 <__alt_data_end+0xf800ef68>
 800efe4:	800d9980 	call	800d998 <_strtoull_r>
 800efe8:	003fb206 	br	800eeb4 <__alt_data_end+0xf800eeb4>

0800efec <___svfprintf_internal_r>:
 800efec:	deffb504 	addi	sp,sp,-300
 800eff0:	dfc04a15 	stw	ra,296(sp)
 800eff4:	ddc04815 	stw	r23,288(sp)
 800eff8:	d9002f15 	stw	r4,188(sp)
 800effc:	282f883a 	mov	r23,r5
 800f000:	d9802915 	stw	r6,164(sp)
 800f004:	d9c02d15 	stw	r7,180(sp)
 800f008:	df004915 	stw	fp,292(sp)
 800f00c:	dd804715 	stw	r22,284(sp)
 800f010:	dd404615 	stw	r21,280(sp)
 800f014:	dd004515 	stw	r20,276(sp)
 800f018:	dcc04415 	stw	r19,272(sp)
 800f01c:	dc804315 	stw	r18,268(sp)
 800f020:	dc404215 	stw	r17,264(sp)
 800f024:	dc004115 	stw	r16,260(sp)
 800f028:	80097b00 	call	80097b0 <_localeconv_r>
 800f02c:	10800017 	ldw	r2,0(r2)
 800f030:	1009883a 	mov	r4,r2
 800f034:	d8803515 	stw	r2,212(sp)
 800f038:	800338c0 	call	800338c <strlen>
 800f03c:	d8803915 	stw	r2,228(sp)
 800f040:	b880030b 	ldhu	r2,12(r23)
 800f044:	1080200c 	andi	r2,r2,128
 800f048:	10000226 	beq	r2,zero,800f054 <___svfprintf_internal_r+0x68>
 800f04c:	b8800417 	ldw	r2,16(r23)
 800f050:	10065d26 	beq	r2,zero,80109c8 <___svfprintf_internal_r+0x19dc>
 800f054:	db001dc4 	addi	r12,sp,119
 800f058:	dd801e04 	addi	r22,sp,120
 800f05c:	d8800404 	addi	r2,sp,16
 800f060:	050200b4 	movhi	r20,2050
 800f064:	b317c83a 	sub	r11,r22,r12
 800f068:	a5334984 	addi	r20,r20,-13018
 800f06c:	db002815 	stw	r12,160(sp)
 800f070:	d8801e15 	stw	r2,120(sp)
 800f074:	d8002015 	stw	zero,128(sp)
 800f078:	d8001f15 	stw	zero,124(sp)
 800f07c:	d8003315 	stw	zero,204(sp)
 800f080:	d8003715 	stw	zero,220(sp)
 800f084:	d8003815 	stw	zero,224(sp)
 800f088:	d8003b15 	stw	zero,236(sp)
 800f08c:	d8003a15 	stw	zero,232(sp)
 800f090:	d8003015 	stw	zero,192(sp)
 800f094:	1011883a 	mov	r8,r2
 800f098:	dac03d15 	stw	r11,244(sp)
 800f09c:	db002917 	ldw	r12,164(sp)
 800f0a0:	60800007 	ldb	r2,0(r12)
 800f0a4:	1000ab26 	beq	r2,zero,800f354 <___svfprintf_internal_r+0x368>
 800f0a8:	00c00944 	movi	r3,37
 800f0ac:	10c0a926 	beq	r2,r3,800f354 <___svfprintf_internal_r+0x368>
 800f0b0:	6021883a 	mov	r16,r12
 800f0b4:	00000106 	br	800f0bc <___svfprintf_internal_r+0xd0>
 800f0b8:	10c08426 	beq	r2,r3,800f2cc <___svfprintf_internal_r+0x2e0>
 800f0bc:	84000044 	addi	r16,r16,1
 800f0c0:	80800007 	ldb	r2,0(r16)
 800f0c4:	103ffc1e 	bne	r2,zero,800f0b8 <__alt_data_end+0xf800f0b8>
 800f0c8:	dac02917 	ldw	r11,164(sp)
 800f0cc:	82e3c83a 	sub	r17,r16,r11
 800f0d0:	88000f26 	beq	r17,zero,800f110 <___svfprintf_internal_r+0x124>
 800f0d4:	d8c02017 	ldw	r3,128(sp)
 800f0d8:	d8801f17 	ldw	r2,124(sp)
 800f0dc:	dac02917 	ldw	r11,164(sp)
 800f0e0:	1c47883a 	add	r3,r3,r17
 800f0e4:	10800044 	addi	r2,r2,1
 800f0e8:	d8c02015 	stw	r3,128(sp)
 800f0ec:	42c00015 	stw	r11,0(r8)
 800f0f0:	44400115 	stw	r17,4(r8)
 800f0f4:	d8801f15 	stw	r2,124(sp)
 800f0f8:	00c001c4 	movi	r3,7
 800f0fc:	18807616 	blt	r3,r2,800f2d8 <___svfprintf_internal_r+0x2ec>
 800f100:	42000204 	addi	r8,r8,8
 800f104:	db003017 	ldw	r12,192(sp)
 800f108:	6459883a 	add	r12,r12,r17
 800f10c:	db003015 	stw	r12,192(sp)
 800f110:	80800007 	ldb	r2,0(r16)
 800f114:	10007726 	beq	r2,zero,800f2f4 <___svfprintf_internal_r+0x308>
 800f118:	80800044 	addi	r2,r16,1
 800f11c:	84000047 	ldb	r16,1(r16)
 800f120:	d8002785 	stb	zero,158(sp)
 800f124:	000d883a 	mov	r6,zero
 800f128:	027fffc4 	movi	r9,-1
 800f12c:	d8002e15 	stw	zero,184(sp)
 800f130:	0023883a 	mov	r17,zero
 800f134:	01001604 	movi	r4,88
 800f138:	01400244 	movi	r5,9
 800f13c:	02800a84 	movi	r10,42
 800f140:	01c01b04 	movi	r7,108
 800f144:	10c00044 	addi	r3,r2,1
 800f148:	80bff804 	addi	r2,r16,-32
 800f14c:	2082e436 	bltu	r4,r2,800fce0 <___svfprintf_internal_r+0xcf4>
 800f150:	100490ba 	slli	r2,r2,2
 800f154:	02c20074 	movhi	r11,2049
 800f158:	5afc5a04 	addi	r11,r11,-3736
 800f15c:	12c5883a 	add	r2,r2,r11
 800f160:	10800017 	ldw	r2,0(r2)
 800f164:	1000683a 	jmp	r2
 800f168:	0800fa98 	cmpnei	zero,at,1002
 800f16c:	0800fce0 	cmpeqi	zero,at,1011
 800f170:	0800fce0 	cmpeqi	zero,at,1011
 800f174:	0800fc18 	cmpnei	zero,at,1008
 800f178:	0800fce0 	cmpeqi	zero,at,1011
 800f17c:	0800fce0 	cmpeqi	zero,at,1011
 800f180:	0800fce0 	cmpeqi	zero,at,1011
 800f184:	0800fce0 	cmpeqi	zero,at,1011
 800f188:	0800fce0 	cmpeqi	zero,at,1011
 800f18c:	0800fce0 	cmpeqi	zero,at,1011
 800f190:	0800fbdc 	xori	zero,at,1007
 800f194:	0800fc08 	cmpgei	zero,at,1008
 800f198:	0800fce0 	cmpeqi	zero,at,1011
 800f19c:	0800f35c 	xori	zero,at,973
 800f1a0:	0800f36c 	andhi	zero,at,973
 800f1a4:	0800fce0 	cmpeqi	zero,at,1011
 800f1a8:	0800f3ac 	andhi	zero,at,974
 800f1ac:	0800f3bc 	xorhi	zero,at,974
 800f1b0:	0800f3bc 	xorhi	zero,at,974
 800f1b4:	0800f3bc 	xorhi	zero,at,974
 800f1b8:	0800f3bc 	xorhi	zero,at,974
 800f1bc:	0800f3bc 	xorhi	zero,at,974
 800f1c0:	0800f3bc 	xorhi	zero,at,974
 800f1c4:	0800f3bc 	xorhi	zero,at,974
 800f1c8:	0800f3bc 	xorhi	zero,at,974
 800f1cc:	0800f3bc 	xorhi	zero,at,974
 800f1d0:	0800fce0 	cmpeqi	zero,at,1011
 800f1d4:	0800fce0 	cmpeqi	zero,at,1011
 800f1d8:	0800fce0 	cmpeqi	zero,at,1011
 800f1dc:	0800fce0 	cmpeqi	zero,at,1011
 800f1e0:	0800fce0 	cmpeqi	zero,at,1011
 800f1e4:	0800fce0 	cmpeqi	zero,at,1011
 800f1e8:	0800fce0 	cmpeqi	zero,at,1011
 800f1ec:	0800fce0 	cmpeqi	zero,at,1011
 800f1f0:	0800fce0 	cmpeqi	zero,at,1011
 800f1f4:	0800fce0 	cmpeqi	zero,at,1011
 800f1f8:	0800f3f0 	cmpltui	zero,at,975
 800f1fc:	0800f8dc 	xori	zero,at,995
 800f200:	0800fce0 	cmpeqi	zero,at,1011
 800f204:	0800f8dc 	xori	zero,at,995
 800f208:	0800fce0 	cmpeqi	zero,at,1011
 800f20c:	0800fce0 	cmpeqi	zero,at,1011
 800f210:	0800fce0 	cmpeqi	zero,at,1011
 800f214:	0800fce0 	cmpeqi	zero,at,1011
 800f218:	0800f9c8 	cmpgei	zero,at,999
 800f21c:	0800fce0 	cmpeqi	zero,at,1011
 800f220:	0800fce0 	cmpeqi	zero,at,1011
 800f224:	0800f870 	cmpltui	zero,at,993
 800f228:	0800fce0 	cmpeqi	zero,at,1011
 800f22c:	0800fce0 	cmpeqi	zero,at,1011
 800f230:	0800fce0 	cmpeqi	zero,at,1011
 800f234:	0800fce0 	cmpeqi	zero,at,1011
 800f238:	0800fce0 	cmpeqi	zero,at,1011
 800f23c:	0800f8ac 	andhi	zero,at,994
 800f240:	0800fce0 	cmpeqi	zero,at,1011
 800f244:	0800fce0 	cmpeqi	zero,at,1011
 800f248:	0800fab8 	rdprs	zero,at,1002
 800f24c:	0800fce0 	cmpeqi	zero,at,1011
 800f250:	0800fce0 	cmpeqi	zero,at,1011
 800f254:	0800fce0 	cmpeqi	zero,at,1011
 800f258:	0800fce0 	cmpeqi	zero,at,1011
 800f25c:	0800fce0 	cmpeqi	zero,at,1011
 800f260:	0800fce0 	cmpeqi	zero,at,1011
 800f264:	0800fce0 	cmpeqi	zero,at,1011
 800f268:	0800fce0 	cmpeqi	zero,at,1011
 800f26c:	0800fce0 	cmpeqi	zero,at,1011
 800f270:	0800fce0 	cmpeqi	zero,at,1011
 800f274:	0800fb9c 	xori	zero,at,1006
 800f278:	0800f9d8 	cmpnei	zero,at,999
 800f27c:	0800f8dc 	xori	zero,at,995
 800f280:	0800f8dc 	xori	zero,at,995
 800f284:	0800f8dc 	xori	zero,at,995
 800f288:	0800fa40 	call	800fa4 <__alt_mem_epcs+0x800fa4>
 800f28c:	0800f9d8 	cmpnei	zero,at,999
 800f290:	0800fce0 	cmpeqi	zero,at,1011
 800f294:	0800fce0 	cmpeqi	zero,at,1011
 800f298:	0800fa50 	cmplti	zero,at,1001
 800f29c:	0800fce0 	cmpeqi	zero,at,1011
 800f2a0:	0800fa64 	muli	zero,at,1001
 800f2a4:	0800fca4 	muli	zero,at,1010
 800f2a8:	0800f980 	call	800f98 <__alt_mem_epcs+0x800f98>
 800f2ac:	0800fb8c 	andi	zero,at,1006
 800f2b0:	0800fce0 	cmpeqi	zero,at,1011
 800f2b4:	0800fb14 	ori	zero,at,1004
 800f2b8:	0800fce0 	cmpeqi	zero,at,1011
 800f2bc:	0800fc68 	cmpgeui	zero,at,1009
 800f2c0:	0800fce0 	cmpeqi	zero,at,1011
 800f2c4:	0800fce0 	cmpeqi	zero,at,1011
 800f2c8:	0800fc28 	cmpgeui	zero,at,1008
 800f2cc:	db002917 	ldw	r12,164(sp)
 800f2d0:	8323c83a 	sub	r17,r16,r12
 800f2d4:	003f7e06 	br	800f0d0 <__alt_data_end+0xf800f0d0>
 800f2d8:	d9002f17 	ldw	r4,188(sp)
 800f2dc:	b80b883a 	mov	r5,r23
 800f2e0:	b00d883a 	mov	r6,r22
 800f2e4:	801394c0 	call	801394c <__ssprint_r>
 800f2e8:	1000081e 	bne	r2,zero,800f30c <___svfprintf_internal_r+0x320>
 800f2ec:	da000404 	addi	r8,sp,16
 800f2f0:	003f8406 	br	800f104 <__alt_data_end+0xf800f104>
 800f2f4:	d8802017 	ldw	r2,128(sp)
 800f2f8:	10000426 	beq	r2,zero,800f30c <___svfprintf_internal_r+0x320>
 800f2fc:	d9002f17 	ldw	r4,188(sp)
 800f300:	b80b883a 	mov	r5,r23
 800f304:	d9801e04 	addi	r6,sp,120
 800f308:	801394c0 	call	801394c <__ssprint_r>
 800f30c:	b880030b 	ldhu	r2,12(r23)
 800f310:	1080100c 	andi	r2,r2,64
 800f314:	10000d1e 	bne	r2,zero,800f34c <___svfprintf_internal_r+0x360>
 800f318:	d8803017 	ldw	r2,192(sp)
 800f31c:	dfc04a17 	ldw	ra,296(sp)
 800f320:	df004917 	ldw	fp,292(sp)
 800f324:	ddc04817 	ldw	r23,288(sp)
 800f328:	dd804717 	ldw	r22,284(sp)
 800f32c:	dd404617 	ldw	r21,280(sp)
 800f330:	dd004517 	ldw	r20,276(sp)
 800f334:	dcc04417 	ldw	r19,272(sp)
 800f338:	dc804317 	ldw	r18,268(sp)
 800f33c:	dc404217 	ldw	r17,264(sp)
 800f340:	dc004117 	ldw	r16,260(sp)
 800f344:	dec04b04 	addi	sp,sp,300
 800f348:	f800283a 	ret
 800f34c:	00bfffc4 	movi	r2,-1
 800f350:	003ff206 	br	800f31c <__alt_data_end+0xf800f31c>
 800f354:	dc002917 	ldw	r16,164(sp)
 800f358:	003f6d06 	br	800f110 <__alt_data_end+0xf800f110>
 800f35c:	1805883a 	mov	r2,r3
 800f360:	8c400114 	ori	r17,r17,4
 800f364:	1c000007 	ldb	r16,0(r3)
 800f368:	003f7606 	br	800f144 <__alt_data_end+0xf800f144>
 800f36c:	1c000007 	ldb	r16,0(r3)
 800f370:	18800044 	addi	r2,r3,1
 800f374:	8286e726 	beq	r16,r10,8010f14 <___svfprintf_internal_r+0x1f28>
 800f378:	82fff404 	addi	r11,r16,-48
 800f37c:	1007883a 	mov	r3,r2
 800f380:	0013883a 	mov	r9,zero
 800f384:	2aff7036 	bltu	r5,r11,800f148 <__alt_data_end+0xf800f148>
 800f388:	1c000007 	ldb	r16,0(r3)
 800f38c:	4a4002a4 	muli	r9,r9,10
 800f390:	18c00044 	addi	r3,r3,1
 800f394:	5a53883a 	add	r9,r11,r9
 800f398:	82fff404 	addi	r11,r16,-48
 800f39c:	2afffa2e 	bgeu	r5,r11,800f388 <__alt_data_end+0xf800f388>
 800f3a0:	483f690e 	bge	r9,zero,800f148 <__alt_data_end+0xf800f148>
 800f3a4:	027fffc4 	movi	r9,-1
 800f3a8:	003f6706 	br	800f148 <__alt_data_end+0xf800f148>
 800f3ac:	8c402014 	ori	r17,r17,128
 800f3b0:	1805883a 	mov	r2,r3
 800f3b4:	1c000007 	ldb	r16,0(r3)
 800f3b8:	003f6206 	br	800f144 <__alt_data_end+0xf800f144>
 800f3bc:	1805883a 	mov	r2,r3
 800f3c0:	d8002e15 	stw	zero,184(sp)
 800f3c4:	82fff404 	addi	r11,r16,-48
 800f3c8:	0019883a 	mov	r12,zero
 800f3cc:	14000007 	ldb	r16,0(r2)
 800f3d0:	630002a4 	muli	r12,r12,10
 800f3d4:	18c00044 	addi	r3,r3,1
 800f3d8:	1805883a 	mov	r2,r3
 800f3dc:	62d9883a 	add	r12,r12,r11
 800f3e0:	82fff404 	addi	r11,r16,-48
 800f3e4:	2afff92e 	bgeu	r5,r11,800f3cc <__alt_data_end+0xf800f3cc>
 800f3e8:	db002e15 	stw	r12,184(sp)
 800f3ec:	003f5606 	br	800f148 <__alt_data_end+0xf800f148>
 800f3f0:	8c400414 	ori	r17,r17,16
 800f3f4:	d8c02915 	stw	r3,164(sp)
 800f3f8:	d9802785 	stb	r6,158(sp)
 800f3fc:	8880080c 	andi	r2,r17,32
 800f400:	d8c02d17 	ldw	r3,180(sp)
 800f404:	10017926 	beq	r2,zero,800f9ec <___svfprintf_internal_r+0xa00>
 800f408:	db002d17 	ldw	r12,180(sp)
 800f40c:	18800117 	ldw	r2,4(r3)
 800f410:	1cc00017 	ldw	r19,0(r3)
 800f414:	63000204 	addi	r12,r12,8
 800f418:	db002d15 	stw	r12,180(sp)
 800f41c:	1039883a 	mov	fp,r2
 800f420:	10017d16 	blt	r2,zero,800fa18 <___svfprintf_internal_r+0xa2c>
 800f424:	dd402783 	ldbu	r21,158(sp)
 800f428:	da403215 	stw	r9,200(sp)
 800f42c:	00800044 	movi	r2,1
 800f430:	9f06b03a 	or	r3,r19,fp
 800f434:	48000216 	blt	r9,zero,800f440 <___svfprintf_internal_r+0x454>
 800f438:	013fdfc4 	movi	r4,-129
 800f43c:	8922703a 	and	r17,r17,r4
 800f440:	1802371e 	bne	r3,zero,800fd20 <___svfprintf_internal_r+0xd34>
 800f444:	48034526 	beq	r9,zero,801015c <___svfprintf_internal_r+0x1170>
 800f448:	10803fcc 	andi	r2,r2,255
 800f44c:	00c00044 	movi	r3,1
 800f450:	10c25826 	beq	r2,r3,800fdb4 <___svfprintf_internal_r+0xdc8>
 800f454:	00c00084 	movi	r3,2
 800f458:	10c2db26 	beq	r2,r3,800ffc8 <___svfprintf_internal_r+0xfdc>
 800f45c:	b007883a 	mov	r3,r22
 800f460:	9808d0fa 	srli	r4,r19,3
 800f464:	e00a977a 	slli	r5,fp,29
 800f468:	e038d0fa 	srli	fp,fp,3
 800f46c:	9cc001cc 	andi	r19,r19,7
 800f470:	98800c04 	addi	r2,r19,48
 800f474:	18ffffc4 	addi	r3,r3,-1
 800f478:	2926b03a 	or	r19,r5,r4
 800f47c:	18800005 	stb	r2,0(r3)
 800f480:	9f08b03a 	or	r4,r19,fp
 800f484:	203ff61e 	bne	r4,zero,800f460 <__alt_data_end+0xf800f460>
 800f488:	8900004c 	andi	r4,r17,1
 800f48c:	d8c03115 	stw	r3,196(sp)
 800f490:	2002db26 	beq	r4,zero,8010000 <___svfprintf_internal_r+0x1014>
 800f494:	10803fcc 	andi	r2,r2,255
 800f498:	1080201c 	xori	r2,r2,128
 800f49c:	10bfe004 	addi	r2,r2,-128
 800f4a0:	01000c04 	movi	r4,48
 800f4a4:	11056626 	beq	r2,r4,8010a40 <___svfprintf_internal_r+0x1a54>
 800f4a8:	dac03117 	ldw	r11,196(sp)
 800f4ac:	193fffc5 	stb	r4,-1(r3)
 800f4b0:	5affffc4 	addi	r11,r11,-1
 800f4b4:	dac03115 	stw	r11,196(sp)
 800f4b8:	b2e5c83a 	sub	r18,r22,r11
 800f4bc:	9005883a 	mov	r2,r18
 800f4c0:	9240010e 	bge	r18,r9,800f4c8 <___svfprintf_internal_r+0x4dc>
 800f4c4:	4805883a 	mov	r2,r9
 800f4c8:	d8802a15 	stw	r2,168(sp)
 800f4cc:	d8003415 	stw	zero,208(sp)
 800f4d0:	a8803fcc 	andi	r2,r21,255
 800f4d4:	1080201c 	xori	r2,r2,128
 800f4d8:	10bfe004 	addi	r2,r2,-128
 800f4dc:	10000326 	beq	r2,zero,800f4ec <___svfprintf_internal_r+0x500>
 800f4e0:	d8c02a17 	ldw	r3,168(sp)
 800f4e4:	18c00044 	addi	r3,r3,1
 800f4e8:	d8c02a15 	stw	r3,168(sp)
 800f4ec:	8ac0008c 	andi	r11,r17,2
 800f4f0:	dac02b15 	stw	r11,172(sp)
 800f4f4:	58000326 	beq	r11,zero,800f504 <___svfprintf_internal_r+0x518>
 800f4f8:	db002a17 	ldw	r12,168(sp)
 800f4fc:	63000084 	addi	r12,r12,2
 800f500:	db002a15 	stw	r12,168(sp)
 800f504:	88c0210c 	andi	r3,r17,132
 800f508:	d8c02c15 	stw	r3,176(sp)
 800f50c:	1802021e 	bne	r3,zero,800fd18 <___svfprintf_internal_r+0xd2c>
 800f510:	dac02e17 	ldw	r11,184(sp)
 800f514:	db002a17 	ldw	r12,168(sp)
 800f518:	5b39c83a 	sub	fp,r11,r12
 800f51c:	0701fe0e 	bge	zero,fp,800fd18 <___svfprintf_internal_r+0xd2c>
 800f520:	02400404 	movi	r9,16
 800f524:	d8c02017 	ldw	r3,128(sp)
 800f528:	d8801f17 	ldw	r2,124(sp)
 800f52c:	4f057d0e 	bge	r9,fp,8010b24 <___svfprintf_internal_r+0x1b38>
 800f530:	014200b4 	movhi	r5,2050
 800f534:	e009883a 	mov	r4,fp
 800f538:	29734d84 	addi	r5,r5,-13002
 800f53c:	dc003c15 	stw	r16,240(sp)
 800f540:	9039883a 	mov	fp,r18
 800f544:	d9403615 	stw	r5,216(sp)
 800f548:	8825883a 	mov	r18,r17
 800f54c:	482b883a 	mov	r21,r9
 800f550:	04c001c4 	movi	r19,7
 800f554:	dc002f17 	ldw	r16,188(sp)
 800f558:	2023883a 	mov	r17,r4
 800f55c:	00000306 	br	800f56c <___svfprintf_internal_r+0x580>
 800f560:	8c7ffc04 	addi	r17,r17,-16
 800f564:	42000204 	addi	r8,r8,8
 800f568:	ac40130e 	bge	r21,r17,800f5b8 <___svfprintf_internal_r+0x5cc>
 800f56c:	02c200b4 	movhi	r11,2050
 800f570:	18c00404 	addi	r3,r3,16
 800f574:	10800044 	addi	r2,r2,1
 800f578:	5af34d84 	addi	r11,r11,-13002
 800f57c:	42c00015 	stw	r11,0(r8)
 800f580:	45400115 	stw	r21,4(r8)
 800f584:	d8c02015 	stw	r3,128(sp)
 800f588:	d8801f15 	stw	r2,124(sp)
 800f58c:	98bff40e 	bge	r19,r2,800f560 <__alt_data_end+0xf800f560>
 800f590:	8009883a 	mov	r4,r16
 800f594:	b80b883a 	mov	r5,r23
 800f598:	b00d883a 	mov	r6,r22
 800f59c:	801394c0 	call	801394c <__ssprint_r>
 800f5a0:	103f5a1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 800f5a4:	8c7ffc04 	addi	r17,r17,-16
 800f5a8:	d8c02017 	ldw	r3,128(sp)
 800f5ac:	d8801f17 	ldw	r2,124(sp)
 800f5b0:	da000404 	addi	r8,sp,16
 800f5b4:	ac7fed16 	blt	r21,r17,800f56c <__alt_data_end+0xf800f56c>
 800f5b8:	dc003c17 	ldw	r16,240(sp)
 800f5bc:	8809883a 	mov	r4,r17
 800f5c0:	9023883a 	mov	r17,r18
 800f5c4:	e025883a 	mov	r18,fp
 800f5c8:	2039883a 	mov	fp,r4
 800f5cc:	db003617 	ldw	r12,216(sp)
 800f5d0:	e0c7883a 	add	r3,fp,r3
 800f5d4:	10800044 	addi	r2,r2,1
 800f5d8:	43000015 	stw	r12,0(r8)
 800f5dc:	47000115 	stw	fp,4(r8)
 800f5e0:	d8c02015 	stw	r3,128(sp)
 800f5e4:	d8801f15 	stw	r2,124(sp)
 800f5e8:	010001c4 	movi	r4,7
 800f5ec:	20833516 	blt	r4,r2,80102c4 <___svfprintf_internal_r+0x12d8>
 800f5f0:	d8802787 	ldb	r2,158(sp)
 800f5f4:	42000204 	addi	r8,r8,8
 800f5f8:	10000c26 	beq	r2,zero,800f62c <___svfprintf_internal_r+0x640>
 800f5fc:	d8801f17 	ldw	r2,124(sp)
 800f600:	d9002784 	addi	r4,sp,158
 800f604:	18c00044 	addi	r3,r3,1
 800f608:	10800044 	addi	r2,r2,1
 800f60c:	41000015 	stw	r4,0(r8)
 800f610:	01000044 	movi	r4,1
 800f614:	41000115 	stw	r4,4(r8)
 800f618:	d8c02015 	stw	r3,128(sp)
 800f61c:	d8801f15 	stw	r2,124(sp)
 800f620:	010001c4 	movi	r4,7
 800f624:	2082df16 	blt	r4,r2,80101a4 <___svfprintf_internal_r+0x11b8>
 800f628:	42000204 	addi	r8,r8,8
 800f62c:	dac02b17 	ldw	r11,172(sp)
 800f630:	58000c26 	beq	r11,zero,800f664 <___svfprintf_internal_r+0x678>
 800f634:	d8801f17 	ldw	r2,124(sp)
 800f638:	d9002704 	addi	r4,sp,156
 800f63c:	18c00084 	addi	r3,r3,2
 800f640:	10800044 	addi	r2,r2,1
 800f644:	41000015 	stw	r4,0(r8)
 800f648:	01000084 	movi	r4,2
 800f64c:	41000115 	stw	r4,4(r8)
 800f650:	d8c02015 	stw	r3,128(sp)
 800f654:	d8801f15 	stw	r2,124(sp)
 800f658:	010001c4 	movi	r4,7
 800f65c:	2082d916 	blt	r4,r2,80101c4 <___svfprintf_internal_r+0x11d8>
 800f660:	42000204 	addi	r8,r8,8
 800f664:	db002c17 	ldw	r12,176(sp)
 800f668:	00802004 	movi	r2,128
 800f66c:	60822026 	beq	r12,r2,800fef0 <___svfprintf_internal_r+0xf04>
 800f670:	db003217 	ldw	r12,200(sp)
 800f674:	64abc83a 	sub	r21,r12,r18
 800f678:	0540310e 	bge	zero,r21,800f740 <___svfprintf_internal_r+0x754>
 800f67c:	07000404 	movi	fp,16
 800f680:	d8801f17 	ldw	r2,124(sp)
 800f684:	e544180e 	bge	fp,r21,80106e8 <___svfprintf_internal_r+0x16fc>
 800f688:	014200b4 	movhi	r5,2050
 800f68c:	a809883a 	mov	r4,r21
 800f690:	29734984 	addi	r5,r5,-13018
 800f694:	dc002c15 	stw	r16,176(sp)
 800f698:	902b883a 	mov	r21,r18
 800f69c:	d9402b15 	stw	r5,172(sp)
 800f6a0:	8825883a 	mov	r18,r17
 800f6a4:	04c001c4 	movi	r19,7
 800f6a8:	dc002f17 	ldw	r16,188(sp)
 800f6ac:	2023883a 	mov	r17,r4
 800f6b0:	00000306 	br	800f6c0 <___svfprintf_internal_r+0x6d4>
 800f6b4:	8c7ffc04 	addi	r17,r17,-16
 800f6b8:	42000204 	addi	r8,r8,8
 800f6bc:	e440110e 	bge	fp,r17,800f704 <___svfprintf_internal_r+0x718>
 800f6c0:	18c00404 	addi	r3,r3,16
 800f6c4:	10800044 	addi	r2,r2,1
 800f6c8:	45000015 	stw	r20,0(r8)
 800f6cc:	47000115 	stw	fp,4(r8)
 800f6d0:	d8c02015 	stw	r3,128(sp)
 800f6d4:	d8801f15 	stw	r2,124(sp)
 800f6d8:	98bff60e 	bge	r19,r2,800f6b4 <__alt_data_end+0xf800f6b4>
 800f6dc:	8009883a 	mov	r4,r16
 800f6e0:	b80b883a 	mov	r5,r23
 800f6e4:	b00d883a 	mov	r6,r22
 800f6e8:	801394c0 	call	801394c <__ssprint_r>
 800f6ec:	103f071e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 800f6f0:	8c7ffc04 	addi	r17,r17,-16
 800f6f4:	d8c02017 	ldw	r3,128(sp)
 800f6f8:	d8801f17 	ldw	r2,124(sp)
 800f6fc:	da000404 	addi	r8,sp,16
 800f700:	e47fef16 	blt	fp,r17,800f6c0 <__alt_data_end+0xf800f6c0>
 800f704:	dc002c17 	ldw	r16,176(sp)
 800f708:	8809883a 	mov	r4,r17
 800f70c:	9023883a 	mov	r17,r18
 800f710:	a825883a 	mov	r18,r21
 800f714:	202b883a 	mov	r21,r4
 800f718:	dac02b17 	ldw	r11,172(sp)
 800f71c:	1d47883a 	add	r3,r3,r21
 800f720:	10800044 	addi	r2,r2,1
 800f724:	42c00015 	stw	r11,0(r8)
 800f728:	45400115 	stw	r21,4(r8)
 800f72c:	d8c02015 	stw	r3,128(sp)
 800f730:	d8801f15 	stw	r2,124(sp)
 800f734:	010001c4 	movi	r4,7
 800f738:	20829216 	blt	r4,r2,8010184 <___svfprintf_internal_r+0x1198>
 800f73c:	42000204 	addi	r8,r8,8
 800f740:	8880400c 	andi	r2,r17,256
 800f744:	1001a11e 	bne	r2,zero,800fdcc <___svfprintf_internal_r+0xde0>
 800f748:	d8801f17 	ldw	r2,124(sp)
 800f74c:	db003117 	ldw	r12,196(sp)
 800f750:	1c87883a 	add	r3,r3,r18
 800f754:	10800044 	addi	r2,r2,1
 800f758:	43000015 	stw	r12,0(r8)
 800f75c:	44800115 	stw	r18,4(r8)
 800f760:	d8c02015 	stw	r3,128(sp)
 800f764:	d8801f15 	stw	r2,124(sp)
 800f768:	010001c4 	movi	r4,7
 800f76c:	20826d16 	blt	r4,r2,8010124 <___svfprintf_internal_r+0x1138>
 800f770:	42000204 	addi	r8,r8,8
 800f774:	8c40010c 	andi	r17,r17,4
 800f778:	88003226 	beq	r17,zero,800f844 <___svfprintf_internal_r+0x858>
 800f77c:	db002e17 	ldw	r12,184(sp)
 800f780:	dac02a17 	ldw	r11,168(sp)
 800f784:	62e1c83a 	sub	r16,r12,r11
 800f788:	04002e0e 	bge	zero,r16,800f844 <___svfprintf_internal_r+0x858>
 800f78c:	04400404 	movi	r17,16
 800f790:	d8801f17 	ldw	r2,124(sp)
 800f794:	8c05240e 	bge	r17,r16,8010c28 <___svfprintf_internal_r+0x1c3c>
 800f798:	010200b4 	movhi	r4,2050
 800f79c:	21334d84 	addi	r4,r4,-13002
 800f7a0:	d9003615 	stw	r4,216(sp)
 800f7a4:	048001c4 	movi	r18,7
 800f7a8:	dcc02f17 	ldw	r19,188(sp)
 800f7ac:	00000306 	br	800f7bc <___svfprintf_internal_r+0x7d0>
 800f7b0:	843ffc04 	addi	r16,r16,-16
 800f7b4:	42000204 	addi	r8,r8,8
 800f7b8:	8c00130e 	bge	r17,r16,800f808 <___svfprintf_internal_r+0x81c>
 800f7bc:	014200b4 	movhi	r5,2050
 800f7c0:	18c00404 	addi	r3,r3,16
 800f7c4:	10800044 	addi	r2,r2,1
 800f7c8:	29734d84 	addi	r5,r5,-13002
 800f7cc:	41400015 	stw	r5,0(r8)
 800f7d0:	44400115 	stw	r17,4(r8)
 800f7d4:	d8c02015 	stw	r3,128(sp)
 800f7d8:	d8801f15 	stw	r2,124(sp)
 800f7dc:	90bff40e 	bge	r18,r2,800f7b0 <__alt_data_end+0xf800f7b0>
 800f7e0:	9809883a 	mov	r4,r19
 800f7e4:	b80b883a 	mov	r5,r23
 800f7e8:	b00d883a 	mov	r6,r22
 800f7ec:	801394c0 	call	801394c <__ssprint_r>
 800f7f0:	103ec61e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 800f7f4:	843ffc04 	addi	r16,r16,-16
 800f7f8:	d8c02017 	ldw	r3,128(sp)
 800f7fc:	d8801f17 	ldw	r2,124(sp)
 800f800:	da000404 	addi	r8,sp,16
 800f804:	8c3fed16 	blt	r17,r16,800f7bc <__alt_data_end+0xf800f7bc>
 800f808:	dac03617 	ldw	r11,216(sp)
 800f80c:	1c07883a 	add	r3,r3,r16
 800f810:	10800044 	addi	r2,r2,1
 800f814:	42c00015 	stw	r11,0(r8)
 800f818:	44000115 	stw	r16,4(r8)
 800f81c:	d8c02015 	stw	r3,128(sp)
 800f820:	d8801f15 	stw	r2,124(sp)
 800f824:	010001c4 	movi	r4,7
 800f828:	2080060e 	bge	r4,r2,800f844 <___svfprintf_internal_r+0x858>
 800f82c:	d9002f17 	ldw	r4,188(sp)
 800f830:	b80b883a 	mov	r5,r23
 800f834:	b00d883a 	mov	r6,r22
 800f838:	801394c0 	call	801394c <__ssprint_r>
 800f83c:	103eb31e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 800f840:	d8c02017 	ldw	r3,128(sp)
 800f844:	d8802a17 	ldw	r2,168(sp)
 800f848:	db002e17 	ldw	r12,184(sp)
 800f84c:	1300010e 	bge	r2,r12,800f854 <___svfprintf_internal_r+0x868>
 800f850:	6005883a 	mov	r2,r12
 800f854:	dac03017 	ldw	r11,192(sp)
 800f858:	5897883a 	add	r11,r11,r2
 800f85c:	dac03015 	stw	r11,192(sp)
 800f860:	1802381e 	bne	r3,zero,8010144 <___svfprintf_internal_r+0x1158>
 800f864:	d8001f15 	stw	zero,124(sp)
 800f868:	da000404 	addi	r8,sp,16
 800f86c:	003e0b06 	br	800f09c <__alt_data_end+0xf800f09c>
 800f870:	8c400414 	ori	r17,r17,16
 800f874:	d8c02915 	stw	r3,164(sp)
 800f878:	8880080c 	andi	r2,r17,32
 800f87c:	10010c26 	beq	r2,zero,800fcb0 <___svfprintf_internal_r+0xcc4>
 800f880:	db002d17 	ldw	r12,180(sp)
 800f884:	0005883a 	mov	r2,zero
 800f888:	64c00017 	ldw	r19,0(r12)
 800f88c:	67000117 	ldw	fp,4(r12)
 800f890:	63000204 	addi	r12,r12,8
 800f894:	db002d15 	stw	r12,180(sp)
 800f898:	9f06b03a 	or	r3,r19,fp
 800f89c:	d8002785 	stb	zero,158(sp)
 800f8a0:	da403215 	stw	r9,200(sp)
 800f8a4:	002b883a 	mov	r21,zero
 800f8a8:	003ee206 	br	800f434 <__alt_data_end+0xf800f434>
 800f8ac:	8c400414 	ori	r17,r17,16
 800f8b0:	d8c02915 	stw	r3,164(sp)
 800f8b4:	8880080c 	andi	r2,r17,32
 800f8b8:	1000ee26 	beq	r2,zero,800fc74 <___svfprintf_internal_r+0xc88>
 800f8bc:	dac02d17 	ldw	r11,180(sp)
 800f8c0:	00800044 	movi	r2,1
 800f8c4:	5cc00017 	ldw	r19,0(r11)
 800f8c8:	5f000117 	ldw	fp,4(r11)
 800f8cc:	5ac00204 	addi	r11,r11,8
 800f8d0:	dac02d15 	stw	r11,180(sp)
 800f8d4:	9f06b03a 	or	r3,r19,fp
 800f8d8:	003ff006 	br	800f89c <__alt_data_end+0xf800f89c>
 800f8dc:	db002d17 	ldw	r12,180(sp)
 800f8e0:	dac02d17 	ldw	r11,180(sp)
 800f8e4:	d8c02915 	stw	r3,164(sp)
 800f8e8:	63000017 	ldw	r12,0(r12)
 800f8ec:	5ac00117 	ldw	r11,4(r11)
 800f8f0:	d9802785 	stb	r6,158(sp)
 800f8f4:	6009883a 	mov	r4,r12
 800f8f8:	580b883a 	mov	r5,r11
 800f8fc:	db003715 	stw	r12,220(sp)
 800f900:	da004015 	stw	r8,256(sp)
 800f904:	da403f15 	stw	r9,252(sp)
 800f908:	dac03815 	stw	r11,224(sp)
 800f90c:	800b8500 	call	800b850 <__fpclassifyd>
 800f910:	db002d17 	ldw	r12,180(sp)
 800f914:	04800044 	movi	r18,1
 800f918:	da004017 	ldw	r8,256(sp)
 800f91c:	64c00204 	addi	r19,r12,8
 800f920:	da403f17 	ldw	r9,252(sp)
 800f924:	d9003717 	ldw	r4,220(sp)
 800f928:	d9403817 	ldw	r5,224(sp)
 800f92c:	14832c1e 	bne	r2,r18,80105e0 <___svfprintf_internal_r+0x15f4>
 800f930:	000d883a 	mov	r6,zero
 800f934:	000f883a 	mov	r7,zero
 800f938:	8016e500 	call	8016e50 <__ledf2>
 800f93c:	da004017 	ldw	r8,256(sp)
 800f940:	1004c416 	blt	r2,zero,8010c54 <___svfprintf_internal_r+0x1c68>
 800f944:	dd402783 	ldbu	r21,158(sp)
 800f948:	008011c4 	movi	r2,71
 800f94c:	14041a0e 	bge	r2,r16,80109b8 <___svfprintf_internal_r+0x19cc>
 800f950:	00c200b4 	movhi	r3,2050
 800f954:	18f22b04 	addi	r3,r3,-14164
 800f958:	d8c03115 	stw	r3,196(sp)
 800f95c:	02c000c4 	movi	r11,3
 800f960:	00bfdfc4 	movi	r2,-129
 800f964:	dac02a15 	stw	r11,168(sp)
 800f968:	88a2703a 	and	r17,r17,r2
 800f96c:	dcc02d15 	stw	r19,180(sp)
 800f970:	5825883a 	mov	r18,r11
 800f974:	d8003215 	stw	zero,200(sp)
 800f978:	d8003415 	stw	zero,208(sp)
 800f97c:	003ed406 	br	800f4d0 <__alt_data_end+0xf800f4d0>
 800f980:	db002d17 	ldw	r12,180(sp)
 800f984:	00800c04 	movi	r2,48
 800f988:	d8802705 	stb	r2,156(sp)
 800f98c:	64c00017 	ldw	r19,0(r12)
 800f990:	00801e04 	movi	r2,120
 800f994:	d8802745 	stb	r2,157(sp)
 800f998:	008200b4 	movhi	r2,2050
 800f99c:	10b23304 	addi	r2,r2,-14132
 800f9a0:	63000104 	addi	r12,r12,4
 800f9a4:	d8c02915 	stw	r3,164(sp)
 800f9a8:	d8803b15 	stw	r2,236(sp)
 800f9ac:	0039883a 	mov	fp,zero
 800f9b0:	8c400094 	ori	r17,r17,2
 800f9b4:	db002d15 	stw	r12,180(sp)
 800f9b8:	00800084 	movi	r2,2
 800f9bc:	04001e04 	movi	r16,120
 800f9c0:	9807883a 	mov	r3,r19
 800f9c4:	003fb506 	br	800f89c <__alt_data_end+0xf800f89c>
 800f9c8:	8c400214 	ori	r17,r17,8
 800f9cc:	1805883a 	mov	r2,r3
 800f9d0:	1c000007 	ldb	r16,0(r3)
 800f9d4:	003ddb06 	br	800f144 <__alt_data_end+0xf800f144>
 800f9d8:	d8c02915 	stw	r3,164(sp)
 800f9dc:	d9802785 	stb	r6,158(sp)
 800f9e0:	8880080c 	andi	r2,r17,32
 800f9e4:	d8c02d17 	ldw	r3,180(sp)
 800f9e8:	103e871e 	bne	r2,zero,800f408 <__alt_data_end+0xf800f408>
 800f9ec:	8880040c 	andi	r2,r17,16
 800f9f0:	10027a1e 	bne	r2,zero,80103dc <___svfprintf_internal_r+0x13f0>
 800f9f4:	8880100c 	andi	r2,r17,64
 800f9f8:	10027826 	beq	r2,zero,80103dc <___svfprintf_internal_r+0x13f0>
 800f9fc:	1cc0000f 	ldh	r19,0(r3)
 800fa00:	db002d17 	ldw	r12,180(sp)
 800fa04:	9839d7fa 	srai	fp,r19,31
 800fa08:	63000104 	addi	r12,r12,4
 800fa0c:	db002d15 	stw	r12,180(sp)
 800fa10:	e005883a 	mov	r2,fp
 800fa14:	103e830e 	bge	r2,zero,800f424 <__alt_data_end+0xf800f424>
 800fa18:	04e7c83a 	sub	r19,zero,r19
 800fa1c:	9804c03a 	cmpne	r2,r19,zero
 800fa20:	0739c83a 	sub	fp,zero,fp
 800fa24:	e0b9c83a 	sub	fp,fp,r2
 800fa28:	05400b44 	movi	r21,45
 800fa2c:	dd402785 	stb	r21,158(sp)
 800fa30:	da403215 	stw	r9,200(sp)
 800fa34:	00800044 	movi	r2,1
 800fa38:	9f06b03a 	or	r3,r19,fp
 800fa3c:	003e7d06 	br	800f434 <__alt_data_end+0xf800f434>
 800fa40:	8c401014 	ori	r17,r17,64
 800fa44:	1805883a 	mov	r2,r3
 800fa48:	1c000007 	ldb	r16,0(r3)
 800fa4c:	003dbd06 	br	800f144 <__alt_data_end+0xf800f144>
 800fa50:	1c000007 	ldb	r16,0(r3)
 800fa54:	81c37126 	beq	r16,r7,801081c <___svfprintf_internal_r+0x1830>
 800fa58:	8c400414 	ori	r17,r17,16
 800fa5c:	1805883a 	mov	r2,r3
 800fa60:	003db806 	br	800f144 <__alt_data_end+0xf800f144>
 800fa64:	d8c02915 	stw	r3,164(sp)
 800fa68:	d9802785 	stb	r6,158(sp)
 800fa6c:	8880080c 	andi	r2,r17,32
 800fa70:	1002f026 	beq	r2,zero,8010634 <___svfprintf_internal_r+0x1648>
 800fa74:	db002d17 	ldw	r12,180(sp)
 800fa78:	dac03017 	ldw	r11,192(sp)
 800fa7c:	60800017 	ldw	r2,0(r12)
 800fa80:	5807d7fa 	srai	r3,r11,31
 800fa84:	63000104 	addi	r12,r12,4
 800fa88:	db002d15 	stw	r12,180(sp)
 800fa8c:	12c00015 	stw	r11,0(r2)
 800fa90:	10c00115 	stw	r3,4(r2)
 800fa94:	003d8106 	br	800f09c <__alt_data_end+0xf800f09c>
 800fa98:	30803fcc 	andi	r2,r6,255
 800fa9c:	1080201c 	xori	r2,r2,128
 800faa0:	10bfe004 	addi	r2,r2,-128
 800faa4:	1002fd1e 	bne	r2,zero,801069c <___svfprintf_internal_r+0x16b0>
 800faa8:	1805883a 	mov	r2,r3
 800faac:	01800804 	movi	r6,32
 800fab0:	1c000007 	ldb	r16,0(r3)
 800fab4:	003da306 	br	800f144 <__alt_data_end+0xf800f144>
 800fab8:	030200b4 	movhi	r12,2050
 800fabc:	63322e04 	addi	r12,r12,-14152
 800fac0:	d8c02915 	stw	r3,164(sp)
 800fac4:	d9802785 	stb	r6,158(sp)
 800fac8:	db003b15 	stw	r12,236(sp)
 800facc:	88c0080c 	andi	r3,r17,32
 800fad0:	d8802d17 	ldw	r2,180(sp)
 800fad4:	18005c26 	beq	r3,zero,800fc48 <___svfprintf_internal_r+0xc5c>
 800fad8:	dac02d17 	ldw	r11,180(sp)
 800fadc:	14c00017 	ldw	r19,0(r2)
 800fae0:	17000117 	ldw	fp,4(r2)
 800fae4:	5ac00204 	addi	r11,r11,8
 800fae8:	dac02d15 	stw	r11,180(sp)
 800faec:	8880004c 	andi	r2,r17,1
 800faf0:	10022f26 	beq	r2,zero,80103b0 <___svfprintf_internal_r+0x13c4>
 800faf4:	9f06b03a 	or	r3,r19,fp
 800faf8:	1802eb26 	beq	r3,zero,80106a8 <___svfprintf_internal_r+0x16bc>
 800fafc:	00800c04 	movi	r2,48
 800fb00:	d8802705 	stb	r2,156(sp)
 800fb04:	dc002745 	stb	r16,157(sp)
 800fb08:	8c400094 	ori	r17,r17,2
 800fb0c:	00800084 	movi	r2,2
 800fb10:	003f6206 	br	800f89c <__alt_data_end+0xf800f89c>
 800fb14:	dac02d17 	ldw	r11,180(sp)
 800fb18:	db002d17 	ldw	r12,180(sp)
 800fb1c:	d8c02915 	stw	r3,164(sp)
 800fb20:	5ac00017 	ldw	r11,0(r11)
 800fb24:	d8002785 	stb	zero,158(sp)
 800fb28:	64c00104 	addi	r19,r12,4
 800fb2c:	dac03115 	stw	r11,196(sp)
 800fb30:	58042e26 	beq	r11,zero,8010bec <___svfprintf_internal_r+0x1c00>
 800fb34:	d9003117 	ldw	r4,196(sp)
 800fb38:	4803c416 	blt	r9,zero,8010a4c <___svfprintf_internal_r+0x1a60>
 800fb3c:	480d883a 	mov	r6,r9
 800fb40:	000b883a 	mov	r5,zero
 800fb44:	da004015 	stw	r8,256(sp)
 800fb48:	da403f15 	stw	r9,252(sp)
 800fb4c:	8009c340 	call	8009c34 <memchr>
 800fb50:	da004017 	ldw	r8,256(sp)
 800fb54:	da403f17 	ldw	r9,252(sp)
 800fb58:	10048a26 	beq	r2,zero,8010d84 <___svfprintf_internal_r+0x1d98>
 800fb5c:	d8c03117 	ldw	r3,196(sp)
 800fb60:	10e5c83a 	sub	r18,r2,r3
 800fb64:	4c80010e 	bge	r9,r18,800fb6c <___svfprintf_internal_r+0xb80>
 800fb68:	4825883a 	mov	r18,r9
 800fb6c:	9005883a 	mov	r2,r18
 800fb70:	9003bb16 	blt	r18,zero,8010a60 <___svfprintf_internal_r+0x1a74>
 800fb74:	dd402783 	ldbu	r21,158(sp)
 800fb78:	d8802a15 	stw	r2,168(sp)
 800fb7c:	dcc02d15 	stw	r19,180(sp)
 800fb80:	d8003215 	stw	zero,200(sp)
 800fb84:	d8003415 	stw	zero,208(sp)
 800fb88:	003e5106 	br	800f4d0 <__alt_data_end+0xf800f4d0>
 800fb8c:	8c400814 	ori	r17,r17,32
 800fb90:	1805883a 	mov	r2,r3
 800fb94:	1c000007 	ldb	r16,0(r3)
 800fb98:	003d6a06 	br	800f144 <__alt_data_end+0xf800f144>
 800fb9c:	db002d17 	ldw	r12,180(sp)
 800fba0:	d8c02915 	stw	r3,164(sp)
 800fba4:	dac01404 	addi	r11,sp,80
 800fba8:	60800017 	ldw	r2,0(r12)
 800fbac:	00c00044 	movi	r3,1
 800fbb0:	63000104 	addi	r12,r12,4
 800fbb4:	d8801405 	stb	r2,80(sp)
 800fbb8:	d8c02a15 	stw	r3,168(sp)
 800fbbc:	d8002785 	stb	zero,158(sp)
 800fbc0:	db002d15 	stw	r12,180(sp)
 800fbc4:	1825883a 	mov	r18,r3
 800fbc8:	d8003215 	stw	zero,200(sp)
 800fbcc:	d8003415 	stw	zero,208(sp)
 800fbd0:	dac03115 	stw	r11,196(sp)
 800fbd4:	0005883a 	mov	r2,zero
 800fbd8:	003e4406 	br	800f4ec <__alt_data_end+0xf800f4ec>
 800fbdc:	dac02d17 	ldw	r11,180(sp)
 800fbe0:	db002d17 	ldw	r12,180(sp)
 800fbe4:	5ac00017 	ldw	r11,0(r11)
 800fbe8:	dac02e15 	stw	r11,184(sp)
 800fbec:	62c00104 	addi	r11,r12,4
 800fbf0:	db002e17 	ldw	r12,184(sp)
 800fbf4:	60030316 	blt	r12,zero,8010804 <___svfprintf_internal_r+0x1818>
 800fbf8:	dac02d15 	stw	r11,180(sp)
 800fbfc:	1805883a 	mov	r2,r3
 800fc00:	1c000007 	ldb	r16,0(r3)
 800fc04:	003d4f06 	br	800f144 <__alt_data_end+0xf800f144>
 800fc08:	1805883a 	mov	r2,r3
 800fc0c:	01800ac4 	movi	r6,43
 800fc10:	1c000007 	ldb	r16,0(r3)
 800fc14:	003d4b06 	br	800f144 <__alt_data_end+0xf800f144>
 800fc18:	8c400054 	ori	r17,r17,1
 800fc1c:	1805883a 	mov	r2,r3
 800fc20:	1c000007 	ldb	r16,0(r3)
 800fc24:	003d4706 	br	800f144 <__alt_data_end+0xf800f144>
 800fc28:	008200b4 	movhi	r2,2050
 800fc2c:	10b23304 	addi	r2,r2,-14132
 800fc30:	d8c02915 	stw	r3,164(sp)
 800fc34:	d8803b15 	stw	r2,236(sp)
 800fc38:	d9802785 	stb	r6,158(sp)
 800fc3c:	88c0080c 	andi	r3,r17,32
 800fc40:	d8802d17 	ldw	r2,180(sp)
 800fc44:	183fa41e 	bne	r3,zero,800fad8 <__alt_data_end+0xf800fad8>
 800fc48:	88c0040c 	andi	r3,r17,16
 800fc4c:	18028b26 	beq	r3,zero,801067c <___svfprintf_internal_r+0x1690>
 800fc50:	db002d17 	ldw	r12,180(sp)
 800fc54:	14c00017 	ldw	r19,0(r2)
 800fc58:	0039883a 	mov	fp,zero
 800fc5c:	63000104 	addi	r12,r12,4
 800fc60:	db002d15 	stw	r12,180(sp)
 800fc64:	003fa106 	br	800faec <__alt_data_end+0xf800faec>
 800fc68:	d8c02915 	stw	r3,164(sp)
 800fc6c:	8880080c 	andi	r2,r17,32
 800fc70:	103f121e 	bne	r2,zero,800f8bc <__alt_data_end+0xf800f8bc>
 800fc74:	8880040c 	andi	r2,r17,16
 800fc78:	1001df1e 	bne	r2,zero,80103f8 <___svfprintf_internal_r+0x140c>
 800fc7c:	8880100c 	andi	r2,r17,64
 800fc80:	1001dd26 	beq	r2,zero,80103f8 <___svfprintf_internal_r+0x140c>
 800fc84:	dac02d17 	ldw	r11,180(sp)
 800fc88:	0039883a 	mov	fp,zero
 800fc8c:	00800044 	movi	r2,1
 800fc90:	5cc0000b 	ldhu	r19,0(r11)
 800fc94:	5ac00104 	addi	r11,r11,4
 800fc98:	dac02d15 	stw	r11,180(sp)
 800fc9c:	9807883a 	mov	r3,r19
 800fca0:	003efe06 	br	800f89c <__alt_data_end+0xf800f89c>
 800fca4:	d8c02915 	stw	r3,164(sp)
 800fca8:	8880080c 	andi	r2,r17,32
 800fcac:	103ef41e 	bne	r2,zero,800f880 <__alt_data_end+0xf800f880>
 800fcb0:	8880040c 	andi	r2,r17,16
 800fcb4:	1001c11e 	bne	r2,zero,80103bc <___svfprintf_internal_r+0x13d0>
 800fcb8:	8880100c 	andi	r2,r17,64
 800fcbc:	1001bf26 	beq	r2,zero,80103bc <___svfprintf_internal_r+0x13d0>
 800fcc0:	db002d17 	ldw	r12,180(sp)
 800fcc4:	0039883a 	mov	fp,zero
 800fcc8:	0005883a 	mov	r2,zero
 800fccc:	64c0000b 	ldhu	r19,0(r12)
 800fcd0:	63000104 	addi	r12,r12,4
 800fcd4:	db002d15 	stw	r12,180(sp)
 800fcd8:	9807883a 	mov	r3,r19
 800fcdc:	003eef06 	br	800f89c <__alt_data_end+0xf800f89c>
 800fce0:	d8c02915 	stw	r3,164(sp)
 800fce4:	d9802785 	stb	r6,158(sp)
 800fce8:	803d8226 	beq	r16,zero,800f2f4 <__alt_data_end+0xf800f2f4>
 800fcec:	02c00044 	movi	r11,1
 800fcf0:	db001404 	addi	r12,sp,80
 800fcf4:	dac02a15 	stw	r11,168(sp)
 800fcf8:	dc001405 	stb	r16,80(sp)
 800fcfc:	d8002785 	stb	zero,158(sp)
 800fd00:	5825883a 	mov	r18,r11
 800fd04:	d8003215 	stw	zero,200(sp)
 800fd08:	d8003415 	stw	zero,208(sp)
 800fd0c:	db003115 	stw	r12,196(sp)
 800fd10:	0005883a 	mov	r2,zero
 800fd14:	003df506 	br	800f4ec <__alt_data_end+0xf800f4ec>
 800fd18:	d8c02017 	ldw	r3,128(sp)
 800fd1c:	003e3606 	br	800f5f8 <__alt_data_end+0xf800f5f8>
 800fd20:	10803fcc 	andi	r2,r2,255
 800fd24:	00c00044 	movi	r3,1
 800fd28:	10fdca1e 	bne	r2,r3,800f454 <__alt_data_end+0xf800f454>
 800fd2c:	e000021e 	bne	fp,zero,800fd38 <___svfprintf_internal_r+0xd4c>
 800fd30:	00800244 	movi	r2,9
 800fd34:	14c01f2e 	bgeu	r2,r19,800fdb4 <___svfprintf_internal_r+0xdc8>
 800fd38:	dc002a15 	stw	r16,168(sp)
 800fd3c:	dc402b15 	stw	r17,172(sp)
 800fd40:	9821883a 	mov	r16,r19
 800fd44:	e023883a 	mov	r17,fp
 800fd48:	b025883a 	mov	r18,r22
 800fd4c:	4027883a 	mov	r19,r8
 800fd50:	4839883a 	mov	fp,r9
 800fd54:	8009883a 	mov	r4,r16
 800fd58:	880b883a 	mov	r5,r17
 800fd5c:	01800284 	movi	r6,10
 800fd60:	000f883a 	mov	r7,zero
 800fd64:	80154100 	call	8015410 <__umoddi3>
 800fd68:	10800c04 	addi	r2,r2,48
 800fd6c:	94bfffc4 	addi	r18,r18,-1
 800fd70:	8009883a 	mov	r4,r16
 800fd74:	880b883a 	mov	r5,r17
 800fd78:	01800284 	movi	r6,10
 800fd7c:	000f883a 	mov	r7,zero
 800fd80:	90800005 	stb	r2,0(r18)
 800fd84:	8014e500 	call	8014e50 <__udivdi3>
 800fd88:	1021883a 	mov	r16,r2
 800fd8c:	10c4b03a 	or	r2,r2,r3
 800fd90:	1823883a 	mov	r17,r3
 800fd94:	103fef1e 	bne	r2,zero,800fd54 <__alt_data_end+0xf800fd54>
 800fd98:	dc803115 	stw	r18,196(sp)
 800fd9c:	dc002a17 	ldw	r16,168(sp)
 800fda0:	9811883a 	mov	r8,r19
 800fda4:	dc402b17 	ldw	r17,172(sp)
 800fda8:	e013883a 	mov	r9,fp
 800fdac:	b4a5c83a 	sub	r18,r22,r18
 800fdb0:	003dc206 	br	800f4bc <__alt_data_end+0xf800f4bc>
 800fdb4:	9cc00c04 	addi	r19,r19,48
 800fdb8:	db001dc4 	addi	r12,sp,119
 800fdbc:	dcc01dc5 	stb	r19,119(sp)
 800fdc0:	dc803d17 	ldw	r18,244(sp)
 800fdc4:	db003115 	stw	r12,196(sp)
 800fdc8:	003dbc06 	br	800f4bc <__alt_data_end+0xf800f4bc>
 800fdcc:	00801944 	movi	r2,101
 800fdd0:	14008d0e 	bge	r2,r16,8010008 <___svfprintf_internal_r+0x101c>
 800fdd4:	d9003717 	ldw	r4,220(sp)
 800fdd8:	d9403817 	ldw	r5,224(sp)
 800fddc:	000d883a 	mov	r6,zero
 800fde0:	000f883a 	mov	r7,zero
 800fde4:	d8c03e15 	stw	r3,248(sp)
 800fde8:	da004015 	stw	r8,256(sp)
 800fdec:	8016cec0 	call	8016cec <__eqdf2>
 800fdf0:	d8c03e17 	ldw	r3,248(sp)
 800fdf4:	da004017 	ldw	r8,256(sp)
 800fdf8:	1000fd1e 	bne	r2,zero,80101f0 <___svfprintf_internal_r+0x1204>
 800fdfc:	d8801f17 	ldw	r2,124(sp)
 800fe00:	010200b4 	movhi	r4,2050
 800fe04:	21323a04 	addi	r4,r4,-14104
 800fe08:	18c00044 	addi	r3,r3,1
 800fe0c:	10800044 	addi	r2,r2,1
 800fe10:	41000015 	stw	r4,0(r8)
 800fe14:	01000044 	movi	r4,1
 800fe18:	41000115 	stw	r4,4(r8)
 800fe1c:	d8c02015 	stw	r3,128(sp)
 800fe20:	d8801f15 	stw	r2,124(sp)
 800fe24:	010001c4 	movi	r4,7
 800fe28:	20823316 	blt	r4,r2,80106f8 <___svfprintf_internal_r+0x170c>
 800fe2c:	42000204 	addi	r8,r8,8
 800fe30:	d8802617 	ldw	r2,152(sp)
 800fe34:	dac03317 	ldw	r11,204(sp)
 800fe38:	12c00216 	blt	r2,r11,800fe44 <___svfprintf_internal_r+0xe58>
 800fe3c:	8880004c 	andi	r2,r17,1
 800fe40:	103e4c26 	beq	r2,zero,800f774 <__alt_data_end+0xf800f774>
 800fe44:	db003917 	ldw	r12,228(sp)
 800fe48:	d8801f17 	ldw	r2,124(sp)
 800fe4c:	dac03517 	ldw	r11,212(sp)
 800fe50:	1b07883a 	add	r3,r3,r12
 800fe54:	10800044 	addi	r2,r2,1
 800fe58:	42c00015 	stw	r11,0(r8)
 800fe5c:	43000115 	stw	r12,4(r8)
 800fe60:	d8c02015 	stw	r3,128(sp)
 800fe64:	d8801f15 	stw	r2,124(sp)
 800fe68:	010001c4 	movi	r4,7
 800fe6c:	20826f16 	blt	r4,r2,801082c <___svfprintf_internal_r+0x1840>
 800fe70:	42000204 	addi	r8,r8,8
 800fe74:	db003317 	ldw	r12,204(sp)
 800fe78:	643fffc4 	addi	r16,r12,-1
 800fe7c:	043e3d0e 	bge	zero,r16,800f774 <__alt_data_end+0xf800f774>
 800fe80:	04800404 	movi	r18,16
 800fe84:	d8801f17 	ldw	r2,124(sp)
 800fe88:	94009a0e 	bge	r18,r16,80100f4 <___svfprintf_internal_r+0x1108>
 800fe8c:	014200b4 	movhi	r5,2050
 800fe90:	29734984 	addi	r5,r5,-13018
 800fe94:	d9402b15 	stw	r5,172(sp)
 800fe98:	054001c4 	movi	r21,7
 800fe9c:	dcc02f17 	ldw	r19,188(sp)
 800fea0:	00000306 	br	800feb0 <___svfprintf_internal_r+0xec4>
 800fea4:	42000204 	addi	r8,r8,8
 800fea8:	843ffc04 	addi	r16,r16,-16
 800feac:	9400940e 	bge	r18,r16,8010100 <___svfprintf_internal_r+0x1114>
 800feb0:	18c00404 	addi	r3,r3,16
 800feb4:	10800044 	addi	r2,r2,1
 800feb8:	45000015 	stw	r20,0(r8)
 800febc:	44800115 	stw	r18,4(r8)
 800fec0:	d8c02015 	stw	r3,128(sp)
 800fec4:	d8801f15 	stw	r2,124(sp)
 800fec8:	a8bff60e 	bge	r21,r2,800fea4 <__alt_data_end+0xf800fea4>
 800fecc:	9809883a 	mov	r4,r19
 800fed0:	b80b883a 	mov	r5,r23
 800fed4:	b00d883a 	mov	r6,r22
 800fed8:	801394c0 	call	801394c <__ssprint_r>
 800fedc:	103d0b1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 800fee0:	d8c02017 	ldw	r3,128(sp)
 800fee4:	d8801f17 	ldw	r2,124(sp)
 800fee8:	da000404 	addi	r8,sp,16
 800feec:	003fee06 	br	800fea8 <__alt_data_end+0xf800fea8>
 800fef0:	dac02e17 	ldw	r11,184(sp)
 800fef4:	db002a17 	ldw	r12,168(sp)
 800fef8:	5b2bc83a 	sub	r21,r11,r12
 800fefc:	057ddc0e 	bge	zero,r21,800f670 <__alt_data_end+0xf800f670>
 800ff00:	07000404 	movi	fp,16
 800ff04:	d8801f17 	ldw	r2,124(sp)
 800ff08:	e5435d0e 	bge	fp,r21,8010c80 <___svfprintf_internal_r+0x1c94>
 800ff0c:	014200b4 	movhi	r5,2050
 800ff10:	a809883a 	mov	r4,r21
 800ff14:	29734984 	addi	r5,r5,-13018
 800ff18:	dc002c15 	stw	r16,176(sp)
 800ff1c:	902b883a 	mov	r21,r18
 800ff20:	d9402b15 	stw	r5,172(sp)
 800ff24:	8825883a 	mov	r18,r17
 800ff28:	04c001c4 	movi	r19,7
 800ff2c:	dc002f17 	ldw	r16,188(sp)
 800ff30:	2023883a 	mov	r17,r4
 800ff34:	00000306 	br	800ff44 <___svfprintf_internal_r+0xf58>
 800ff38:	8c7ffc04 	addi	r17,r17,-16
 800ff3c:	42000204 	addi	r8,r8,8
 800ff40:	e440110e 	bge	fp,r17,800ff88 <___svfprintf_internal_r+0xf9c>
 800ff44:	18c00404 	addi	r3,r3,16
 800ff48:	10800044 	addi	r2,r2,1
 800ff4c:	45000015 	stw	r20,0(r8)
 800ff50:	47000115 	stw	fp,4(r8)
 800ff54:	d8c02015 	stw	r3,128(sp)
 800ff58:	d8801f15 	stw	r2,124(sp)
 800ff5c:	98bff60e 	bge	r19,r2,800ff38 <__alt_data_end+0xf800ff38>
 800ff60:	8009883a 	mov	r4,r16
 800ff64:	b80b883a 	mov	r5,r23
 800ff68:	b00d883a 	mov	r6,r22
 800ff6c:	801394c0 	call	801394c <__ssprint_r>
 800ff70:	103ce61e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 800ff74:	8c7ffc04 	addi	r17,r17,-16
 800ff78:	d8c02017 	ldw	r3,128(sp)
 800ff7c:	d8801f17 	ldw	r2,124(sp)
 800ff80:	da000404 	addi	r8,sp,16
 800ff84:	e47fef16 	blt	fp,r17,800ff44 <__alt_data_end+0xf800ff44>
 800ff88:	dc002c17 	ldw	r16,176(sp)
 800ff8c:	8809883a 	mov	r4,r17
 800ff90:	9023883a 	mov	r17,r18
 800ff94:	a825883a 	mov	r18,r21
 800ff98:	202b883a 	mov	r21,r4
 800ff9c:	dac02b17 	ldw	r11,172(sp)
 800ffa0:	1d47883a 	add	r3,r3,r21
 800ffa4:	10800044 	addi	r2,r2,1
 800ffa8:	42c00015 	stw	r11,0(r8)
 800ffac:	45400115 	stw	r21,4(r8)
 800ffb0:	d8c02015 	stw	r3,128(sp)
 800ffb4:	d8801f15 	stw	r2,124(sp)
 800ffb8:	010001c4 	movi	r4,7
 800ffbc:	20818016 	blt	r4,r2,80105c0 <___svfprintf_internal_r+0x15d4>
 800ffc0:	42000204 	addi	r8,r8,8
 800ffc4:	003daa06 	br	800f670 <__alt_data_end+0xf800f670>
 800ffc8:	d9403b17 	ldw	r5,236(sp)
 800ffcc:	b007883a 	mov	r3,r22
 800ffd0:	988003cc 	andi	r2,r19,15
 800ffd4:	e008973a 	slli	r4,fp,28
 800ffd8:	2885883a 	add	r2,r5,r2
 800ffdc:	9826d13a 	srli	r19,r19,4
 800ffe0:	10800003 	ldbu	r2,0(r2)
 800ffe4:	e038d13a 	srli	fp,fp,4
 800ffe8:	18ffffc4 	addi	r3,r3,-1
 800ffec:	24e6b03a 	or	r19,r4,r19
 800fff0:	18800005 	stb	r2,0(r3)
 800fff4:	9f04b03a 	or	r2,r19,fp
 800fff8:	103ff51e 	bne	r2,zero,800ffd0 <__alt_data_end+0xf800ffd0>
 800fffc:	d8c03115 	stw	r3,196(sp)
 8010000:	b0e5c83a 	sub	r18,r22,r3
 8010004:	003d2d06 	br	800f4bc <__alt_data_end+0xf800f4bc>
 8010008:	db003317 	ldw	r12,204(sp)
 801000c:	00800044 	movi	r2,1
 8010010:	18c00044 	addi	r3,r3,1
 8010014:	13014b0e 	bge	r2,r12,8010544 <___svfprintf_internal_r+0x1558>
 8010018:	dc001f17 	ldw	r16,124(sp)
 801001c:	dac03117 	ldw	r11,196(sp)
 8010020:	00800044 	movi	r2,1
 8010024:	84000044 	addi	r16,r16,1
 8010028:	40800115 	stw	r2,4(r8)
 801002c:	42c00015 	stw	r11,0(r8)
 8010030:	d8c02015 	stw	r3,128(sp)
 8010034:	dc001f15 	stw	r16,124(sp)
 8010038:	008001c4 	movi	r2,7
 801003c:	14014e16 	blt	r2,r16,8010578 <___svfprintf_internal_r+0x158c>
 8010040:	42000204 	addi	r8,r8,8
 8010044:	db003917 	ldw	r12,228(sp)
 8010048:	dac03517 	ldw	r11,212(sp)
 801004c:	84000044 	addi	r16,r16,1
 8010050:	1b07883a 	add	r3,r3,r12
 8010054:	42c00015 	stw	r11,0(r8)
 8010058:	43000115 	stw	r12,4(r8)
 801005c:	d8c02015 	stw	r3,128(sp)
 8010060:	dc001f15 	stw	r16,124(sp)
 8010064:	008001c4 	movi	r2,7
 8010068:	14014c16 	blt	r2,r16,801059c <___svfprintf_internal_r+0x15b0>
 801006c:	44800204 	addi	r18,r8,8
 8010070:	d9003717 	ldw	r4,220(sp)
 8010074:	d9403817 	ldw	r5,224(sp)
 8010078:	000d883a 	mov	r6,zero
 801007c:	000f883a 	mov	r7,zero
 8010080:	d8c03e15 	stw	r3,248(sp)
 8010084:	8016cec0 	call	8016cec <__eqdf2>
 8010088:	d8c03e17 	ldw	r3,248(sp)
 801008c:	db003317 	ldw	r12,204(sp)
 8010090:	10009526 	beq	r2,zero,80102e8 <___svfprintf_internal_r+0x12fc>
 8010094:	dac03117 	ldw	r11,196(sp)
 8010098:	60bfffc4 	addi	r2,r12,-1
 801009c:	1887883a 	add	r3,r3,r2
 80100a0:	59000044 	addi	r4,r11,1
 80100a4:	84000044 	addi	r16,r16,1
 80100a8:	90800115 	stw	r2,4(r18)
 80100ac:	91000015 	stw	r4,0(r18)
 80100b0:	d8c02015 	stw	r3,128(sp)
 80100b4:	dc001f15 	stw	r16,124(sp)
 80100b8:	008001c4 	movi	r2,7
 80100bc:	1400b316 	blt	r2,r16,801038c <___svfprintf_internal_r+0x13a0>
 80100c0:	94800204 	addi	r18,r18,8
 80100c4:	dac03a17 	ldw	r11,232(sp)
 80100c8:	dd4022c4 	addi	r21,sp,139
 80100cc:	84000044 	addi	r16,r16,1
 80100d0:	58c7883a 	add	r3,r11,r3
 80100d4:	95400015 	stw	r21,0(r18)
 80100d8:	92c00115 	stw	r11,4(r18)
 80100dc:	d8c02015 	stw	r3,128(sp)
 80100e0:	dc001f15 	stw	r16,124(sp)
 80100e4:	008001c4 	movi	r2,7
 80100e8:	14000e16 	blt	r2,r16,8010124 <___svfprintf_internal_r+0x1138>
 80100ec:	92000204 	addi	r8,r18,8
 80100f0:	003da006 	br	800f774 <__alt_data_end+0xf800f774>
 80100f4:	010200b4 	movhi	r4,2050
 80100f8:	21334984 	addi	r4,r4,-13018
 80100fc:	d9002b15 	stw	r4,172(sp)
 8010100:	dac02b17 	ldw	r11,172(sp)
 8010104:	1c07883a 	add	r3,r3,r16
 8010108:	44000115 	stw	r16,4(r8)
 801010c:	42c00015 	stw	r11,0(r8)
 8010110:	10800044 	addi	r2,r2,1
 8010114:	d8c02015 	stw	r3,128(sp)
 8010118:	d8801f15 	stw	r2,124(sp)
 801011c:	010001c4 	movi	r4,7
 8010120:	20bd930e 	bge	r4,r2,800f770 <__alt_data_end+0xf800f770>
 8010124:	d9002f17 	ldw	r4,188(sp)
 8010128:	b80b883a 	mov	r5,r23
 801012c:	b00d883a 	mov	r6,r22
 8010130:	801394c0 	call	801394c <__ssprint_r>
 8010134:	103c751e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010138:	d8c02017 	ldw	r3,128(sp)
 801013c:	da000404 	addi	r8,sp,16
 8010140:	003d8c06 	br	800f774 <__alt_data_end+0xf800f774>
 8010144:	d9002f17 	ldw	r4,188(sp)
 8010148:	b80b883a 	mov	r5,r23
 801014c:	b00d883a 	mov	r6,r22
 8010150:	801394c0 	call	801394c <__ssprint_r>
 8010154:	103dc326 	beq	r2,zero,800f864 <__alt_data_end+0xf800f864>
 8010158:	003c6c06 	br	800f30c <__alt_data_end+0xf800f30c>
 801015c:	10803fcc 	andi	r2,r2,255
 8010160:	1000201e 	bne	r2,zero,80101e4 <___svfprintf_internal_r+0x11f8>
 8010164:	8880004c 	andi	r2,r17,1
 8010168:	10001e26 	beq	r2,zero,80101e4 <___svfprintf_internal_r+0x11f8>
 801016c:	00800c04 	movi	r2,48
 8010170:	d8c01dc4 	addi	r3,sp,119
 8010174:	d8801dc5 	stb	r2,119(sp)
 8010178:	dc803d17 	ldw	r18,244(sp)
 801017c:	d8c03115 	stw	r3,196(sp)
 8010180:	003cce06 	br	800f4bc <__alt_data_end+0xf800f4bc>
 8010184:	d9002f17 	ldw	r4,188(sp)
 8010188:	b80b883a 	mov	r5,r23
 801018c:	b00d883a 	mov	r6,r22
 8010190:	801394c0 	call	801394c <__ssprint_r>
 8010194:	103c5d1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010198:	d8c02017 	ldw	r3,128(sp)
 801019c:	da000404 	addi	r8,sp,16
 80101a0:	003d6706 	br	800f740 <__alt_data_end+0xf800f740>
 80101a4:	d9002f17 	ldw	r4,188(sp)
 80101a8:	b80b883a 	mov	r5,r23
 80101ac:	b00d883a 	mov	r6,r22
 80101b0:	801394c0 	call	801394c <__ssprint_r>
 80101b4:	103c551e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 80101b8:	d8c02017 	ldw	r3,128(sp)
 80101bc:	da000404 	addi	r8,sp,16
 80101c0:	003d1a06 	br	800f62c <__alt_data_end+0xf800f62c>
 80101c4:	d9002f17 	ldw	r4,188(sp)
 80101c8:	b80b883a 	mov	r5,r23
 80101cc:	b00d883a 	mov	r6,r22
 80101d0:	801394c0 	call	801394c <__ssprint_r>
 80101d4:	103c4d1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 80101d8:	d8c02017 	ldw	r3,128(sp)
 80101dc:	da000404 	addi	r8,sp,16
 80101e0:	003d2006 	br	800f664 <__alt_data_end+0xf800f664>
 80101e4:	0025883a 	mov	r18,zero
 80101e8:	dd803115 	stw	r22,196(sp)
 80101ec:	003cb306 	br	800f4bc <__alt_data_end+0xf800f4bc>
 80101f0:	dc002617 	ldw	r16,152(sp)
 80101f4:	0401480e 	bge	zero,r16,8010718 <___svfprintf_internal_r+0x172c>
 80101f8:	db003117 	ldw	r12,196(sp)
 80101fc:	dac03317 	ldw	r11,204(sp)
 8010200:	62e1883a 	add	r16,r12,r11
 8010204:	db003417 	ldw	r12,208(sp)
 8010208:	5825883a 	mov	r18,r11
 801020c:	62c0010e 	bge	r12,r11,8010214 <___svfprintf_internal_r+0x1228>
 8010210:	6025883a 	mov	r18,r12
 8010214:	04800b0e 	bge	zero,r18,8010244 <___svfprintf_internal_r+0x1258>
 8010218:	d8801f17 	ldw	r2,124(sp)
 801021c:	dac03117 	ldw	r11,196(sp)
 8010220:	1c87883a 	add	r3,r3,r18
 8010224:	10800044 	addi	r2,r2,1
 8010228:	42c00015 	stw	r11,0(r8)
 801022c:	44800115 	stw	r18,4(r8)
 8010230:	d8c02015 	stw	r3,128(sp)
 8010234:	d8801f15 	stw	r2,124(sp)
 8010238:	010001c4 	movi	r4,7
 801023c:	20823f16 	blt	r4,r2,8010b3c <___svfprintf_internal_r+0x1b50>
 8010240:	42000204 	addi	r8,r8,8
 8010244:	90023b16 	blt	r18,zero,8010b34 <___svfprintf_internal_r+0x1b48>
 8010248:	db003417 	ldw	r12,208(sp)
 801024c:	64a5c83a 	sub	r18,r12,r18
 8010250:	0480780e 	bge	zero,r18,8010434 <___svfprintf_internal_r+0x1448>
 8010254:	05400404 	movi	r21,16
 8010258:	d8801f17 	ldw	r2,124(sp)
 801025c:	ac81140e 	bge	r21,r18,80106b0 <___svfprintf_internal_r+0x16c4>
 8010260:	014200b4 	movhi	r5,2050
 8010264:	29734984 	addi	r5,r5,-13018
 8010268:	d9402b15 	stw	r5,172(sp)
 801026c:	070001c4 	movi	fp,7
 8010270:	dcc02f17 	ldw	r19,188(sp)
 8010274:	00000306 	br	8010284 <___svfprintf_internal_r+0x1298>
 8010278:	42000204 	addi	r8,r8,8
 801027c:	94bffc04 	addi	r18,r18,-16
 8010280:	ac810e0e 	bge	r21,r18,80106bc <___svfprintf_internal_r+0x16d0>
 8010284:	18c00404 	addi	r3,r3,16
 8010288:	10800044 	addi	r2,r2,1
 801028c:	45000015 	stw	r20,0(r8)
 8010290:	45400115 	stw	r21,4(r8)
 8010294:	d8c02015 	stw	r3,128(sp)
 8010298:	d8801f15 	stw	r2,124(sp)
 801029c:	e0bff60e 	bge	fp,r2,8010278 <__alt_data_end+0xf8010278>
 80102a0:	9809883a 	mov	r4,r19
 80102a4:	b80b883a 	mov	r5,r23
 80102a8:	b00d883a 	mov	r6,r22
 80102ac:	801394c0 	call	801394c <__ssprint_r>
 80102b0:	103c161e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 80102b4:	d8c02017 	ldw	r3,128(sp)
 80102b8:	d8801f17 	ldw	r2,124(sp)
 80102bc:	da000404 	addi	r8,sp,16
 80102c0:	003fee06 	br	801027c <__alt_data_end+0xf801027c>
 80102c4:	d9002f17 	ldw	r4,188(sp)
 80102c8:	b80b883a 	mov	r5,r23
 80102cc:	b00d883a 	mov	r6,r22
 80102d0:	801394c0 	call	801394c <__ssprint_r>
 80102d4:	103c0d1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 80102d8:	d8c02017 	ldw	r3,128(sp)
 80102dc:	d8802787 	ldb	r2,158(sp)
 80102e0:	da000404 	addi	r8,sp,16
 80102e4:	003cc406 	br	800f5f8 <__alt_data_end+0xf800f5f8>
 80102e8:	657fffc4 	addi	r21,r12,-1
 80102ec:	057f750e 	bge	zero,r21,80100c4 <__alt_data_end+0xf80100c4>
 80102f0:	07000404 	movi	fp,16
 80102f4:	e542ef0e 	bge	fp,r21,8010eb4 <___svfprintf_internal_r+0x1ec8>
 80102f8:	010200b4 	movhi	r4,2050
 80102fc:	21334984 	addi	r4,r4,-13018
 8010300:	d9002b15 	stw	r4,172(sp)
 8010304:	01c001c4 	movi	r7,7
 8010308:	dcc02f17 	ldw	r19,188(sp)
 801030c:	00000306 	br	801031c <___svfprintf_internal_r+0x1330>
 8010310:	ad7ffc04 	addi	r21,r21,-16
 8010314:	94800204 	addi	r18,r18,8
 8010318:	e540130e 	bge	fp,r21,8010368 <___svfprintf_internal_r+0x137c>
 801031c:	18c00404 	addi	r3,r3,16
 8010320:	84000044 	addi	r16,r16,1
 8010324:	95000015 	stw	r20,0(r18)
 8010328:	97000115 	stw	fp,4(r18)
 801032c:	d8c02015 	stw	r3,128(sp)
 8010330:	dc001f15 	stw	r16,124(sp)
 8010334:	3c3ff60e 	bge	r7,r16,8010310 <__alt_data_end+0xf8010310>
 8010338:	9809883a 	mov	r4,r19
 801033c:	b80b883a 	mov	r5,r23
 8010340:	b00d883a 	mov	r6,r22
 8010344:	d9c03e15 	stw	r7,248(sp)
 8010348:	801394c0 	call	801394c <__ssprint_r>
 801034c:	d9c03e17 	ldw	r7,248(sp)
 8010350:	103bee1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010354:	ad7ffc04 	addi	r21,r21,-16
 8010358:	d8c02017 	ldw	r3,128(sp)
 801035c:	dc001f17 	ldw	r16,124(sp)
 8010360:	dc800404 	addi	r18,sp,16
 8010364:	e57fed16 	blt	fp,r21,801031c <__alt_data_end+0xf801031c>
 8010368:	dac02b17 	ldw	r11,172(sp)
 801036c:	1d47883a 	add	r3,r3,r21
 8010370:	84000044 	addi	r16,r16,1
 8010374:	92c00015 	stw	r11,0(r18)
 8010378:	95400115 	stw	r21,4(r18)
 801037c:	d8c02015 	stw	r3,128(sp)
 8010380:	dc001f15 	stw	r16,124(sp)
 8010384:	008001c4 	movi	r2,7
 8010388:	143f4d0e 	bge	r2,r16,80100c0 <__alt_data_end+0xf80100c0>
 801038c:	d9002f17 	ldw	r4,188(sp)
 8010390:	b80b883a 	mov	r5,r23
 8010394:	b00d883a 	mov	r6,r22
 8010398:	801394c0 	call	801394c <__ssprint_r>
 801039c:	103bdb1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 80103a0:	d8c02017 	ldw	r3,128(sp)
 80103a4:	dc001f17 	ldw	r16,124(sp)
 80103a8:	dc800404 	addi	r18,sp,16
 80103ac:	003f4506 	br	80100c4 <__alt_data_end+0xf80100c4>
 80103b0:	00800084 	movi	r2,2
 80103b4:	9f06b03a 	or	r3,r19,fp
 80103b8:	003d3806 	br	800f89c <__alt_data_end+0xf800f89c>
 80103bc:	dac02d17 	ldw	r11,180(sp)
 80103c0:	0039883a 	mov	fp,zero
 80103c4:	0005883a 	mov	r2,zero
 80103c8:	5cc00017 	ldw	r19,0(r11)
 80103cc:	5ac00104 	addi	r11,r11,4
 80103d0:	dac02d15 	stw	r11,180(sp)
 80103d4:	9807883a 	mov	r3,r19
 80103d8:	003d3006 	br	800f89c <__alt_data_end+0xf800f89c>
 80103dc:	1cc00017 	ldw	r19,0(r3)
 80103e0:	dac02d17 	ldw	r11,180(sp)
 80103e4:	9839d7fa 	srai	fp,r19,31
 80103e8:	5ac00104 	addi	r11,r11,4
 80103ec:	dac02d15 	stw	r11,180(sp)
 80103f0:	e005883a 	mov	r2,fp
 80103f4:	003c0a06 	br	800f420 <__alt_data_end+0xf800f420>
 80103f8:	db002d17 	ldw	r12,180(sp)
 80103fc:	0039883a 	mov	fp,zero
 8010400:	00800044 	movi	r2,1
 8010404:	64c00017 	ldw	r19,0(r12)
 8010408:	63000104 	addi	r12,r12,4
 801040c:	db002d15 	stw	r12,180(sp)
 8010410:	9807883a 	mov	r3,r19
 8010414:	003d2106 	br	800f89c <__alt_data_end+0xf800f89c>
 8010418:	d9002f17 	ldw	r4,188(sp)
 801041c:	b80b883a 	mov	r5,r23
 8010420:	b00d883a 	mov	r6,r22
 8010424:	801394c0 	call	801394c <__ssprint_r>
 8010428:	103bb81e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 801042c:	d8c02017 	ldw	r3,128(sp)
 8010430:	da000404 	addi	r8,sp,16
 8010434:	db003117 	ldw	r12,196(sp)
 8010438:	dac03417 	ldw	r11,208(sp)
 801043c:	d8802617 	ldw	r2,152(sp)
 8010440:	62e5883a 	add	r18,r12,r11
 8010444:	db003317 	ldw	r12,204(sp)
 8010448:	13000216 	blt	r2,r12,8010454 <___svfprintf_internal_r+0x1468>
 801044c:	8900004c 	andi	r4,r17,1
 8010450:	20000c26 	beq	r4,zero,8010484 <___svfprintf_internal_r+0x1498>
 8010454:	dac03917 	ldw	r11,228(sp)
 8010458:	d9001f17 	ldw	r4,124(sp)
 801045c:	db003517 	ldw	r12,212(sp)
 8010460:	1ac7883a 	add	r3,r3,r11
 8010464:	21000044 	addi	r4,r4,1
 8010468:	43000015 	stw	r12,0(r8)
 801046c:	42c00115 	stw	r11,4(r8)
 8010470:	d8c02015 	stw	r3,128(sp)
 8010474:	d9001f15 	stw	r4,124(sp)
 8010478:	014001c4 	movi	r5,7
 801047c:	2901b716 	blt	r5,r4,8010b5c <___svfprintf_internal_r+0x1b70>
 8010480:	42000204 	addi	r8,r8,8
 8010484:	dac03317 	ldw	r11,204(sp)
 8010488:	8489c83a 	sub	r4,r16,r18
 801048c:	5885c83a 	sub	r2,r11,r2
 8010490:	1021883a 	mov	r16,r2
 8010494:	2080010e 	bge	r4,r2,801049c <___svfprintf_internal_r+0x14b0>
 8010498:	2021883a 	mov	r16,r4
 801049c:	04000a0e 	bge	zero,r16,80104c8 <___svfprintf_internal_r+0x14dc>
 80104a0:	d9001f17 	ldw	r4,124(sp)
 80104a4:	1c07883a 	add	r3,r3,r16
 80104a8:	44800015 	stw	r18,0(r8)
 80104ac:	21000044 	addi	r4,r4,1
 80104b0:	44000115 	stw	r16,4(r8)
 80104b4:	d8c02015 	stw	r3,128(sp)
 80104b8:	d9001f15 	stw	r4,124(sp)
 80104bc:	014001c4 	movi	r5,7
 80104c0:	2901bf16 	blt	r5,r4,8010bc0 <___svfprintf_internal_r+0x1bd4>
 80104c4:	42000204 	addi	r8,r8,8
 80104c8:	8001bb16 	blt	r16,zero,8010bb8 <___svfprintf_internal_r+0x1bcc>
 80104cc:	1421c83a 	sub	r16,r2,r16
 80104d0:	043ca80e 	bge	zero,r16,800f774 <__alt_data_end+0xf800f774>
 80104d4:	04800404 	movi	r18,16
 80104d8:	d8801f17 	ldw	r2,124(sp)
 80104dc:	943f050e 	bge	r18,r16,80100f4 <__alt_data_end+0xf80100f4>
 80104e0:	014200b4 	movhi	r5,2050
 80104e4:	29734984 	addi	r5,r5,-13018
 80104e8:	d9402b15 	stw	r5,172(sp)
 80104ec:	054001c4 	movi	r21,7
 80104f0:	dcc02f17 	ldw	r19,188(sp)
 80104f4:	00000306 	br	8010504 <___svfprintf_internal_r+0x1518>
 80104f8:	42000204 	addi	r8,r8,8
 80104fc:	843ffc04 	addi	r16,r16,-16
 8010500:	943eff0e 	bge	r18,r16,8010100 <__alt_data_end+0xf8010100>
 8010504:	18c00404 	addi	r3,r3,16
 8010508:	10800044 	addi	r2,r2,1
 801050c:	45000015 	stw	r20,0(r8)
 8010510:	44800115 	stw	r18,4(r8)
 8010514:	d8c02015 	stw	r3,128(sp)
 8010518:	d8801f15 	stw	r2,124(sp)
 801051c:	a8bff60e 	bge	r21,r2,80104f8 <__alt_data_end+0xf80104f8>
 8010520:	9809883a 	mov	r4,r19
 8010524:	b80b883a 	mov	r5,r23
 8010528:	b00d883a 	mov	r6,r22
 801052c:	801394c0 	call	801394c <__ssprint_r>
 8010530:	103b761e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010534:	d8c02017 	ldw	r3,128(sp)
 8010538:	d8801f17 	ldw	r2,124(sp)
 801053c:	da000404 	addi	r8,sp,16
 8010540:	003fee06 	br	80104fc <__alt_data_end+0xf80104fc>
 8010544:	8888703a 	and	r4,r17,r2
 8010548:	203eb31e 	bne	r4,zero,8010018 <__alt_data_end+0xf8010018>
 801054c:	dc001f17 	ldw	r16,124(sp)
 8010550:	db003117 	ldw	r12,196(sp)
 8010554:	40800115 	stw	r2,4(r8)
 8010558:	84000044 	addi	r16,r16,1
 801055c:	43000015 	stw	r12,0(r8)
 8010560:	d8c02015 	stw	r3,128(sp)
 8010564:	dc001f15 	stw	r16,124(sp)
 8010568:	008001c4 	movi	r2,7
 801056c:	143f8716 	blt	r2,r16,801038c <__alt_data_end+0xf801038c>
 8010570:	44800204 	addi	r18,r8,8
 8010574:	003ed306 	br	80100c4 <__alt_data_end+0xf80100c4>
 8010578:	d9002f17 	ldw	r4,188(sp)
 801057c:	b80b883a 	mov	r5,r23
 8010580:	b00d883a 	mov	r6,r22
 8010584:	801394c0 	call	801394c <__ssprint_r>
 8010588:	103b601e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 801058c:	d8c02017 	ldw	r3,128(sp)
 8010590:	dc001f17 	ldw	r16,124(sp)
 8010594:	da000404 	addi	r8,sp,16
 8010598:	003eaa06 	br	8010044 <__alt_data_end+0xf8010044>
 801059c:	d9002f17 	ldw	r4,188(sp)
 80105a0:	b80b883a 	mov	r5,r23
 80105a4:	b00d883a 	mov	r6,r22
 80105a8:	801394c0 	call	801394c <__ssprint_r>
 80105ac:	103b571e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 80105b0:	d8c02017 	ldw	r3,128(sp)
 80105b4:	dc001f17 	ldw	r16,124(sp)
 80105b8:	dc800404 	addi	r18,sp,16
 80105bc:	003eac06 	br	8010070 <__alt_data_end+0xf8010070>
 80105c0:	d9002f17 	ldw	r4,188(sp)
 80105c4:	b80b883a 	mov	r5,r23
 80105c8:	b00d883a 	mov	r6,r22
 80105cc:	801394c0 	call	801394c <__ssprint_r>
 80105d0:	103b4e1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 80105d4:	d8c02017 	ldw	r3,128(sp)
 80105d8:	da000404 	addi	r8,sp,16
 80105dc:	003c2406 	br	800f670 <__alt_data_end+0xf800f670>
 80105e0:	da004015 	stw	r8,256(sp)
 80105e4:	da403f15 	stw	r9,252(sp)
 80105e8:	800b8500 	call	800b850 <__fpclassifyd>
 80105ec:	da004017 	ldw	r8,256(sp)
 80105f0:	da403f17 	ldw	r9,252(sp)
 80105f4:	1000951e 	bne	r2,zero,801084c <___svfprintf_internal_r+0x1860>
 80105f8:	008011c4 	movi	r2,71
 80105fc:	1400fb16 	blt	r2,r16,80109ec <___svfprintf_internal_r+0x1a00>
 8010600:	030200b4 	movhi	r12,2050
 8010604:	63322c04 	addi	r12,r12,-14160
 8010608:	db003115 	stw	r12,196(sp)
 801060c:	00c000c4 	movi	r3,3
 8010610:	00bfdfc4 	movi	r2,-129
 8010614:	d8c02a15 	stw	r3,168(sp)
 8010618:	88a2703a 	and	r17,r17,r2
 801061c:	dd402783 	ldbu	r21,158(sp)
 8010620:	dcc02d15 	stw	r19,180(sp)
 8010624:	1825883a 	mov	r18,r3
 8010628:	d8003215 	stw	zero,200(sp)
 801062c:	d8003415 	stw	zero,208(sp)
 8010630:	003ba706 	br	800f4d0 <__alt_data_end+0xf800f4d0>
 8010634:	8880040c 	andi	r2,r17,16
 8010638:	1000091e 	bne	r2,zero,8010660 <___svfprintf_internal_r+0x1674>
 801063c:	8c40100c 	andi	r17,r17,64
 8010640:	88000726 	beq	r17,zero,8010660 <___svfprintf_internal_r+0x1674>
 8010644:	db002d17 	ldw	r12,180(sp)
 8010648:	dac03017 	ldw	r11,192(sp)
 801064c:	60800017 	ldw	r2,0(r12)
 8010650:	63000104 	addi	r12,r12,4
 8010654:	db002d15 	stw	r12,180(sp)
 8010658:	12c0000d 	sth	r11,0(r2)
 801065c:	003a8f06 	br	800f09c <__alt_data_end+0xf800f09c>
 8010660:	db002d17 	ldw	r12,180(sp)
 8010664:	dac03017 	ldw	r11,192(sp)
 8010668:	60800017 	ldw	r2,0(r12)
 801066c:	63000104 	addi	r12,r12,4
 8010670:	db002d15 	stw	r12,180(sp)
 8010674:	12c00015 	stw	r11,0(r2)
 8010678:	003a8806 	br	800f09c <__alt_data_end+0xf800f09c>
 801067c:	88c0100c 	andi	r3,r17,64
 8010680:	1800e926 	beq	r3,zero,8010a28 <___svfprintf_internal_r+0x1a3c>
 8010684:	dac02d17 	ldw	r11,180(sp)
 8010688:	14c0000b 	ldhu	r19,0(r2)
 801068c:	0039883a 	mov	fp,zero
 8010690:	5ac00104 	addi	r11,r11,4
 8010694:	dac02d15 	stw	r11,180(sp)
 8010698:	003d1406 	br	800faec <__alt_data_end+0xf800faec>
 801069c:	1c000007 	ldb	r16,0(r3)
 80106a0:	1805883a 	mov	r2,r3
 80106a4:	003aa706 	br	800f144 <__alt_data_end+0xf800f144>
 80106a8:	00800084 	movi	r2,2
 80106ac:	003c7b06 	br	800f89c <__alt_data_end+0xf800f89c>
 80106b0:	010200b4 	movhi	r4,2050
 80106b4:	21334984 	addi	r4,r4,-13018
 80106b8:	d9002b15 	stw	r4,172(sp)
 80106bc:	dac02b17 	ldw	r11,172(sp)
 80106c0:	1c87883a 	add	r3,r3,r18
 80106c4:	10800044 	addi	r2,r2,1
 80106c8:	42c00015 	stw	r11,0(r8)
 80106cc:	44800115 	stw	r18,4(r8)
 80106d0:	d8c02015 	stw	r3,128(sp)
 80106d4:	d8801f15 	stw	r2,124(sp)
 80106d8:	010001c4 	movi	r4,7
 80106dc:	20bf4e16 	blt	r4,r2,8010418 <__alt_data_end+0xf8010418>
 80106e0:	42000204 	addi	r8,r8,8
 80106e4:	003f5306 	br	8010434 <__alt_data_end+0xf8010434>
 80106e8:	010200b4 	movhi	r4,2050
 80106ec:	21334984 	addi	r4,r4,-13018
 80106f0:	d9002b15 	stw	r4,172(sp)
 80106f4:	003c0806 	br	800f718 <__alt_data_end+0xf800f718>
 80106f8:	d9002f17 	ldw	r4,188(sp)
 80106fc:	b80b883a 	mov	r5,r23
 8010700:	b00d883a 	mov	r6,r22
 8010704:	801394c0 	call	801394c <__ssprint_r>
 8010708:	103b001e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 801070c:	d8c02017 	ldw	r3,128(sp)
 8010710:	da000404 	addi	r8,sp,16
 8010714:	003dc606 	br	800fe30 <__alt_data_end+0xf800fe30>
 8010718:	d8801f17 	ldw	r2,124(sp)
 801071c:	030200b4 	movhi	r12,2050
 8010720:	01000044 	movi	r4,1
 8010724:	18c00044 	addi	r3,r3,1
 8010728:	10800044 	addi	r2,r2,1
 801072c:	63323a04 	addi	r12,r12,-14104
 8010730:	41000115 	stw	r4,4(r8)
 8010734:	43000015 	stw	r12,0(r8)
 8010738:	d8c02015 	stw	r3,128(sp)
 801073c:	d8801f15 	stw	r2,124(sp)
 8010740:	010001c4 	movi	r4,7
 8010744:	2080ad16 	blt	r4,r2,80109fc <___svfprintf_internal_r+0x1a10>
 8010748:	42000204 	addi	r8,r8,8
 801074c:	8000041e 	bne	r16,zero,8010760 <___svfprintf_internal_r+0x1774>
 8010750:	dac03317 	ldw	r11,204(sp)
 8010754:	5800021e 	bne	r11,zero,8010760 <___svfprintf_internal_r+0x1774>
 8010758:	8880004c 	andi	r2,r17,1
 801075c:	103c0526 	beq	r2,zero,800f774 <__alt_data_end+0xf800f774>
 8010760:	db003917 	ldw	r12,228(sp)
 8010764:	d8801f17 	ldw	r2,124(sp)
 8010768:	dac03517 	ldw	r11,212(sp)
 801076c:	1b07883a 	add	r3,r3,r12
 8010770:	10800044 	addi	r2,r2,1
 8010774:	42c00015 	stw	r11,0(r8)
 8010778:	43000115 	stw	r12,4(r8)
 801077c:	d8c02015 	stw	r3,128(sp)
 8010780:	d8801f15 	stw	r2,124(sp)
 8010784:	010001c4 	movi	r4,7
 8010788:	20818816 	blt	r4,r2,8010dac <___svfprintf_internal_r+0x1dc0>
 801078c:	42000204 	addi	r8,r8,8
 8010790:	0421c83a 	sub	r16,zero,r16
 8010794:	0400bc0e 	bge	zero,r16,8010a88 <___svfprintf_internal_r+0x1a9c>
 8010798:	04800404 	movi	r18,16
 801079c:	9400f80e 	bge	r18,r16,8010b80 <___svfprintf_internal_r+0x1b94>
 80107a0:	010200b4 	movhi	r4,2050
 80107a4:	21334984 	addi	r4,r4,-13018
 80107a8:	d9002b15 	stw	r4,172(sp)
 80107ac:	054001c4 	movi	r21,7
 80107b0:	dcc02f17 	ldw	r19,188(sp)
 80107b4:	00000306 	br	80107c4 <___svfprintf_internal_r+0x17d8>
 80107b8:	42000204 	addi	r8,r8,8
 80107bc:	843ffc04 	addi	r16,r16,-16
 80107c0:	9400f20e 	bge	r18,r16,8010b8c <___svfprintf_internal_r+0x1ba0>
 80107c4:	18c00404 	addi	r3,r3,16
 80107c8:	10800044 	addi	r2,r2,1
 80107cc:	45000015 	stw	r20,0(r8)
 80107d0:	44800115 	stw	r18,4(r8)
 80107d4:	d8c02015 	stw	r3,128(sp)
 80107d8:	d8801f15 	stw	r2,124(sp)
 80107dc:	a8bff60e 	bge	r21,r2,80107b8 <__alt_data_end+0xf80107b8>
 80107e0:	9809883a 	mov	r4,r19
 80107e4:	b80b883a 	mov	r5,r23
 80107e8:	b00d883a 	mov	r6,r22
 80107ec:	801394c0 	call	801394c <__ssprint_r>
 80107f0:	103ac61e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 80107f4:	d8c02017 	ldw	r3,128(sp)
 80107f8:	d8801f17 	ldw	r2,124(sp)
 80107fc:	da000404 	addi	r8,sp,16
 8010800:	003fee06 	br	80107bc <__alt_data_end+0xf80107bc>
 8010804:	db002e17 	ldw	r12,184(sp)
 8010808:	1805883a 	mov	r2,r3
 801080c:	dac02d15 	stw	r11,180(sp)
 8010810:	0319c83a 	sub	r12,zero,r12
 8010814:	db002e15 	stw	r12,184(sp)
 8010818:	003ad106 	br	800f360 <__alt_data_end+0xf800f360>
 801081c:	18800044 	addi	r2,r3,1
 8010820:	8c400814 	ori	r17,r17,32
 8010824:	1c000047 	ldb	r16,1(r3)
 8010828:	003a4606 	br	800f144 <__alt_data_end+0xf800f144>
 801082c:	d9002f17 	ldw	r4,188(sp)
 8010830:	b80b883a 	mov	r5,r23
 8010834:	b00d883a 	mov	r6,r22
 8010838:	801394c0 	call	801394c <__ssprint_r>
 801083c:	103ab31e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010840:	d8c02017 	ldw	r3,128(sp)
 8010844:	da000404 	addi	r8,sp,16
 8010848:	003d8a06 	br	800fe74 <__alt_data_end+0xf800fe74>
 801084c:	057ff7c4 	movi	r21,-33
 8010850:	00bfffc4 	movi	r2,-1
 8010854:	856a703a 	and	r21,r16,r21
 8010858:	48807126 	beq	r9,r2,8010a20 <___svfprintf_internal_r+0x1a34>
 801085c:	008011c4 	movi	r2,71
 8010860:	a8814f26 	beq	r21,r2,8010da0 <___svfprintf_internal_r+0x1db4>
 8010864:	db003817 	ldw	r12,224(sp)
 8010868:	8ac04014 	ori	r11,r17,256
 801086c:	dac02d15 	stw	r11,180(sp)
 8010870:	60015816 	blt	r12,zero,8010dd4 <___svfprintf_internal_r+0x1de8>
 8010874:	dc803817 	ldw	r18,224(sp)
 8010878:	d8002a05 	stb	zero,168(sp)
 801087c:	00801984 	movi	r2,102
 8010880:	80808c26 	beq	r16,r2,8010ab4 <___svfprintf_internal_r+0x1ac8>
 8010884:	00801184 	movi	r2,70
 8010888:	80808a26 	beq	r16,r2,8010ab4 <___svfprintf_internal_r+0x1ac8>
 801088c:	00801144 	movi	r2,69
 8010890:	a8815426 	beq	r21,r2,8010de4 <___svfprintf_internal_r+0x1df8>
 8010894:	4839883a 	mov	fp,r9
 8010898:	d8802604 	addi	r2,sp,152
 801089c:	d8800115 	stw	r2,4(sp)
 80108a0:	d9002f17 	ldw	r4,188(sp)
 80108a4:	d8802504 	addi	r2,sp,148
 80108a8:	d9403717 	ldw	r5,220(sp)
 80108ac:	d8800215 	stw	r2,8(sp)
 80108b0:	d8802104 	addi	r2,sp,132
 80108b4:	df000015 	stw	fp,0(sp)
 80108b8:	d8800315 	stw	r2,12(sp)
 80108bc:	900d883a 	mov	r6,r18
 80108c0:	01c00084 	movi	r7,2
 80108c4:	da004015 	stw	r8,256(sp)
 80108c8:	da403f15 	stw	r9,252(sp)
 80108cc:	8006f8c0 	call	8006f8c <_dtoa_r>
 80108d0:	d8803115 	stw	r2,196(sp)
 80108d4:	008019c4 	movi	r2,103
 80108d8:	da004017 	ldw	r8,256(sp)
 80108dc:	da403f17 	ldw	r9,252(sp)
 80108e0:	80800226 	beq	r16,r2,80108ec <___svfprintf_internal_r+0x1900>
 80108e4:	008011c4 	movi	r2,71
 80108e8:	8080841e 	bne	r16,r2,8010afc <___svfprintf_internal_r+0x1b10>
 80108ec:	8880004c 	andi	r2,r17,1
 80108f0:	10015126 	beq	r2,zero,8010e38 <___svfprintf_internal_r+0x1e4c>
 80108f4:	db003117 	ldw	r12,196(sp)
 80108f8:	6715883a 	add	r10,r12,fp
 80108fc:	d9003717 	ldw	r4,220(sp)
 8010900:	900b883a 	mov	r5,r18
 8010904:	000d883a 	mov	r6,zero
 8010908:	000f883a 	mov	r7,zero
 801090c:	da004015 	stw	r8,256(sp)
 8010910:	da403f15 	stw	r9,252(sp)
 8010914:	da803e15 	stw	r10,248(sp)
 8010918:	8016cec0 	call	8016cec <__eqdf2>
 801091c:	da004017 	ldw	r8,256(sp)
 8010920:	da403f17 	ldw	r9,252(sp)
 8010924:	da803e17 	ldw	r10,248(sp)
 8010928:	1000d926 	beq	r2,zero,8010c90 <___svfprintf_internal_r+0x1ca4>
 801092c:	d8802117 	ldw	r2,132(sp)
 8010930:	1280062e 	bgeu	r2,r10,801094c <___svfprintf_internal_r+0x1960>
 8010934:	01000c04 	movi	r4,48
 8010938:	10c00044 	addi	r3,r2,1
 801093c:	d8c02115 	stw	r3,132(sp)
 8010940:	11000005 	stb	r4,0(r2)
 8010944:	d8802117 	ldw	r2,132(sp)
 8010948:	12bffb36 	bltu	r2,r10,8010938 <__alt_data_end+0xf8010938>
 801094c:	db003117 	ldw	r12,196(sp)
 8010950:	1305c83a 	sub	r2,r2,r12
 8010954:	d8803315 	stw	r2,204(sp)
 8010958:	008011c4 	movi	r2,71
 801095c:	a880b626 	beq	r21,r2,8010c38 <___svfprintf_internal_r+0x1c4c>
 8010960:	00801944 	movi	r2,101
 8010964:	14017e0e 	bge	r2,r16,8010f60 <___svfprintf_internal_r+0x1f74>
 8010968:	00801984 	movi	r2,102
 801096c:	80812826 	beq	r16,r2,8010e10 <___svfprintf_internal_r+0x1e24>
 8010970:	db002617 	ldw	r12,152(sp)
 8010974:	db003415 	stw	r12,208(sp)
 8010978:	db003417 	ldw	r12,208(sp)
 801097c:	dac03317 	ldw	r11,204(sp)
 8010980:	62c11a16 	blt	r12,r11,8010dec <___svfprintf_internal_r+0x1e00>
 8010984:	8c40004c 	andi	r17,r17,1
 8010988:	88013d1e 	bne	r17,zero,8010e80 <___svfprintf_internal_r+0x1e94>
 801098c:	6005883a 	mov	r2,r12
 8010990:	60012716 	blt	r12,zero,8010e30 <___svfprintf_internal_r+0x1e44>
 8010994:	dc803417 	ldw	r18,208(sp)
 8010998:	df002a07 	ldb	fp,168(sp)
 801099c:	e000b01e 	bne	fp,zero,8010c60 <___svfprintf_internal_r+0x1c74>
 80109a0:	dc402d17 	ldw	r17,180(sp)
 80109a4:	dd402783 	ldbu	r21,158(sp)
 80109a8:	d8802a15 	stw	r2,168(sp)
 80109ac:	dcc02d15 	stw	r19,180(sp)
 80109b0:	d8003215 	stw	zero,200(sp)
 80109b4:	003ac606 	br	800f4d0 <__alt_data_end+0xf800f4d0>
 80109b8:	008200b4 	movhi	r2,2050
 80109bc:	10b22a04 	addi	r2,r2,-14168
 80109c0:	d8803115 	stw	r2,196(sp)
 80109c4:	003be506 	br	800f95c <__alt_data_end+0xf800f95c>
 80109c8:	d9002f17 	ldw	r4,188(sp)
 80109cc:	04001004 	movi	r16,64
 80109d0:	800b883a 	mov	r5,r16
 80109d4:	80025d00 	call	80025d0 <_malloc_r>
 80109d8:	b8800015 	stw	r2,0(r23)
 80109dc:	b8800415 	stw	r2,16(r23)
 80109e0:	10016126 	beq	r2,zero,8010f68 <___svfprintf_internal_r+0x1f7c>
 80109e4:	bc000515 	stw	r16,20(r23)
 80109e8:	00399a06 	br	800f054 <__alt_data_end+0xf800f054>
 80109ec:	008200b4 	movhi	r2,2050
 80109f0:	10b22d04 	addi	r2,r2,-14156
 80109f4:	d8803115 	stw	r2,196(sp)
 80109f8:	003f0406 	br	801060c <__alt_data_end+0xf801060c>
 80109fc:	d9002f17 	ldw	r4,188(sp)
 8010a00:	b80b883a 	mov	r5,r23
 8010a04:	b00d883a 	mov	r6,r22
 8010a08:	801394c0 	call	801394c <__ssprint_r>
 8010a0c:	103a3f1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010a10:	dc002617 	ldw	r16,152(sp)
 8010a14:	d8c02017 	ldw	r3,128(sp)
 8010a18:	da000404 	addi	r8,sp,16
 8010a1c:	003f4b06 	br	801074c <__alt_data_end+0xf801074c>
 8010a20:	02400184 	movi	r9,6
 8010a24:	003f8f06 	br	8010864 <__alt_data_end+0xf8010864>
 8010a28:	db002d17 	ldw	r12,180(sp)
 8010a2c:	14c00017 	ldw	r19,0(r2)
 8010a30:	0039883a 	mov	fp,zero
 8010a34:	63000104 	addi	r12,r12,4
 8010a38:	db002d15 	stw	r12,180(sp)
 8010a3c:	003c2b06 	br	800faec <__alt_data_end+0xf800faec>
 8010a40:	d8c03117 	ldw	r3,196(sp)
 8010a44:	b0e5c83a 	sub	r18,r22,r3
 8010a48:	003a9c06 	br	800f4bc <__alt_data_end+0xf800f4bc>
 8010a4c:	da004015 	stw	r8,256(sp)
 8010a50:	800338c0 	call	800338c <strlen>
 8010a54:	1025883a 	mov	r18,r2
 8010a58:	da004017 	ldw	r8,256(sp)
 8010a5c:	903c450e 	bge	r18,zero,800fb74 <__alt_data_end+0xf800fb74>
 8010a60:	0005883a 	mov	r2,zero
 8010a64:	003c4306 	br	800fb74 <__alt_data_end+0xf800fb74>
 8010a68:	d9002f17 	ldw	r4,188(sp)
 8010a6c:	b80b883a 	mov	r5,r23
 8010a70:	b00d883a 	mov	r6,r22
 8010a74:	801394c0 	call	801394c <__ssprint_r>
 8010a78:	103a241e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010a7c:	d8c02017 	ldw	r3,128(sp)
 8010a80:	d8801f17 	ldw	r2,124(sp)
 8010a84:	da000404 	addi	r8,sp,16
 8010a88:	db003317 	ldw	r12,204(sp)
 8010a8c:	dac03117 	ldw	r11,196(sp)
 8010a90:	10800044 	addi	r2,r2,1
 8010a94:	60c7883a 	add	r3,r12,r3
 8010a98:	42c00015 	stw	r11,0(r8)
 8010a9c:	43000115 	stw	r12,4(r8)
 8010aa0:	d8c02015 	stw	r3,128(sp)
 8010aa4:	d8801f15 	stw	r2,124(sp)
 8010aa8:	010001c4 	movi	r4,7
 8010aac:	20bb300e 	bge	r4,r2,800f770 <__alt_data_end+0xf800f770>
 8010ab0:	003d9c06 	br	8010124 <__alt_data_end+0xf8010124>
 8010ab4:	d8802604 	addi	r2,sp,152
 8010ab8:	d8800115 	stw	r2,4(sp)
 8010abc:	d9002f17 	ldw	r4,188(sp)
 8010ac0:	d8802504 	addi	r2,sp,148
 8010ac4:	d9403717 	ldw	r5,220(sp)
 8010ac8:	d8800215 	stw	r2,8(sp)
 8010acc:	d8802104 	addi	r2,sp,132
 8010ad0:	da400015 	stw	r9,0(sp)
 8010ad4:	d8800315 	stw	r2,12(sp)
 8010ad8:	900d883a 	mov	r6,r18
 8010adc:	01c000c4 	movi	r7,3
 8010ae0:	da004015 	stw	r8,256(sp)
 8010ae4:	da403f15 	stw	r9,252(sp)
 8010ae8:	8006f8c0 	call	8006f8c <_dtoa_r>
 8010aec:	da403f17 	ldw	r9,252(sp)
 8010af0:	da004017 	ldw	r8,256(sp)
 8010af4:	d8803115 	stw	r2,196(sp)
 8010af8:	4839883a 	mov	fp,r9
 8010afc:	dac03117 	ldw	r11,196(sp)
 8010b00:	00801184 	movi	r2,70
 8010b04:	5f15883a 	add	r10,r11,fp
 8010b08:	a8bf7c1e 	bne	r21,r2,80108fc <__alt_data_end+0xf80108fc>
 8010b0c:	59000007 	ldb	r4,0(r11)
 8010b10:	00800c04 	movi	r2,48
 8010b14:	2080ca26 	beq	r4,r2,8010e40 <___svfprintf_internal_r+0x1e54>
 8010b18:	d8c02617 	ldw	r3,152(sp)
 8010b1c:	50d5883a 	add	r10,r10,r3
 8010b20:	003f7606 	br	80108fc <__alt_data_end+0xf80108fc>
 8010b24:	010200b4 	movhi	r4,2050
 8010b28:	21334d84 	addi	r4,r4,-13002
 8010b2c:	d9003615 	stw	r4,216(sp)
 8010b30:	003aa606 	br	800f5cc <__alt_data_end+0xf800f5cc>
 8010b34:	0025883a 	mov	r18,zero
 8010b38:	003dc306 	br	8010248 <__alt_data_end+0xf8010248>
 8010b3c:	d9002f17 	ldw	r4,188(sp)
 8010b40:	b80b883a 	mov	r5,r23
 8010b44:	b00d883a 	mov	r6,r22
 8010b48:	801394c0 	call	801394c <__ssprint_r>
 8010b4c:	1039ef1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010b50:	d8c02017 	ldw	r3,128(sp)
 8010b54:	da000404 	addi	r8,sp,16
 8010b58:	003dba06 	br	8010244 <__alt_data_end+0xf8010244>
 8010b5c:	d9002f17 	ldw	r4,188(sp)
 8010b60:	b80b883a 	mov	r5,r23
 8010b64:	b00d883a 	mov	r6,r22
 8010b68:	801394c0 	call	801394c <__ssprint_r>
 8010b6c:	1039e71e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010b70:	d8802617 	ldw	r2,152(sp)
 8010b74:	d8c02017 	ldw	r3,128(sp)
 8010b78:	da000404 	addi	r8,sp,16
 8010b7c:	003e4106 	br	8010484 <__alt_data_end+0xf8010484>
 8010b80:	030200b4 	movhi	r12,2050
 8010b84:	63334984 	addi	r12,r12,-13018
 8010b88:	db002b15 	stw	r12,172(sp)
 8010b8c:	dac02b17 	ldw	r11,172(sp)
 8010b90:	1c07883a 	add	r3,r3,r16
 8010b94:	10800044 	addi	r2,r2,1
 8010b98:	42c00015 	stw	r11,0(r8)
 8010b9c:	44000115 	stw	r16,4(r8)
 8010ba0:	d8c02015 	stw	r3,128(sp)
 8010ba4:	d8801f15 	stw	r2,124(sp)
 8010ba8:	010001c4 	movi	r4,7
 8010bac:	20bfae16 	blt	r4,r2,8010a68 <__alt_data_end+0xf8010a68>
 8010bb0:	42000204 	addi	r8,r8,8
 8010bb4:	003fb406 	br	8010a88 <__alt_data_end+0xf8010a88>
 8010bb8:	0021883a 	mov	r16,zero
 8010bbc:	003e4306 	br	80104cc <__alt_data_end+0xf80104cc>
 8010bc0:	d9002f17 	ldw	r4,188(sp)
 8010bc4:	b80b883a 	mov	r5,r23
 8010bc8:	b00d883a 	mov	r6,r22
 8010bcc:	801394c0 	call	801394c <__ssprint_r>
 8010bd0:	1039ce1e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010bd4:	d8802617 	ldw	r2,152(sp)
 8010bd8:	db003317 	ldw	r12,204(sp)
 8010bdc:	d8c02017 	ldw	r3,128(sp)
 8010be0:	da000404 	addi	r8,sp,16
 8010be4:	6085c83a 	sub	r2,r12,r2
 8010be8:	003e3706 	br	80104c8 <__alt_data_end+0xf80104c8>
 8010bec:	00800184 	movi	r2,6
 8010bf0:	1240012e 	bgeu	r2,r9,8010bf8 <___svfprintf_internal_r+0x1c0c>
 8010bf4:	1013883a 	mov	r9,r2
 8010bf8:	4825883a 	mov	r18,r9
 8010bfc:	4805883a 	mov	r2,r9
 8010c00:	4800a416 	blt	r9,zero,8010e94 <___svfprintf_internal_r+0x1ea8>
 8010c04:	d8802a15 	stw	r2,168(sp)
 8010c08:	008200b4 	movhi	r2,2050
 8010c0c:	10b23804 	addi	r2,r2,-14112
 8010c10:	d8803115 	stw	r2,196(sp)
 8010c14:	dcc02d15 	stw	r19,180(sp)
 8010c18:	d8003215 	stw	zero,200(sp)
 8010c1c:	d8003415 	stw	zero,208(sp)
 8010c20:	0005883a 	mov	r2,zero
 8010c24:	003a3106 	br	800f4ec <__alt_data_end+0xf800f4ec>
 8010c28:	030200b4 	movhi	r12,2050
 8010c2c:	63334d84 	addi	r12,r12,-13002
 8010c30:	db003615 	stw	r12,216(sp)
 8010c34:	003af406 	br	800f808 <__alt_data_end+0xf800f808>
 8010c38:	d8c02617 	ldw	r3,152(sp)
 8010c3c:	00bfff44 	movi	r2,-3
 8010c40:	18801516 	blt	r3,r2,8010c98 <___svfprintf_internal_r+0x1cac>
 8010c44:	48c01416 	blt	r9,r3,8010c98 <___svfprintf_internal_r+0x1cac>
 8010c48:	d8c03415 	stw	r3,208(sp)
 8010c4c:	040019c4 	movi	r16,103
 8010c50:	003f4906 	br	8010978 <__alt_data_end+0xf8010978>
 8010c54:	05400b44 	movi	r21,45
 8010c58:	dd402785 	stb	r21,158(sp)
 8010c5c:	003b3a06 	br	800f948 <__alt_data_end+0xf800f948>
 8010c60:	00c00b44 	movi	r3,45
 8010c64:	d8802a15 	stw	r2,168(sp)
 8010c68:	dc402d17 	ldw	r17,180(sp)
 8010c6c:	d8c02785 	stb	r3,158(sp)
 8010c70:	dcc02d15 	stw	r19,180(sp)
 8010c74:	d8003215 	stw	zero,200(sp)
 8010c78:	00800b44 	movi	r2,45
 8010c7c:	003a1806 	br	800f4e0 <__alt_data_end+0xf800f4e0>
 8010c80:	010200b4 	movhi	r4,2050
 8010c84:	21334984 	addi	r4,r4,-13018
 8010c88:	d9002b15 	stw	r4,172(sp)
 8010c8c:	003cc306 	br	800ff9c <__alt_data_end+0xf800ff9c>
 8010c90:	5005883a 	mov	r2,r10
 8010c94:	003f2d06 	br	801094c <__alt_data_end+0xf801094c>
 8010c98:	843fff84 	addi	r16,r16,-2
 8010c9c:	1f3fffc4 	addi	fp,r3,-1
 8010ca0:	df002615 	stw	fp,152(sp)
 8010ca4:	dc0022c5 	stb	r16,139(sp)
 8010ca8:	e000a216 	blt	fp,zero,8010f34 <___svfprintf_internal_r+0x1f48>
 8010cac:	00800ac4 	movi	r2,43
 8010cb0:	d8802305 	stb	r2,140(sp)
 8010cb4:	00800244 	movi	r2,9
 8010cb8:	1700820e 	bge	r2,fp,8010ec4 <___svfprintf_internal_r+0x1ed8>
 8010cbc:	dd4022c4 	addi	r21,sp,139
 8010cc0:	dc002b15 	stw	r16,172(sp)
 8010cc4:	8825883a 	mov	r18,r17
 8010cc8:	a821883a 	mov	r16,r21
 8010ccc:	4023883a 	mov	r17,r8
 8010cd0:	e009883a 	mov	r4,fp
 8010cd4:	01400284 	movi	r5,10
 8010cd8:	80024340 	call	8002434 <__modsi3>
 8010cdc:	10800c04 	addi	r2,r2,48
 8010ce0:	843fffc4 	addi	r16,r16,-1
 8010ce4:	e009883a 	mov	r4,fp
 8010ce8:	01400284 	movi	r5,10
 8010cec:	80800005 	stb	r2,0(r16)
 8010cf0:	80023e00 	call	80023e0 <__divsi3>
 8010cf4:	1039883a 	mov	fp,r2
 8010cf8:	00800244 	movi	r2,9
 8010cfc:	173ff416 	blt	r2,fp,8010cd0 <__alt_data_end+0xf8010cd0>
 8010d00:	8811883a 	mov	r8,r17
 8010d04:	e0800c04 	addi	r2,fp,48
 8010d08:	9023883a 	mov	r17,r18
 8010d0c:	8025883a 	mov	r18,r16
 8010d10:	913fffc4 	addi	r4,r18,-1
 8010d14:	90bfffc5 	stb	r2,-1(r18)
 8010d18:	dc002b17 	ldw	r16,172(sp)
 8010d1c:	25408e2e 	bgeu	r4,r21,8010f58 <___svfprintf_internal_r+0x1f6c>
 8010d20:	d9402384 	addi	r5,sp,142
 8010d24:	2c8bc83a 	sub	r5,r5,r18
 8010d28:	d8c02344 	addi	r3,sp,141
 8010d2c:	a94b883a 	add	r5,r21,r5
 8010d30:	00000106 	br	8010d38 <___svfprintf_internal_r+0x1d4c>
 8010d34:	20800003 	ldbu	r2,0(r4)
 8010d38:	18800005 	stb	r2,0(r3)
 8010d3c:	18c00044 	addi	r3,r3,1
 8010d40:	21000044 	addi	r4,r4,1
 8010d44:	197ffb1e 	bne	r3,r5,8010d34 <__alt_data_end+0xf8010d34>
 8010d48:	d8802304 	addi	r2,sp,140
 8010d4c:	1485c83a 	sub	r2,r2,r18
 8010d50:	d8c02344 	addi	r3,sp,141
 8010d54:	1885883a 	add	r2,r3,r2
 8010d58:	dac03317 	ldw	r11,204(sp)
 8010d5c:	156bc83a 	sub	r21,r2,r21
 8010d60:	dd403a15 	stw	r21,232(sp)
 8010d64:	00800044 	movi	r2,1
 8010d68:	5d65883a 	add	r18,r11,r21
 8010d6c:	12c0770e 	bge	r2,r11,8010f4c <___svfprintf_internal_r+0x1f60>
 8010d70:	94800044 	addi	r18,r18,1
 8010d74:	9005883a 	mov	r2,r18
 8010d78:	90007216 	blt	r18,zero,8010f44 <___svfprintf_internal_r+0x1f58>
 8010d7c:	d8003415 	stw	zero,208(sp)
 8010d80:	003f0506 	br	8010998 <__alt_data_end+0xf8010998>
 8010d84:	da402a15 	stw	r9,168(sp)
 8010d88:	dd402783 	ldbu	r21,158(sp)
 8010d8c:	4825883a 	mov	r18,r9
 8010d90:	dcc02d15 	stw	r19,180(sp)
 8010d94:	d8003215 	stw	zero,200(sp)
 8010d98:	d8003415 	stw	zero,208(sp)
 8010d9c:	0039cc06 	br	800f4d0 <__alt_data_end+0xf800f4d0>
 8010da0:	483eb01e 	bne	r9,zero,8010864 <__alt_data_end+0xf8010864>
 8010da4:	9013883a 	mov	r9,r18
 8010da8:	003eae06 	br	8010864 <__alt_data_end+0xf8010864>
 8010dac:	d9002f17 	ldw	r4,188(sp)
 8010db0:	b80b883a 	mov	r5,r23
 8010db4:	b00d883a 	mov	r6,r22
 8010db8:	801394c0 	call	801394c <__ssprint_r>
 8010dbc:	1039531e 	bne	r2,zero,800f30c <__alt_data_end+0xf800f30c>
 8010dc0:	dc002617 	ldw	r16,152(sp)
 8010dc4:	d8c02017 	ldw	r3,128(sp)
 8010dc8:	d8801f17 	ldw	r2,124(sp)
 8010dcc:	da000404 	addi	r8,sp,16
 8010dd0:	003e6f06 	br	8010790 <__alt_data_end+0xf8010790>
 8010dd4:	00c00b44 	movi	r3,45
 8010dd8:	64a0003c 	xorhi	r18,r12,32768
 8010ddc:	d8c02a05 	stb	r3,168(sp)
 8010de0:	003ea606 	br	801087c <__alt_data_end+0xf801087c>
 8010de4:	4f000044 	addi	fp,r9,1
 8010de8:	003eab06 	br	8010898 <__alt_data_end+0xf8010898>
 8010dec:	d8c03417 	ldw	r3,208(sp)
 8010df0:	00c0410e 	bge	zero,r3,8010ef8 <___svfprintf_internal_r+0x1f0c>
 8010df4:	04800044 	movi	r18,1
 8010df8:	dac03317 	ldw	r11,204(sp)
 8010dfc:	92e5883a 	add	r18,r18,r11
 8010e00:	9005883a 	mov	r2,r18
 8010e04:	903ee40e 	bge	r18,zero,8010998 <__alt_data_end+0xf8010998>
 8010e08:	0005883a 	mov	r2,zero
 8010e0c:	003ee206 	br	8010998 <__alt_data_end+0xf8010998>
 8010e10:	d8c02617 	ldw	r3,152(sp)
 8010e14:	d8c03415 	stw	r3,208(sp)
 8010e18:	00c0310e 	bge	zero,r3,8010ee0 <___svfprintf_internal_r+0x1ef4>
 8010e1c:	48001f1e 	bne	r9,zero,8010e9c <___svfprintf_internal_r+0x1eb0>
 8010e20:	8c40004c 	andi	r17,r17,1
 8010e24:	88001d1e 	bne	r17,zero,8010e9c <___svfprintf_internal_r+0x1eb0>
 8010e28:	1805883a 	mov	r2,r3
 8010e2c:	183ed90e 	bge	r3,zero,8010994 <__alt_data_end+0xf8010994>
 8010e30:	0005883a 	mov	r2,zero
 8010e34:	003ed706 	br	8010994 <__alt_data_end+0xf8010994>
 8010e38:	d8802117 	ldw	r2,132(sp)
 8010e3c:	003ec306 	br	801094c <__alt_data_end+0xf801094c>
 8010e40:	d9003717 	ldw	r4,220(sp)
 8010e44:	900b883a 	mov	r5,r18
 8010e48:	000d883a 	mov	r6,zero
 8010e4c:	000f883a 	mov	r7,zero
 8010e50:	da004015 	stw	r8,256(sp)
 8010e54:	da403f15 	stw	r9,252(sp)
 8010e58:	da803e15 	stw	r10,248(sp)
 8010e5c:	8016cec0 	call	8016cec <__eqdf2>
 8010e60:	da004017 	ldw	r8,256(sp)
 8010e64:	da403f17 	ldw	r9,252(sp)
 8010e68:	da803e17 	ldw	r10,248(sp)
 8010e6c:	103f2a26 	beq	r2,zero,8010b18 <__alt_data_end+0xf8010b18>
 8010e70:	00800044 	movi	r2,1
 8010e74:	1707c83a 	sub	r3,r2,fp
 8010e78:	d8c02615 	stw	r3,152(sp)
 8010e7c:	003f2706 	br	8010b1c <__alt_data_end+0xf8010b1c>
 8010e80:	db003417 	ldw	r12,208(sp)
 8010e84:	64800044 	addi	r18,r12,1
 8010e88:	9005883a 	mov	r2,r18
 8010e8c:	903ec20e 	bge	r18,zero,8010998 <__alt_data_end+0xf8010998>
 8010e90:	003fdd06 	br	8010e08 <__alt_data_end+0xf8010e08>
 8010e94:	0005883a 	mov	r2,zero
 8010e98:	003f5a06 	br	8010c04 <__alt_data_end+0xf8010c04>
 8010e9c:	dac03417 	ldw	r11,208(sp)
 8010ea0:	4a400044 	addi	r9,r9,1
 8010ea4:	5a65883a 	add	r18,r11,r9
 8010ea8:	9005883a 	mov	r2,r18
 8010eac:	903eba0e 	bge	r18,zero,8010998 <__alt_data_end+0xf8010998>
 8010eb0:	003fd506 	br	8010e08 <__alt_data_end+0xf8010e08>
 8010eb4:	008200b4 	movhi	r2,2050
 8010eb8:	10b34984 	addi	r2,r2,-13018
 8010ebc:	d8802b15 	stw	r2,172(sp)
 8010ec0:	003d2906 	br	8010368 <__alt_data_end+0xf8010368>
 8010ec4:	00800c04 	movi	r2,48
 8010ec8:	e0c00c04 	addi	r3,fp,48
 8010ecc:	d8802345 	stb	r2,141(sp)
 8010ed0:	d8c02385 	stb	r3,142(sp)
 8010ed4:	d88023c4 	addi	r2,sp,143
 8010ed8:	dd4022c4 	addi	r21,sp,139
 8010edc:	003f9e06 	br	8010d58 <__alt_data_end+0xf8010d58>
 8010ee0:	4800081e 	bne	r9,zero,8010f04 <___svfprintf_internal_r+0x1f18>
 8010ee4:	8c40004c 	andi	r17,r17,1
 8010ee8:	8800061e 	bne	r17,zero,8010f04 <___svfprintf_internal_r+0x1f18>
 8010eec:	00800044 	movi	r2,1
 8010ef0:	1025883a 	mov	r18,r2
 8010ef4:	003ea806 	br	8010998 <__alt_data_end+0xf8010998>
 8010ef8:	04800084 	movi	r18,2
 8010efc:	90e5c83a 	sub	r18,r18,r3
 8010f00:	003fbd06 	br	8010df8 <__alt_data_end+0xf8010df8>
 8010f04:	4c800084 	addi	r18,r9,2
 8010f08:	9005883a 	mov	r2,r18
 8010f0c:	903ea20e 	bge	r18,zero,8010998 <__alt_data_end+0xf8010998>
 8010f10:	003fbd06 	br	8010e08 <__alt_data_end+0xf8010e08>
 8010f14:	dac02d17 	ldw	r11,180(sp)
 8010f18:	5a400017 	ldw	r9,0(r11)
 8010f1c:	5ac00104 	addi	r11,r11,4
 8010f20:	dac02d15 	stw	r11,180(sp)
 8010f24:	483e3f0e 	bge	r9,zero,8010824 <__alt_data_end+0xf8010824>
 8010f28:	027fffc4 	movi	r9,-1
 8010f2c:	1c000047 	ldb	r16,1(r3)
 8010f30:	00388406 	br	800f144 <__alt_data_end+0xf800f144>
 8010f34:	00800b44 	movi	r2,45
 8010f38:	0739c83a 	sub	fp,zero,fp
 8010f3c:	d8802305 	stb	r2,140(sp)
 8010f40:	003f5c06 	br	8010cb4 <__alt_data_end+0xf8010cb4>
 8010f44:	0005883a 	mov	r2,zero
 8010f48:	003f8c06 	br	8010d7c <__alt_data_end+0xf8010d7c>
 8010f4c:	88a2703a 	and	r17,r17,r2
 8010f50:	883f8826 	beq	r17,zero,8010d74 <__alt_data_end+0xf8010d74>
 8010f54:	003f8606 	br	8010d70 <__alt_data_end+0xf8010d70>
 8010f58:	d8802344 	addi	r2,sp,141
 8010f5c:	003f7e06 	br	8010d58 <__alt_data_end+0xf8010d58>
 8010f60:	d8c02617 	ldw	r3,152(sp)
 8010f64:	003f4d06 	br	8010c9c <__alt_data_end+0xf8010c9c>
 8010f68:	dac02f17 	ldw	r11,188(sp)
 8010f6c:	00800304 	movi	r2,12
 8010f70:	58800015 	stw	r2,0(r11)
 8010f74:	00bfffc4 	movi	r2,-1
 8010f78:	0038e806 	br	800f31c <__alt_data_end+0xf800f31c>

08010f7c <__submore>:
 8010f7c:	defffa04 	addi	sp,sp,-24
 8010f80:	dc000015 	stw	r16,0(sp)
 8010f84:	2821883a 	mov	r16,r5
 8010f88:	29400c17 	ldw	r5,48(r5)
 8010f8c:	dfc00515 	stw	ra,20(sp)
 8010f90:	dd000415 	stw	r20,16(sp)
 8010f94:	dcc00315 	stw	r19,12(sp)
 8010f98:	dc800215 	stw	r18,8(sp)
 8010f9c:	dc400115 	stw	r17,4(sp)
 8010fa0:	80801004 	addi	r2,r16,64
 8010fa4:	28801726 	beq	r5,r2,8011004 <__submore+0x88>
 8010fa8:	84400d17 	ldw	r17,52(r16)
 8010fac:	8c67883a 	add	r19,r17,r17
 8010fb0:	980d883a 	mov	r6,r19
 8010fb4:	800b0ec0 	call	800b0ec <_realloc_r>
 8010fb8:	1025883a 	mov	r18,r2
 8010fbc:	10002226 	beq	r2,zero,8011048 <__submore+0xcc>
 8010fc0:	1469883a 	add	r20,r2,r17
 8010fc4:	a009883a 	mov	r4,r20
 8010fc8:	100b883a 	mov	r5,r2
 8010fcc:	880d883a 	mov	r6,r17
 8010fd0:	8002df40 	call	8002df4 <memcpy>
 8010fd4:	0005883a 	mov	r2,zero
 8010fd8:	85000015 	stw	r20,0(r16)
 8010fdc:	84800c15 	stw	r18,48(r16)
 8010fe0:	84c00d15 	stw	r19,52(r16)
 8010fe4:	dfc00517 	ldw	ra,20(sp)
 8010fe8:	dd000417 	ldw	r20,16(sp)
 8010fec:	dcc00317 	ldw	r19,12(sp)
 8010ff0:	dc800217 	ldw	r18,8(sp)
 8010ff4:	dc400117 	ldw	r17,4(sp)
 8010ff8:	dc000017 	ldw	r16,0(sp)
 8010ffc:	dec00604 	addi	sp,sp,24
 8011000:	f800283a 	ret
 8011004:	04410004 	movi	r17,1024
 8011008:	880b883a 	mov	r5,r17
 801100c:	80025d00 	call	80025d0 <_malloc_r>
 8011010:	1007883a 	mov	r3,r2
 8011014:	10000c26 	beq	r2,zero,8011048 <__submore+0xcc>
 8011018:	80801083 	ldbu	r2,66(r16)
 801101c:	80c00c15 	stw	r3,48(r16)
 8011020:	84400d15 	stw	r17,52(r16)
 8011024:	1880ffc5 	stb	r2,1023(r3)
 8011028:	81401043 	ldbu	r5,65(r16)
 801102c:	1900ff44 	addi	r4,r3,1021
 8011030:	0005883a 	mov	r2,zero
 8011034:	1940ff85 	stb	r5,1022(r3)
 8011038:	81401003 	ldbu	r5,64(r16)
 801103c:	1940ff45 	stb	r5,1021(r3)
 8011040:	81000015 	stw	r4,0(r16)
 8011044:	003fe706 	br	8010fe4 <__alt_data_end+0xf8010fe4>
 8011048:	00bfffc4 	movi	r2,-1
 801104c:	003fe506 	br	8010fe4 <__alt_data_end+0xf8010fe4>

08011050 <_ungetc_r>:
 8011050:	00bfffc4 	movi	r2,-1
 8011054:	28805e26 	beq	r5,r2,80111d0 <_ungetc_r+0x180>
 8011058:	defffc04 	addi	sp,sp,-16
 801105c:	dc800215 	stw	r18,8(sp)
 8011060:	dc400115 	stw	r17,4(sp)
 8011064:	dc000015 	stw	r16,0(sp)
 8011068:	dfc00315 	stw	ra,12(sp)
 801106c:	2025883a 	mov	r18,r4
 8011070:	3021883a 	mov	r16,r6
 8011074:	2823883a 	mov	r17,r5
 8011078:	20000226 	beq	r4,zero,8011084 <_ungetc_r+0x34>
 801107c:	20800e17 	ldw	r2,56(r4)
 8011080:	10002d26 	beq	r2,zero,8011138 <_ungetc_r+0xe8>
 8011084:	80c0030b 	ldhu	r3,12(r16)
 8011088:	1888000c 	andi	r2,r3,8192
 801108c:	1000051e 	bne	r2,zero,80110a4 <_ungetc_r+0x54>
 8011090:	81001917 	ldw	r4,100(r16)
 8011094:	00b7ffc4 	movi	r2,-8193
 8011098:	18c80014 	ori	r3,r3,8192
 801109c:	2084703a 	and	r2,r4,r2
 80110a0:	80801915 	stw	r2,100(r16)
 80110a4:	00bff7c4 	movi	r2,-33
 80110a8:	1884703a 	and	r2,r3,r2
 80110ac:	8080030d 	sth	r2,12(r16)
 80110b0:	1900010c 	andi	r4,r3,4
 80110b4:	2000061e 	bne	r4,zero,80110d0 <_ungetc_r+0x80>
 80110b8:	1900040c 	andi	r4,r3,16
 80110bc:	20001c26 	beq	r4,zero,8011130 <_ungetc_r+0xe0>
 80110c0:	18c0020c 	andi	r3,r3,8
 80110c4:	1800321e 	bne	r3,zero,8011190 <_ungetc_r+0x140>
 80110c8:	10800114 	ori	r2,r2,4
 80110cc:	8080030d 	sth	r2,12(r16)
 80110d0:	80800c17 	ldw	r2,48(r16)
 80110d4:	8c403fcc 	andi	r17,r17,255
 80110d8:	10001926 	beq	r2,zero,8011140 <_ungetc_r+0xf0>
 80110dc:	80c00117 	ldw	r3,4(r16)
 80110e0:	80800d17 	ldw	r2,52(r16)
 80110e4:	18800e0e 	bge	r3,r2,8011120 <_ungetc_r+0xd0>
 80110e8:	80c00017 	ldw	r3,0(r16)
 80110ec:	8805883a 	mov	r2,r17
 80110f0:	193fffc4 	addi	r4,r3,-1
 80110f4:	81000015 	stw	r4,0(r16)
 80110f8:	1c7fffc5 	stb	r17,-1(r3)
 80110fc:	80c00117 	ldw	r3,4(r16)
 8011100:	18c00044 	addi	r3,r3,1
 8011104:	80c00115 	stw	r3,4(r16)
 8011108:	dfc00317 	ldw	ra,12(sp)
 801110c:	dc800217 	ldw	r18,8(sp)
 8011110:	dc400117 	ldw	r17,4(sp)
 8011114:	dc000017 	ldw	r16,0(sp)
 8011118:	dec00404 	addi	sp,sp,16
 801111c:	f800283a 	ret
 8011120:	9009883a 	mov	r4,r18
 8011124:	800b883a 	mov	r5,r16
 8011128:	8010f7c0 	call	8010f7c <__submore>
 801112c:	103fee26 	beq	r2,zero,80110e8 <__alt_data_end+0xf80110e8>
 8011130:	00bfffc4 	movi	r2,-1
 8011134:	003ff406 	br	8011108 <__alt_data_end+0xf8011108>
 8011138:	8008c5c0 	call	8008c5c <__sinit>
 801113c:	003fd106 	br	8011084 <__alt_data_end+0xf8011084>
 8011140:	80800417 	ldw	r2,16(r16)
 8011144:	80c00017 	ldw	r3,0(r16)
 8011148:	10000326 	beq	r2,zero,8011158 <_ungetc_r+0x108>
 801114c:	10c0022e 	bgeu	r2,r3,8011158 <_ungetc_r+0x108>
 8011150:	18bfffc3 	ldbu	r2,-1(r3)
 8011154:	14401826 	beq	r2,r17,80111b8 <_ungetc_r+0x168>
 8011158:	81400117 	ldw	r5,4(r16)
 801115c:	80801084 	addi	r2,r16,66
 8011160:	81001004 	addi	r4,r16,64
 8011164:	80c00e15 	stw	r3,56(r16)
 8011168:	80800015 	stw	r2,0(r16)
 801116c:	00c000c4 	movi	r3,3
 8011170:	00800044 	movi	r2,1
 8011174:	80800115 	stw	r2,4(r16)
 8011178:	81400f15 	stw	r5,60(r16)
 801117c:	81000c15 	stw	r4,48(r16)
 8011180:	80c00d15 	stw	r3,52(r16)
 8011184:	84401085 	stb	r17,66(r16)
 8011188:	8805883a 	mov	r2,r17
 801118c:	003fde06 	br	8011108 <__alt_data_end+0xf8011108>
 8011190:	9009883a 	mov	r4,r18
 8011194:	800b883a 	mov	r5,r16
 8011198:	80086b40 	call	80086b4 <_fflush_r>
 801119c:	103fe41e 	bne	r2,zero,8011130 <__alt_data_end+0xf8011130>
 80111a0:	8080030b 	ldhu	r2,12(r16)
 80111a4:	00fffdc4 	movi	r3,-9
 80111a8:	80000215 	stw	zero,8(r16)
 80111ac:	1884703a 	and	r2,r3,r2
 80111b0:	80000615 	stw	zero,24(r16)
 80111b4:	003fc406 	br	80110c8 <__alt_data_end+0xf80110c8>
 80111b8:	81000117 	ldw	r4,4(r16)
 80111bc:	18ffffc4 	addi	r3,r3,-1
 80111c0:	80c00015 	stw	r3,0(r16)
 80111c4:	20c00044 	addi	r3,r4,1
 80111c8:	80c00115 	stw	r3,4(r16)
 80111cc:	003fce06 	br	8011108 <__alt_data_end+0xf8011108>
 80111d0:	00bfffc4 	movi	r2,-1
 80111d4:	f800283a 	ret

080111d8 <ungetc>:
 80111d8:	00c200b4 	movhi	r3,2050
 80111dc:	18fab604 	addi	r3,r3,-5416
 80111e0:	2005883a 	mov	r2,r4
 80111e4:	19000017 	ldw	r4,0(r3)
 80111e8:	280d883a 	mov	r6,r5
 80111ec:	100b883a 	mov	r5,r2
 80111f0:	80110501 	jmpi	8011050 <_ungetc_r>

080111f4 <__sprint_r.part.0>:
 80111f4:	28801917 	ldw	r2,100(r5)
 80111f8:	defff604 	addi	sp,sp,-40
 80111fc:	dd400515 	stw	r21,20(sp)
 8011200:	dcc00315 	stw	r19,12(sp)
 8011204:	dfc00915 	stw	ra,36(sp)
 8011208:	df000815 	stw	fp,32(sp)
 801120c:	ddc00715 	stw	r23,28(sp)
 8011210:	dd800615 	stw	r22,24(sp)
 8011214:	dd000415 	stw	r20,16(sp)
 8011218:	dc800215 	stw	r18,8(sp)
 801121c:	dc400115 	stw	r17,4(sp)
 8011220:	dc000015 	stw	r16,0(sp)
 8011224:	1088000c 	andi	r2,r2,8192
 8011228:	2827883a 	mov	r19,r5
 801122c:	302b883a 	mov	r21,r6
 8011230:	10002d26 	beq	r2,zero,80112e8 <__sprint_r.part.0+0xf4>
 8011234:	30800217 	ldw	r2,8(r6)
 8011238:	35800017 	ldw	r22,0(r6)
 801123c:	10002826 	beq	r2,zero,80112e0 <__sprint_r.part.0+0xec>
 8011240:	2029883a 	mov	r20,r4
 8011244:	b5c00104 	addi	r23,r22,4
 8011248:	04bfffc4 	movi	r18,-1
 801124c:	bc400017 	ldw	r17,0(r23)
 8011250:	b4000017 	ldw	r16,0(r22)
 8011254:	0039883a 	mov	fp,zero
 8011258:	8822d0ba 	srli	r17,r17,2
 801125c:	04400316 	blt	zero,r17,801126c <__sprint_r.part.0+0x78>
 8011260:	00001706 	br	80112c0 <__sprint_r.part.0+0xcc>
 8011264:	84000104 	addi	r16,r16,4
 8011268:	8f001526 	beq	r17,fp,80112c0 <__sprint_r.part.0+0xcc>
 801126c:	81400017 	ldw	r5,0(r16)
 8011270:	a009883a 	mov	r4,r20
 8011274:	980d883a 	mov	r6,r19
 8011278:	80129d00 	call	80129d0 <_fputwc_r>
 801127c:	e7000044 	addi	fp,fp,1
 8011280:	14bff81e 	bne	r2,r18,8011264 <__alt_data_end+0xf8011264>
 8011284:	9005883a 	mov	r2,r18
 8011288:	a8000215 	stw	zero,8(r21)
 801128c:	a8000115 	stw	zero,4(r21)
 8011290:	dfc00917 	ldw	ra,36(sp)
 8011294:	df000817 	ldw	fp,32(sp)
 8011298:	ddc00717 	ldw	r23,28(sp)
 801129c:	dd800617 	ldw	r22,24(sp)
 80112a0:	dd400517 	ldw	r21,20(sp)
 80112a4:	dd000417 	ldw	r20,16(sp)
 80112a8:	dcc00317 	ldw	r19,12(sp)
 80112ac:	dc800217 	ldw	r18,8(sp)
 80112b0:	dc400117 	ldw	r17,4(sp)
 80112b4:	dc000017 	ldw	r16,0(sp)
 80112b8:	dec00a04 	addi	sp,sp,40
 80112bc:	f800283a 	ret
 80112c0:	a8c00217 	ldw	r3,8(r21)
 80112c4:	8c63883a 	add	r17,r17,r17
 80112c8:	8c63883a 	add	r17,r17,r17
 80112cc:	1c45c83a 	sub	r2,r3,r17
 80112d0:	a8800215 	stw	r2,8(r21)
 80112d4:	b5800204 	addi	r22,r22,8
 80112d8:	bdc00204 	addi	r23,r23,8
 80112dc:	103fdb1e 	bne	r2,zero,801124c <__alt_data_end+0xf801124c>
 80112e0:	0005883a 	mov	r2,zero
 80112e4:	003fe806 	br	8011288 <__alt_data_end+0xf8011288>
 80112e8:	80090c00 	call	80090c0 <__sfvwrite_r>
 80112ec:	003fe606 	br	8011288 <__alt_data_end+0xf8011288>

080112f0 <__sprint_r>:
 80112f0:	30c00217 	ldw	r3,8(r6)
 80112f4:	18000126 	beq	r3,zero,80112fc <__sprint_r+0xc>
 80112f8:	80111f41 	jmpi	80111f4 <__sprint_r.part.0>
 80112fc:	30000115 	stw	zero,4(r6)
 8011300:	0005883a 	mov	r2,zero
 8011304:	f800283a 	ret

08011308 <___vfiprintf_internal_r>:
 8011308:	defeca04 	addi	sp,sp,-1240
 801130c:	dd813215 	stw	r22,1224(sp)
 8011310:	dd013015 	stw	r20,1216(sp)
 8011314:	dfc13515 	stw	ra,1236(sp)
 8011318:	df013415 	stw	fp,1232(sp)
 801131c:	ddc13315 	stw	r23,1228(sp)
 8011320:	dd413115 	stw	r21,1220(sp)
 8011324:	dcc12f15 	stw	r19,1212(sp)
 8011328:	dc812e15 	stw	r18,1208(sp)
 801132c:	dc412d15 	stw	r17,1204(sp)
 8011330:	dc012c15 	stw	r16,1200(sp)
 8011334:	d9012015 	stw	r4,1152(sp)
 8011338:	d9c12115 	stw	r7,1156(sp)
 801133c:	2829883a 	mov	r20,r5
 8011340:	302d883a 	mov	r22,r6
 8011344:	20000226 	beq	r4,zero,8011350 <___vfiprintf_internal_r+0x48>
 8011348:	20800e17 	ldw	r2,56(r4)
 801134c:	1001d326 	beq	r2,zero,8011a9c <___vfiprintf_internal_r+0x794>
 8011350:	a0c0030b 	ldhu	r3,12(r20)
 8011354:	1908000c 	andi	r4,r3,8192
 8011358:	1805883a 	mov	r2,r3
 801135c:	2000071e 	bne	r4,zero,801137c <___vfiprintf_internal_r+0x74>
 8011360:	a1001917 	ldw	r4,100(r20)
 8011364:	18880014 	ori	r2,r3,8192
 8011368:	00f7ffc4 	movi	r3,-8193
 801136c:	20c8703a 	and	r4,r4,r3
 8011370:	a080030d 	sth	r2,12(r20)
 8011374:	1007883a 	mov	r3,r2
 8011378:	a1001915 	stw	r4,100(r20)
 801137c:	1100020c 	andi	r4,r2,8
 8011380:	20018926 	beq	r4,zero,80119a8 <___vfiprintf_internal_r+0x6a0>
 8011384:	a1000417 	ldw	r4,16(r20)
 8011388:	20018726 	beq	r4,zero,80119a8 <___vfiprintf_internal_r+0x6a0>
 801138c:	1080068c 	andi	r2,r2,26
 8011390:	01000284 	movi	r4,10
 8011394:	11018d26 	beq	r2,r4,80119cc <___vfiprintf_internal_r+0x6c4>
 8011398:	da810a04 	addi	r10,sp,1064
 801139c:	dac109c4 	addi	r11,sp,1063
 80113a0:	070200b4 	movhi	fp,2050
 80113a4:	05c200b4 	movhi	r23,2050
 80113a8:	da811e15 	stw	r10,1144(sp)
 80113ac:	52d5c83a 	sub	r10,r10,r11
 80113b0:	e7335584 	addi	fp,fp,-12970
 80113b4:	bdf35184 	addi	r23,r23,-12986
 80113b8:	dac11f15 	stw	r11,1148(sp)
 80113bc:	dec11a15 	stw	sp,1128(sp)
 80113c0:	d8011c15 	stw	zero,1136(sp)
 80113c4:	d8011b15 	stw	zero,1132(sp)
 80113c8:	d8012615 	stw	zero,1176(sp)
 80113cc:	d8012215 	stw	zero,1160(sp)
 80113d0:	da812715 	stw	r10,1180(sp)
 80113d4:	d811883a 	mov	r8,sp
 80113d8:	b021883a 	mov	r16,r22
 80113dc:	80800007 	ldb	r2,0(r16)
 80113e0:	10039c26 	beq	r2,zero,8012254 <___vfiprintf_internal_r+0xf4c>
 80113e4:	01000944 	movi	r4,37
 80113e8:	11039a26 	beq	r2,r4,8012254 <___vfiprintf_internal_r+0xf4c>
 80113ec:	8005883a 	mov	r2,r16
 80113f0:	00000106 	br	80113f8 <___vfiprintf_internal_r+0xf0>
 80113f4:	19000326 	beq	r3,r4,8011404 <___vfiprintf_internal_r+0xfc>
 80113f8:	10800044 	addi	r2,r2,1
 80113fc:	10c00007 	ldb	r3,0(r2)
 8011400:	183ffc1e 	bne	r3,zero,80113f4 <__alt_data_end+0xf80113f4>
 8011404:	1425c83a 	sub	r18,r2,r16
 8011408:	1023883a 	mov	r17,r2
 801140c:	90001026 	beq	r18,zero,8011450 <___vfiprintf_internal_r+0x148>
 8011410:	d8c11c17 	ldw	r3,1136(sp)
 8011414:	d8811b17 	ldw	r2,1132(sp)
 8011418:	44000015 	stw	r16,0(r8)
 801141c:	90c7883a 	add	r3,r18,r3
 8011420:	10800044 	addi	r2,r2,1
 8011424:	44800115 	stw	r18,4(r8)
 8011428:	d8c11c15 	stw	r3,1136(sp)
 801142c:	d8811b15 	stw	r2,1132(sp)
 8011430:	010001c4 	movi	r4,7
 8011434:	2080750e 	bge	r4,r2,801160c <___vfiprintf_internal_r+0x304>
 8011438:	18039d1e 	bne	r3,zero,80122b0 <___vfiprintf_internal_r+0xfa8>
 801143c:	dac12217 	ldw	r11,1160(sp)
 8011440:	d8011b15 	stw	zero,1132(sp)
 8011444:	d811883a 	mov	r8,sp
 8011448:	5c97883a 	add	r11,r11,r18
 801144c:	dac12215 	stw	r11,1160(sp)
 8011450:	88800007 	ldb	r2,0(r17)
 8011454:	1002e026 	beq	r2,zero,8011fd8 <___vfiprintf_internal_r+0xcd0>
 8011458:	88c00047 	ldb	r3,1(r17)
 801145c:	8c000044 	addi	r16,r17,1
 8011460:	d8011d85 	stb	zero,1142(sp)
 8011464:	000d883a 	mov	r6,zero
 8011468:	027fffc4 	movi	r9,-1
 801146c:	0027883a 	mov	r19,zero
 8011470:	002b883a 	mov	r21,zero
 8011474:	01001604 	movi	r4,88
 8011478:	01400244 	movi	r5,9
 801147c:	03000a84 	movi	r12,42
 8011480:	01c01b04 	movi	r7,108
 8011484:	84000044 	addi	r16,r16,1
 8011488:	18bff804 	addi	r2,r3,-32
 801148c:	20825f36 	bltu	r4,r2,8011e0c <___vfiprintf_internal_r+0xb04>
 8011490:	100490ba 	slli	r2,r2,2
 8011494:	02820074 	movhi	r10,2049
 8011498:	52852a04 	addi	r10,r10,5288
 801149c:	1285883a 	add	r2,r2,r10
 80114a0:	10800017 	ldw	r2,0(r2)
 80114a4:	1000683a 	jmp	r2
 80114a8:	08011c7c 	xorhi	zero,at,1137
 80114ac:	08011e0c 	andi	zero,at,1144
 80114b0:	08011e0c 	andi	zero,at,1144
 80114b4:	08011e00 	call	8011e0 <__alt_mem_epcs+0x8011e0>
 80114b8:	08011e0c 	andi	zero,at,1144
 80114bc:	08011e0c 	andi	zero,at,1144
 80114c0:	08011e0c 	andi	zero,at,1144
 80114c4:	08011e0c 	andi	zero,at,1144
 80114c8:	08011e0c 	andi	zero,at,1144
 80114cc:	08011e0c 	andi	zero,at,1144
 80114d0:	08011dd8 	cmpnei	zero,at,1143
 80114d4:	08011df4 	orhi	zero,at,1143
 80114d8:	08011e0c 	andi	zero,at,1144
 80114dc:	08011aac 	andhi	zero,at,1130
 80114e0:	08011c0c 	andi	zero,at,1136
 80114e4:	08011e0c 	andi	zero,at,1144
 80114e8:	08011b90 	cmplti	zero,at,1134
 80114ec:	08011b9c 	xori	zero,at,1134
 80114f0:	08011b9c 	xori	zero,at,1134
 80114f4:	08011b9c 	xori	zero,at,1134
 80114f8:	08011b9c 	xori	zero,at,1134
 80114fc:	08011b9c 	xori	zero,at,1134
 8011500:	08011b9c 	xori	zero,at,1134
 8011504:	08011b9c 	xori	zero,at,1134
 8011508:	08011b9c 	xori	zero,at,1134
 801150c:	08011b9c 	xori	zero,at,1134
 8011510:	08011e0c 	andi	zero,at,1144
 8011514:	08011e0c 	andi	zero,at,1144
 8011518:	08011e0c 	andi	zero,at,1144
 801151c:	08011e0c 	andi	zero,at,1144
 8011520:	08011e0c 	andi	zero,at,1144
 8011524:	08011e0c 	andi	zero,at,1144
 8011528:	08011e0c 	andi	zero,at,1144
 801152c:	08011e0c 	andi	zero,at,1144
 8011530:	08011e0c 	andi	zero,at,1144
 8011534:	08011e0c 	andi	zero,at,1144
 8011538:	08011bc8 	cmpgei	zero,at,1135
 801153c:	08011e0c 	andi	zero,at,1144
 8011540:	08011e0c 	andi	zero,at,1144
 8011544:	08011e0c 	andi	zero,at,1144
 8011548:	08011e0c 	andi	zero,at,1144
 801154c:	08011e0c 	andi	zero,at,1144
 8011550:	08011e0c 	andi	zero,at,1144
 8011554:	08011e0c 	andi	zero,at,1144
 8011558:	08011e0c 	andi	zero,at,1144
 801155c:	08011e0c 	andi	zero,at,1144
 8011560:	08011e0c 	andi	zero,at,1144
 8011564:	0801165c 	xori	zero,at,1113
 8011568:	08011e0c 	andi	zero,at,1144
 801156c:	08011e0c 	andi	zero,at,1144
 8011570:	08011e0c 	andi	zero,at,1144
 8011574:	08011e0c 	andi	zero,at,1144
 8011578:	08011e0c 	andi	zero,at,1144
 801157c:	08011620 	cmpeqi	zero,at,1112
 8011580:	08011e0c 	andi	zero,at,1144
 8011584:	08011e0c 	andi	zero,at,1144
 8011588:	08011b08 	cmpgei	zero,at,1132
 801158c:	08011e0c 	andi	zero,at,1144
 8011590:	08011e0c 	andi	zero,at,1144
 8011594:	08011e0c 	andi	zero,at,1144
 8011598:	08011e0c 	andi	zero,at,1144
 801159c:	08011e0c 	andi	zero,at,1144
 80115a0:	08011e0c 	andi	zero,at,1144
 80115a4:	08011e0c 	andi	zero,at,1144
 80115a8:	08011e0c 	andi	zero,at,1144
 80115ac:	08011e0c 	andi	zero,at,1144
 80115b0:	08011e0c 	andi	zero,at,1144
 80115b4:	08011b60 	cmpeqi	zero,at,1133
 80115b8:	08011cf8 	rdprs	zero,at,1139
 80115bc:	08011e0c 	andi	zero,at,1144
 80115c0:	08011e0c 	andi	zero,at,1144
 80115c4:	08011e0c 	andi	zero,at,1144
 80115c8:	08011d80 	call	8011d8 <__alt_mem_epcs+0x8011d8>
 80115cc:	08011cf8 	rdprs	zero,at,1139
 80115d0:	08011e0c 	andi	zero,at,1144
 80115d4:	08011e0c 	andi	zero,at,1144
 80115d8:	08011d8c 	andi	zero,at,1142
 80115dc:	08011e0c 	andi	zero,at,1144
 80115e0:	08011c4c 	andi	zero,at,1137
 80115e4:	08011660 	cmpeqi	zero,at,1113
 80115e8:	08011d34 	orhi	zero,at,1140
 80115ec:	08011d74 	orhi	zero,at,1141
 80115f0:	08011e0c 	andi	zero,at,1144
 80115f4:	08011c98 	cmpnei	zero,at,1138
 80115f8:	08011e0c 	andi	zero,at,1144
 80115fc:	08011624 	muli	zero,at,1112
 8011600:	08011e0c 	andi	zero,at,1144
 8011604:	08011e0c 	andi	zero,at,1144
 8011608:	08011d9c 	xori	zero,at,1142
 801160c:	42000204 	addi	r8,r8,8
 8011610:	dac12217 	ldw	r11,1160(sp)
 8011614:	5c97883a 	add	r11,r11,r18
 8011618:	dac12215 	stw	r11,1160(sp)
 801161c:	003f8c06 	br	8011450 <__alt_data_end+0xf8011450>
 8011620:	ad400414 	ori	r21,r21,16
 8011624:	a880080c 	andi	r2,r21,32
 8011628:	10012f1e 	bne	r2,zero,8011ae8 <___vfiprintf_internal_r+0x7e0>
 801162c:	a880040c 	andi	r2,r21,16
 8011630:	1001ff1e 	bne	r2,zero,8011e30 <___vfiprintf_internal_r+0xb28>
 8011634:	a880100c 	andi	r2,r21,64
 8011638:	1001fd26 	beq	r2,zero,8011e30 <___vfiprintf_internal_r+0xb28>
 801163c:	da812117 	ldw	r10,1156(sp)
 8011640:	002d883a 	mov	r22,zero
 8011644:	00800044 	movi	r2,1
 8011648:	5480000b 	ldhu	r18,0(r10)
 801164c:	52800104 	addi	r10,r10,4
 8011650:	da812115 	stw	r10,1156(sp)
 8011654:	9009883a 	mov	r4,r18
 8011658:	00000a06 	br	8011684 <___vfiprintf_internal_r+0x37c>
 801165c:	ad400414 	ori	r21,r21,16
 8011660:	a880080c 	andi	r2,r21,32
 8011664:	10011426 	beq	r2,zero,8011ab8 <___vfiprintf_internal_r+0x7b0>
 8011668:	da812117 	ldw	r10,1156(sp)
 801166c:	0005883a 	mov	r2,zero
 8011670:	54800017 	ldw	r18,0(r10)
 8011674:	55800117 	ldw	r22,4(r10)
 8011678:	52800204 	addi	r10,r10,8
 801167c:	da812115 	stw	r10,1156(sp)
 8011680:	9588b03a 	or	r4,r18,r22
 8011684:	d8011d85 	stb	zero,1142(sp)
 8011688:	4823883a 	mov	r17,r9
 801168c:	0019883a 	mov	r12,zero
 8011690:	48000216 	blt	r9,zero,801169c <___vfiprintf_internal_r+0x394>
 8011694:	00ffdfc4 	movi	r3,-129
 8011698:	a8ea703a 	and	r21,r21,r3
 801169c:	2002221e 	bne	r4,zero,8011f28 <___vfiprintf_internal_r+0xc20>
 80116a0:	4802c726 	beq	r9,zero,80121c0 <___vfiprintf_internal_r+0xeb8>
 80116a4:	10803fcc 	andi	r2,r2,255
 80116a8:	00c00044 	movi	r3,1
 80116ac:	10c24426 	beq	r2,r3,8011fc0 <___vfiprintf_internal_r+0xcb8>
 80116b0:	00c00084 	movi	r3,2
 80116b4:	10c2cc26 	beq	r2,r3,80121e8 <___vfiprintf_internal_r+0xee0>
 80116b8:	d8c10a04 	addi	r3,sp,1064
 80116bc:	9008d0fa 	srli	r4,r18,3
 80116c0:	b00a977a 	slli	r5,r22,29
 80116c4:	b02cd0fa 	srli	r22,r22,3
 80116c8:	948001cc 	andi	r18,r18,7
 80116cc:	90800c04 	addi	r2,r18,48
 80116d0:	18ffffc4 	addi	r3,r3,-1
 80116d4:	2924b03a 	or	r18,r5,r4
 80116d8:	18800005 	stb	r2,0(r3)
 80116dc:	9588b03a 	or	r4,r18,r22
 80116e0:	203ff61e 	bne	r4,zero,80116bc <__alt_data_end+0xf80116bc>
 80116e4:	a900004c 	andi	r4,r21,1
 80116e8:	d8c12415 	stw	r3,1168(sp)
 80116ec:	2002fb1e 	bne	r4,zero,80122dc <___vfiprintf_internal_r+0xfd4>
 80116f0:	da811e17 	ldw	r10,1144(sp)
 80116f4:	50e3c83a 	sub	r17,r10,r3
 80116f8:	8825883a 	mov	r18,r17
 80116fc:	8a40010e 	bge	r17,r9,8011704 <___vfiprintf_internal_r+0x3fc>
 8011700:	4825883a 	mov	r18,r9
 8011704:	63003fcc 	andi	r12,r12,255
 8011708:	6300201c 	xori	r12,r12,128
 801170c:	633fe004 	addi	r12,r12,-128
 8011710:	60000126 	beq	r12,zero,8011718 <___vfiprintf_internal_r+0x410>
 8011714:	94800044 	addi	r18,r18,1
 8011718:	ab80008c 	andi	r14,r21,2
 801171c:	70000126 	beq	r14,zero,8011724 <___vfiprintf_internal_r+0x41c>
 8011720:	94800084 	addi	r18,r18,2
 8011724:	ad80210c 	andi	r22,r21,132
 8011728:	b001df1e 	bne	r22,zero,8011ea8 <___vfiprintf_internal_r+0xba0>
 801172c:	9c8fc83a 	sub	r7,r19,r18
 8011730:	01c1dd0e 	bge	zero,r7,8011ea8 <___vfiprintf_internal_r+0xba0>
 8011734:	03000404 	movi	r12,16
 8011738:	d8811c17 	ldw	r2,1136(sp)
 801173c:	61c3920e 	bge	r12,r7,8012588 <___vfiprintf_internal_r+0x1280>
 8011740:	028200b4 	movhi	r10,2050
 8011744:	52b35584 	addi	r10,r10,-12970
 8011748:	dc012915 	stw	r16,1188(sp)
 801174c:	d9811b17 	ldw	r6,1132(sp)
 8011750:	da812315 	stw	r10,1164(sp)
 8011754:	00c001c4 	movi	r3,7
 8011758:	da412515 	stw	r9,1172(sp)
 801175c:	db812815 	stw	r14,1184(sp)
 8011760:	3821883a 	mov	r16,r7
 8011764:	00000506 	br	801177c <___vfiprintf_internal_r+0x474>
 8011768:	31400084 	addi	r5,r6,2
 801176c:	42000204 	addi	r8,r8,8
 8011770:	200d883a 	mov	r6,r4
 8011774:	843ffc04 	addi	r16,r16,-16
 8011778:	64000d0e 	bge	r12,r16,80117b0 <___vfiprintf_internal_r+0x4a8>
 801177c:	10800404 	addi	r2,r2,16
 8011780:	31000044 	addi	r4,r6,1
 8011784:	47000015 	stw	fp,0(r8)
 8011788:	43000115 	stw	r12,4(r8)
 801178c:	d8811c15 	stw	r2,1136(sp)
 8011790:	d9011b15 	stw	r4,1132(sp)
 8011794:	193ff40e 	bge	r3,r4,8011768 <__alt_data_end+0xf8011768>
 8011798:	1001b51e 	bne	r2,zero,8011e70 <___vfiprintf_internal_r+0xb68>
 801179c:	843ffc04 	addi	r16,r16,-16
 80117a0:	000d883a 	mov	r6,zero
 80117a4:	01400044 	movi	r5,1
 80117a8:	d811883a 	mov	r8,sp
 80117ac:	643ff316 	blt	r12,r16,801177c <__alt_data_end+0xf801177c>
 80117b0:	800f883a 	mov	r7,r16
 80117b4:	da412517 	ldw	r9,1172(sp)
 80117b8:	db812817 	ldw	r14,1184(sp)
 80117bc:	dc012917 	ldw	r16,1188(sp)
 80117c0:	dac12317 	ldw	r11,1164(sp)
 80117c4:	3887883a 	add	r3,r7,r2
 80117c8:	41c00115 	stw	r7,4(r8)
 80117cc:	42c00015 	stw	r11,0(r8)
 80117d0:	d8c11c15 	stw	r3,1136(sp)
 80117d4:	d9411b15 	stw	r5,1132(sp)
 80117d8:	008001c4 	movi	r2,7
 80117dc:	11429316 	blt	r2,r5,801222c <___vfiprintf_internal_r+0xf24>
 80117e0:	d9011d87 	ldb	r4,1142(sp)
 80117e4:	42000204 	addi	r8,r8,8
 80117e8:	28800044 	addi	r2,r5,1
 80117ec:	2001b31e 	bne	r4,zero,8011ebc <___vfiprintf_internal_r+0xbb4>
 80117f0:	70000c26 	beq	r14,zero,8011824 <___vfiprintf_internal_r+0x51c>
 80117f4:	d9011d04 	addi	r4,sp,1140
 80117f8:	18c00084 	addi	r3,r3,2
 80117fc:	41000015 	stw	r4,0(r8)
 8011800:	01000084 	movi	r4,2
 8011804:	41000115 	stw	r4,4(r8)
 8011808:	d8c11c15 	stw	r3,1136(sp)
 801180c:	d8811b15 	stw	r2,1132(sp)
 8011810:	010001c4 	movi	r4,7
 8011814:	20826516 	blt	r4,r2,80121ac <___vfiprintf_internal_r+0xea4>
 8011818:	100b883a 	mov	r5,r2
 801181c:	42000204 	addi	r8,r8,8
 8011820:	10800044 	addi	r2,r2,1
 8011824:	01002004 	movi	r4,128
 8011828:	b1021a26 	beq	r22,r4,8012094 <___vfiprintf_internal_r+0xd8c>
 801182c:	4c6dc83a 	sub	r22,r9,r17
 8011830:	0580230e 	bge	zero,r22,80118c0 <___vfiprintf_internal_r+0x5b8>
 8011834:	01c00404 	movi	r7,16
 8011838:	3d83300e 	bge	r7,r22,80124fc <___vfiprintf_internal_r+0x11f4>
 801183c:	008200b4 	movhi	r2,2050
 8011840:	10b35184 	addi	r2,r2,-12986
 8011844:	d8812315 	stw	r2,1164(sp)
 8011848:	030001c4 	movi	r12,7
 801184c:	00000506 	br	8011864 <___vfiprintf_internal_r+0x55c>
 8011850:	28800084 	addi	r2,r5,2
 8011854:	42000204 	addi	r8,r8,8
 8011858:	200b883a 	mov	r5,r4
 801185c:	b5bffc04 	addi	r22,r22,-16
 8011860:	3d800d0e 	bge	r7,r22,8011898 <___vfiprintf_internal_r+0x590>
 8011864:	18c00404 	addi	r3,r3,16
 8011868:	29000044 	addi	r4,r5,1
 801186c:	45c00015 	stw	r23,0(r8)
 8011870:	41c00115 	stw	r7,4(r8)
 8011874:	d8c11c15 	stw	r3,1136(sp)
 8011878:	d9011b15 	stw	r4,1132(sp)
 801187c:	613ff40e 	bge	r12,r4,8011850 <__alt_data_end+0xf8011850>
 8011880:	18019b1e 	bne	r3,zero,8011ef0 <___vfiprintf_internal_r+0xbe8>
 8011884:	b5bffc04 	addi	r22,r22,-16
 8011888:	000b883a 	mov	r5,zero
 801188c:	00800044 	movi	r2,1
 8011890:	d811883a 	mov	r8,sp
 8011894:	3dbff316 	blt	r7,r22,8011864 <__alt_data_end+0xf8011864>
 8011898:	da812317 	ldw	r10,1164(sp)
 801189c:	1d87883a 	add	r3,r3,r22
 80118a0:	45800115 	stw	r22,4(r8)
 80118a4:	42800015 	stw	r10,0(r8)
 80118a8:	d8c11c15 	stw	r3,1136(sp)
 80118ac:	d8811b15 	stw	r2,1132(sp)
 80118b0:	010001c4 	movi	r4,7
 80118b4:	2081dd16 	blt	r4,r2,801202c <___vfiprintf_internal_r+0xd24>
 80118b8:	42000204 	addi	r8,r8,8
 80118bc:	10800044 	addi	r2,r2,1
 80118c0:	da812417 	ldw	r10,1168(sp)
 80118c4:	1c47883a 	add	r3,r3,r17
 80118c8:	44400115 	stw	r17,4(r8)
 80118cc:	42800015 	stw	r10,0(r8)
 80118d0:	d8c11c15 	stw	r3,1136(sp)
 80118d4:	d8811b15 	stw	r2,1132(sp)
 80118d8:	010001c4 	movi	r4,7
 80118dc:	2081dc0e 	bge	r4,r2,8012050 <___vfiprintf_internal_r+0xd48>
 80118e0:	1802611e 	bne	r3,zero,8012268 <___vfiprintf_internal_r+0xf60>
 80118e4:	d8011b15 	stw	zero,1132(sp)
 80118e8:	aac0010c 	andi	r11,r21,4
 80118ec:	58002726 	beq	r11,zero,801198c <___vfiprintf_internal_r+0x684>
 80118f0:	9ca3c83a 	sub	r17,r19,r18
 80118f4:	d811883a 	mov	r8,sp
 80118f8:	0443510e 	bge	zero,r17,8012640 <___vfiprintf_internal_r+0x1338>
 80118fc:	01c00404 	movi	r7,16
 8011900:	3c43320e 	bge	r7,r17,80125cc <___vfiprintf_internal_r+0x12c4>
 8011904:	008200b4 	movhi	r2,2050
 8011908:	10b35584 	addi	r2,r2,-12970
 801190c:	d9011b17 	ldw	r4,1132(sp)
 8011910:	d8812315 	stw	r2,1164(sp)
 8011914:	382d883a 	mov	r22,r7
 8011918:	054001c4 	movi	r21,7
 801191c:	00000506 	br	8011934 <___vfiprintf_internal_r+0x62c>
 8011920:	21400084 	addi	r5,r4,2
 8011924:	42000204 	addi	r8,r8,8
 8011928:	1009883a 	mov	r4,r2
 801192c:	8c7ffc04 	addi	r17,r17,-16
 8011930:	b4400d0e 	bge	r22,r17,8011968 <___vfiprintf_internal_r+0x660>
 8011934:	18c00404 	addi	r3,r3,16
 8011938:	20800044 	addi	r2,r4,1
 801193c:	47000015 	stw	fp,0(r8)
 8011940:	45800115 	stw	r22,4(r8)
 8011944:	d8c11c15 	stw	r3,1136(sp)
 8011948:	d8811b15 	stw	r2,1132(sp)
 801194c:	a8bff40e 	bge	r21,r2,8011920 <__alt_data_end+0xf8011920>
 8011950:	1801ac1e 	bne	r3,zero,8012004 <___vfiprintf_internal_r+0xcfc>
 8011954:	8c7ffc04 	addi	r17,r17,-16
 8011958:	0009883a 	mov	r4,zero
 801195c:	01400044 	movi	r5,1
 8011960:	d811883a 	mov	r8,sp
 8011964:	b47ff316 	blt	r22,r17,8011934 <__alt_data_end+0xf8011934>
 8011968:	da812317 	ldw	r10,1164(sp)
 801196c:	1c47883a 	add	r3,r3,r17
 8011970:	44400115 	stw	r17,4(r8)
 8011974:	42800015 	stw	r10,0(r8)
 8011978:	d8c11c15 	stw	r3,1136(sp)
 801197c:	d9411b15 	stw	r5,1132(sp)
 8011980:	008001c4 	movi	r2,7
 8011984:	1141b70e 	bge	r2,r5,8012064 <___vfiprintf_internal_r+0xd5c>
 8011988:	1802cf1e 	bne	r3,zero,80124c8 <___vfiprintf_internal_r+0x11c0>
 801198c:	94c2ca16 	blt	r18,r19,80124b8 <___vfiprintf_internal_r+0x11b0>
 8011990:	dac12217 	ldw	r11,1160(sp)
 8011994:	5c97883a 	add	r11,r11,r18
 8011998:	dac12215 	stw	r11,1160(sp)
 801199c:	d8011b15 	stw	zero,1132(sp)
 80119a0:	d811883a 	mov	r8,sp
 80119a4:	003e8d06 	br	80113dc <__alt_data_end+0xf80113dc>
 80119a8:	d9012017 	ldw	r4,1152(sp)
 80119ac:	a00b883a 	mov	r5,r20
 80119b0:	8006c080 	call	8006c08 <__swsetup_r>
 80119b4:	10002c1e 	bne	r2,zero,8011a68 <___vfiprintf_internal_r+0x760>
 80119b8:	a0c0030b 	ldhu	r3,12(r20)
 80119bc:	01000284 	movi	r4,10
 80119c0:	1805883a 	mov	r2,r3
 80119c4:	1080068c 	andi	r2,r2,26
 80119c8:	113e731e 	bne	r2,r4,8011398 <__alt_data_end+0xf8011398>
 80119cc:	a080038b 	ldhu	r2,14(r20)
 80119d0:	113fffcc 	andi	r4,r2,65535
 80119d4:	2120001c 	xori	r4,r4,32768
 80119d8:	21200004 	addi	r4,r4,-32768
 80119dc:	203e6e16 	blt	r4,zero,8011398 <__alt_data_end+0xf8011398>
 80119e0:	a3001917 	ldw	r12,100(r20)
 80119e4:	a2c00717 	ldw	r11,28(r20)
 80119e8:	a2800917 	ldw	r10,36(r20)
 80119ec:	d9012017 	ldw	r4,1152(sp)
 80119f0:	d9c12117 	ldw	r7,1156(sp)
 80119f4:	02410004 	movi	r9,1024
 80119f8:	18ffff4c 	andi	r3,r3,65533
 80119fc:	da4b883a 	add	r5,sp,r9
 8011a00:	b00d883a 	mov	r6,r22
 8011a04:	d8c1030d 	sth	r3,1036(sp)
 8011a08:	db011915 	stw	r12,1124(sp)
 8011a0c:	d881038d 	sth	r2,1038(sp)
 8011a10:	dac10715 	stw	r11,1052(sp)
 8011a14:	da810915 	stw	r10,1060(sp)
 8011a18:	dec10015 	stw	sp,1024(sp)
 8011a1c:	dec10415 	stw	sp,1040(sp)
 8011a20:	da410215 	stw	r9,1032(sp)
 8011a24:	da410515 	stw	r9,1044(sp)
 8011a28:	d8010615 	stw	zero,1048(sp)
 8011a2c:	80113080 	call	8011308 <___vfiprintf_internal_r>
 8011a30:	1021883a 	mov	r16,r2
 8011a34:	10000416 	blt	r2,zero,8011a48 <___vfiprintf_internal_r+0x740>
 8011a38:	d9012017 	ldw	r4,1152(sp)
 8011a3c:	d9410004 	addi	r5,sp,1024
 8011a40:	80086b40 	call	80086b4 <_fflush_r>
 8011a44:	1002fc1e 	bne	r2,zero,8012638 <___vfiprintf_internal_r+0x1330>
 8011a48:	d881030b 	ldhu	r2,1036(sp)
 8011a4c:	1080100c 	andi	r2,r2,64
 8011a50:	10000326 	beq	r2,zero,8011a60 <___vfiprintf_internal_r+0x758>
 8011a54:	a080030b 	ldhu	r2,12(r20)
 8011a58:	10801014 	ori	r2,r2,64
 8011a5c:	a080030d 	sth	r2,12(r20)
 8011a60:	8005883a 	mov	r2,r16
 8011a64:	00000106 	br	8011a6c <___vfiprintf_internal_r+0x764>
 8011a68:	00bfffc4 	movi	r2,-1
 8011a6c:	dfc13517 	ldw	ra,1236(sp)
 8011a70:	df013417 	ldw	fp,1232(sp)
 8011a74:	ddc13317 	ldw	r23,1228(sp)
 8011a78:	dd813217 	ldw	r22,1224(sp)
 8011a7c:	dd413117 	ldw	r21,1220(sp)
 8011a80:	dd013017 	ldw	r20,1216(sp)
 8011a84:	dcc12f17 	ldw	r19,1212(sp)
 8011a88:	dc812e17 	ldw	r18,1208(sp)
 8011a8c:	dc412d17 	ldw	r17,1204(sp)
 8011a90:	dc012c17 	ldw	r16,1200(sp)
 8011a94:	dec13604 	addi	sp,sp,1240
 8011a98:	f800283a 	ret
 8011a9c:	8008c5c0 	call	8008c5c <__sinit>
 8011aa0:	003e2b06 	br	8011350 <__alt_data_end+0xf8011350>
 8011aa4:	04e7c83a 	sub	r19,zero,r19
 8011aa8:	d8812115 	stw	r2,1156(sp)
 8011aac:	ad400114 	ori	r21,r21,4
 8011ab0:	80c00007 	ldb	r3,0(r16)
 8011ab4:	003e7306 	br	8011484 <__alt_data_end+0xf8011484>
 8011ab8:	a880040c 	andi	r2,r21,16
 8011abc:	1000e41e 	bne	r2,zero,8011e50 <___vfiprintf_internal_r+0xb48>
 8011ac0:	a880100c 	andi	r2,r21,64
 8011ac4:	1000e226 	beq	r2,zero,8011e50 <___vfiprintf_internal_r+0xb48>
 8011ac8:	da812117 	ldw	r10,1156(sp)
 8011acc:	002d883a 	mov	r22,zero
 8011ad0:	0005883a 	mov	r2,zero
 8011ad4:	5480000b 	ldhu	r18,0(r10)
 8011ad8:	52800104 	addi	r10,r10,4
 8011adc:	da812115 	stw	r10,1156(sp)
 8011ae0:	9009883a 	mov	r4,r18
 8011ae4:	003ee706 	br	8011684 <__alt_data_end+0xf8011684>
 8011ae8:	da812117 	ldw	r10,1156(sp)
 8011aec:	00800044 	movi	r2,1
 8011af0:	54800017 	ldw	r18,0(r10)
 8011af4:	55800117 	ldw	r22,4(r10)
 8011af8:	52800204 	addi	r10,r10,8
 8011afc:	da812115 	stw	r10,1156(sp)
 8011b00:	9588b03a 	or	r4,r18,r22
 8011b04:	003edf06 	br	8011684 <__alt_data_end+0xf8011684>
 8011b08:	02c200b4 	movhi	r11,2050
 8011b0c:	5af22e04 	addi	r11,r11,-14152
 8011b10:	d9811d85 	stb	r6,1142(sp)
 8011b14:	dac12615 	stw	r11,1176(sp)
 8011b18:	a900080c 	andi	r4,r21,32
 8011b1c:	d8812117 	ldw	r2,1156(sp)
 8011b20:	2000a526 	beq	r4,zero,8011db8 <___vfiprintf_internal_r+0xab0>
 8011b24:	da812117 	ldw	r10,1156(sp)
 8011b28:	14800017 	ldw	r18,0(r2)
 8011b2c:	15800117 	ldw	r22,4(r2)
 8011b30:	52800204 	addi	r10,r10,8
 8011b34:	da812115 	stw	r10,1156(sp)
 8011b38:	a880004c 	andi	r2,r21,1
 8011b3c:	1001d926 	beq	r2,zero,80122a4 <___vfiprintf_internal_r+0xf9c>
 8011b40:	9588b03a 	or	r4,r18,r22
 8011b44:	20024426 	beq	r4,zero,8012458 <___vfiprintf_internal_r+0x1150>
 8011b48:	00800c04 	movi	r2,48
 8011b4c:	d8811d05 	stb	r2,1140(sp)
 8011b50:	d8c11d45 	stb	r3,1141(sp)
 8011b54:	ad400094 	ori	r21,r21,2
 8011b58:	00800084 	movi	r2,2
 8011b5c:	003ec906 	br	8011684 <__alt_data_end+0xf8011684>
 8011b60:	da812117 	ldw	r10,1156(sp)
 8011b64:	04800044 	movi	r18,1
 8011b68:	dac10004 	addi	r11,sp,1024
 8011b6c:	50800017 	ldw	r2,0(r10)
 8011b70:	52800104 	addi	r10,r10,4
 8011b74:	d8011d85 	stb	zero,1142(sp)
 8011b78:	d8810005 	stb	r2,1024(sp)
 8011b7c:	da812115 	stw	r10,1156(sp)
 8011b80:	9023883a 	mov	r17,r18
 8011b84:	dac12415 	stw	r11,1168(sp)
 8011b88:	0013883a 	mov	r9,zero
 8011b8c:	003ee206 	br	8011718 <__alt_data_end+0xf8011718>
 8011b90:	ad402014 	ori	r21,r21,128
 8011b94:	80c00007 	ldb	r3,0(r16)
 8011b98:	003e3a06 	br	8011484 <__alt_data_end+0xf8011484>
 8011b9c:	8015883a 	mov	r10,r16
 8011ba0:	0027883a 	mov	r19,zero
 8011ba4:	18bff404 	addi	r2,r3,-48
 8011ba8:	50c00007 	ldb	r3,0(r10)
 8011bac:	9cc002a4 	muli	r19,r19,10
 8011bb0:	84000044 	addi	r16,r16,1
 8011bb4:	8015883a 	mov	r10,r16
 8011bb8:	98a7883a 	add	r19,r19,r2
 8011bbc:	18bff404 	addi	r2,r3,-48
 8011bc0:	28bff92e 	bgeu	r5,r2,8011ba8 <__alt_data_end+0xf8011ba8>
 8011bc4:	003e3006 	br	8011488 <__alt_data_end+0xf8011488>
 8011bc8:	ad400414 	ori	r21,r21,16
 8011bcc:	d9811d85 	stb	r6,1142(sp)
 8011bd0:	a880080c 	andi	r2,r21,32
 8011bd4:	d8c12117 	ldw	r3,1156(sp)
 8011bd8:	10004b26 	beq	r2,zero,8011d08 <___vfiprintf_internal_r+0xa00>
 8011bdc:	da812117 	ldw	r10,1156(sp)
 8011be0:	18800117 	ldw	r2,4(r3)
 8011be4:	1c800017 	ldw	r18,0(r3)
 8011be8:	52800204 	addi	r10,r10,8
 8011bec:	da812115 	stw	r10,1156(sp)
 8011bf0:	102d883a 	mov	r22,r2
 8011bf4:	1001f116 	blt	r2,zero,80123bc <___vfiprintf_internal_r+0x10b4>
 8011bf8:	db011d83 	ldbu	r12,1142(sp)
 8011bfc:	4823883a 	mov	r17,r9
 8011c00:	00800044 	movi	r2,1
 8011c04:	9588b03a 	or	r4,r18,r22
 8011c08:	003ea106 	br	8011690 <__alt_data_end+0xf8011690>
 8011c0c:	80c00007 	ldb	r3,0(r16)
 8011c10:	82800044 	addi	r10,r16,1
 8011c14:	1b027f26 	beq	r3,r12,8012614 <___vfiprintf_internal_r+0x130c>
 8011c18:	18bff404 	addi	r2,r3,-48
 8011c1c:	5021883a 	mov	r16,r10
 8011c20:	0013883a 	mov	r9,zero
 8011c24:	28be1836 	bltu	r5,r2,8011488 <__alt_data_end+0xf8011488>
 8011c28:	80c00007 	ldb	r3,0(r16)
 8011c2c:	4a4002a4 	muli	r9,r9,10
 8011c30:	84000044 	addi	r16,r16,1
 8011c34:	1253883a 	add	r9,r2,r9
 8011c38:	18bff404 	addi	r2,r3,-48
 8011c3c:	28bffa2e 	bgeu	r5,r2,8011c28 <__alt_data_end+0xf8011c28>
 8011c40:	483e110e 	bge	r9,zero,8011488 <__alt_data_end+0xf8011488>
 8011c44:	027fffc4 	movi	r9,-1
 8011c48:	003e0f06 	br	8011488 <__alt_data_end+0xf8011488>
 8011c4c:	d9811d85 	stb	r6,1142(sp)
 8011c50:	a880080c 	andi	r2,r21,32
 8011c54:	1001ee26 	beq	r2,zero,8012410 <___vfiprintf_internal_r+0x1108>
 8011c58:	da812117 	ldw	r10,1156(sp)
 8011c5c:	dac12217 	ldw	r11,1160(sp)
 8011c60:	50800017 	ldw	r2,0(r10)
 8011c64:	5807d7fa 	srai	r3,r11,31
 8011c68:	52800104 	addi	r10,r10,4
 8011c6c:	da812115 	stw	r10,1156(sp)
 8011c70:	12c00015 	stw	r11,0(r2)
 8011c74:	10c00115 	stw	r3,4(r2)
 8011c78:	003dd806 	br	80113dc <__alt_data_end+0xf80113dc>
 8011c7c:	30803fcc 	andi	r2,r6,255
 8011c80:	1080201c 	xori	r2,r2,128
 8011c84:	10bfe004 	addi	r2,r2,-128
 8011c88:	1001df1e 	bne	r2,zero,8012408 <___vfiprintf_internal_r+0x1100>
 8011c8c:	01800804 	movi	r6,32
 8011c90:	80c00007 	ldb	r3,0(r16)
 8011c94:	003dfb06 	br	8011484 <__alt_data_end+0xf8011484>
 8011c98:	da812117 	ldw	r10,1156(sp)
 8011c9c:	dac12117 	ldw	r11,1156(sp)
 8011ca0:	d8011d85 	stb	zero,1142(sp)
 8011ca4:	52800017 	ldw	r10,0(r10)
 8011ca8:	5d800104 	addi	r22,r11,4
 8011cac:	da812415 	stw	r10,1168(sp)
 8011cb0:	50023b26 	beq	r10,zero,80125a0 <___vfiprintf_internal_r+0x1298>
 8011cb4:	d9012417 	ldw	r4,1168(sp)
 8011cb8:	48021f16 	blt	r9,zero,8012538 <___vfiprintf_internal_r+0x1230>
 8011cbc:	480d883a 	mov	r6,r9
 8011cc0:	000b883a 	mov	r5,zero
 8011cc4:	da012a15 	stw	r8,1192(sp)
 8011cc8:	da412b15 	stw	r9,1196(sp)
 8011ccc:	8009c340 	call	8009c34 <memchr>
 8011cd0:	da012a17 	ldw	r8,1192(sp)
 8011cd4:	da412b17 	ldw	r9,1196(sp)
 8011cd8:	10024726 	beq	r2,zero,80125f8 <___vfiprintf_internal_r+0x12f0>
 8011cdc:	d8c12417 	ldw	r3,1168(sp)
 8011ce0:	10e3c83a 	sub	r17,r2,r3
 8011ce4:	4c41f616 	blt	r9,r17,80124c0 <___vfiprintf_internal_r+0x11b8>
 8011ce8:	db011d83 	ldbu	r12,1142(sp)
 8011cec:	dd812115 	stw	r22,1156(sp)
 8011cf0:	0013883a 	mov	r9,zero
 8011cf4:	003e8006 	br	80116f8 <__alt_data_end+0xf80116f8>
 8011cf8:	d9811d85 	stb	r6,1142(sp)
 8011cfc:	a880080c 	andi	r2,r21,32
 8011d00:	d8c12117 	ldw	r3,1156(sp)
 8011d04:	103fb51e 	bne	r2,zero,8011bdc <__alt_data_end+0xf8011bdc>
 8011d08:	a880040c 	andi	r2,r21,16
 8011d0c:	10015e1e 	bne	r2,zero,8012288 <___vfiprintf_internal_r+0xf80>
 8011d10:	a880100c 	andi	r2,r21,64
 8011d14:	10015c26 	beq	r2,zero,8012288 <___vfiprintf_internal_r+0xf80>
 8011d18:	1c80000f 	ldh	r18,0(r3)
 8011d1c:	da812117 	ldw	r10,1156(sp)
 8011d20:	902dd7fa 	srai	r22,r18,31
 8011d24:	52800104 	addi	r10,r10,4
 8011d28:	da812115 	stw	r10,1156(sp)
 8011d2c:	b005883a 	mov	r2,r22
 8011d30:	003fb006 	br	8011bf4 <__alt_data_end+0xf8011bf4>
 8011d34:	da812117 	ldw	r10,1156(sp)
 8011d38:	00800c04 	movi	r2,48
 8011d3c:	02c200b4 	movhi	r11,2050
 8011d40:	54800017 	ldw	r18,0(r10)
 8011d44:	d8811d05 	stb	r2,1140(sp)
 8011d48:	52800104 	addi	r10,r10,4
 8011d4c:	00801e04 	movi	r2,120
 8011d50:	5af23304 	addi	r11,r11,-14132
 8011d54:	d8811d45 	stb	r2,1141(sp)
 8011d58:	002d883a 	mov	r22,zero
 8011d5c:	ad400094 	ori	r21,r21,2
 8011d60:	da812115 	stw	r10,1156(sp)
 8011d64:	dac12615 	stw	r11,1176(sp)
 8011d68:	00800084 	movi	r2,2
 8011d6c:	9009883a 	mov	r4,r18
 8011d70:	003e4406 	br	8011684 <__alt_data_end+0xf8011684>
 8011d74:	ad400814 	ori	r21,r21,32
 8011d78:	80c00007 	ldb	r3,0(r16)
 8011d7c:	003dc106 	br	8011484 <__alt_data_end+0xf8011484>
 8011d80:	ad401014 	ori	r21,r21,64
 8011d84:	80c00007 	ldb	r3,0(r16)
 8011d88:	003dbe06 	br	8011484 <__alt_data_end+0xf8011484>
 8011d8c:	80c00007 	ldb	r3,0(r16)
 8011d90:	19c1de26 	beq	r3,r7,801250c <___vfiprintf_internal_r+0x1204>
 8011d94:	ad400414 	ori	r21,r21,16
 8011d98:	003dba06 	br	8011484 <__alt_data_end+0xf8011484>
 8011d9c:	008200b4 	movhi	r2,2050
 8011da0:	10b23304 	addi	r2,r2,-14132
 8011da4:	d8812615 	stw	r2,1176(sp)
 8011da8:	d9811d85 	stb	r6,1142(sp)
 8011dac:	a900080c 	andi	r4,r21,32
 8011db0:	d8812117 	ldw	r2,1156(sp)
 8011db4:	203f5b1e 	bne	r4,zero,8011b24 <__alt_data_end+0xf8011b24>
 8011db8:	a900040c 	andi	r4,r21,16
 8011dbc:	2001a826 	beq	r4,zero,8012460 <___vfiprintf_internal_r+0x1158>
 8011dc0:	dac12117 	ldw	r11,1156(sp)
 8011dc4:	14800017 	ldw	r18,0(r2)
 8011dc8:	002d883a 	mov	r22,zero
 8011dcc:	5ac00104 	addi	r11,r11,4
 8011dd0:	dac12115 	stw	r11,1156(sp)
 8011dd4:	003f5806 	br	8011b38 <__alt_data_end+0xf8011b38>
 8011dd8:	da812117 	ldw	r10,1156(sp)
 8011ddc:	54c00017 	ldw	r19,0(r10)
 8011de0:	50800104 	addi	r2,r10,4
 8011de4:	983f2f16 	blt	r19,zero,8011aa4 <__alt_data_end+0xf8011aa4>
 8011de8:	d8812115 	stw	r2,1156(sp)
 8011dec:	80c00007 	ldb	r3,0(r16)
 8011df0:	003da406 	br	8011484 <__alt_data_end+0xf8011484>
 8011df4:	01800ac4 	movi	r6,43
 8011df8:	80c00007 	ldb	r3,0(r16)
 8011dfc:	003da106 	br	8011484 <__alt_data_end+0xf8011484>
 8011e00:	ad400054 	ori	r21,r21,1
 8011e04:	80c00007 	ldb	r3,0(r16)
 8011e08:	003d9e06 	br	8011484 <__alt_data_end+0xf8011484>
 8011e0c:	d9811d85 	stb	r6,1142(sp)
 8011e10:	18007126 	beq	r3,zero,8011fd8 <___vfiprintf_internal_r+0xcd0>
 8011e14:	04800044 	movi	r18,1
 8011e18:	d8c10005 	stb	r3,1024(sp)
 8011e1c:	d8c10004 	addi	r3,sp,1024
 8011e20:	d8011d85 	stb	zero,1142(sp)
 8011e24:	9023883a 	mov	r17,r18
 8011e28:	d8c12415 	stw	r3,1168(sp)
 8011e2c:	003f5606 	br	8011b88 <__alt_data_end+0xf8011b88>
 8011e30:	dac12117 	ldw	r11,1156(sp)
 8011e34:	002d883a 	mov	r22,zero
 8011e38:	00800044 	movi	r2,1
 8011e3c:	5c800017 	ldw	r18,0(r11)
 8011e40:	5ac00104 	addi	r11,r11,4
 8011e44:	dac12115 	stw	r11,1156(sp)
 8011e48:	9009883a 	mov	r4,r18
 8011e4c:	003e0d06 	br	8011684 <__alt_data_end+0xf8011684>
 8011e50:	dac12117 	ldw	r11,1156(sp)
 8011e54:	002d883a 	mov	r22,zero
 8011e58:	0005883a 	mov	r2,zero
 8011e5c:	5c800017 	ldw	r18,0(r11)
 8011e60:	5ac00104 	addi	r11,r11,4
 8011e64:	dac12115 	stw	r11,1156(sp)
 8011e68:	9009883a 	mov	r4,r18
 8011e6c:	003e0506 	br	8011684 <__alt_data_end+0xf8011684>
 8011e70:	d9012017 	ldw	r4,1152(sp)
 8011e74:	a00b883a 	mov	r5,r20
 8011e78:	d9811a04 	addi	r6,sp,1128
 8011e7c:	d8c12a15 	stw	r3,1192(sp)
 8011e80:	db012b15 	stw	r12,1196(sp)
 8011e84:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8011e88:	d8c12a17 	ldw	r3,1192(sp)
 8011e8c:	db012b17 	ldw	r12,1196(sp)
 8011e90:	1000571e 	bne	r2,zero,8011ff0 <___vfiprintf_internal_r+0xce8>
 8011e94:	d9811b17 	ldw	r6,1132(sp)
 8011e98:	d8811c17 	ldw	r2,1136(sp)
 8011e9c:	d811883a 	mov	r8,sp
 8011ea0:	31400044 	addi	r5,r6,1
 8011ea4:	003e3306 	br	8011774 <__alt_data_end+0xf8011774>
 8011ea8:	d9411b17 	ldw	r5,1132(sp)
 8011eac:	d8c11c17 	ldw	r3,1136(sp)
 8011eb0:	28800044 	addi	r2,r5,1
 8011eb4:	d9011d87 	ldb	r4,1142(sp)
 8011eb8:	203e4d26 	beq	r4,zero,80117f0 <__alt_data_end+0xf80117f0>
 8011ebc:	01000044 	movi	r4,1
 8011ec0:	d9411d84 	addi	r5,sp,1142
 8011ec4:	1907883a 	add	r3,r3,r4
 8011ec8:	41400015 	stw	r5,0(r8)
 8011ecc:	41000115 	stw	r4,4(r8)
 8011ed0:	d8c11c15 	stw	r3,1136(sp)
 8011ed4:	d8811b15 	stw	r2,1132(sp)
 8011ed8:	014001c4 	movi	r5,7
 8011edc:	2880aa16 	blt	r5,r2,8012188 <___vfiprintf_internal_r+0xe80>
 8011ee0:	100b883a 	mov	r5,r2
 8011ee4:	42000204 	addi	r8,r8,8
 8011ee8:	10800044 	addi	r2,r2,1
 8011eec:	003e4006 	br	80117f0 <__alt_data_end+0xf80117f0>
 8011ef0:	d9012017 	ldw	r4,1152(sp)
 8011ef4:	a00b883a 	mov	r5,r20
 8011ef8:	d9811a04 	addi	r6,sp,1128
 8011efc:	d9c12a15 	stw	r7,1192(sp)
 8011f00:	db012b15 	stw	r12,1196(sp)
 8011f04:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8011f08:	d9c12a17 	ldw	r7,1192(sp)
 8011f0c:	db012b17 	ldw	r12,1196(sp)
 8011f10:	1000371e 	bne	r2,zero,8011ff0 <___vfiprintf_internal_r+0xce8>
 8011f14:	d9411b17 	ldw	r5,1132(sp)
 8011f18:	d8c11c17 	ldw	r3,1136(sp)
 8011f1c:	d811883a 	mov	r8,sp
 8011f20:	28800044 	addi	r2,r5,1
 8011f24:	003e4d06 	br	801185c <__alt_data_end+0xf801185c>
 8011f28:	10803fcc 	andi	r2,r2,255
 8011f2c:	00c00044 	movi	r3,1
 8011f30:	10fddf1e 	bne	r2,r3,80116b0 <__alt_data_end+0xf80116b0>
 8011f34:	b000021e 	bne	r22,zero,8011f40 <___vfiprintf_internal_r+0xc38>
 8011f38:	00800244 	movi	r2,9
 8011f3c:	1480202e 	bgeu	r2,r18,8011fc0 <___vfiprintf_internal_r+0xcb8>
 8011f40:	dc012515 	stw	r16,1172(sp)
 8011f44:	dc410a04 	addi	r17,sp,1064
 8011f48:	9021883a 	mov	r16,r18
 8011f4c:	da012415 	stw	r8,1168(sp)
 8011f50:	b025883a 	mov	r18,r22
 8011f54:	da412315 	stw	r9,1164(sp)
 8011f58:	602d883a 	mov	r22,r12
 8011f5c:	8009883a 	mov	r4,r16
 8011f60:	900b883a 	mov	r5,r18
 8011f64:	01800284 	movi	r6,10
 8011f68:	000f883a 	mov	r7,zero
 8011f6c:	80154100 	call	8015410 <__umoddi3>
 8011f70:	10800c04 	addi	r2,r2,48
 8011f74:	8c7fffc4 	addi	r17,r17,-1
 8011f78:	8009883a 	mov	r4,r16
 8011f7c:	900b883a 	mov	r5,r18
 8011f80:	01800284 	movi	r6,10
 8011f84:	000f883a 	mov	r7,zero
 8011f88:	88800005 	stb	r2,0(r17)
 8011f8c:	8014e500 	call	8014e50 <__udivdi3>
 8011f90:	1021883a 	mov	r16,r2
 8011f94:	10c4b03a 	or	r2,r2,r3
 8011f98:	1825883a 	mov	r18,r3
 8011f9c:	103fef1e 	bne	r2,zero,8011f5c <__alt_data_end+0xf8011f5c>
 8011fa0:	da811e17 	ldw	r10,1144(sp)
 8011fa4:	da012417 	ldw	r8,1168(sp)
 8011fa8:	da412317 	ldw	r9,1164(sp)
 8011fac:	dc412415 	stw	r17,1168(sp)
 8011fb0:	b019883a 	mov	r12,r22
 8011fb4:	dc012517 	ldw	r16,1172(sp)
 8011fb8:	5463c83a 	sub	r17,r10,r17
 8011fbc:	003dce06 	br	80116f8 <__alt_data_end+0xf80116f8>
 8011fc0:	94800c04 	addi	r18,r18,48
 8011fc4:	d8c109c4 	addi	r3,sp,1063
 8011fc8:	dc8109c5 	stb	r18,1063(sp)
 8011fcc:	dc412717 	ldw	r17,1180(sp)
 8011fd0:	d8c12415 	stw	r3,1168(sp)
 8011fd4:	003dc806 	br	80116f8 <__alt_data_end+0xf80116f8>
 8011fd8:	d8811c17 	ldw	r2,1136(sp)
 8011fdc:	10000426 	beq	r2,zero,8011ff0 <___vfiprintf_internal_r+0xce8>
 8011fe0:	d9012017 	ldw	r4,1152(sp)
 8011fe4:	a00b883a 	mov	r5,r20
 8011fe8:	d9811a04 	addi	r6,sp,1128
 8011fec:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8011ff0:	a080030b 	ldhu	r2,12(r20)
 8011ff4:	1080100c 	andi	r2,r2,64
 8011ff8:	103e9b1e 	bne	r2,zero,8011a68 <__alt_data_end+0xf8011a68>
 8011ffc:	d8812217 	ldw	r2,1160(sp)
 8012000:	003e9a06 	br	8011a6c <__alt_data_end+0xf8011a6c>
 8012004:	d9012017 	ldw	r4,1152(sp)
 8012008:	a00b883a 	mov	r5,r20
 801200c:	d9811a04 	addi	r6,sp,1128
 8012010:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8012014:	103ff61e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 8012018:	d9011b17 	ldw	r4,1132(sp)
 801201c:	d8c11c17 	ldw	r3,1136(sp)
 8012020:	d811883a 	mov	r8,sp
 8012024:	21400044 	addi	r5,r4,1
 8012028:	003e4006 	br	801192c <__alt_data_end+0xf801192c>
 801202c:	1800d61e 	bne	r3,zero,8012388 <___vfiprintf_internal_r+0x1080>
 8012030:	dac12417 	ldw	r11,1168(sp)
 8012034:	00800044 	movi	r2,1
 8012038:	dc400115 	stw	r17,4(sp)
 801203c:	dac00015 	stw	r11,0(sp)
 8012040:	dc411c15 	stw	r17,1136(sp)
 8012044:	d8811b15 	stw	r2,1132(sp)
 8012048:	8807883a 	mov	r3,r17
 801204c:	d811883a 	mov	r8,sp
 8012050:	42000204 	addi	r8,r8,8
 8012054:	aac0010c 	andi	r11,r21,4
 8012058:	58000226 	beq	r11,zero,8012064 <___vfiprintf_internal_r+0xd5c>
 801205c:	9ca3c83a 	sub	r17,r19,r18
 8012060:	047e2616 	blt	zero,r17,80118fc <__alt_data_end+0xf80118fc>
 8012064:	94c0010e 	bge	r18,r19,801206c <___vfiprintf_internal_r+0xd64>
 8012068:	9825883a 	mov	r18,r19
 801206c:	da812217 	ldw	r10,1160(sp)
 8012070:	5495883a 	add	r10,r10,r18
 8012074:	da812215 	stw	r10,1160(sp)
 8012078:	183e4826 	beq	r3,zero,801199c <__alt_data_end+0xf801199c>
 801207c:	d9012017 	ldw	r4,1152(sp)
 8012080:	a00b883a 	mov	r5,r20
 8012084:	d9811a04 	addi	r6,sp,1128
 8012088:	80111f40 	call	80111f4 <__sprint_r.part.0>
 801208c:	103e4326 	beq	r2,zero,801199c <__alt_data_end+0xf801199c>
 8012090:	003fd706 	br	8011ff0 <__alt_data_end+0xf8011ff0>
 8012094:	9cadc83a 	sub	r22,r19,r18
 8012098:	05bde40e 	bge	zero,r22,801182c <__alt_data_end+0xf801182c>
 801209c:	03000404 	movi	r12,16
 80120a0:	6581500e 	bge	r12,r22,80125e4 <___vfiprintf_internal_r+0x12dc>
 80120a4:	008200b4 	movhi	r2,2050
 80120a8:	10b35184 	addi	r2,r2,-12986
 80120ac:	d8812315 	stw	r2,1164(sp)
 80120b0:	8005883a 	mov	r2,r16
 80120b4:	038001c4 	movi	r14,7
 80120b8:	b021883a 	mov	r16,r22
 80120bc:	da412515 	stw	r9,1172(sp)
 80120c0:	102d883a 	mov	r22,r2
 80120c4:	00000506 	br	80120dc <___vfiprintf_internal_r+0xdd4>
 80120c8:	29000084 	addi	r4,r5,2
 80120cc:	42000204 	addi	r8,r8,8
 80120d0:	100b883a 	mov	r5,r2
 80120d4:	843ffc04 	addi	r16,r16,-16
 80120d8:	64000d0e 	bge	r12,r16,8012110 <___vfiprintf_internal_r+0xe08>
 80120dc:	18c00404 	addi	r3,r3,16
 80120e0:	28800044 	addi	r2,r5,1
 80120e4:	45c00015 	stw	r23,0(r8)
 80120e8:	43000115 	stw	r12,4(r8)
 80120ec:	d8c11c15 	stw	r3,1136(sp)
 80120f0:	d8811b15 	stw	r2,1132(sp)
 80120f4:	70bff40e 	bge	r14,r2,80120c8 <__alt_data_end+0xf80120c8>
 80120f8:	1800151e 	bne	r3,zero,8012150 <___vfiprintf_internal_r+0xe48>
 80120fc:	843ffc04 	addi	r16,r16,-16
 8012100:	000b883a 	mov	r5,zero
 8012104:	01000044 	movi	r4,1
 8012108:	d811883a 	mov	r8,sp
 801210c:	643ff316 	blt	r12,r16,80120dc <__alt_data_end+0xf80120dc>
 8012110:	da412517 	ldw	r9,1172(sp)
 8012114:	b005883a 	mov	r2,r22
 8012118:	802d883a 	mov	r22,r16
 801211c:	1021883a 	mov	r16,r2
 8012120:	da812317 	ldw	r10,1164(sp)
 8012124:	1d87883a 	add	r3,r3,r22
 8012128:	45800115 	stw	r22,4(r8)
 801212c:	42800015 	stw	r10,0(r8)
 8012130:	d8c11c15 	stw	r3,1136(sp)
 8012134:	d9011b15 	stw	r4,1132(sp)
 8012138:	008001c4 	movi	r2,7
 801213c:	11008d16 	blt	r2,r4,8012374 <___vfiprintf_internal_r+0x106c>
 8012140:	42000204 	addi	r8,r8,8
 8012144:	20800044 	addi	r2,r4,1
 8012148:	200b883a 	mov	r5,r4
 801214c:	003db706 	br	801182c <__alt_data_end+0xf801182c>
 8012150:	d9012017 	ldw	r4,1152(sp)
 8012154:	a00b883a 	mov	r5,r20
 8012158:	d9811a04 	addi	r6,sp,1128
 801215c:	db012b15 	stw	r12,1196(sp)
 8012160:	db812a15 	stw	r14,1192(sp)
 8012164:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8012168:	db012b17 	ldw	r12,1196(sp)
 801216c:	db812a17 	ldw	r14,1192(sp)
 8012170:	103f9f1e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 8012174:	d9411b17 	ldw	r5,1132(sp)
 8012178:	d8c11c17 	ldw	r3,1136(sp)
 801217c:	d811883a 	mov	r8,sp
 8012180:	29000044 	addi	r4,r5,1
 8012184:	003fd306 	br	80120d4 <__alt_data_end+0xf80120d4>
 8012188:	18006c1e 	bne	r3,zero,801233c <___vfiprintf_internal_r+0x1034>
 801218c:	70004f26 	beq	r14,zero,80122cc <___vfiprintf_internal_r+0xfc4>
 8012190:	d8811d04 	addi	r2,sp,1140
 8012194:	00c00084 	movi	r3,2
 8012198:	d8800015 	stw	r2,0(sp)
 801219c:	d8c00115 	stw	r3,4(sp)
 80121a0:	2005883a 	mov	r2,r4
 80121a4:	d811883a 	mov	r8,sp
 80121a8:	003d9b06 	br	8011818 <__alt_data_end+0xf8011818>
 80121ac:	1800571e 	bne	r3,zero,801230c <___vfiprintf_internal_r+0x1004>
 80121b0:	000b883a 	mov	r5,zero
 80121b4:	00800044 	movi	r2,1
 80121b8:	d811883a 	mov	r8,sp
 80121bc:	003d9906 	br	8011824 <__alt_data_end+0xf8011824>
 80121c0:	10803fcc 	andi	r2,r2,255
 80121c4:	1000251e 	bne	r2,zero,801225c <___vfiprintf_internal_r+0xf54>
 80121c8:	a880004c 	andi	r2,r21,1
 80121cc:	10007826 	beq	r2,zero,80123b0 <___vfiprintf_internal_r+0x10a8>
 80121d0:	00800c04 	movi	r2,48
 80121d4:	d8c109c4 	addi	r3,sp,1063
 80121d8:	d88109c5 	stb	r2,1063(sp)
 80121dc:	dc412717 	ldw	r17,1180(sp)
 80121e0:	d8c12415 	stw	r3,1168(sp)
 80121e4:	003d4406 	br	80116f8 <__alt_data_end+0xf80116f8>
 80121e8:	d9012617 	ldw	r4,1176(sp)
 80121ec:	dc410a04 	addi	r17,sp,1064
 80121f0:	908003cc 	andi	r2,r18,15
 80121f4:	b006973a 	slli	r3,r22,28
 80121f8:	2085883a 	add	r2,r4,r2
 80121fc:	9024d13a 	srli	r18,r18,4
 8012200:	10800003 	ldbu	r2,0(r2)
 8012204:	b02cd13a 	srli	r22,r22,4
 8012208:	8c7fffc4 	addi	r17,r17,-1
 801220c:	1ca4b03a 	or	r18,r3,r18
 8012210:	88800005 	stb	r2,0(r17)
 8012214:	9584b03a 	or	r2,r18,r22
 8012218:	103ff51e 	bne	r2,zero,80121f0 <__alt_data_end+0xf80121f0>
 801221c:	dac11e17 	ldw	r11,1144(sp)
 8012220:	dc412415 	stw	r17,1168(sp)
 8012224:	5c63c83a 	sub	r17,r11,r17
 8012228:	003d3306 	br	80116f8 <__alt_data_end+0xf80116f8>
 801222c:	1800941e 	bne	r3,zero,8012480 <___vfiprintf_internal_r+0x1178>
 8012230:	d8811d87 	ldb	r2,1142(sp)
 8012234:	10006b26 	beq	r2,zero,80123e4 <___vfiprintf_internal_r+0x10dc>
 8012238:	00c00044 	movi	r3,1
 801223c:	d9011d84 	addi	r4,sp,1142
 8012240:	1805883a 	mov	r2,r3
 8012244:	d9000015 	stw	r4,0(sp)
 8012248:	d8c00115 	stw	r3,4(sp)
 801224c:	d811883a 	mov	r8,sp
 8012250:	003f2306 	br	8011ee0 <__alt_data_end+0xf8011ee0>
 8012254:	8023883a 	mov	r17,r16
 8012258:	003c7d06 	br	8011450 <__alt_data_end+0xf8011450>
 801225c:	da810a04 	addi	r10,sp,1064
 8012260:	da812415 	stw	r10,1168(sp)
 8012264:	003d2406 	br	80116f8 <__alt_data_end+0xf80116f8>
 8012268:	d9012017 	ldw	r4,1152(sp)
 801226c:	a00b883a 	mov	r5,r20
 8012270:	d9811a04 	addi	r6,sp,1128
 8012274:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8012278:	103f5d1e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 801227c:	d8c11c17 	ldw	r3,1136(sp)
 8012280:	d811883a 	mov	r8,sp
 8012284:	003f7306 	br	8012054 <__alt_data_end+0xf8012054>
 8012288:	1c800017 	ldw	r18,0(r3)
 801228c:	dac12117 	ldw	r11,1156(sp)
 8012290:	902dd7fa 	srai	r22,r18,31
 8012294:	5ac00104 	addi	r11,r11,4
 8012298:	dac12115 	stw	r11,1156(sp)
 801229c:	b005883a 	mov	r2,r22
 80122a0:	003e5406 	br	8011bf4 <__alt_data_end+0xf8011bf4>
 80122a4:	00800084 	movi	r2,2
 80122a8:	9588b03a 	or	r4,r18,r22
 80122ac:	003cf506 	br	8011684 <__alt_data_end+0xf8011684>
 80122b0:	d9012017 	ldw	r4,1152(sp)
 80122b4:	a00b883a 	mov	r5,r20
 80122b8:	d9811a04 	addi	r6,sp,1128
 80122bc:	80111f40 	call	80111f4 <__sprint_r.part.0>
 80122c0:	103f4b1e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 80122c4:	d811883a 	mov	r8,sp
 80122c8:	003cd106 	br	8011610 <__alt_data_end+0xf8011610>
 80122cc:	000b883a 	mov	r5,zero
 80122d0:	2005883a 	mov	r2,r4
 80122d4:	d811883a 	mov	r8,sp
 80122d8:	003d5206 	br	8011824 <__alt_data_end+0xf8011824>
 80122dc:	10803fcc 	andi	r2,r2,255
 80122e0:	1080201c 	xori	r2,r2,128
 80122e4:	10bfe004 	addi	r2,r2,-128
 80122e8:	01000c04 	movi	r4,48
 80122ec:	11008e26 	beq	r2,r4,8012528 <___vfiprintf_internal_r+0x1220>
 80122f0:	da812417 	ldw	r10,1168(sp)
 80122f4:	dac11e17 	ldw	r11,1144(sp)
 80122f8:	193fffc5 	stb	r4,-1(r3)
 80122fc:	52bfffc4 	addi	r10,r10,-1
 8012300:	da812415 	stw	r10,1168(sp)
 8012304:	5aa3c83a 	sub	r17,r11,r10
 8012308:	003cfb06 	br	80116f8 <__alt_data_end+0xf80116f8>
 801230c:	d9012017 	ldw	r4,1152(sp)
 8012310:	a00b883a 	mov	r5,r20
 8012314:	d9811a04 	addi	r6,sp,1128
 8012318:	da412b15 	stw	r9,1196(sp)
 801231c:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8012320:	da412b17 	ldw	r9,1196(sp)
 8012324:	103f321e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 8012328:	d9411b17 	ldw	r5,1132(sp)
 801232c:	d8c11c17 	ldw	r3,1136(sp)
 8012330:	d811883a 	mov	r8,sp
 8012334:	28800044 	addi	r2,r5,1
 8012338:	003d3a06 	br	8011824 <__alt_data_end+0xf8011824>
 801233c:	d9012017 	ldw	r4,1152(sp)
 8012340:	a00b883a 	mov	r5,r20
 8012344:	d9811a04 	addi	r6,sp,1128
 8012348:	da412b15 	stw	r9,1196(sp)
 801234c:	db812a15 	stw	r14,1192(sp)
 8012350:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8012354:	da412b17 	ldw	r9,1196(sp)
 8012358:	db812a17 	ldw	r14,1192(sp)
 801235c:	103f241e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 8012360:	d9411b17 	ldw	r5,1132(sp)
 8012364:	d8c11c17 	ldw	r3,1136(sp)
 8012368:	d811883a 	mov	r8,sp
 801236c:	28800044 	addi	r2,r5,1
 8012370:	003d1f06 	br	80117f0 <__alt_data_end+0xf80117f0>
 8012374:	1800781e 	bne	r3,zero,8012558 <___vfiprintf_internal_r+0x1250>
 8012378:	000b883a 	mov	r5,zero
 801237c:	00800044 	movi	r2,1
 8012380:	d811883a 	mov	r8,sp
 8012384:	003d2906 	br	801182c <__alt_data_end+0xf801182c>
 8012388:	d9012017 	ldw	r4,1152(sp)
 801238c:	a00b883a 	mov	r5,r20
 8012390:	d9811a04 	addi	r6,sp,1128
 8012394:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8012398:	103f151e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 801239c:	d8811b17 	ldw	r2,1132(sp)
 80123a0:	d8c11c17 	ldw	r3,1136(sp)
 80123a4:	d811883a 	mov	r8,sp
 80123a8:	10800044 	addi	r2,r2,1
 80123ac:	003d4406 	br	80118c0 <__alt_data_end+0xf80118c0>
 80123b0:	dac10a04 	addi	r11,sp,1064
 80123b4:	dac12415 	stw	r11,1168(sp)
 80123b8:	003ccf06 	br	80116f8 <__alt_data_end+0xf80116f8>
 80123bc:	04a5c83a 	sub	r18,zero,r18
 80123c0:	9004c03a 	cmpne	r2,r18,zero
 80123c4:	05adc83a 	sub	r22,zero,r22
 80123c8:	b0adc83a 	sub	r22,r22,r2
 80123cc:	03000b44 	movi	r12,45
 80123d0:	db011d85 	stb	r12,1142(sp)
 80123d4:	4823883a 	mov	r17,r9
 80123d8:	00800044 	movi	r2,1
 80123dc:	9588b03a 	or	r4,r18,r22
 80123e0:	003cab06 	br	8011690 <__alt_data_end+0xf8011690>
 80123e4:	000b883a 	mov	r5,zero
 80123e8:	00800044 	movi	r2,1
 80123ec:	d811883a 	mov	r8,sp
 80123f0:	703d0c26 	beq	r14,zero,8011824 <__alt_data_end+0xf8011824>
 80123f4:	00c00084 	movi	r3,2
 80123f8:	d9011d04 	addi	r4,sp,1140
 80123fc:	d9000015 	stw	r4,0(sp)
 8012400:	d8c00115 	stw	r3,4(sp)
 8012404:	003d0406 	br	8011818 <__alt_data_end+0xf8011818>
 8012408:	80c00007 	ldb	r3,0(r16)
 801240c:	003c1d06 	br	8011484 <__alt_data_end+0xf8011484>
 8012410:	a880040c 	andi	r2,r21,16
 8012414:	1000091e 	bne	r2,zero,801243c <___vfiprintf_internal_r+0x1134>
 8012418:	aac0100c 	andi	r11,r21,64
 801241c:	58000726 	beq	r11,zero,801243c <___vfiprintf_internal_r+0x1134>
 8012420:	da812117 	ldw	r10,1156(sp)
 8012424:	dac12217 	ldw	r11,1160(sp)
 8012428:	50800017 	ldw	r2,0(r10)
 801242c:	52800104 	addi	r10,r10,4
 8012430:	da812115 	stw	r10,1156(sp)
 8012434:	12c0000d 	sth	r11,0(r2)
 8012438:	003be806 	br	80113dc <__alt_data_end+0xf80113dc>
 801243c:	da812117 	ldw	r10,1156(sp)
 8012440:	dac12217 	ldw	r11,1160(sp)
 8012444:	50800017 	ldw	r2,0(r10)
 8012448:	52800104 	addi	r10,r10,4
 801244c:	da812115 	stw	r10,1156(sp)
 8012450:	12c00015 	stw	r11,0(r2)
 8012454:	003be106 	br	80113dc <__alt_data_end+0xf80113dc>
 8012458:	00800084 	movi	r2,2
 801245c:	003c8906 	br	8011684 <__alt_data_end+0xf8011684>
 8012460:	a900100c 	andi	r4,r21,64
 8012464:	20001f26 	beq	r4,zero,80124e4 <___vfiprintf_internal_r+0x11dc>
 8012468:	da812117 	ldw	r10,1156(sp)
 801246c:	1480000b 	ldhu	r18,0(r2)
 8012470:	002d883a 	mov	r22,zero
 8012474:	52800104 	addi	r10,r10,4
 8012478:	da812115 	stw	r10,1156(sp)
 801247c:	003dae06 	br	8011b38 <__alt_data_end+0xf8011b38>
 8012480:	d9012017 	ldw	r4,1152(sp)
 8012484:	a00b883a 	mov	r5,r20
 8012488:	d9811a04 	addi	r6,sp,1128
 801248c:	da412b15 	stw	r9,1196(sp)
 8012490:	db812a15 	stw	r14,1192(sp)
 8012494:	80111f40 	call	80111f4 <__sprint_r.part.0>
 8012498:	da412b17 	ldw	r9,1196(sp)
 801249c:	db812a17 	ldw	r14,1192(sp)
 80124a0:	103ed31e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 80124a4:	d9411b17 	ldw	r5,1132(sp)
 80124a8:	d8c11c17 	ldw	r3,1136(sp)
 80124ac:	d811883a 	mov	r8,sp
 80124b0:	28800044 	addi	r2,r5,1
 80124b4:	003e7f06 	br	8011eb4 <__alt_data_end+0xf8011eb4>
 80124b8:	9825883a 	mov	r18,r19
 80124bc:	003d3406 	br	8011990 <__alt_data_end+0xf8011990>
 80124c0:	4823883a 	mov	r17,r9
 80124c4:	003e0806 	br	8011ce8 <__alt_data_end+0xf8011ce8>
 80124c8:	d9012017 	ldw	r4,1152(sp)
 80124cc:	a00b883a 	mov	r5,r20
 80124d0:	d9811a04 	addi	r6,sp,1128
 80124d4:	80111f40 	call	80111f4 <__sprint_r.part.0>
 80124d8:	103ec51e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 80124dc:	d8c11c17 	ldw	r3,1136(sp)
 80124e0:	003ee006 	br	8012064 <__alt_data_end+0xf8012064>
 80124e4:	dac12117 	ldw	r11,1156(sp)
 80124e8:	14800017 	ldw	r18,0(r2)
 80124ec:	002d883a 	mov	r22,zero
 80124f0:	5ac00104 	addi	r11,r11,4
 80124f4:	dac12115 	stw	r11,1156(sp)
 80124f8:	003d8f06 	br	8011b38 <__alt_data_end+0xf8011b38>
 80124fc:	02c200b4 	movhi	r11,2050
 8012500:	5af35184 	addi	r11,r11,-12986
 8012504:	dac12315 	stw	r11,1164(sp)
 8012508:	003ce306 	br	8011898 <__alt_data_end+0xf8011898>
 801250c:	80c00043 	ldbu	r3,1(r16)
 8012510:	ad400814 	ori	r21,r21,32
 8012514:	84000044 	addi	r16,r16,1
 8012518:	18c03fcc 	andi	r3,r3,255
 801251c:	18c0201c 	xori	r3,r3,128
 8012520:	18ffe004 	addi	r3,r3,-128
 8012524:	003bd706 	br	8011484 <__alt_data_end+0xf8011484>
 8012528:	dac11e17 	ldw	r11,1144(sp)
 801252c:	d8c12417 	ldw	r3,1168(sp)
 8012530:	58e3c83a 	sub	r17,r11,r3
 8012534:	003c7006 	br	80116f8 <__alt_data_end+0xf80116f8>
 8012538:	da012a15 	stw	r8,1192(sp)
 801253c:	800338c0 	call	800338c <strlen>
 8012540:	1023883a 	mov	r17,r2
 8012544:	db011d83 	ldbu	r12,1142(sp)
 8012548:	dd812115 	stw	r22,1156(sp)
 801254c:	0013883a 	mov	r9,zero
 8012550:	da012a17 	ldw	r8,1192(sp)
 8012554:	003c6806 	br	80116f8 <__alt_data_end+0xf80116f8>
 8012558:	d9012017 	ldw	r4,1152(sp)
 801255c:	a00b883a 	mov	r5,r20
 8012560:	d9811a04 	addi	r6,sp,1128
 8012564:	da412b15 	stw	r9,1196(sp)
 8012568:	80111f40 	call	80111f4 <__sprint_r.part.0>
 801256c:	da412b17 	ldw	r9,1196(sp)
 8012570:	103e9f1e 	bne	r2,zero,8011ff0 <__alt_data_end+0xf8011ff0>
 8012574:	d9411b17 	ldw	r5,1132(sp)
 8012578:	d8c11c17 	ldw	r3,1136(sp)
 801257c:	d811883a 	mov	r8,sp
 8012580:	28800044 	addi	r2,r5,1
 8012584:	003ca906 	br	801182c <__alt_data_end+0xf801182c>
 8012588:	d9411b17 	ldw	r5,1132(sp)
 801258c:	010200b4 	movhi	r4,2050
 8012590:	21335584 	addi	r4,r4,-12970
 8012594:	d9012315 	stw	r4,1164(sp)
 8012598:	29400044 	addi	r5,r5,1
 801259c:	003c8806 	br	80117c0 <__alt_data_end+0xf80117c0>
 80125a0:	00800184 	movi	r2,6
 80125a4:	1240012e 	bgeu	r2,r9,80125ac <___vfiprintf_internal_r+0x12a4>
 80125a8:	1013883a 	mov	r9,r2
 80125ac:	4823883a 	mov	r17,r9
 80125b0:	4825883a 	mov	r18,r9
 80125b4:	48001516 	blt	r9,zero,801260c <___vfiprintf_internal_r+0x1304>
 80125b8:	008200b4 	movhi	r2,2050
 80125bc:	10b23804 	addi	r2,r2,-14112
 80125c0:	dd812115 	stw	r22,1156(sp)
 80125c4:	d8812415 	stw	r2,1168(sp)
 80125c8:	003d6f06 	br	8011b88 <__alt_data_end+0xf8011b88>
 80125cc:	d9411b17 	ldw	r5,1132(sp)
 80125d0:	02c200b4 	movhi	r11,2050
 80125d4:	5af35584 	addi	r11,r11,-12970
 80125d8:	dac12315 	stw	r11,1164(sp)
 80125dc:	29400044 	addi	r5,r5,1
 80125e0:	003ce106 	br	8011968 <__alt_data_end+0xf8011968>
 80125e4:	010200b4 	movhi	r4,2050
 80125e8:	21335184 	addi	r4,r4,-12986
 80125ec:	d9012315 	stw	r4,1164(sp)
 80125f0:	1009883a 	mov	r4,r2
 80125f4:	003eca06 	br	8012120 <__alt_data_end+0xf8012120>
 80125f8:	4823883a 	mov	r17,r9
 80125fc:	db011d83 	ldbu	r12,1142(sp)
 8012600:	dd812115 	stw	r22,1156(sp)
 8012604:	0013883a 	mov	r9,zero
 8012608:	003c3b06 	br	80116f8 <__alt_data_end+0xf80116f8>
 801260c:	0025883a 	mov	r18,zero
 8012610:	003fe906 	br	80125b8 <__alt_data_end+0xf80125b8>
 8012614:	dac12117 	ldw	r11,1156(sp)
 8012618:	8005883a 	mov	r2,r16
 801261c:	5021883a 	mov	r16,r10
 8012620:	5a400017 	ldw	r9,0(r11)
 8012624:	58c00104 	addi	r3,r11,4
 8012628:	d8c12115 	stw	r3,1156(sp)
 801262c:	48000a16 	blt	r9,zero,8012658 <___vfiprintf_internal_r+0x1350>
 8012630:	10c00047 	ldb	r3,1(r2)
 8012634:	003b9306 	br	8011484 <__alt_data_end+0xf8011484>
 8012638:	043fffc4 	movi	r16,-1
 801263c:	003d0206 	br	8011a48 <__alt_data_end+0xf8011a48>
 8012640:	94c0010e 	bge	r18,r19,8012648 <___vfiprintf_internal_r+0x1340>
 8012644:	9825883a 	mov	r18,r19
 8012648:	da812217 	ldw	r10,1160(sp)
 801264c:	5495883a 	add	r10,r10,r18
 8012650:	da812215 	stw	r10,1160(sp)
 8012654:	003cd106 	br	801199c <__alt_data_end+0xf801199c>
 8012658:	027fffc4 	movi	r9,-1
 801265c:	10c00047 	ldb	r3,1(r2)
 8012660:	003b8806 	br	8011484 <__alt_data_end+0xf8011484>

08012664 <__vfiprintf_internal>:
 8012664:	2007883a 	mov	r3,r4
 8012668:	010200b4 	movhi	r4,2050
 801266c:	213ab604 	addi	r4,r4,-5416
 8012670:	21000017 	ldw	r4,0(r4)
 8012674:	2805883a 	mov	r2,r5
 8012678:	300f883a 	mov	r7,r6
 801267c:	180b883a 	mov	r5,r3
 8012680:	100d883a 	mov	r6,r2
 8012684:	80113081 	jmpi	8011308 <___vfiprintf_internal_r>

08012688 <__swbuf_r>:
 8012688:	defffc04 	addi	sp,sp,-16
 801268c:	dc800215 	stw	r18,8(sp)
 8012690:	dc400115 	stw	r17,4(sp)
 8012694:	dc000015 	stw	r16,0(sp)
 8012698:	dfc00315 	stw	ra,12(sp)
 801269c:	2025883a 	mov	r18,r4
 80126a0:	2823883a 	mov	r17,r5
 80126a4:	3021883a 	mov	r16,r6
 80126a8:	20000226 	beq	r4,zero,80126b4 <__swbuf_r+0x2c>
 80126ac:	20800e17 	ldw	r2,56(r4)
 80126b0:	10004126 	beq	r2,zero,80127b8 <__swbuf_r+0x130>
 80126b4:	80c00617 	ldw	r3,24(r16)
 80126b8:	8180030b 	ldhu	r6,12(r16)
 80126bc:	80c00215 	stw	r3,8(r16)
 80126c0:	30c0020c 	andi	r3,r6,8
 80126c4:	18003526 	beq	r3,zero,801279c <__swbuf_r+0x114>
 80126c8:	80c00417 	ldw	r3,16(r16)
 80126cc:	18003326 	beq	r3,zero,801279c <__swbuf_r+0x114>
 80126d0:	3088000c 	andi	r2,r6,8192
 80126d4:	8c403fcc 	andi	r17,r17,255
 80126d8:	10001726 	beq	r2,zero,8012738 <__swbuf_r+0xb0>
 80126dc:	80800017 	ldw	r2,0(r16)
 80126e0:	81000517 	ldw	r4,20(r16)
 80126e4:	10c7c83a 	sub	r3,r2,r3
 80126e8:	19001d0e 	bge	r3,r4,8012760 <__swbuf_r+0xd8>
 80126ec:	18c00044 	addi	r3,r3,1
 80126f0:	81400217 	ldw	r5,8(r16)
 80126f4:	11000044 	addi	r4,r2,1
 80126f8:	81000015 	stw	r4,0(r16)
 80126fc:	297fffc4 	addi	r5,r5,-1
 8012700:	81400215 	stw	r5,8(r16)
 8012704:	14400005 	stb	r17,0(r2)
 8012708:	80800517 	ldw	r2,20(r16)
 801270c:	10c01d26 	beq	r2,r3,8012784 <__swbuf_r+0xfc>
 8012710:	8080030b 	ldhu	r2,12(r16)
 8012714:	1080004c 	andi	r2,r2,1
 8012718:	1000181e 	bne	r2,zero,801277c <__swbuf_r+0xf4>
 801271c:	8805883a 	mov	r2,r17
 8012720:	dfc00317 	ldw	ra,12(sp)
 8012724:	dc800217 	ldw	r18,8(sp)
 8012728:	dc400117 	ldw	r17,4(sp)
 801272c:	dc000017 	ldw	r16,0(sp)
 8012730:	dec00404 	addi	sp,sp,16
 8012734:	f800283a 	ret
 8012738:	81001917 	ldw	r4,100(r16)
 801273c:	00b7ffc4 	movi	r2,-8193
 8012740:	31880014 	ori	r6,r6,8192
 8012744:	2084703a 	and	r2,r4,r2
 8012748:	80801915 	stw	r2,100(r16)
 801274c:	80800017 	ldw	r2,0(r16)
 8012750:	81000517 	ldw	r4,20(r16)
 8012754:	8180030d 	sth	r6,12(r16)
 8012758:	10c7c83a 	sub	r3,r2,r3
 801275c:	193fe316 	blt	r3,r4,80126ec <__alt_data_end+0xf80126ec>
 8012760:	9009883a 	mov	r4,r18
 8012764:	800b883a 	mov	r5,r16
 8012768:	80086b40 	call	80086b4 <_fflush_r>
 801276c:	1000091e 	bne	r2,zero,8012794 <__swbuf_r+0x10c>
 8012770:	80800017 	ldw	r2,0(r16)
 8012774:	00c00044 	movi	r3,1
 8012778:	003fdd06 	br	80126f0 <__alt_data_end+0xf80126f0>
 801277c:	00800284 	movi	r2,10
 8012780:	88bfe61e 	bne	r17,r2,801271c <__alt_data_end+0xf801271c>
 8012784:	9009883a 	mov	r4,r18
 8012788:	800b883a 	mov	r5,r16
 801278c:	80086b40 	call	80086b4 <_fflush_r>
 8012790:	103fe226 	beq	r2,zero,801271c <__alt_data_end+0xf801271c>
 8012794:	00bfffc4 	movi	r2,-1
 8012798:	003fe106 	br	8012720 <__alt_data_end+0xf8012720>
 801279c:	9009883a 	mov	r4,r18
 80127a0:	800b883a 	mov	r5,r16
 80127a4:	8006c080 	call	8006c08 <__swsetup_r>
 80127a8:	1000051e 	bne	r2,zero,80127c0 <__swbuf_r+0x138>
 80127ac:	8180030b 	ldhu	r6,12(r16)
 80127b0:	80c00417 	ldw	r3,16(r16)
 80127b4:	003fc606 	br	80126d0 <__alt_data_end+0xf80126d0>
 80127b8:	8008c5c0 	call	8008c5c <__sinit>
 80127bc:	003fbd06 	br	80126b4 <__alt_data_end+0xf80126b4>
 80127c0:	80c0030b 	ldhu	r3,12(r16)
 80127c4:	00bfffc4 	movi	r2,-1
 80127c8:	18c01014 	ori	r3,r3,64
 80127cc:	80c0030d 	sth	r3,12(r16)
 80127d0:	00c00244 	movi	r3,9
 80127d4:	90c00015 	stw	r3,0(r18)
 80127d8:	003fd106 	br	8012720 <__alt_data_end+0xf8012720>

080127dc <__swbuf>:
 80127dc:	00c200b4 	movhi	r3,2050
 80127e0:	18fab604 	addi	r3,r3,-5416
 80127e4:	2005883a 	mov	r2,r4
 80127e8:	19000017 	ldw	r4,0(r3)
 80127ec:	280d883a 	mov	r6,r5
 80127f0:	100b883a 	mov	r5,r2
 80127f4:	80126881 	jmpi	8012688 <__swbuf_r>

080127f8 <_calloc_r>:
 80127f8:	298b383a 	mul	r5,r5,r6
 80127fc:	defffe04 	addi	sp,sp,-8
 8012800:	dc000015 	stw	r16,0(sp)
 8012804:	dfc00115 	stw	ra,4(sp)
 8012808:	80025d00 	call	80025d0 <_malloc_r>
 801280c:	1021883a 	mov	r16,r2
 8012810:	10002826 	beq	r2,zero,80128b4 <_calloc_r+0xbc>
 8012814:	11bfff17 	ldw	r6,-4(r2)
 8012818:	00bfff04 	movi	r2,-4
 801281c:	00c00904 	movi	r3,36
 8012820:	308c703a 	and	r6,r6,r2
 8012824:	308d883a 	add	r6,r6,r2
 8012828:	19801436 	bltu	r3,r6,801287c <_calloc_r+0x84>
 801282c:	008004c4 	movi	r2,19
 8012830:	11800936 	bltu	r2,r6,8012858 <_calloc_r+0x60>
 8012834:	8005883a 	mov	r2,r16
 8012838:	10000015 	stw	zero,0(r2)
 801283c:	10000115 	stw	zero,4(r2)
 8012840:	10000215 	stw	zero,8(r2)
 8012844:	8005883a 	mov	r2,r16
 8012848:	dfc00117 	ldw	ra,4(sp)
 801284c:	dc000017 	ldw	r16,0(sp)
 8012850:	dec00204 	addi	sp,sp,8
 8012854:	f800283a 	ret
 8012858:	80000015 	stw	zero,0(r16)
 801285c:	80000115 	stw	zero,4(r16)
 8012860:	008006c4 	movi	r2,27
 8012864:	11800d2e 	bgeu	r2,r6,801289c <_calloc_r+0xa4>
 8012868:	80000215 	stw	zero,8(r16)
 801286c:	80000315 	stw	zero,12(r16)
 8012870:	30c00c26 	beq	r6,r3,80128a4 <_calloc_r+0xac>
 8012874:	80800404 	addi	r2,r16,16
 8012878:	003fef06 	br	8012838 <__alt_data_end+0xf8012838>
 801287c:	8009883a 	mov	r4,r16
 8012880:	000b883a 	mov	r5,zero
 8012884:	8009e780 	call	8009e78 <memset>
 8012888:	8005883a 	mov	r2,r16
 801288c:	dfc00117 	ldw	ra,4(sp)
 8012890:	dc000017 	ldw	r16,0(sp)
 8012894:	dec00204 	addi	sp,sp,8
 8012898:	f800283a 	ret
 801289c:	80800204 	addi	r2,r16,8
 80128a0:	003fe506 	br	8012838 <__alt_data_end+0xf8012838>
 80128a4:	80000415 	stw	zero,16(r16)
 80128a8:	80800604 	addi	r2,r16,24
 80128ac:	80000515 	stw	zero,20(r16)
 80128b0:	003fe106 	br	8012838 <__alt_data_end+0xf8012838>
 80128b4:	0005883a 	mov	r2,zero
 80128b8:	003fe306 	br	8012848 <__alt_data_end+0xf8012848>

080128bc <_fclose_r>:
 80128bc:	28003226 	beq	r5,zero,8012988 <_fclose_r+0xcc>
 80128c0:	defffc04 	addi	sp,sp,-16
 80128c4:	dc400115 	stw	r17,4(sp)
 80128c8:	2023883a 	mov	r17,r4
 80128cc:	dc000015 	stw	r16,0(sp)
 80128d0:	dfc00315 	stw	ra,12(sp)
 80128d4:	dc800215 	stw	r18,8(sp)
 80128d8:	2821883a 	mov	r16,r5
 80128dc:	8008c6c0 	call	8008c6c <__sfp_lock_acquire>
 80128e0:	88000226 	beq	r17,zero,80128ec <_fclose_r+0x30>
 80128e4:	88800e17 	ldw	r2,56(r17)
 80128e8:	10002926 	beq	r2,zero,8012990 <_fclose_r+0xd4>
 80128ec:	8080030f 	ldh	r2,12(r16)
 80128f0:	10002226 	beq	r2,zero,801297c <_fclose_r+0xc0>
 80128f4:	8809883a 	mov	r4,r17
 80128f8:	800b883a 	mov	r5,r16
 80128fc:	80086b40 	call	80086b4 <_fflush_r>
 8012900:	1025883a 	mov	r18,r2
 8012904:	80800b17 	ldw	r2,44(r16)
 8012908:	10000426 	beq	r2,zero,801291c <_fclose_r+0x60>
 801290c:	81400717 	ldw	r5,28(r16)
 8012910:	8809883a 	mov	r4,r17
 8012914:	103ee83a 	callr	r2
 8012918:	10002616 	blt	r2,zero,80129b4 <_fclose_r+0xf8>
 801291c:	8080030b 	ldhu	r2,12(r16)
 8012920:	1080200c 	andi	r2,r2,128
 8012924:	10001f1e 	bne	r2,zero,80129a4 <_fclose_r+0xe8>
 8012928:	81400c17 	ldw	r5,48(r16)
 801292c:	28000526 	beq	r5,zero,8012944 <_fclose_r+0x88>
 8012930:	80801004 	addi	r2,r16,64
 8012934:	28800226 	beq	r5,r2,8012940 <_fclose_r+0x84>
 8012938:	8809883a 	mov	r4,r17
 801293c:	8008dd00 	call	8008dd0 <_free_r>
 8012940:	80000c15 	stw	zero,48(r16)
 8012944:	81401117 	ldw	r5,68(r16)
 8012948:	28000326 	beq	r5,zero,8012958 <_fclose_r+0x9c>
 801294c:	8809883a 	mov	r4,r17
 8012950:	8008dd00 	call	8008dd0 <_free_r>
 8012954:	80001115 	stw	zero,68(r16)
 8012958:	8000030d 	sth	zero,12(r16)
 801295c:	8008c700 	call	8008c70 <__sfp_lock_release>
 8012960:	9005883a 	mov	r2,r18
 8012964:	dfc00317 	ldw	ra,12(sp)
 8012968:	dc800217 	ldw	r18,8(sp)
 801296c:	dc400117 	ldw	r17,4(sp)
 8012970:	dc000017 	ldw	r16,0(sp)
 8012974:	dec00404 	addi	sp,sp,16
 8012978:	f800283a 	ret
 801297c:	8008c700 	call	8008c70 <__sfp_lock_release>
 8012980:	0005883a 	mov	r2,zero
 8012984:	003ff706 	br	8012964 <__alt_data_end+0xf8012964>
 8012988:	0005883a 	mov	r2,zero
 801298c:	f800283a 	ret
 8012990:	8809883a 	mov	r4,r17
 8012994:	8008c5c0 	call	8008c5c <__sinit>
 8012998:	8080030f 	ldh	r2,12(r16)
 801299c:	103fd51e 	bne	r2,zero,80128f4 <__alt_data_end+0xf80128f4>
 80129a0:	003ff606 	br	801297c <__alt_data_end+0xf801297c>
 80129a4:	81400417 	ldw	r5,16(r16)
 80129a8:	8809883a 	mov	r4,r17
 80129ac:	8008dd00 	call	8008dd0 <_free_r>
 80129b0:	003fdd06 	br	8012928 <__alt_data_end+0xf8012928>
 80129b4:	04bfffc4 	movi	r18,-1
 80129b8:	003fd806 	br	801291c <__alt_data_end+0xf801291c>

080129bc <fclose>:
 80129bc:	008200b4 	movhi	r2,2050
 80129c0:	10bab604 	addi	r2,r2,-5416
 80129c4:	200b883a 	mov	r5,r4
 80129c8:	11000017 	ldw	r4,0(r2)
 80129cc:	80128bc1 	jmpi	80128bc <_fclose_r>

080129d0 <_fputwc_r>:
 80129d0:	3080030b 	ldhu	r2,12(r6)
 80129d4:	defff804 	addi	sp,sp,-32
 80129d8:	dcc00415 	stw	r19,16(sp)
 80129dc:	dc800315 	stw	r18,12(sp)
 80129e0:	dc000115 	stw	r16,4(sp)
 80129e4:	dfc00715 	stw	ra,28(sp)
 80129e8:	dd400615 	stw	r21,24(sp)
 80129ec:	dd000515 	stw	r20,20(sp)
 80129f0:	dc400215 	stw	r17,8(sp)
 80129f4:	10c8000c 	andi	r3,r2,8192
 80129f8:	3021883a 	mov	r16,r6
 80129fc:	2027883a 	mov	r19,r4
 8012a00:	2825883a 	mov	r18,r5
 8012a04:	1800051e 	bne	r3,zero,8012a1c <_fputwc_r+0x4c>
 8012a08:	30c01917 	ldw	r3,100(r6)
 8012a0c:	10880014 	ori	r2,r2,8192
 8012a10:	3080030d 	sth	r2,12(r6)
 8012a14:	18880014 	ori	r2,r3,8192
 8012a18:	30801915 	stw	r2,100(r6)
 8012a1c:	800978c0 	call	800978c <__locale_mb_cur_max>
 8012a20:	00c00044 	movi	r3,1
 8012a24:	10c03e26 	beq	r2,r3,8012b20 <_fputwc_r+0x150>
 8012a28:	9809883a 	mov	r4,r19
 8012a2c:	d80b883a 	mov	r5,sp
 8012a30:	900d883a 	mov	r6,r18
 8012a34:	81c01704 	addi	r7,r16,92
 8012a38:	8014b7c0 	call	8014b7c <_wcrtomb_r>
 8012a3c:	1029883a 	mov	r20,r2
 8012a40:	00bfffc4 	movi	r2,-1
 8012a44:	a0802026 	beq	r20,r2,8012ac8 <_fputwc_r+0xf8>
 8012a48:	d9400003 	ldbu	r5,0(sp)
 8012a4c:	a0001c26 	beq	r20,zero,8012ac0 <_fputwc_r+0xf0>
 8012a50:	0023883a 	mov	r17,zero
 8012a54:	05400284 	movi	r21,10
 8012a58:	00000906 	br	8012a80 <_fputwc_r+0xb0>
 8012a5c:	80800017 	ldw	r2,0(r16)
 8012a60:	11400005 	stb	r5,0(r2)
 8012a64:	80c00017 	ldw	r3,0(r16)
 8012a68:	18c00044 	addi	r3,r3,1
 8012a6c:	80c00015 	stw	r3,0(r16)
 8012a70:	8c400044 	addi	r17,r17,1
 8012a74:	dc45883a 	add	r2,sp,r17
 8012a78:	8d00112e 	bgeu	r17,r20,8012ac0 <_fputwc_r+0xf0>
 8012a7c:	11400003 	ldbu	r5,0(r2)
 8012a80:	80c00217 	ldw	r3,8(r16)
 8012a84:	18ffffc4 	addi	r3,r3,-1
 8012a88:	80c00215 	stw	r3,8(r16)
 8012a8c:	183ff30e 	bge	r3,zero,8012a5c <__alt_data_end+0xf8012a5c>
 8012a90:	80800617 	ldw	r2,24(r16)
 8012a94:	18801916 	blt	r3,r2,8012afc <_fputwc_r+0x12c>
 8012a98:	80800017 	ldw	r2,0(r16)
 8012a9c:	11400005 	stb	r5,0(r2)
 8012aa0:	80800017 	ldw	r2,0(r16)
 8012aa4:	10c00003 	ldbu	r3,0(r2)
 8012aa8:	10800044 	addi	r2,r2,1
 8012aac:	1d402326 	beq	r3,r21,8012b3c <_fputwc_r+0x16c>
 8012ab0:	80800015 	stw	r2,0(r16)
 8012ab4:	8c400044 	addi	r17,r17,1
 8012ab8:	dc45883a 	add	r2,sp,r17
 8012abc:	8d3fef36 	bltu	r17,r20,8012a7c <__alt_data_end+0xf8012a7c>
 8012ac0:	9005883a 	mov	r2,r18
 8012ac4:	00000406 	br	8012ad8 <_fputwc_r+0x108>
 8012ac8:	80c0030b 	ldhu	r3,12(r16)
 8012acc:	a005883a 	mov	r2,r20
 8012ad0:	18c01014 	ori	r3,r3,64
 8012ad4:	80c0030d 	sth	r3,12(r16)
 8012ad8:	dfc00717 	ldw	ra,28(sp)
 8012adc:	dd400617 	ldw	r21,24(sp)
 8012ae0:	dd000517 	ldw	r20,20(sp)
 8012ae4:	dcc00417 	ldw	r19,16(sp)
 8012ae8:	dc800317 	ldw	r18,12(sp)
 8012aec:	dc400217 	ldw	r17,8(sp)
 8012af0:	dc000117 	ldw	r16,4(sp)
 8012af4:	dec00804 	addi	sp,sp,32
 8012af8:	f800283a 	ret
 8012afc:	9809883a 	mov	r4,r19
 8012b00:	29403fcc 	andi	r5,r5,255
 8012b04:	800d883a 	mov	r6,r16
 8012b08:	80126880 	call	8012688 <__swbuf_r>
 8012b0c:	10bfffe0 	cmpeqi	r2,r2,-1
 8012b10:	10803fcc 	andi	r2,r2,255
 8012b14:	103fd626 	beq	r2,zero,8012a70 <__alt_data_end+0xf8012a70>
 8012b18:	00bfffc4 	movi	r2,-1
 8012b1c:	003fee06 	br	8012ad8 <__alt_data_end+0xf8012ad8>
 8012b20:	90ffffc4 	addi	r3,r18,-1
 8012b24:	01003f84 	movi	r4,254
 8012b28:	20ffbf36 	bltu	r4,r3,8012a28 <__alt_data_end+0xf8012a28>
 8012b2c:	900b883a 	mov	r5,r18
 8012b30:	dc800005 	stb	r18,0(sp)
 8012b34:	1029883a 	mov	r20,r2
 8012b38:	003fc506 	br	8012a50 <__alt_data_end+0xf8012a50>
 8012b3c:	9809883a 	mov	r4,r19
 8012b40:	a80b883a 	mov	r5,r21
 8012b44:	800d883a 	mov	r6,r16
 8012b48:	80126880 	call	8012688 <__swbuf_r>
 8012b4c:	10bfffe0 	cmpeqi	r2,r2,-1
 8012b50:	003fef06 	br	8012b10 <__alt_data_end+0xf8012b10>

08012b54 <fputwc>:
 8012b54:	defffc04 	addi	sp,sp,-16
 8012b58:	dc000115 	stw	r16,4(sp)
 8012b5c:	040200b4 	movhi	r16,2050
 8012b60:	843ab604 	addi	r16,r16,-5416
 8012b64:	dc400215 	stw	r17,8(sp)
 8012b68:	2023883a 	mov	r17,r4
 8012b6c:	81000017 	ldw	r4,0(r16)
 8012b70:	dfc00315 	stw	ra,12(sp)
 8012b74:	280d883a 	mov	r6,r5
 8012b78:	20000626 	beq	r4,zero,8012b94 <fputwc+0x40>
 8012b7c:	20800e17 	ldw	r2,56(r4)
 8012b80:	1000041e 	bne	r2,zero,8012b94 <fputwc+0x40>
 8012b84:	d9400015 	stw	r5,0(sp)
 8012b88:	8008c5c0 	call	8008c5c <__sinit>
 8012b8c:	81000017 	ldw	r4,0(r16)
 8012b90:	d9800017 	ldw	r6,0(sp)
 8012b94:	880b883a 	mov	r5,r17
 8012b98:	dfc00317 	ldw	ra,12(sp)
 8012b9c:	dc400217 	ldw	r17,8(sp)
 8012ba0:	dc000117 	ldw	r16,4(sp)
 8012ba4:	dec00404 	addi	sp,sp,16
 8012ba8:	80129d01 	jmpi	80129d0 <_fputwc_r>

08012bac <_fstat_r>:
 8012bac:	defffd04 	addi	sp,sp,-12
 8012bb0:	dc000015 	stw	r16,0(sp)
 8012bb4:	040200b4 	movhi	r16,2050
 8012bb8:	dc400115 	stw	r17,4(sp)
 8012bbc:	843ace04 	addi	r16,r16,-5320
 8012bc0:	2023883a 	mov	r17,r4
 8012bc4:	2809883a 	mov	r4,r5
 8012bc8:	300b883a 	mov	r5,r6
 8012bcc:	dfc00215 	stw	ra,8(sp)
 8012bd0:	80000015 	stw	zero,0(r16)
 8012bd4:	80185e40 	call	80185e4 <fstat>
 8012bd8:	00ffffc4 	movi	r3,-1
 8012bdc:	10c00526 	beq	r2,r3,8012bf4 <_fstat_r+0x48>
 8012be0:	dfc00217 	ldw	ra,8(sp)
 8012be4:	dc400117 	ldw	r17,4(sp)
 8012be8:	dc000017 	ldw	r16,0(sp)
 8012bec:	dec00304 	addi	sp,sp,12
 8012bf0:	f800283a 	ret
 8012bf4:	80c00017 	ldw	r3,0(r16)
 8012bf8:	183ff926 	beq	r3,zero,8012be0 <__alt_data_end+0xf8012be0>
 8012bfc:	88c00015 	stw	r3,0(r17)
 8012c00:	003ff706 	br	8012be0 <__alt_data_end+0xf8012be0>

08012c04 <rshift>:
 8012c04:	2807d17a 	srai	r3,r5,5
 8012c08:	20800417 	ldw	r2,16(r4)
 8012c0c:	22400504 	addi	r9,r4,20
 8012c10:	1880250e 	bge	r3,r2,8012ca8 <rshift+0xa4>
 8012c14:	1085883a 	add	r2,r2,r2
 8012c18:	18c7883a 	add	r3,r3,r3
 8012c1c:	1085883a 	add	r2,r2,r2
 8012c20:	18c7883a 	add	r3,r3,r3
 8012c24:	294007cc 	andi	r5,r5,31
 8012c28:	4885883a 	add	r2,r9,r2
 8012c2c:	48c7883a 	add	r3,r9,r3
 8012c30:	28002026 	beq	r5,zero,8012cb4 <rshift+0xb0>
 8012c34:	19800017 	ldw	r6,0(r3)
 8012c38:	02c00804 	movi	r11,32
 8012c3c:	19c00104 	addi	r7,r3,4
 8012c40:	5957c83a 	sub	r11,r11,r5
 8012c44:	3150d83a 	srl	r8,r6,r5
 8012c48:	38802c2e 	bgeu	r7,r2,8012cfc <rshift+0xf8>
 8012c4c:	4815883a 	mov	r10,r9
 8012c50:	39800017 	ldw	r6,0(r7)
 8012c54:	52800104 	addi	r10,r10,4
 8012c58:	39c00104 	addi	r7,r7,4
 8012c5c:	32cc983a 	sll	r6,r6,r11
 8012c60:	418cb03a 	or	r6,r8,r6
 8012c64:	51bfff15 	stw	r6,-4(r10)
 8012c68:	39bfff17 	ldw	r6,-4(r7)
 8012c6c:	3150d83a 	srl	r8,r6,r5
 8012c70:	38bff736 	bltu	r7,r2,8012c50 <__alt_data_end+0xf8012c50>
 8012c74:	10c7c83a 	sub	r3,r2,r3
 8012c78:	18fffec4 	addi	r3,r3,-5
 8012c7c:	1806d0ba 	srli	r3,r3,2
 8012c80:	18c00044 	addi	r3,r3,1
 8012c84:	18c7883a 	add	r3,r3,r3
 8012c88:	18c7883a 	add	r3,r3,r3
 8012c8c:	48c7883a 	add	r3,r9,r3
 8012c90:	1a000015 	stw	r8,0(r3)
 8012c94:	40000126 	beq	r8,zero,8012c9c <rshift+0x98>
 8012c98:	18c00104 	addi	r3,r3,4
 8012c9c:	1a45c83a 	sub	r2,r3,r9
 8012ca0:	1005d0ba 	srai	r2,r2,2
 8012ca4:	00001206 	br	8012cf0 <rshift+0xec>
 8012ca8:	20000415 	stw	zero,16(r4)
 8012cac:	20000515 	stw	zero,20(r4)
 8012cb0:	f800283a 	ret
 8012cb4:	18bffc2e 	bgeu	r3,r2,8012ca8 <__alt_data_end+0xf8012ca8>
 8012cb8:	180d883a 	mov	r6,r3
 8012cbc:	480b883a 	mov	r5,r9
 8012cc0:	31c00017 	ldw	r7,0(r6)
 8012cc4:	29400104 	addi	r5,r5,4
 8012cc8:	31800104 	addi	r6,r6,4
 8012ccc:	29ffff15 	stw	r7,-4(r5)
 8012cd0:	30bffb36 	bltu	r6,r2,8012cc0 <__alt_data_end+0xf8012cc0>
 8012cd4:	00c6303a 	nor	r3,zero,r3
 8012cd8:	1885883a 	add	r2,r3,r2
 8012cdc:	1004d0ba 	srli	r2,r2,2
 8012ce0:	10800044 	addi	r2,r2,1
 8012ce4:	1085883a 	add	r2,r2,r2
 8012ce8:	1085883a 	add	r2,r2,r2
 8012cec:	1005d0ba 	srai	r2,r2,2
 8012cf0:	20800415 	stw	r2,16(r4)
 8012cf4:	103fed26 	beq	r2,zero,8012cac <__alt_data_end+0xf8012cac>
 8012cf8:	f800283a 	ret
 8012cfc:	4807883a 	mov	r3,r9
 8012d00:	003fe306 	br	8012c90 <__alt_data_end+0xf8012c90>

08012d04 <__hexdig_init>:
 8012d04:	014200b4 	movhi	r5,2050
 8012d08:	00c200b4 	movhi	r3,2050
 8012d0c:	29735e44 	addi	r5,r5,-12935
 8012d10:	18fae304 	addi	r3,r3,-5236
 8012d14:	01000404 	movi	r4,16
 8012d18:	00800c04 	movi	r2,48
 8012d1c:	10c5883a 	add	r2,r2,r3
 8012d20:	11000005 	stb	r4,0(r2)
 8012d24:	28800003 	ldbu	r2,0(r5)
 8012d28:	21000044 	addi	r4,r4,1
 8012d2c:	29400044 	addi	r5,r5,1
 8012d30:	103ffa1e 	bne	r2,zero,8012d1c <__alt_data_end+0xf8012d1c>
 8012d34:	014200b4 	movhi	r5,2050
 8012d38:	29735c44 	addi	r5,r5,-12943
 8012d3c:	01000684 	movi	r4,26
 8012d40:	00801844 	movi	r2,97
 8012d44:	10c5883a 	add	r2,r2,r3
 8012d48:	11000005 	stb	r4,0(r2)
 8012d4c:	28800003 	ldbu	r2,0(r5)
 8012d50:	21000044 	addi	r4,r4,1
 8012d54:	29400044 	addi	r5,r5,1
 8012d58:	103ffa1e 	bne	r2,zero,8012d44 <__alt_data_end+0xf8012d44>
 8012d5c:	014200b4 	movhi	r5,2050
 8012d60:	29735a44 	addi	r5,r5,-12951
 8012d64:	01000684 	movi	r4,26
 8012d68:	00801044 	movi	r2,65
 8012d6c:	10c5883a 	add	r2,r2,r3
 8012d70:	11000005 	stb	r4,0(r2)
 8012d74:	28800003 	ldbu	r2,0(r5)
 8012d78:	21000044 	addi	r4,r4,1
 8012d7c:	29400044 	addi	r5,r5,1
 8012d80:	103ffa1e 	bne	r2,zero,8012d6c <__alt_data_end+0xf8012d6c>
 8012d84:	f800283a 	ret

08012d88 <__gethex>:
 8012d88:	deffeb04 	addi	sp,sp,-84
 8012d8c:	dfc01415 	stw	ra,80(sp)
 8012d90:	dd401015 	stw	r21,64(sp)
 8012d94:	dd000f15 	stw	r20,60(sp)
 8012d98:	dcc00e15 	stw	r19,56(sp)
 8012d9c:	dc800d15 	stw	r18,52(sp)
 8012da0:	d9000115 	stw	r4,4(sp)
 8012da4:	2829883a 	mov	r20,r5
 8012da8:	d9800015 	stw	r6,0(sp)
 8012dac:	d9c00315 	stw	r7,12(sp)
 8012db0:	df001315 	stw	fp,76(sp)
 8012db4:	ddc01215 	stw	r23,72(sp)
 8012db8:	dd801115 	stw	r22,68(sp)
 8012dbc:	dc400c15 	stw	r17,48(sp)
 8012dc0:	dc000b15 	stw	r16,44(sp)
 8012dc4:	80097b00 	call	80097b0 <_localeconv_r>
 8012dc8:	14800017 	ldw	r18,0(r2)
 8012dcc:	054200b4 	movhi	r21,2050
 8012dd0:	ad7ae304 	addi	r21,r21,-5236
 8012dd4:	9009883a 	mov	r4,r18
 8012dd8:	800338c0 	call	800338c <strlen>
 8012ddc:	1027883a 	mov	r19,r2
 8012de0:	94c7883a 	add	r3,r18,r19
 8012de4:	18ffffc3 	ldbu	r3,-1(r3)
 8012de8:	a8800c03 	ldbu	r2,48(r21)
 8012dec:	d8c00205 	stb	r3,8(sp)
 8012df0:	1000d726 	beq	r2,zero,8013150 <__gethex+0x3c8>
 8012df4:	a2000017 	ldw	r8,0(r20)
 8012df8:	00c00c04 	movi	r3,48
 8012dfc:	40800083 	ldbu	r2,2(r8)
 8012e00:	10c14a1e 	bne	r2,r3,801332c <__gethex+0x5a4>
 8012e04:	013fff84 	movi	r4,-2
 8012e08:	40c000c4 	addi	r3,r8,3
 8012e0c:	2209c83a 	sub	r4,r4,r8
 8012e10:	100b883a 	mov	r5,r2
 8012e14:	20ef883a 	add	r23,r4,r3
 8012e18:	182d883a 	mov	r22,r3
 8012e1c:	18c00044 	addi	r3,r3,1
 8012e20:	18bfffc3 	ldbu	r2,-1(r3)
 8012e24:	117ffb26 	beq	r2,r5,8012e14 <__alt_data_end+0xf8012e14>
 8012e28:	a885883a 	add	r2,r21,r2
 8012e2c:	10800003 	ldbu	r2,0(r2)
 8012e30:	01c200b4 	movhi	r7,2050
 8012e34:	39fae304 	addi	r7,r7,-5236
 8012e38:	1000c726 	beq	r2,zero,8013158 <__gethex+0x3d0>
 8012e3c:	b0800003 	ldbu	r2,0(r22)
 8012e40:	0023883a 	mov	r17,zero
 8012e44:	0039883a 	mov	fp,zero
 8012e48:	3885883a 	add	r2,r7,r2
 8012e4c:	10800003 	ldbu	r2,0(r2)
 8012e50:	b021883a 	mov	r16,r22
 8012e54:	10000526 	beq	r2,zero,8012e6c <__gethex+0xe4>
 8012e58:	84000044 	addi	r16,r16,1
 8012e5c:	80800003 	ldbu	r2,0(r16)
 8012e60:	a885883a 	add	r2,r21,r2
 8012e64:	10800003 	ldbu	r2,0(r2)
 8012e68:	103ffb1e 	bne	r2,zero,8012e58 <__alt_data_end+0xf8012e58>
 8012e6c:	8009883a 	mov	r4,r16
 8012e70:	900b883a 	mov	r5,r18
 8012e74:	980d883a 	mov	r6,r19
 8012e78:	801388c0 	call	801388c <strncmp>
 8012e7c:	10007c26 	beq	r2,zero,8013070 <__gethex+0x2e8>
 8012e80:	80800003 	ldbu	r2,0(r16)
 8012e84:	e0000426 	beq	fp,zero,8012e98 <__gethex+0x110>
 8012e88:	8739c83a 	sub	fp,r16,fp
 8012e8c:	e739883a 	add	fp,fp,fp
 8012e90:	e739883a 	add	fp,fp,fp
 8012e94:	0739c83a 	sub	fp,zero,fp
 8012e98:	10803fcc 	andi	r2,r2,255
 8012e9c:	01001404 	movi	r4,80
 8012ea0:	11007e26 	beq	r2,r4,801309c <__gethex+0x314>
 8012ea4:	01001c04 	movi	r4,112
 8012ea8:	11007c26 	beq	r2,r4,801309c <__gethex+0x314>
 8012eac:	800f883a 	mov	r7,r16
 8012eb0:	a4000015 	stw	r16,0(r20)
 8012eb4:	88000e26 	beq	r17,zero,8012ef0 <__gethex+0x168>
 8012eb8:	b800b71e 	bne	r23,zero,8013198 <__gethex+0x410>
 8012ebc:	00800184 	movi	r2,6
 8012ec0:	dfc01417 	ldw	ra,80(sp)
 8012ec4:	df001317 	ldw	fp,76(sp)
 8012ec8:	ddc01217 	ldw	r23,72(sp)
 8012ecc:	dd801117 	ldw	r22,68(sp)
 8012ed0:	dd401017 	ldw	r21,64(sp)
 8012ed4:	dd000f17 	ldw	r20,60(sp)
 8012ed8:	dcc00e17 	ldw	r19,56(sp)
 8012edc:	dc800d17 	ldw	r18,52(sp)
 8012ee0:	dc400c17 	ldw	r17,48(sp)
 8012ee4:	dc000b17 	ldw	r16,44(sp)
 8012ee8:	dec01504 	addi	sp,sp,84
 8012eec:	f800283a 	ret
 8012ef0:	3d85c83a 	sub	r2,r7,r22
 8012ef4:	10bfffc4 	addi	r2,r2,-1
 8012ef8:	00c001c4 	movi	r3,7
 8012efc:	000b883a 	mov	r5,zero
 8012f00:	1880030e 	bge	r3,r2,8012f10 <__gethex+0x188>
 8012f04:	1005d07a 	srai	r2,r2,1
 8012f08:	29400044 	addi	r5,r5,1
 8012f0c:	18bffd16 	blt	r3,r2,8012f04 <__alt_data_end+0xf8012f04>
 8012f10:	d9000117 	ldw	r4,4(sp)
 8012f14:	d9c00a15 	stw	r7,40(sp)
 8012f18:	8009f9c0 	call	8009f9c <_Balloc>
 8012f1c:	d9c00a17 	ldw	r7,40(sp)
 8012f20:	14000504 	addi	r16,r2,20
 8012f24:	102f883a 	mov	r23,r2
 8012f28:	8017883a 	mov	r11,r16
 8012f2c:	0015883a 	mov	r10,zero
 8012f30:	b1c0132e 	bgeu	r22,r7,8012f80 <__gethex+0x1f8>
 8012f34:	dc400203 	ldbu	r17,8(sp)
 8012f38:	03800044 	movi	r14,1
 8012f3c:	0029883a 	mov	r20,zero
 8012f40:	74ddc83a 	sub	r14,r14,r19
 8012f44:	03000804 	movi	r12,32
 8012f48:	38bfffc3 	ldbu	r2,-1(r7)
 8012f4c:	3bffffc4 	addi	r15,r7,-1
 8012f50:	14402f26 	beq	r2,r17,8013010 <__gethex+0x288>
 8012f54:	a3004926 	beq	r20,r12,801307c <__gethex+0x2f4>
 8012f58:	a009883a 	mov	r4,r20
 8012f5c:	a5000104 	addi	r20,r20,4
 8012f60:	38bfffc3 	ldbu	r2,-1(r7)
 8012f64:	780f883a 	mov	r7,r15
 8012f68:	a885883a 	add	r2,r21,r2
 8012f6c:	10c00003 	ldbu	r3,0(r2)
 8012f70:	18c003cc 	andi	r3,r3,15
 8012f74:	1906983a 	sll	r3,r3,r4
 8012f78:	50d4b03a 	or	r10,r10,r3
 8012f7c:	b1fff236 	bltu	r22,r7,8012f48 <__alt_data_end+0xf8012f48>
 8012f80:	58800104 	addi	r2,r11,4
 8012f84:	1405c83a 	sub	r2,r2,r16
 8012f88:	1005d0ba 	srai	r2,r2,2
 8012f8c:	5a800015 	stw	r10,0(r11)
 8012f90:	5009883a 	mov	r4,r10
 8012f94:	b8800415 	stw	r2,16(r23)
 8012f98:	1022917a 	slli	r17,r2,5
 8012f9c:	800a2840 	call	800a284 <__hi0bits>
 8012fa0:	d8c00017 	ldw	r3,0(sp)
 8012fa4:	8885c83a 	sub	r2,r17,r2
 8012fa8:	1c800017 	ldw	r18,0(r3)
 8012fac:	9080ba16 	blt	r18,r2,8013298 <__gethex+0x510>
 8012fb0:	1480d416 	blt	r2,r18,8013304 <__gethex+0x57c>
 8012fb4:	0027883a 	mov	r19,zero
 8012fb8:	d8c00017 	ldw	r3,0(sp)
 8012fbc:	18800217 	ldw	r2,8(r3)
 8012fc0:	17008416 	blt	r2,fp,80131d4 <__gethex+0x44c>
 8012fc4:	d8c00017 	ldw	r3,0(sp)
 8012fc8:	18800117 	ldw	r2,4(r3)
 8012fcc:	e0809f0e 	bge	fp,r2,801324c <__gethex+0x4c4>
 8012fd0:	1739c83a 	sub	fp,r2,fp
 8012fd4:	e480dc16 	blt	fp,r18,8013348 <__gethex+0x5c0>
 8012fd8:	18c00317 	ldw	r3,12(r3)
 8012fdc:	01000084 	movi	r4,2
 8012fe0:	19013c26 	beq	r3,r4,80134d4 <__gethex+0x74c>
 8012fe4:	010000c4 	movi	r4,3
 8012fe8:	19011d26 	beq	r3,r4,8013460 <__gethex+0x6d8>
 8012fec:	01000044 	movi	r4,1
 8012ff0:	19012f26 	beq	r3,r4,80134b0 <__gethex+0x728>
 8012ff4:	d9000117 	ldw	r4,4(sp)
 8012ff8:	b80b883a 	mov	r5,r23
 8012ffc:	800a0440 	call	800a044 <_Bfree>
 8013000:	d8801517 	ldw	r2,84(sp)
 8013004:	10000015 	stw	zero,0(r2)
 8013008:	00801404 	movi	r2,80
 801300c:	003fac06 	br	8012ec0 <__alt_data_end+0xf8012ec0>
 8013010:	7b87883a 	add	r3,r15,r14
 8013014:	1dbfcf36 	bltu	r3,r22,8012f54 <__alt_data_end+0xf8012f54>
 8013018:	1809883a 	mov	r4,r3
 801301c:	900b883a 	mov	r5,r18
 8013020:	980d883a 	mov	r6,r19
 8013024:	d8c00515 	stw	r3,20(sp)
 8013028:	d9c00a15 	stw	r7,40(sp)
 801302c:	da800615 	stw	r10,24(sp)
 8013030:	dac00715 	stw	r11,28(sp)
 8013034:	db000915 	stw	r12,36(sp)
 8013038:	db800815 	stw	r14,32(sp)
 801303c:	dbc00415 	stw	r15,16(sp)
 8013040:	801388c0 	call	801388c <strncmp>
 8013044:	d8c00517 	ldw	r3,20(sp)
 8013048:	d9c00a17 	ldw	r7,40(sp)
 801304c:	da800617 	ldw	r10,24(sp)
 8013050:	dac00717 	ldw	r11,28(sp)
 8013054:	db000917 	ldw	r12,36(sp)
 8013058:	db800817 	ldw	r14,32(sp)
 801305c:	dbc00417 	ldw	r15,16(sp)
 8013060:	103fbc1e 	bne	r2,zero,8012f54 <__alt_data_end+0xf8012f54>
 8013064:	180f883a 	mov	r7,r3
 8013068:	b1ffb736 	bltu	r22,r7,8012f48 <__alt_data_end+0xf8012f48>
 801306c:	003fc406 	br	8012f80 <__alt_data_end+0xf8012f80>
 8013070:	e000cf26 	beq	fp,zero,80133b0 <__gethex+0x628>
 8013074:	80800003 	ldbu	r2,0(r16)
 8013078:	003f8306 	br	8012e88 <__alt_data_end+0xf8012e88>
 801307c:	05000104 	movi	r20,4
 8013080:	5a800015 	stw	r10,0(r11)
 8013084:	0009883a 	mov	r4,zero
 8013088:	5d17883a 	add	r11,r11,r20
 801308c:	0015883a 	mov	r10,zero
 8013090:	003fb306 	br	8012f60 <__alt_data_end+0xf8012f60>
 8013094:	0039883a 	mov	fp,zero
 8013098:	04400044 	movi	r17,1
 801309c:	80800043 	ldbu	r2,1(r16)
 80130a0:	01400ac4 	movi	r5,43
 80130a4:	11003fcc 	andi	r4,r2,255
 80130a8:	21407926 	beq	r4,r5,8013290 <__gethex+0x508>
 80130ac:	01400b44 	movi	r5,45
 80130b0:	21404f26 	beq	r4,r5,80131f0 <__gethex+0x468>
 80130b4:	81400044 	addi	r5,r16,1
 80130b8:	000d883a 	mov	r6,zero
 80130bc:	10803fcc 	andi	r2,r2,255
 80130c0:	a885883a 	add	r2,r21,r2
 80130c4:	11000003 	ldbu	r4,0(r2)
 80130c8:	02c00604 	movi	r11,24
 80130cc:	20bfffc4 	addi	r2,r4,-1
 80130d0:	10803fcc 	andi	r2,r2,255
 80130d4:	58bf7536 	bltu	r11,r2,8012eac <__alt_data_end+0xf8012eac>
 80130d8:	29c00043 	ldbu	r7,1(r5)
 80130dc:	20803fcc 	andi	r2,r4,255
 80130e0:	010200b4 	movhi	r4,2050
 80130e4:	213ae304 	addi	r4,r4,-5236
 80130e8:	21c9883a 	add	r4,r4,r7
 80130ec:	23000003 	ldbu	r12,0(r4)
 80130f0:	10bffc04 	addi	r2,r2,-16
 80130f4:	29400044 	addi	r5,r5,1
 80130f8:	613fffc4 	addi	r4,r12,-1
 80130fc:	21003fcc 	andi	r4,r4,255
 8013100:	63003fcc 	andi	r12,r12,255
 8013104:	59000b36 	bltu	r11,r4,8013134 <__gethex+0x3ac>
 8013108:	29400044 	addi	r5,r5,1
 801310c:	29000003 	ldbu	r4,0(r5)
 8013110:	108002a4 	muli	r2,r2,10
 8013114:	a909883a 	add	r4,r21,r4
 8013118:	21c00003 	ldbu	r7,0(r4)
 801311c:	1305883a 	add	r2,r2,r12
 8013120:	10bffc04 	addi	r2,r2,-16
 8013124:	393fffc4 	addi	r4,r7,-1
 8013128:	21003fcc 	andi	r4,r4,255
 801312c:	3b003fcc 	andi	r12,r7,255
 8013130:	593ff52e 	bgeu	r11,r4,8013108 <__alt_data_end+0xf8013108>
 8013134:	0189c83a 	sub	r4,zero,r6
 8013138:	1104f03a 	xor	r2,r2,r4
 801313c:	118d883a 	add	r6,r2,r6
 8013140:	800f883a 	mov	r7,r16
 8013144:	e1b9883a 	add	fp,fp,r6
 8013148:	2821883a 	mov	r16,r5
 801314c:	003f5806 	br	8012eb0 <__alt_data_end+0xf8012eb0>
 8013150:	8012d040 	call	8012d04 <__hexdig_init>
 8013154:	003f2706 	br	8012df4 <__alt_data_end+0xf8012df4>
 8013158:	b009883a 	mov	r4,r22
 801315c:	900b883a 	mov	r5,r18
 8013160:	980d883a 	mov	r6,r19
 8013164:	d9c00a15 	stw	r7,40(sp)
 8013168:	801388c0 	call	801388c <strncmp>
 801316c:	d9c00a17 	ldw	r7,40(sp)
 8013170:	10002326 	beq	r2,zero,8013200 <__gethex+0x478>
 8013174:	b0800003 	ldbu	r2,0(r22)
 8013178:	b021883a 	mov	r16,r22
 801317c:	10803fcc 	andi	r2,r2,255
 8013180:	00c01404 	movi	r3,80
 8013184:	10ffc326 	beq	r2,r3,8013094 <__alt_data_end+0xf8013094>
 8013188:	00c01c04 	movi	r3,112
 801318c:	10ffc126 	beq	r2,r3,8013094 <__alt_data_end+0xf8013094>
 8013190:	a4000015 	stw	r16,0(r20)
 8013194:	b83f4926 	beq	r23,zero,8012ebc <__alt_data_end+0xf8012ebc>
 8013198:	0005883a 	mov	r2,zero
 801319c:	003f4806 	br	8012ec0 <__alt_data_end+0xf8012ec0>
 80131a0:	84e7883a 	add	r19,r16,r19
 80131a4:	993fff17 	ldw	r4,-4(r19)
 80131a8:	800a2840 	call	800a284 <__hi0bits>
 80131ac:	00c00804 	movi	r3,32
 80131b0:	1c63c83a 	sub	r17,r3,r17
 80131b4:	1440a60e 	bge	r2,r17,8013450 <__gethex+0x6c8>
 80131b8:	b809883a 	mov	r4,r23
 80131bc:	01400044 	movi	r5,1
 80131c0:	8012c040 	call	8012c04 <rshift>
 80131c4:	d8c00017 	ldw	r3,0(sp)
 80131c8:	e7000044 	addi	fp,fp,1
 80131cc:	18800217 	ldw	r2,8(r3)
 80131d0:	17009f0e 	bge	r2,fp,8013450 <__gethex+0x6c8>
 80131d4:	d9000117 	ldw	r4,4(sp)
 80131d8:	b80b883a 	mov	r5,r23
 80131dc:	800a0440 	call	800a044 <_Bfree>
 80131e0:	d9001517 	ldw	r4,84(sp)
 80131e4:	008028c4 	movi	r2,163
 80131e8:	20000015 	stw	zero,0(r4)
 80131ec:	003f3406 	br	8012ec0 <__alt_data_end+0xf8012ec0>
 80131f0:	01800044 	movi	r6,1
 80131f4:	80800083 	ldbu	r2,2(r16)
 80131f8:	81400084 	addi	r5,r16,2
 80131fc:	003faf06 	br	80130bc <__alt_data_end+0xf80130bc>
 8013200:	b4e1883a 	add	r16,r22,r19
 8013204:	80c00003 	ldbu	r3,0(r16)
 8013208:	19003fcc 	andi	r4,r3,255
 801320c:	3905883a 	add	r2,r7,r4
 8013210:	10800003 	ldbu	r2,0(r2)
 8013214:	10004826 	beq	r2,zero,8013338 <__gethex+0x5b0>
 8013218:	00c00c04 	movi	r3,48
 801321c:	802d883a 	mov	r22,r16
 8013220:	20c0061e 	bne	r4,r3,801323c <__gethex+0x4b4>
 8013224:	2007883a 	mov	r3,r4
 8013228:	b5800044 	addi	r22,r22,1
 801322c:	b0800003 	ldbu	r2,0(r22)
 8013230:	10fffd26 	beq	r2,r3,8013228 <__alt_data_end+0xf8013228>
 8013234:	a885883a 	add	r2,r21,r2
 8013238:	10800003 	ldbu	r2,0(r2)
 801323c:	1023003a 	cmpeq	r17,r2,zero
 8013240:	8039883a 	mov	fp,r16
 8013244:	05c00044 	movi	r23,1
 8013248:	003f0106 	br	8012e50 <__alt_data_end+0xf8012e50>
 801324c:	04400044 	movi	r17,1
 8013250:	98000926 	beq	r19,zero,8013278 <__gethex+0x4f0>
 8013254:	d8c00017 	ldw	r3,0(sp)
 8013258:	18800317 	ldw	r2,12(r3)
 801325c:	00c00084 	movi	r3,2
 8013260:	10c06126 	beq	r2,r3,80133e8 <__gethex+0x660>
 8013264:	00c000c4 	movi	r3,3
 8013268:	10c06326 	beq	r2,r3,80133f8 <__gethex+0x670>
 801326c:	00c00044 	movi	r3,1
 8013270:	10c08626 	beq	r2,r3,801348c <__gethex+0x704>
 8013274:	8c400414 	ori	r17,r17,16
 8013278:	d9001517 	ldw	r4,84(sp)
 801327c:	d8c00317 	ldw	r3,12(sp)
 8013280:	8805883a 	mov	r2,r17
 8013284:	25c00015 	stw	r23,0(r4)
 8013288:	1f000015 	stw	fp,0(r3)
 801328c:	003f0c06 	br	8012ec0 <__alt_data_end+0xf8012ec0>
 8013290:	000d883a 	mov	r6,zero
 8013294:	003fd706 	br	80131f4 <__alt_data_end+0xf80131f4>
 8013298:	14a3c83a 	sub	r17,r2,r18
 801329c:	b809883a 	mov	r4,r23
 80132a0:	880b883a 	mov	r5,r17
 80132a4:	800ae9c0 	call	800ae9c <__any_on>
 80132a8:	10002526 	beq	r2,zero,8013340 <__gethex+0x5b8>
 80132ac:	897fffc4 	addi	r5,r17,-1
 80132b0:	2807d17a 	srai	r3,r5,5
 80132b4:	290007cc 	andi	r4,r5,31
 80132b8:	04c00044 	movi	r19,1
 80132bc:	18c7883a 	add	r3,r3,r3
 80132c0:	18c7883a 	add	r3,r3,r3
 80132c4:	80c7883a 	add	r3,r16,r3
 80132c8:	9908983a 	sll	r4,r19,r4
 80132cc:	18c00017 	ldw	r3,0(r3)
 80132d0:	20c6703a 	and	r3,r4,r3
 80132d4:	18000626 	beq	r3,zero,80132f0 <__gethex+0x568>
 80132d8:	9940730e 	bge	r19,r5,80134a8 <__gethex+0x720>
 80132dc:	b809883a 	mov	r4,r23
 80132e0:	897fff84 	addi	r5,r17,-2
 80132e4:	800ae9c0 	call	800ae9c <__any_on>
 80132e8:	10006f26 	beq	r2,zero,80134a8 <__gethex+0x720>
 80132ec:	04c000c4 	movi	r19,3
 80132f0:	b809883a 	mov	r4,r23
 80132f4:	880b883a 	mov	r5,r17
 80132f8:	8012c040 	call	8012c04 <rshift>
 80132fc:	e479883a 	add	fp,fp,r17
 8013300:	003f2d06 	br	8012fb8 <__alt_data_end+0xf8012fb8>
 8013304:	d9000117 	ldw	r4,4(sp)
 8013308:	90a1c83a 	sub	r16,r18,r2
 801330c:	b80b883a 	mov	r5,r23
 8013310:	800d883a 	mov	r6,r16
 8013314:	800a7140 	call	800a714 <__lshift>
 8013318:	e439c83a 	sub	fp,fp,r16
 801331c:	102f883a 	mov	r23,r2
 8013320:	14000504 	addi	r16,r2,20
 8013324:	0027883a 	mov	r19,zero
 8013328:	003f2306 	br	8012fb8 <__alt_data_end+0xf8012fb8>
 801332c:	45800084 	addi	r22,r8,2
 8013330:	002f883a 	mov	r23,zero
 8013334:	003ebc06 	br	8012e28 <__alt_data_end+0xf8012e28>
 8013338:	1805883a 	mov	r2,r3
 801333c:	003f8f06 	br	801317c <__alt_data_end+0xf801317c>
 8013340:	0027883a 	mov	r19,zero
 8013344:	003fea06 	br	80132f0 <__alt_data_end+0xf80132f0>
 8013348:	e47fffc4 	addi	r17,fp,-1
 801334c:	9800421e 	bne	r19,zero,8013458 <__gethex+0x6d0>
 8013350:	0440040e 	bge	zero,r17,8013364 <__gethex+0x5dc>
 8013354:	b809883a 	mov	r4,r23
 8013358:	880b883a 	mov	r5,r17
 801335c:	800ae9c0 	call	800ae9c <__any_on>
 8013360:	1027883a 	mov	r19,r2
 8013364:	8805d17a 	srai	r2,r17,5
 8013368:	00c00044 	movi	r3,1
 801336c:	8c4007cc 	andi	r17,r17,31
 8013370:	1085883a 	add	r2,r2,r2
 8013374:	1085883a 	add	r2,r2,r2
 8013378:	8085883a 	add	r2,r16,r2
 801337c:	1c62983a 	sll	r17,r3,r17
 8013380:	10800017 	ldw	r2,0(r2)
 8013384:	8884703a 	and	r2,r17,r2
 8013388:	10000126 	beq	r2,zero,8013390 <__gethex+0x608>
 801338c:	9cc00094 	ori	r19,r19,2
 8013390:	e00b883a 	mov	r5,fp
 8013394:	b809883a 	mov	r4,r23
 8013398:	8012c040 	call	8012c04 <rshift>
 801339c:	d8c00017 	ldw	r3,0(sp)
 80133a0:	9725c83a 	sub	r18,r18,fp
 80133a4:	04400084 	movi	r17,2
 80133a8:	1f000117 	ldw	fp,4(r3)
 80133ac:	003fa806 	br	8013250 <__alt_data_end+0xf8013250>
 80133b0:	84f9883a 	add	fp,r16,r19
 80133b4:	e0800003 	ldbu	r2,0(fp)
 80133b8:	e021883a 	mov	r16,fp
 80133bc:	11003fcc 	andi	r4,r2,255
 80133c0:	a909883a 	add	r4,r21,r4
 80133c4:	21000003 	ldbu	r4,0(r4)
 80133c8:	203eaf26 	beq	r4,zero,8012e88 <__alt_data_end+0xf8012e88>
 80133cc:	84000044 	addi	r16,r16,1
 80133d0:	80800003 	ldbu	r2,0(r16)
 80133d4:	11003fcc 	andi	r4,r2,255
 80133d8:	a909883a 	add	r4,r21,r4
 80133dc:	21000003 	ldbu	r4,0(r4)
 80133e0:	203ffa1e 	bne	r4,zero,80133cc <__alt_data_end+0xf80133cc>
 80133e4:	003ea806 	br	8012e88 <__alt_data_end+0xf8012e88>
 80133e8:	d9001617 	ldw	r4,88(sp)
 80133ec:	00800044 	movi	r2,1
 80133f0:	1109c83a 	sub	r4,r2,r4
 80133f4:	d9001615 	stw	r4,88(sp)
 80133f8:	d8801617 	ldw	r2,88(sp)
 80133fc:	103f9d26 	beq	r2,zero,8013274 <__alt_data_end+0xf8013274>
 8013400:	bd000417 	ldw	r20,16(r23)
 8013404:	8005883a 	mov	r2,r16
 8013408:	013fffc4 	movi	r4,-1
 801340c:	a527883a 	add	r19,r20,r20
 8013410:	9ce7883a 	add	r19,r19,r19
 8013414:	84cb883a 	add	r5,r16,r19
 8013418:	00000306 	br	8013428 <__gethex+0x6a0>
 801341c:	10000015 	stw	zero,0(r2)
 8013420:	10800104 	addi	r2,r2,4
 8013424:	11402e2e 	bgeu	r2,r5,80134e0 <__gethex+0x758>
 8013428:	10c00017 	ldw	r3,0(r2)
 801342c:	193ffb26 	beq	r3,r4,801341c <__alt_data_end+0xf801341c>
 8013430:	18c00044 	addi	r3,r3,1
 8013434:	10c00015 	stw	r3,0(r2)
 8013438:	00800084 	movi	r2,2
 801343c:	88803426 	beq	r17,r2,8013510 <__gethex+0x788>
 8013440:	b8800417 	ldw	r2,16(r23)
 8013444:	a0bf5c16 	blt	r20,r2,80131b8 <__alt_data_end+0xf80131b8>
 8013448:	944007cc 	andi	r17,r18,31
 801344c:	883f541e 	bne	r17,zero,80131a0 <__alt_data_end+0xf80131a0>
 8013450:	04400844 	movi	r17,33
 8013454:	003f8806 	br	8013278 <__alt_data_end+0xf8013278>
 8013458:	04c00044 	movi	r19,1
 801345c:	003fc106 	br	8013364 <__alt_data_end+0xf8013364>
 8013460:	d8c01617 	ldw	r3,88(sp)
 8013464:	183ee326 	beq	r3,zero,8012ff4 <__alt_data_end+0xf8012ff4>
 8013468:	d8c00317 	ldw	r3,12(sp)
 801346c:	d9001517 	ldw	r4,84(sp)
 8013470:	18800015 	stw	r2,0(r3)
 8013474:	00800044 	movi	r2,1
 8013478:	b8800415 	stw	r2,16(r23)
 801347c:	80800015 	stw	r2,0(r16)
 8013480:	25c00015 	stw	r23,0(r4)
 8013484:	00801884 	movi	r2,98
 8013488:	003e8d06 	br	8012ec0 <__alt_data_end+0xf8012ec0>
 801348c:	9880008c 	andi	r2,r19,2
 8013490:	103f7826 	beq	r2,zero,8013274 <__alt_data_end+0xf8013274>
 8013494:	80800017 	ldw	r2,0(r16)
 8013498:	9884b03a 	or	r2,r19,r2
 801349c:	10c4703a 	and	r2,r2,r3
 80134a0:	103fd71e 	bne	r2,zero,8013400 <__alt_data_end+0xf8013400>
 80134a4:	003f7306 	br	8013274 <__alt_data_end+0xf8013274>
 80134a8:	04c00084 	movi	r19,2
 80134ac:	003f9006 	br	80132f0 <__alt_data_end+0xf80132f0>
 80134b0:	e4bed01e 	bne	fp,r18,8012ff4 <__alt_data_end+0xf8012ff4>
 80134b4:	1cbfec0e 	bge	r3,r18,8013468 <__alt_data_end+0xf8013468>
 80134b8:	b809883a 	mov	r4,r23
 80134bc:	917fffc4 	addi	r5,r18,-1
 80134c0:	800ae9c0 	call	800ae9c <__any_on>
 80134c4:	103ecb26 	beq	r2,zero,8012ff4 <__alt_data_end+0xf8012ff4>
 80134c8:	d8c00017 	ldw	r3,0(sp)
 80134cc:	18800117 	ldw	r2,4(r3)
 80134d0:	003fe506 	br	8013468 <__alt_data_end+0xf8013468>
 80134d4:	d9001617 	ldw	r4,88(sp)
 80134d8:	203fe326 	beq	r4,zero,8013468 <__alt_data_end+0xf8013468>
 80134dc:	003ec506 	br	8012ff4 <__alt_data_end+0xf8012ff4>
 80134e0:	b8800217 	ldw	r2,8(r23)
 80134e4:	a080100e 	bge	r20,r2,8013528 <__gethex+0x7a0>
 80134e8:	a009883a 	mov	r4,r20
 80134ec:	20c00144 	addi	r3,r4,5
 80134f0:	18c7883a 	add	r3,r3,r3
 80134f4:	21000044 	addi	r4,r4,1
 80134f8:	18c7883a 	add	r3,r3,r3
 80134fc:	b9000415 	stw	r4,16(r23)
 8013500:	b8c7883a 	add	r3,r23,r3
 8013504:	00800044 	movi	r2,1
 8013508:	18800015 	stw	r2,0(r3)
 801350c:	003fca06 	br	8013438 <__alt_data_end+0xf8013438>
 8013510:	d8c00017 	ldw	r3,0(sp)
 8013514:	18800017 	ldw	r2,0(r3)
 8013518:	10bfffc4 	addi	r2,r2,-1
 801351c:	14801526 	beq	r2,r18,8013574 <__gethex+0x7ec>
 8013520:	04400884 	movi	r17,34
 8013524:	003f5406 	br	8013278 <__alt_data_end+0xf8013278>
 8013528:	b9400117 	ldw	r5,4(r23)
 801352c:	d9000117 	ldw	r4,4(sp)
 8013530:	29400044 	addi	r5,r5,1
 8013534:	8009f9c0 	call	8009f9c <_Balloc>
 8013538:	b9800417 	ldw	r6,16(r23)
 801353c:	b9400304 	addi	r5,r23,12
 8013540:	11000304 	addi	r4,r2,12
 8013544:	31800084 	addi	r6,r6,2
 8013548:	318d883a 	add	r6,r6,r6
 801354c:	318d883a 	add	r6,r6,r6
 8013550:	1021883a 	mov	r16,r2
 8013554:	8002df40 	call	8002df4 <memcpy>
 8013558:	d9000117 	ldw	r4,4(sp)
 801355c:	b80b883a 	mov	r5,r23
 8013560:	802f883a 	mov	r23,r16
 8013564:	800a0440 	call	800a044 <_Bfree>
 8013568:	81000417 	ldw	r4,16(r16)
 801356c:	84000504 	addi	r16,r16,20
 8013570:	003fde06 	br	80134ec <__alt_data_end+0xf80134ec>
 8013574:	9005d17a 	srai	r2,r18,5
 8013578:	944007cc 	andi	r17,r18,31
 801357c:	00c00044 	movi	r3,1
 8013580:	1085883a 	add	r2,r2,r2
 8013584:	1085883a 	add	r2,r2,r2
 8013588:	8085883a 	add	r2,r16,r2
 801358c:	1c62983a 	sll	r17,r3,r17
 8013590:	10800017 	ldw	r2,0(r2)
 8013594:	8884703a 	and	r2,r17,r2
 8013598:	1023003a 	cmpeq	r17,r2,zero
 801359c:	8c400844 	addi	r17,r17,33
 80135a0:	003f3506 	br	8013278 <__alt_data_end+0xf8013278>

080135a4 <__hexnan>:
 80135a4:	defff504 	addi	sp,sp,-44
 80135a8:	dc000315 	stw	r16,12(sp)
 80135ac:	040200b4 	movhi	r16,2050
 80135b0:	843ae304 	addi	r16,r16,-5236
 80135b4:	80800c03 	ldbu	r2,48(r16)
 80135b8:	dfc00a15 	stw	ra,40(sp)
 80135bc:	dd800915 	stw	r22,36(sp)
 80135c0:	dd400815 	stw	r21,32(sp)
 80135c4:	dd000715 	stw	r20,28(sp)
 80135c8:	dcc00615 	stw	r19,24(sp)
 80135cc:	dc800515 	stw	r18,20(sp)
 80135d0:	dc400415 	stw	r17,16(sp)
 80135d4:	10006c26 	beq	r2,zero,8013788 <__hexnan+0x1e4>
 80135d8:	2cc00017 	ldw	r19,0(r5)
 80135dc:	981dd17a 	srai	r14,r19,5
 80135e0:	9cc007cc 	andi	r19,r19,31
 80135e4:	739d883a 	add	r14,r14,r14
 80135e8:	739d883a 	add	r14,r14,r14
 80135ec:	339d883a 	add	r14,r6,r14
 80135f0:	98000126 	beq	r19,zero,80135f8 <__hexnan+0x54>
 80135f4:	73800104 	addi	r14,r14,4
 80135f8:	22000017 	ldw	r8,0(r4)
 80135fc:	72ffff04 	addi	r11,r14,-4
 8013600:	703fff15 	stw	zero,-4(r14)
 8013604:	581b883a 	mov	r13,r11
 8013608:	580f883a 	mov	r7,r11
 801360c:	000b883a 	mov	r5,zero
 8013610:	001f883a 	mov	r15,zero
 8013614:	0019883a 	mov	r12,zero
 8013618:	04800204 	movi	r18,8
 801361c:	04400804 	movi	r17,32
 8013620:	050001c4 	movi	r20,7
 8013624:	42000044 	addi	r8,r8,1
 8013628:	40c00003 	ldbu	r3,0(r8)
 801362c:	18001d26 	beq	r3,zero,80136a4 <__hexnan+0x100>
 8013630:	80c5883a 	add	r2,r16,r3
 8013634:	10800003 	ldbu	r2,0(r2)
 8013638:	12403fcc 	andi	r9,r2,255
 801363c:	4800301e 	bne	r9,zero,8013700 <__hexnan+0x15c>
 8013640:	88c04436 	bltu	r17,r3,8013754 <__hexnan+0x1b0>
 8013644:	7b3ff70e 	bge	r15,r12,8013624 <__alt_data_end+0xf8013624>
 8013648:	3b40112e 	bgeu	r7,r13,8013690 <__hexnan+0xec>
 801364c:	a1401016 	blt	r20,r5,8013690 <__hexnan+0xec>
 8013650:	914bc83a 	sub	r5,r18,r5
 8013654:	294b883a 	add	r5,r5,r5
 8013658:	3a800017 	ldw	r10,0(r7)
 801365c:	294b883a 	add	r5,r5,r5
 8013660:	896dc83a 	sub	r22,r17,r5
 8013664:	38c00104 	addi	r3,r7,4
 8013668:	3805883a 	mov	r2,r7
 801366c:	1d400017 	ldw	r21,0(r3)
 8013670:	10800104 	addi	r2,r2,4
 8013674:	18c00104 	addi	r3,r3,4
 8013678:	ad92983a 	sll	r9,r21,r22
 801367c:	5252b03a 	or	r9,r10,r9
 8013680:	a954d83a 	srl	r10,r21,r5
 8013684:	127fff15 	stw	r9,-4(r2)
 8013688:	1abfff15 	stw	r10,-4(r3)
 801368c:	137ff736 	bltu	r2,r13,801366c <__alt_data_end+0xf801366c>
 8013690:	31c02a36 	bltu	r6,r7,801373c <__hexnan+0x198>
 8013694:	42000044 	addi	r8,r8,1
 8013698:	40c00003 	ldbu	r3,0(r8)
 801369c:	01400204 	movi	r5,8
 80136a0:	183fe31e 	bne	r3,zero,8013630 <__alt_data_end+0xf8013630>
 80136a4:	3805883a 	mov	r2,r7
 80136a8:	60002c26 	beq	r12,zero,801375c <__hexnan+0x1b8>
 80136ac:	3b40022e 	bgeu	r7,r13,80136b8 <__hexnan+0x114>
 80136b0:	00c001c4 	movi	r3,7
 80136b4:	19404e0e 	bge	r3,r5,80137f0 <__hexnan+0x24c>
 80136b8:	31c03b2e 	bgeu	r6,r7,80137a8 <__hexnan+0x204>
 80136bc:	3005883a 	mov	r2,r6
 80136c0:	38c00017 	ldw	r3,0(r7)
 80136c4:	10800104 	addi	r2,r2,4
 80136c8:	39c00104 	addi	r7,r7,4
 80136cc:	10ffff15 	stw	r3,-4(r2)
 80136d0:	59fffb2e 	bgeu	r11,r7,80136c0 <__alt_data_end+0xf80136c0>
 80136d4:	10000015 	stw	zero,0(r2)
 80136d8:	10800104 	addi	r2,r2,4
 80136dc:	58bffd2e 	bgeu	r11,r2,80136d4 <__alt_data_end+0xf80136d4>
 80136e0:	70bfff17 	ldw	r2,-4(r14)
 80136e4:	1000041e 	bne	r2,zero,80136f8 <__hexnan+0x154>
 80136e8:	32c03826 	beq	r6,r11,80137cc <__hexnan+0x228>
 80136ec:	5affff04 	addi	r11,r11,-4
 80136f0:	58800017 	ldw	r2,0(r11)
 80136f4:	103ffc26 	beq	r2,zero,80136e8 <__alt_data_end+0xf80136e8>
 80136f8:	00800144 	movi	r2,5
 80136fc:	00001806 	br	8013760 <__hexnan+0x1bc>
 8013700:	29400044 	addi	r5,r5,1
 8013704:	63000044 	addi	r12,r12,1
 8013708:	91400616 	blt	r18,r5,8013724 <__hexnan+0x180>
 801370c:	38c00017 	ldw	r3,0(r7)
 8013710:	1806913a 	slli	r3,r3,4
 8013714:	108003cc 	andi	r2,r2,15
 8013718:	1884b03a 	or	r2,r3,r2
 801371c:	38800015 	stw	r2,0(r7)
 8013720:	003fc006 	br	8013624 <__alt_data_end+0xf8013624>
 8013724:	31ffbf2e 	bgeu	r6,r7,8013624 <__alt_data_end+0xf8013624>
 8013728:	383fff15 	stw	zero,-4(r7)
 801372c:	0007883a 	mov	r3,zero
 8013730:	39ffff04 	addi	r7,r7,-4
 8013734:	01400044 	movi	r5,1
 8013738:	003ff606 	br	8013714 <__alt_data_end+0xf8013714>
 801373c:	3b7fff04 	addi	r13,r7,-4
 8013740:	383fff15 	stw	zero,-4(r7)
 8013744:	601f883a 	mov	r15,r12
 8013748:	680f883a 	mov	r7,r13
 801374c:	000b883a 	mov	r5,zero
 8013750:	003fb406 	br	8013624 <__alt_data_end+0xf8013624>
 8013754:	00800a44 	movi	r2,41
 8013758:	18802026 	beq	r3,r2,80137dc <__hexnan+0x238>
 801375c:	00800104 	movi	r2,4
 8013760:	dfc00a17 	ldw	ra,40(sp)
 8013764:	dd800917 	ldw	r22,36(sp)
 8013768:	dd400817 	ldw	r21,32(sp)
 801376c:	dd000717 	ldw	r20,28(sp)
 8013770:	dcc00617 	ldw	r19,24(sp)
 8013774:	dc800517 	ldw	r18,20(sp)
 8013778:	dc400417 	ldw	r17,16(sp)
 801377c:	dc000317 	ldw	r16,12(sp)
 8013780:	dec00b04 	addi	sp,sp,44
 8013784:	f800283a 	ret
 8013788:	d9000015 	stw	r4,0(sp)
 801378c:	d9400115 	stw	r5,4(sp)
 8013790:	d9800215 	stw	r6,8(sp)
 8013794:	8012d040 	call	8012d04 <__hexdig_init>
 8013798:	d9800217 	ldw	r6,8(sp)
 801379c:	d9400117 	ldw	r5,4(sp)
 80137a0:	d9000017 	ldw	r4,0(sp)
 80137a4:	003f8c06 	br	80135d8 <__alt_data_end+0xf80135d8>
 80137a8:	983fcd26 	beq	r19,zero,80136e0 <__alt_data_end+0xf80136e0>
 80137ac:	00c00804 	movi	r3,32
 80137b0:	1ce7c83a 	sub	r19,r3,r19
 80137b4:	00ffffc4 	movi	r3,-1
 80137b8:	70bfff17 	ldw	r2,-4(r14)
 80137bc:	1cc6d83a 	srl	r3,r3,r19
 80137c0:	1884703a 	and	r2,r3,r2
 80137c4:	70bfff15 	stw	r2,-4(r14)
 80137c8:	003fc606 	br	80136e4 <__alt_data_end+0xf80136e4>
 80137cc:	00800044 	movi	r2,1
 80137d0:	58800015 	stw	r2,0(r11)
 80137d4:	00800144 	movi	r2,5
 80137d8:	003fe106 	br	8013760 <__alt_data_end+0xf8013760>
 80137dc:	42000044 	addi	r8,r8,1
 80137e0:	22000015 	stw	r8,0(r4)
 80137e4:	3805883a 	mov	r2,r7
 80137e8:	603fb01e 	bne	r12,zero,80136ac <__alt_data_end+0xf80136ac>
 80137ec:	003fdb06 	br	801375c <__alt_data_end+0xf801375c>
 80137f0:	02400204 	movi	r9,8
 80137f4:	4953c83a 	sub	r9,r9,r5
 80137f8:	4a53883a 	add	r9,r9,r9
 80137fc:	3a000017 	ldw	r8,0(r7)
 8013800:	4a53883a 	add	r9,r9,r9
 8013804:	02800804 	movi	r10,32
 8013808:	5255c83a 	sub	r10,r10,r9
 801380c:	38c00104 	addi	r3,r7,4
 8013810:	19400017 	ldw	r5,0(r3)
 8013814:	10800104 	addi	r2,r2,4
 8013818:	18c00104 	addi	r3,r3,4
 801381c:	2a88983a 	sll	r4,r5,r10
 8013820:	4108b03a 	or	r4,r8,r4
 8013824:	2a50d83a 	srl	r8,r5,r9
 8013828:	113fff15 	stw	r4,-4(r2)
 801382c:	1a3fff15 	stw	r8,-4(r3)
 8013830:	137ff736 	bltu	r2,r13,8013810 <__alt_data_end+0xf8013810>
 8013834:	003fa006 	br	80136b8 <__alt_data_end+0xf80136b8>

08013838 <_isatty_r>:
 8013838:	defffd04 	addi	sp,sp,-12
 801383c:	dc000015 	stw	r16,0(sp)
 8013840:	040200b4 	movhi	r16,2050
 8013844:	dc400115 	stw	r17,4(sp)
 8013848:	843ace04 	addi	r16,r16,-5320
 801384c:	2023883a 	mov	r17,r4
 8013850:	2809883a 	mov	r4,r5
 8013854:	dfc00215 	stw	ra,8(sp)
 8013858:	80000015 	stw	zero,0(r16)
 801385c:	80186e40 	call	80186e4 <isatty>
 8013860:	00ffffc4 	movi	r3,-1
 8013864:	10c00526 	beq	r2,r3,801387c <_isatty_r+0x44>
 8013868:	dfc00217 	ldw	ra,8(sp)
 801386c:	dc400117 	ldw	r17,4(sp)
 8013870:	dc000017 	ldw	r16,0(sp)
 8013874:	dec00304 	addi	sp,sp,12
 8013878:	f800283a 	ret
 801387c:	80c00017 	ldw	r3,0(r16)
 8013880:	183ff926 	beq	r3,zero,8013868 <__alt_data_end+0xf8013868>
 8013884:	88c00015 	stw	r3,0(r17)
 8013888:	003ff706 	br	8013868 <__alt_data_end+0xf8013868>

0801388c <strncmp>:
 801388c:	30002126 	beq	r6,zero,8013914 <strncmp+0x88>
 8013890:	2144b03a 	or	r2,r4,r5
 8013894:	108000cc 	andi	r2,r2,3
 8013898:	1000241e 	bne	r2,zero,801392c <strncmp+0xa0>
 801389c:	024000c4 	movi	r9,3
 80138a0:	4980222e 	bgeu	r9,r6,801392c <strncmp+0xa0>
 80138a4:	20800017 	ldw	r2,0(r4)
 80138a8:	28c00017 	ldw	r3,0(r5)
 80138ac:	10c01f1e 	bne	r2,r3,801392c <strncmp+0xa0>
 80138b0:	31bfff04 	addi	r6,r6,-4
 80138b4:	30001726 	beq	r6,zero,8013914 <strncmp+0x88>
 80138b8:	02ffbff4 	movhi	r11,65279
 80138bc:	5affbfc4 	addi	r11,r11,-257
 80138c0:	0086303a 	nor	r3,zero,r2
 80138c4:	02a02074 	movhi	r10,32897
 80138c8:	12c5883a 	add	r2,r2,r11
 80138cc:	52a02004 	addi	r10,r10,-32640
 80138d0:	10c4703a 	and	r2,r2,r3
 80138d4:	1284703a 	and	r2,r2,r10
 80138d8:	10000226 	beq	r2,zero,80138e4 <strncmp+0x58>
 80138dc:	00000d06 	br	8013914 <strncmp+0x88>
 80138e0:	10000c1e 	bne	r2,zero,8013914 <strncmp+0x88>
 80138e4:	21000104 	addi	r4,r4,4
 80138e8:	29400104 	addi	r5,r5,4
 80138ec:	49800f2e 	bgeu	r9,r6,801392c <strncmp+0xa0>
 80138f0:	20c00017 	ldw	r3,0(r4)
 80138f4:	29c00017 	ldw	r7,0(r5)
 80138f8:	1ad1883a 	add	r8,r3,r11
 80138fc:	00c4303a 	nor	r2,zero,r3
 8013900:	4084703a 	and	r2,r8,r2
 8013904:	1284703a 	and	r2,r2,r10
 8013908:	19c0081e 	bne	r3,r7,801392c <strncmp+0xa0>
 801390c:	31bfff04 	addi	r6,r6,-4
 8013910:	303ff31e 	bne	r6,zero,80138e0 <__alt_data_end+0xf80138e0>
 8013914:	0005883a 	mov	r2,zero
 8013918:	f800283a 	ret
 801391c:	303ffd26 	beq	r6,zero,8013914 <__alt_data_end+0xf8013914>
 8013920:	103ffc26 	beq	r2,zero,8013914 <__alt_data_end+0xf8013914>
 8013924:	21000044 	addi	r4,r4,1
 8013928:	29400044 	addi	r5,r5,1
 801392c:	20800007 	ldb	r2,0(r4)
 8013930:	28c00007 	ldb	r3,0(r5)
 8013934:	31bfffc4 	addi	r6,r6,-1
 8013938:	10fff826 	beq	r2,r3,801391c <__alt_data_end+0xf801391c>
 801393c:	20800003 	ldbu	r2,0(r4)
 8013940:	28c00003 	ldbu	r3,0(r5)
 8013944:	10c5c83a 	sub	r2,r2,r3
 8013948:	f800283a 	ret

0801394c <__ssprint_r>:
 801394c:	30800217 	ldw	r2,8(r6)
 8013950:	defff604 	addi	sp,sp,-40
 8013954:	ddc00715 	stw	r23,28(sp)
 8013958:	dcc00315 	stw	r19,12(sp)
 801395c:	dfc00915 	stw	ra,36(sp)
 8013960:	df000815 	stw	fp,32(sp)
 8013964:	dd800615 	stw	r22,24(sp)
 8013968:	dd400515 	stw	r21,20(sp)
 801396c:	dd000415 	stw	r20,16(sp)
 8013970:	dc800215 	stw	r18,8(sp)
 8013974:	dc400115 	stw	r17,4(sp)
 8013978:	dc000015 	stw	r16,0(sp)
 801397c:	3027883a 	mov	r19,r6
 8013980:	35c00017 	ldw	r23,0(r6)
 8013984:	10005526 	beq	r2,zero,8013adc <__ssprint_r+0x190>
 8013988:	2029883a 	mov	r20,r4
 801398c:	29000017 	ldw	r4,0(r5)
 8013990:	2821883a 	mov	r16,r5
 8013994:	0039883a 	mov	fp,zero
 8013998:	0023883a 	mov	r17,zero
 801399c:	88003926 	beq	r17,zero,8013a84 <__ssprint_r+0x138>
 80139a0:	84800217 	ldw	r18,8(r16)
 80139a4:	902d883a 	mov	r22,r18
 80139a8:	8c803a36 	bltu	r17,r18,8013a94 <__ssprint_r+0x148>
 80139ac:	80c0030b 	ldhu	r3,12(r16)
 80139b0:	1881200c 	andi	r2,r3,1152
 80139b4:	10002626 	beq	r2,zero,8013a50 <__ssprint_r+0x104>
 80139b8:	80800517 	ldw	r2,20(r16)
 80139bc:	81400417 	ldw	r5,16(r16)
 80139c0:	89c00044 	addi	r7,r17,1
 80139c4:	108d883a 	add	r6,r2,r2
 80139c8:	3085883a 	add	r2,r6,r2
 80139cc:	100cd7fa 	srli	r6,r2,31
 80139d0:	216dc83a 	sub	r22,r4,r5
 80139d4:	3d89883a 	add	r4,r7,r22
 80139d8:	3085883a 	add	r2,r6,r2
 80139dc:	1025d07a 	srai	r18,r2,1
 80139e0:	900d883a 	mov	r6,r18
 80139e4:	9100022e 	bgeu	r18,r4,80139f0 <__ssprint_r+0xa4>
 80139e8:	2025883a 	mov	r18,r4
 80139ec:	200d883a 	mov	r6,r4
 80139f0:	18c1000c 	andi	r3,r3,1024
 80139f4:	a009883a 	mov	r4,r20
 80139f8:	18002926 	beq	r3,zero,8013aa0 <__ssprint_r+0x154>
 80139fc:	300b883a 	mov	r5,r6
 8013a00:	80025d00 	call	80025d0 <_malloc_r>
 8013a04:	102b883a 	mov	r21,r2
 8013a08:	10002b26 	beq	r2,zero,8013ab8 <__ssprint_r+0x16c>
 8013a0c:	81400417 	ldw	r5,16(r16)
 8013a10:	1009883a 	mov	r4,r2
 8013a14:	b00d883a 	mov	r6,r22
 8013a18:	8002df40 	call	8002df4 <memcpy>
 8013a1c:	8080030b 	ldhu	r2,12(r16)
 8013a20:	00fedfc4 	movi	r3,-1153
 8013a24:	10c4703a 	and	r2,r2,r3
 8013a28:	10802014 	ori	r2,r2,128
 8013a2c:	8080030d 	sth	r2,12(r16)
 8013a30:	ad89883a 	add	r4,r21,r22
 8013a34:	95adc83a 	sub	r22,r18,r22
 8013a38:	84800515 	stw	r18,20(r16)
 8013a3c:	85800215 	stw	r22,8(r16)
 8013a40:	85400415 	stw	r21,16(r16)
 8013a44:	81000015 	stw	r4,0(r16)
 8013a48:	8825883a 	mov	r18,r17
 8013a4c:	882d883a 	mov	r22,r17
 8013a50:	e00b883a 	mov	r5,fp
 8013a54:	b00d883a 	mov	r6,r22
 8013a58:	8009d1c0 	call	8009d1c <memmove>
 8013a5c:	80c00217 	ldw	r3,8(r16)
 8013a60:	81000017 	ldw	r4,0(r16)
 8013a64:	98800217 	ldw	r2,8(r19)
 8013a68:	1ca5c83a 	sub	r18,r3,r18
 8013a6c:	2589883a 	add	r4,r4,r22
 8013a70:	84800215 	stw	r18,8(r16)
 8013a74:	81000015 	stw	r4,0(r16)
 8013a78:	1463c83a 	sub	r17,r2,r17
 8013a7c:	9c400215 	stw	r17,8(r19)
 8013a80:	88001626 	beq	r17,zero,8013adc <__ssprint_r+0x190>
 8013a84:	bf000017 	ldw	fp,0(r23)
 8013a88:	bc400117 	ldw	r17,4(r23)
 8013a8c:	bdc00204 	addi	r23,r23,8
 8013a90:	003fc206 	br	801399c <__alt_data_end+0xf801399c>
 8013a94:	8825883a 	mov	r18,r17
 8013a98:	882d883a 	mov	r22,r17
 8013a9c:	003fec06 	br	8013a50 <__alt_data_end+0xf8013a50>
 8013aa0:	800b0ec0 	call	800b0ec <_realloc_r>
 8013aa4:	102b883a 	mov	r21,r2
 8013aa8:	103fe11e 	bne	r2,zero,8013a30 <__alt_data_end+0xf8013a30>
 8013aac:	81400417 	ldw	r5,16(r16)
 8013ab0:	a009883a 	mov	r4,r20
 8013ab4:	8008dd00 	call	8008dd0 <_free_r>
 8013ab8:	80c0030b 	ldhu	r3,12(r16)
 8013abc:	00800304 	movi	r2,12
 8013ac0:	a0800015 	stw	r2,0(r20)
 8013ac4:	18c01014 	ori	r3,r3,64
 8013ac8:	80c0030d 	sth	r3,12(r16)
 8013acc:	00bfffc4 	movi	r2,-1
 8013ad0:	98000215 	stw	zero,8(r19)
 8013ad4:	98000115 	stw	zero,4(r19)
 8013ad8:	00000206 	br	8013ae4 <__ssprint_r+0x198>
 8013adc:	98000115 	stw	zero,4(r19)
 8013ae0:	0005883a 	mov	r2,zero
 8013ae4:	dfc00917 	ldw	ra,36(sp)
 8013ae8:	df000817 	ldw	fp,32(sp)
 8013aec:	ddc00717 	ldw	r23,28(sp)
 8013af0:	dd800617 	ldw	r22,24(sp)
 8013af4:	dd400517 	ldw	r21,20(sp)
 8013af8:	dd000417 	ldw	r20,16(sp)
 8013afc:	dcc00317 	ldw	r19,12(sp)
 8013b00:	dc800217 	ldw	r18,8(sp)
 8013b04:	dc400117 	ldw	r17,4(sp)
 8013b08:	dc000017 	ldw	r16,0(sp)
 8013b0c:	dec00a04 	addi	sp,sp,40
 8013b10:	f800283a 	ret

08013b14 <___svfiprintf_internal_r>:
 8013b14:	2880030b 	ldhu	r2,12(r5)
 8013b18:	deffc904 	addi	sp,sp,-220
 8013b1c:	dd403215 	stw	r21,200(sp)
 8013b20:	dfc03615 	stw	ra,216(sp)
 8013b24:	df003515 	stw	fp,212(sp)
 8013b28:	ddc03415 	stw	r23,208(sp)
 8013b2c:	dd803315 	stw	r22,204(sp)
 8013b30:	dd003115 	stw	r20,196(sp)
 8013b34:	dcc03015 	stw	r19,192(sp)
 8013b38:	dc802f15 	stw	r18,188(sp)
 8013b3c:	dc402e15 	stw	r17,184(sp)
 8013b40:	dc002d15 	stw	r16,180(sp)
 8013b44:	d9402715 	stw	r5,156(sp)
 8013b48:	d9002915 	stw	r4,164(sp)
 8013b4c:	1080200c 	andi	r2,r2,128
 8013b50:	d9c02315 	stw	r7,140(sp)
 8013b54:	302b883a 	mov	r21,r6
 8013b58:	10000226 	beq	r2,zero,8013b64 <___svfiprintf_internal_r+0x50>
 8013b5c:	28800417 	ldw	r2,16(r5)
 8013b60:	1003ce26 	beq	r2,zero,8014a9c <___svfiprintf_internal_r+0xf88>
 8013b64:	dac01a04 	addi	r11,sp,104
 8013b68:	da8019c4 	addi	r10,sp,103
 8013b6c:	dc802917 	ldw	r18,164(sp)
 8013b70:	dd002717 	ldw	r20,156(sp)
 8013b74:	04c200b4 	movhi	r19,2050
 8013b78:	dac01e15 	stw	r11,120(sp)
 8013b7c:	5a97c83a 	sub	r11,r11,r10
 8013b80:	9cf36104 	addi	r19,r19,-12924
 8013b84:	da801f15 	stw	r10,124(sp)
 8013b88:	dec01a15 	stw	sp,104(sp)
 8013b8c:	d8001c15 	stw	zero,112(sp)
 8013b90:	d8001b15 	stw	zero,108(sp)
 8013b94:	d8002a15 	stw	zero,168(sp)
 8013b98:	d8002415 	stw	zero,144(sp)
 8013b9c:	d811883a 	mov	r8,sp
 8013ba0:	dac02b15 	stw	r11,172(sp)
 8013ba4:	a8800007 	ldb	r2,0(r21)
 8013ba8:	10026826 	beq	r2,zero,801454c <___svfiprintf_internal_r+0xa38>
 8013bac:	01000944 	movi	r4,37
 8013bb0:	11026626 	beq	r2,r4,801454c <___svfiprintf_internal_r+0xa38>
 8013bb4:	a805883a 	mov	r2,r21
 8013bb8:	00000106 	br	8013bc0 <___svfiprintf_internal_r+0xac>
 8013bbc:	19000326 	beq	r3,r4,8013bcc <___svfiprintf_internal_r+0xb8>
 8013bc0:	10800044 	addi	r2,r2,1
 8013bc4:	10c00007 	ldb	r3,0(r2)
 8013bc8:	183ffc1e 	bne	r3,zero,8013bbc <__alt_data_end+0xf8013bbc>
 8013bcc:	1561c83a 	sub	r16,r2,r21
 8013bd0:	102d883a 	mov	r22,r2
 8013bd4:	80000e26 	beq	r16,zero,8013c10 <___svfiprintf_internal_r+0xfc>
 8013bd8:	d8c01c17 	ldw	r3,112(sp)
 8013bdc:	d8801b17 	ldw	r2,108(sp)
 8013be0:	45400015 	stw	r21,0(r8)
 8013be4:	1c07883a 	add	r3,r3,r16
 8013be8:	10800044 	addi	r2,r2,1
 8013bec:	d8c01c15 	stw	r3,112(sp)
 8013bf0:	44000115 	stw	r16,4(r8)
 8013bf4:	d8801b15 	stw	r2,108(sp)
 8013bf8:	00c001c4 	movi	r3,7
 8013bfc:	1882d616 	blt	r3,r2,8014758 <___svfiprintf_internal_r+0xc44>
 8013c00:	42000204 	addi	r8,r8,8
 8013c04:	da802417 	ldw	r10,144(sp)
 8013c08:	5415883a 	add	r10,r10,r16
 8013c0c:	da802415 	stw	r10,144(sp)
 8013c10:	b0800007 	ldb	r2,0(r22)
 8013c14:	10027326 	beq	r2,zero,80145e4 <___svfiprintf_internal_r+0xad0>
 8013c18:	b1000047 	ldb	r4,1(r22)
 8013c1c:	b5400044 	addi	r21,r22,1
 8013c20:	d8001d85 	stb	zero,118(sp)
 8013c24:	000d883a 	mov	r6,zero
 8013c28:	043fffc4 	movi	r16,-1
 8013c2c:	d8002115 	stw	zero,132(sp)
 8013c30:	0023883a 	mov	r17,zero
 8013c34:	00c01604 	movi	r3,88
 8013c38:	01400244 	movi	r5,9
 8013c3c:	02400a84 	movi	r9,42
 8013c40:	01c01b04 	movi	r7,108
 8013c44:	ad400044 	addi	r21,r21,1
 8013c48:	20bff804 	addi	r2,r4,-32
 8013c4c:	18819536 	bltu	r3,r2,80142a4 <___svfiprintf_internal_r+0x790>
 8013c50:	100490ba 	slli	r2,r2,2
 8013c54:	02c20074 	movhi	r11,2049
 8013c58:	5acf1a04 	addi	r11,r11,15464
 8013c5c:	12c5883a 	add	r2,r2,r11
 8013c60:	10800017 	ldw	r2,0(r2)
 8013c64:	1000683a 	jmp	r2
 8013c68:	080141a4 	muli	zero,at,1286
 8013c6c:	080142a4 	muli	zero,at,1290
 8013c70:	080142a4 	muli	zero,at,1290
 8013c74:	08014198 	cmpnei	zero,at,1286
 8013c78:	080142a4 	muli	zero,at,1290
 8013c7c:	080142a4 	muli	zero,at,1290
 8013c80:	080142a4 	muli	zero,at,1290
 8013c84:	080142a4 	muli	zero,at,1290
 8013c88:	080142a4 	muli	zero,at,1290
 8013c8c:	080142a4 	muli	zero,at,1290
 8013c90:	08013ec8 	cmpgei	zero,at,1275
 8013c94:	080142d8 	cmpnei	zero,at,1291
 8013c98:	080142a4 	muli	zero,at,1290
 8013c9c:	08013ef0 	cmpltui	zero,at,1275
 8013ca0:	080142e4 	muli	zero,at,1291
 8013ca4:	080142a4 	muli	zero,at,1290
 8013ca8:	080142cc 	andi	zero,at,1291
 8013cac:	0801426c 	andhi	zero,at,1289
 8013cb0:	0801426c 	andhi	zero,at,1289
 8013cb4:	0801426c 	andhi	zero,at,1289
 8013cb8:	0801426c 	andhi	zero,at,1289
 8013cbc:	0801426c 	andhi	zero,at,1289
 8013cc0:	0801426c 	andhi	zero,at,1289
 8013cc4:	0801426c 	andhi	zero,at,1289
 8013cc8:	0801426c 	andhi	zero,at,1289
 8013ccc:	0801426c 	andhi	zero,at,1289
 8013cd0:	080142a4 	muli	zero,at,1290
 8013cd4:	080142a4 	muli	zero,at,1290
 8013cd8:	080142a4 	muli	zero,at,1290
 8013cdc:	080142a4 	muli	zero,at,1290
 8013ce0:	080142a4 	muli	zero,at,1290
 8013ce4:	080142a4 	muli	zero,at,1290
 8013ce8:	080142a4 	muli	zero,at,1290
 8013cec:	080142a4 	muli	zero,at,1290
 8013cf0:	080142a4 	muli	zero,at,1290
 8013cf4:	080142a4 	muli	zero,at,1290
 8013cf8:	08014204 	addi	zero,at,1288
 8013cfc:	080142a4 	muli	zero,at,1290
 8013d00:	080142a4 	muli	zero,at,1290
 8013d04:	080142a4 	muli	zero,at,1290
 8013d08:	080142a4 	muli	zero,at,1290
 8013d0c:	080142a4 	muli	zero,at,1290
 8013d10:	080142a4 	muli	zero,at,1290
 8013d14:	080142a4 	muli	zero,at,1290
 8013d18:	080142a4 	muli	zero,at,1290
 8013d1c:	080142a4 	muli	zero,at,1290
 8013d20:	080142a4 	muli	zero,at,1290
 8013d24:	08013e98 	cmpnei	zero,at,1274
 8013d28:	080142a4 	muli	zero,at,1290
 8013d2c:	080142a4 	muli	zero,at,1290
 8013d30:	080142a4 	muli	zero,at,1290
 8013d34:	080142a4 	muli	zero,at,1290
 8013d38:	080142a4 	muli	zero,at,1290
 8013d3c:	08013dcc 	andi	zero,at,1271
 8013d40:	080142a4 	muli	zero,at,1290
 8013d44:	080142a4 	muli	zero,at,1290
 8013d48:	080140f8 	rdprs	zero,at,1283
 8013d4c:	080142a4 	muli	zero,at,1290
 8013d50:	080142a4 	muli	zero,at,1290
 8013d54:	080142a4 	muli	zero,at,1290
 8013d58:	080142a4 	muli	zero,at,1290
 8013d5c:	080142a4 	muli	zero,at,1290
 8013d60:	080142a4 	muli	zero,at,1290
 8013d64:	080142a4 	muli	zero,at,1290
 8013d68:	080142a4 	muli	zero,at,1290
 8013d6c:	080142a4 	muli	zero,at,1290
 8013d70:	080142a4 	muli	zero,at,1290
 8013d74:	08013fe4 	muli	zero,at,1279
 8013d78:	08013fa4 	muli	zero,at,1278
 8013d7c:	080142a4 	muli	zero,at,1290
 8013d80:	080142a4 	muli	zero,at,1290
 8013d84:	080142a4 	muli	zero,at,1290
 8013d88:	08014154 	ori	zero,at,1285
 8013d8c:	08013fa4 	muli	zero,at,1278
 8013d90:	080142a4 	muli	zero,at,1290
 8013d94:	080142a4 	muli	zero,at,1290
 8013d98:	08014140 	call	801414 <__alt_mem_epcs+0x801414>
 8013d9c:	080142a4 	muli	zero,at,1290
 8013da0:	08014160 	cmpeqi	zero,at,1285
 8013da4:	08013e9c 	xori	zero,at,1274
 8013da8:	08013f64 	muli	zero,at,1277
 8013dac:	08013f58 	cmpnei	zero,at,1277
 8013db0:	080142a4 	muli	zero,at,1290
 8013db4:	08013efc 	xorhi	zero,at,1275
 8013db8:	080142a4 	muli	zero,at,1290
 8013dbc:	08013dd0 	cmplti	zero,at,1271
 8013dc0:	080142a4 	muli	zero,at,1290
 8013dc4:	080142a4 	muli	zero,at,1290
 8013dc8:	080141c0 	call	80141c <__alt_mem_epcs+0x80141c>
 8013dcc:	8c400414 	ori	r17,r17,16
 8013dd0:	88c0080c 	andi	r3,r17,32
 8013dd4:	d8802317 	ldw	r2,140(sp)
 8013dd8:	18029626 	beq	r3,zero,8014834 <___svfiprintf_internal_r+0xd20>
 8013ddc:	dac02317 	ldw	r11,140(sp)
 8013de0:	12400017 	ldw	r9,0(r2)
 8013de4:	12800117 	ldw	r10,4(r2)
 8013de8:	5ac00204 	addi	r11,r11,8
 8013dec:	dac02315 	stw	r11,140(sp)
 8013df0:	00800044 	movi	r2,1
 8013df4:	4a86b03a 	or	r3,r9,r10
 8013df8:	d8001d85 	stb	zero,118(sp)
 8013dfc:	8039883a 	mov	fp,r16
 8013e00:	0017883a 	mov	r11,zero
 8013e04:	80000216 	blt	r16,zero,8013e10 <___svfiprintf_internal_r+0x2fc>
 8013e08:	013fdfc4 	movi	r4,-129
 8013e0c:	8922703a 	and	r17,r17,r4
 8013e10:	1801d01e 	bne	r3,zero,8014554 <___svfiprintf_internal_r+0xa40>
 8013e14:	80024426 	beq	r16,zero,8014728 <___svfiprintf_internal_r+0xc14>
 8013e18:	10803fcc 	andi	r2,r2,255
 8013e1c:	00c00044 	movi	r3,1
 8013e20:	10c2b326 	beq	r2,r3,80148f0 <___svfiprintf_internal_r+0xddc>
 8013e24:	00c00084 	movi	r3,2
 8013e28:	10c25b26 	beq	r2,r3,8014798 <___svfiprintf_internal_r+0xc84>
 8013e2c:	d8c01a04 	addi	r3,sp,104
 8013e30:	4808d0fa 	srli	r4,r9,3
 8013e34:	500a977a 	slli	r5,r10,29
 8013e38:	5014d0fa 	srli	r10,r10,3
 8013e3c:	4a4001cc 	andi	r9,r9,7
 8013e40:	48800c04 	addi	r2,r9,48
 8013e44:	18ffffc4 	addi	r3,r3,-1
 8013e48:	2912b03a 	or	r9,r5,r4
 8013e4c:	18800005 	stb	r2,0(r3)
 8013e50:	4a88b03a 	or	r4,r9,r10
 8013e54:	203ff61e 	bne	r4,zero,8013e30 <__alt_data_end+0xf8013e30>
 8013e58:	8900004c 	andi	r4,r17,1
 8013e5c:	d8c02615 	stw	r3,152(sp)
 8013e60:	2002951e 	bne	r4,zero,80148b8 <___svfiprintf_internal_r+0xda4>
 8013e64:	da801e17 	ldw	r10,120(sp)
 8013e68:	50f9c83a 	sub	fp,r10,r3
 8013e6c:	df002015 	stw	fp,128(sp)
 8013e70:	e400010e 	bge	fp,r16,8013e78 <___svfiprintf_internal_r+0x364>
 8013e74:	dc002015 	stw	r16,128(sp)
 8013e78:	5ac03fcc 	andi	r11,r11,255
 8013e7c:	5ac0201c 	xori	r11,r11,128
 8013e80:	5affe004 	addi	r11,r11,-128
 8013e84:	58006326 	beq	r11,zero,8014014 <___svfiprintf_internal_r+0x500>
 8013e88:	d8c02017 	ldw	r3,128(sp)
 8013e8c:	18c00044 	addi	r3,r3,1
 8013e90:	d8c02015 	stw	r3,128(sp)
 8013e94:	00005f06 	br	8014014 <___svfiprintf_internal_r+0x500>
 8013e98:	8c400414 	ori	r17,r17,16
 8013e9c:	88c0080c 	andi	r3,r17,32
 8013ea0:	d8802317 	ldw	r2,140(sp)
 8013ea4:	18027826 	beq	r3,zero,8014888 <___svfiprintf_internal_r+0xd74>
 8013ea8:	dac02317 	ldw	r11,140(sp)
 8013eac:	12400017 	ldw	r9,0(r2)
 8013eb0:	12800117 	ldw	r10,4(r2)
 8013eb4:	5ac00204 	addi	r11,r11,8
 8013eb8:	dac02315 	stw	r11,140(sp)
 8013ebc:	0005883a 	mov	r2,zero
 8013ec0:	4a86b03a 	or	r3,r9,r10
 8013ec4:	003fcc06 	br	8013df8 <__alt_data_end+0xf8013df8>
 8013ec8:	da802317 	ldw	r10,140(sp)
 8013ecc:	dac02317 	ldw	r11,140(sp)
 8013ed0:	52800017 	ldw	r10,0(r10)
 8013ed4:	58800104 	addi	r2,r11,4
 8013ed8:	da802115 	stw	r10,132(sp)
 8013edc:	50028a0e 	bge	r10,zero,8014908 <___svfiprintf_internal_r+0xdf4>
 8013ee0:	da802117 	ldw	r10,132(sp)
 8013ee4:	d8802315 	stw	r2,140(sp)
 8013ee8:	0295c83a 	sub	r10,zero,r10
 8013eec:	da802115 	stw	r10,132(sp)
 8013ef0:	8c400114 	ori	r17,r17,4
 8013ef4:	a9000007 	ldb	r4,0(r21)
 8013ef8:	003f5206 	br	8013c44 <__alt_data_end+0xf8013c44>
 8013efc:	da802317 	ldw	r10,140(sp)
 8013f00:	dac02317 	ldw	r11,140(sp)
 8013f04:	d8001d85 	stb	zero,118(sp)
 8013f08:	52800017 	ldw	r10,0(r10)
 8013f0c:	5dc00104 	addi	r23,r11,4
 8013f10:	da802615 	stw	r10,152(sp)
 8013f14:	5002eb26 	beq	r10,zero,8014ac4 <___svfiprintf_internal_r+0xfb0>
 8013f18:	d9002617 	ldw	r4,152(sp)
 8013f1c:	8002d716 	blt	r16,zero,8014a7c <___svfiprintf_internal_r+0xf68>
 8013f20:	000b883a 	mov	r5,zero
 8013f24:	800d883a 	mov	r6,r16
 8013f28:	da002c15 	stw	r8,176(sp)
 8013f2c:	8009c340 	call	8009c34 <memchr>
 8013f30:	da002c17 	ldw	r8,176(sp)
 8013f34:	1002fb26 	beq	r2,zero,8014b24 <___svfiprintf_internal_r+0x1010>
 8013f38:	d8c02617 	ldw	r3,152(sp)
 8013f3c:	10f9c83a 	sub	fp,r2,r3
 8013f40:	8700010e 	bge	r16,fp,8013f48 <___svfiprintf_internal_r+0x434>
 8013f44:	8039883a 	mov	fp,r16
 8013f48:	dac01d83 	ldbu	r11,118(sp)
 8013f4c:	ddc02315 	stw	r23,140(sp)
 8013f50:	0021883a 	mov	r16,zero
 8013f54:	003fc506 	br	8013e6c <__alt_data_end+0xf8013e6c>
 8013f58:	8c400814 	ori	r17,r17,32
 8013f5c:	a9000007 	ldb	r4,0(r21)
 8013f60:	003f3806 	br	8013c44 <__alt_data_end+0xf8013c44>
 8013f64:	dac02317 	ldw	r11,140(sp)
 8013f68:	00800c04 	movi	r2,48
 8013f6c:	d8801d05 	stb	r2,116(sp)
 8013f70:	5a400017 	ldw	r9,0(r11)
 8013f74:	00801e04 	movi	r2,120
 8013f78:	d8801d45 	stb	r2,117(sp)
 8013f7c:	008200b4 	movhi	r2,2050
 8013f80:	10b23304 	addi	r2,r2,-14132
 8013f84:	5ac00104 	addi	r11,r11,4
 8013f88:	d8802a15 	stw	r2,168(sp)
 8013f8c:	0015883a 	mov	r10,zero
 8013f90:	8c400094 	ori	r17,r17,2
 8013f94:	dac02315 	stw	r11,140(sp)
 8013f98:	00800084 	movi	r2,2
 8013f9c:	4807883a 	mov	r3,r9
 8013fa0:	003f9506 	br	8013df8 <__alt_data_end+0xf8013df8>
 8013fa4:	d9801d85 	stb	r6,118(sp)
 8013fa8:	8880080c 	andi	r2,r17,32
 8013fac:	d8c02317 	ldw	r3,140(sp)
 8013fb0:	10009926 	beq	r2,zero,8014218 <___svfiprintf_internal_r+0x704>
 8013fb4:	dac02317 	ldw	r11,140(sp)
 8013fb8:	18800117 	ldw	r2,4(r3)
 8013fbc:	1a400017 	ldw	r9,0(r3)
 8013fc0:	5ac00204 	addi	r11,r11,8
 8013fc4:	dac02315 	stw	r11,140(sp)
 8013fc8:	1015883a 	mov	r10,r2
 8013fcc:	10009d16 	blt	r2,zero,8014244 <___svfiprintf_internal_r+0x730>
 8013fd0:	dac01d83 	ldbu	r11,118(sp)
 8013fd4:	8039883a 	mov	fp,r16
 8013fd8:	00800044 	movi	r2,1
 8013fdc:	4a86b03a 	or	r3,r9,r10
 8013fe0:	003f8806 	br	8013e04 <__alt_data_end+0xf8013e04>
 8013fe4:	dac02317 	ldw	r11,140(sp)
 8013fe8:	00c00044 	movi	r3,1
 8013fec:	da801004 	addi	r10,sp,64
 8013ff0:	58800017 	ldw	r2,0(r11)
 8013ff4:	5ac00104 	addi	r11,r11,4
 8013ff8:	d8c02015 	stw	r3,128(sp)
 8013ffc:	d8001d85 	stb	zero,118(sp)
 8014000:	d8801005 	stb	r2,64(sp)
 8014004:	dac02315 	stw	r11,140(sp)
 8014008:	1839883a 	mov	fp,r3
 801400c:	da802615 	stw	r10,152(sp)
 8014010:	0021883a 	mov	r16,zero
 8014014:	8a80008c 	andi	r10,r17,2
 8014018:	da802215 	stw	r10,136(sp)
 801401c:	50000326 	beq	r10,zero,801402c <___svfiprintf_internal_r+0x518>
 8014020:	dac02017 	ldw	r11,128(sp)
 8014024:	5ac00084 	addi	r11,r11,2
 8014028:	dac02015 	stw	r11,128(sp)
 801402c:	88c0210c 	andi	r3,r17,132
 8014030:	d8c02515 	stw	r3,148(sp)
 8014034:	1800bb1e 	bne	r3,zero,8014324 <___svfiprintf_internal_r+0x810>
 8014038:	da802117 	ldw	r10,132(sp)
 801403c:	dac02017 	ldw	r11,128(sp)
 8014040:	52edc83a 	sub	r22,r10,r11
 8014044:	0580b70e 	bge	zero,r22,8014324 <___svfiprintf_internal_r+0x810>
 8014048:	02400404 	movi	r9,16
 801404c:	d8c01c17 	ldw	r3,112(sp)
 8014050:	d8801b17 	ldw	r2,108(sp)
 8014054:	4d82a70e 	bge	r9,r22,8014af4 <___svfiprintf_internal_r+0xfe0>
 8014058:	014200b4 	movhi	r5,2050
 801405c:	29736504 	addi	r5,r5,-12908
 8014060:	d9402815 	stw	r5,160(sp)
 8014064:	05c001c4 	movi	r23,7
 8014068:	00000306 	br	8014078 <___svfiprintf_internal_r+0x564>
 801406c:	b5bffc04 	addi	r22,r22,-16
 8014070:	42000204 	addi	r8,r8,8
 8014074:	4d80150e 	bge	r9,r22,80140cc <___svfiprintf_internal_r+0x5b8>
 8014078:	028200b4 	movhi	r10,2050
 801407c:	18c00404 	addi	r3,r3,16
 8014080:	10800044 	addi	r2,r2,1
 8014084:	52b36504 	addi	r10,r10,-12908
 8014088:	42800015 	stw	r10,0(r8)
 801408c:	42400115 	stw	r9,4(r8)
 8014090:	d8c01c15 	stw	r3,112(sp)
 8014094:	d8801b15 	stw	r2,108(sp)
 8014098:	b8bff40e 	bge	r23,r2,801406c <__alt_data_end+0xf801406c>
 801409c:	9009883a 	mov	r4,r18
 80140a0:	a00b883a 	mov	r5,r20
 80140a4:	d9801a04 	addi	r6,sp,104
 80140a8:	da402c15 	stw	r9,176(sp)
 80140ac:	801394c0 	call	801394c <__ssprint_r>
 80140b0:	da402c17 	ldw	r9,176(sp)
 80140b4:	1001511e 	bne	r2,zero,80145fc <___svfiprintf_internal_r+0xae8>
 80140b8:	b5bffc04 	addi	r22,r22,-16
 80140bc:	d8c01c17 	ldw	r3,112(sp)
 80140c0:	d8801b17 	ldw	r2,108(sp)
 80140c4:	d811883a 	mov	r8,sp
 80140c8:	4dbfeb16 	blt	r9,r22,8014078 <__alt_data_end+0xf8014078>
 80140cc:	dac02817 	ldw	r11,160(sp)
 80140d0:	b0c7883a 	add	r3,r22,r3
 80140d4:	10800044 	addi	r2,r2,1
 80140d8:	42c00015 	stw	r11,0(r8)
 80140dc:	45800115 	stw	r22,4(r8)
 80140e0:	d8c01c15 	stw	r3,112(sp)
 80140e4:	d8801b15 	stw	r2,108(sp)
 80140e8:	010001c4 	movi	r4,7
 80140ec:	2081dd16 	blt	r4,r2,8014864 <___svfiprintf_internal_r+0xd50>
 80140f0:	42000204 	addi	r8,r8,8
 80140f4:	00008d06 	br	801432c <___svfiprintf_internal_r+0x818>
 80140f8:	00c200b4 	movhi	r3,2050
 80140fc:	18f22e04 	addi	r3,r3,-14152
 8014100:	d8c02a15 	stw	r3,168(sp)
 8014104:	d9801d85 	stb	r6,118(sp)
 8014108:	88c0080c 	andi	r3,r17,32
 801410c:	d8802317 	ldw	r2,140(sp)
 8014110:	18003226 	beq	r3,zero,80141dc <___svfiprintf_internal_r+0x6c8>
 8014114:	da802317 	ldw	r10,140(sp)
 8014118:	12400017 	ldw	r9,0(r2)
 801411c:	52800204 	addi	r10,r10,8
 8014120:	da802315 	stw	r10,140(sp)
 8014124:	12800117 	ldw	r10,4(r2)
 8014128:	8880004c 	andi	r2,r17,1
 801412c:	1001be26 	beq	r2,zero,8014828 <___svfiprintf_internal_r+0xd14>
 8014130:	4a86b03a 	or	r3,r9,r10
 8014134:	1802291e 	bne	r3,zero,80149dc <___svfiprintf_internal_r+0xec8>
 8014138:	00800084 	movi	r2,2
 801413c:	003f2e06 	br	8013df8 <__alt_data_end+0xf8013df8>
 8014140:	a9000007 	ldb	r4,0(r21)
 8014144:	a805883a 	mov	r2,r21
 8014148:	21c22a26 	beq	r4,r7,80149f4 <___svfiprintf_internal_r+0xee0>
 801414c:	8c400414 	ori	r17,r17,16
 8014150:	003ebc06 	br	8013c44 <__alt_data_end+0xf8013c44>
 8014154:	8c401014 	ori	r17,r17,64
 8014158:	a9000007 	ldb	r4,0(r21)
 801415c:	003eb906 	br	8013c44 <__alt_data_end+0xf8013c44>
 8014160:	d9801d85 	stb	r6,118(sp)
 8014164:	8880080c 	andi	r2,r17,32
 8014168:	1002131e 	bne	r2,zero,80149b8 <___svfiprintf_internal_r+0xea4>
 801416c:	8880040c 	andi	r2,r17,16
 8014170:	1002241e 	bne	r2,zero,8014a04 <___svfiprintf_internal_r+0xef0>
 8014174:	8c40100c 	andi	r17,r17,64
 8014178:	88022226 	beq	r17,zero,8014a04 <___svfiprintf_internal_r+0xef0>
 801417c:	dac02317 	ldw	r11,140(sp)
 8014180:	da802417 	ldw	r10,144(sp)
 8014184:	58800017 	ldw	r2,0(r11)
 8014188:	5ac00104 	addi	r11,r11,4
 801418c:	dac02315 	stw	r11,140(sp)
 8014190:	1280000d 	sth	r10,0(r2)
 8014194:	003e8306 	br	8013ba4 <__alt_data_end+0xf8013ba4>
 8014198:	8c400054 	ori	r17,r17,1
 801419c:	a9000007 	ldb	r4,0(r21)
 80141a0:	003ea806 	br	8013c44 <__alt_data_end+0xf8013c44>
 80141a4:	30803fcc 	andi	r2,r6,255
 80141a8:	1080201c 	xori	r2,r2,128
 80141ac:	10bfe004 	addi	r2,r2,-128
 80141b0:	1001ff1e 	bne	r2,zero,80149b0 <___svfiprintf_internal_r+0xe9c>
 80141b4:	01800804 	movi	r6,32
 80141b8:	a9000007 	ldb	r4,0(r21)
 80141bc:	003ea106 	br	8013c44 <__alt_data_end+0xf8013c44>
 80141c0:	02c200b4 	movhi	r11,2050
 80141c4:	5af23304 	addi	r11,r11,-14132
 80141c8:	dac02a15 	stw	r11,168(sp)
 80141cc:	d9801d85 	stb	r6,118(sp)
 80141d0:	88c0080c 	andi	r3,r17,32
 80141d4:	d8802317 	ldw	r2,140(sp)
 80141d8:	183fce1e 	bne	r3,zero,8014114 <__alt_data_end+0xf8014114>
 80141dc:	88c0040c 	andi	r3,r17,16
 80141e0:	1801ed1e 	bne	r3,zero,8014998 <___svfiprintf_internal_r+0xe84>
 80141e4:	88c0100c 	andi	r3,r17,64
 80141e8:	18021a26 	beq	r3,zero,8014a54 <___svfiprintf_internal_r+0xf40>
 80141ec:	da802317 	ldw	r10,140(sp)
 80141f0:	1240000b 	ldhu	r9,0(r2)
 80141f4:	52800104 	addi	r10,r10,4
 80141f8:	da802315 	stw	r10,140(sp)
 80141fc:	0015883a 	mov	r10,zero
 8014200:	003fc906 	br	8014128 <__alt_data_end+0xf8014128>
 8014204:	8c400414 	ori	r17,r17,16
 8014208:	d9801d85 	stb	r6,118(sp)
 801420c:	8880080c 	andi	r2,r17,32
 8014210:	d8c02317 	ldw	r3,140(sp)
 8014214:	103f671e 	bne	r2,zero,8013fb4 <__alt_data_end+0xf8013fb4>
 8014218:	8880040c 	andi	r2,r17,16
 801421c:	1001c71e 	bne	r2,zero,801493c <___svfiprintf_internal_r+0xe28>
 8014220:	8880100c 	andi	r2,r17,64
 8014224:	1001c526 	beq	r2,zero,801493c <___svfiprintf_internal_r+0xe28>
 8014228:	1a40000f 	ldh	r9,0(r3)
 801422c:	dac02317 	ldw	r11,140(sp)
 8014230:	4815d7fa 	srai	r10,r9,31
 8014234:	5ac00104 	addi	r11,r11,4
 8014238:	dac02315 	stw	r11,140(sp)
 801423c:	5005883a 	mov	r2,r10
 8014240:	103f630e 	bge	r2,zero,8013fd0 <__alt_data_end+0xf8013fd0>
 8014244:	0253c83a 	sub	r9,zero,r9
 8014248:	4804c03a 	cmpne	r2,r9,zero
 801424c:	0295c83a 	sub	r10,zero,r10
 8014250:	5095c83a 	sub	r10,r10,r2
 8014254:	02c00b44 	movi	r11,45
 8014258:	dac01d85 	stb	r11,118(sp)
 801425c:	8039883a 	mov	fp,r16
 8014260:	00800044 	movi	r2,1
 8014264:	4a86b03a 	or	r3,r9,r10
 8014268:	003ee606 	br	8013e04 <__alt_data_end+0xf8013e04>
 801426c:	a815883a 	mov	r10,r21
 8014270:	d8002115 	stw	zero,132(sp)
 8014274:	20bff404 	addi	r2,r4,-48
 8014278:	51000007 	ldb	r4,0(r10)
 801427c:	da802117 	ldw	r10,132(sp)
 8014280:	ad400044 	addi	r21,r21,1
 8014284:	52c002a4 	muli	r11,r10,10
 8014288:	a815883a 	mov	r10,r21
 801428c:	5885883a 	add	r2,r11,r2
 8014290:	d8802115 	stw	r2,132(sp)
 8014294:	20bff404 	addi	r2,r4,-48
 8014298:	28bff72e 	bgeu	r5,r2,8014278 <__alt_data_end+0xf8014278>
 801429c:	20bff804 	addi	r2,r4,-32
 80142a0:	18be6b2e 	bgeu	r3,r2,8013c50 <__alt_data_end+0xf8013c50>
 80142a4:	d9801d85 	stb	r6,118(sp)
 80142a8:	2000ce26 	beq	r4,zero,80145e4 <___svfiprintf_internal_r+0xad0>
 80142ac:	02800044 	movi	r10,1
 80142b0:	dac01004 	addi	r11,sp,64
 80142b4:	da802015 	stw	r10,128(sp)
 80142b8:	d9001005 	stb	r4,64(sp)
 80142bc:	d8001d85 	stb	zero,118(sp)
 80142c0:	5039883a 	mov	fp,r10
 80142c4:	dac02615 	stw	r11,152(sp)
 80142c8:	003f5106 	br	8014010 <__alt_data_end+0xf8014010>
 80142cc:	8c402014 	ori	r17,r17,128
 80142d0:	a9000007 	ldb	r4,0(r21)
 80142d4:	003e5b06 	br	8013c44 <__alt_data_end+0xf8013c44>
 80142d8:	01800ac4 	movi	r6,43
 80142dc:	a9000007 	ldb	r4,0(r21)
 80142e0:	003e5806 	br	8013c44 <__alt_data_end+0xf8013c44>
 80142e4:	a9000007 	ldb	r4,0(r21)
 80142e8:	aa800044 	addi	r10,r21,1
 80142ec:	22421426 	beq	r4,r9,8014b40 <___svfiprintf_internal_r+0x102c>
 80142f0:	20bff404 	addi	r2,r4,-48
 80142f4:	502b883a 	mov	r21,r10
 80142f8:	0021883a 	mov	r16,zero
 80142fc:	28be5236 	bltu	r5,r2,8013c48 <__alt_data_end+0xf8013c48>
 8014300:	a9000007 	ldb	r4,0(r21)
 8014304:	840002a4 	muli	r16,r16,10
 8014308:	ad400044 	addi	r21,r21,1
 801430c:	1421883a 	add	r16,r2,r16
 8014310:	20bff404 	addi	r2,r4,-48
 8014314:	28bffa2e 	bgeu	r5,r2,8014300 <__alt_data_end+0xf8014300>
 8014318:	803e4b0e 	bge	r16,zero,8013c48 <__alt_data_end+0xf8013c48>
 801431c:	043fffc4 	movi	r16,-1
 8014320:	003e4906 	br	8013c48 <__alt_data_end+0xf8013c48>
 8014324:	d8c01c17 	ldw	r3,112(sp)
 8014328:	d8801b17 	ldw	r2,108(sp)
 801432c:	d9001d87 	ldb	r4,118(sp)
 8014330:	20000b26 	beq	r4,zero,8014360 <___svfiprintf_internal_r+0x84c>
 8014334:	d9001d84 	addi	r4,sp,118
 8014338:	18c00044 	addi	r3,r3,1
 801433c:	10800044 	addi	r2,r2,1
 8014340:	41000015 	stw	r4,0(r8)
 8014344:	01000044 	movi	r4,1
 8014348:	41000115 	stw	r4,4(r8)
 801434c:	d8c01c15 	stw	r3,112(sp)
 8014350:	d8801b15 	stw	r2,108(sp)
 8014354:	010001c4 	movi	r4,7
 8014358:	20811e16 	blt	r4,r2,80147d4 <___svfiprintf_internal_r+0xcc0>
 801435c:	42000204 	addi	r8,r8,8
 8014360:	da802217 	ldw	r10,136(sp)
 8014364:	50000b26 	beq	r10,zero,8014394 <___svfiprintf_internal_r+0x880>
 8014368:	d9001d04 	addi	r4,sp,116
 801436c:	18c00084 	addi	r3,r3,2
 8014370:	10800044 	addi	r2,r2,1
 8014374:	41000015 	stw	r4,0(r8)
 8014378:	01000084 	movi	r4,2
 801437c:	41000115 	stw	r4,4(r8)
 8014380:	d8c01c15 	stw	r3,112(sp)
 8014384:	d8801b15 	stw	r2,108(sp)
 8014388:	010001c4 	movi	r4,7
 801438c:	20811a16 	blt	r4,r2,80147f8 <___svfiprintf_internal_r+0xce4>
 8014390:	42000204 	addi	r8,r8,8
 8014394:	dac02517 	ldw	r11,148(sp)
 8014398:	01002004 	movi	r4,128
 801439c:	5900a826 	beq	r11,r4,8014640 <___svfiprintf_internal_r+0xb2c>
 80143a0:	8721c83a 	sub	r16,r16,fp
 80143a4:	0400260e 	bge	zero,r16,8014440 <___svfiprintf_internal_r+0x92c>
 80143a8:	01c00404 	movi	r7,16
 80143ac:	3c01a50e 	bge	r7,r16,8014a44 <___svfiprintf_internal_r+0xf30>
 80143b0:	010200b4 	movhi	r4,2050
 80143b4:	21336104 	addi	r4,r4,-12924
 80143b8:	d9002215 	stw	r4,136(sp)
 80143bc:	382f883a 	mov	r23,r7
 80143c0:	058001c4 	movi	r22,7
 80143c4:	00000306 	br	80143d4 <___svfiprintf_internal_r+0x8c0>
 80143c8:	843ffc04 	addi	r16,r16,-16
 80143cc:	42000204 	addi	r8,r8,8
 80143d0:	bc00110e 	bge	r23,r16,8014418 <___svfiprintf_internal_r+0x904>
 80143d4:	18c00404 	addi	r3,r3,16
 80143d8:	10800044 	addi	r2,r2,1
 80143dc:	44c00015 	stw	r19,0(r8)
 80143e0:	45c00115 	stw	r23,4(r8)
 80143e4:	d8c01c15 	stw	r3,112(sp)
 80143e8:	d8801b15 	stw	r2,108(sp)
 80143ec:	b0bff60e 	bge	r22,r2,80143c8 <__alt_data_end+0xf80143c8>
 80143f0:	9009883a 	mov	r4,r18
 80143f4:	a00b883a 	mov	r5,r20
 80143f8:	d9801a04 	addi	r6,sp,104
 80143fc:	801394c0 	call	801394c <__ssprint_r>
 8014400:	10007e1e 	bne	r2,zero,80145fc <___svfiprintf_internal_r+0xae8>
 8014404:	843ffc04 	addi	r16,r16,-16
 8014408:	d8c01c17 	ldw	r3,112(sp)
 801440c:	d8801b17 	ldw	r2,108(sp)
 8014410:	d811883a 	mov	r8,sp
 8014414:	bc3fef16 	blt	r23,r16,80143d4 <__alt_data_end+0xf80143d4>
 8014418:	da802217 	ldw	r10,136(sp)
 801441c:	1c07883a 	add	r3,r3,r16
 8014420:	10800044 	addi	r2,r2,1
 8014424:	42800015 	stw	r10,0(r8)
 8014428:	44000115 	stw	r16,4(r8)
 801442c:	d8c01c15 	stw	r3,112(sp)
 8014430:	d8801b15 	stw	r2,108(sp)
 8014434:	010001c4 	movi	r4,7
 8014438:	2080ce16 	blt	r4,r2,8014774 <___svfiprintf_internal_r+0xc60>
 801443c:	42000204 	addi	r8,r8,8
 8014440:	dac02617 	ldw	r11,152(sp)
 8014444:	e0c7883a 	add	r3,fp,r3
 8014448:	10800044 	addi	r2,r2,1
 801444c:	42c00015 	stw	r11,0(r8)
 8014450:	47000115 	stw	fp,4(r8)
 8014454:	d8c01c15 	stw	r3,112(sp)
 8014458:	d8801b15 	stw	r2,108(sp)
 801445c:	010001c4 	movi	r4,7
 8014460:	2080a316 	blt	r4,r2,80146f0 <___svfiprintf_internal_r+0xbdc>
 8014464:	42000204 	addi	r8,r8,8
 8014468:	8c40010c 	andi	r17,r17,4
 801446c:	88002b26 	beq	r17,zero,801451c <___svfiprintf_internal_r+0xa08>
 8014470:	da802117 	ldw	r10,132(sp)
 8014474:	dac02017 	ldw	r11,128(sp)
 8014478:	52e1c83a 	sub	r16,r10,r11
 801447c:	0400270e 	bge	zero,r16,801451c <___svfiprintf_internal_r+0xa08>
 8014480:	04400404 	movi	r17,16
 8014484:	d8801b17 	ldw	r2,108(sp)
 8014488:	8c019e0e 	bge	r17,r16,8014b04 <___svfiprintf_internal_r+0xff0>
 801448c:	014200b4 	movhi	r5,2050
 8014490:	29736504 	addi	r5,r5,-12908
 8014494:	d9402815 	stw	r5,160(sp)
 8014498:	070001c4 	movi	fp,7
 801449c:	00000306 	br	80144ac <___svfiprintf_internal_r+0x998>
 80144a0:	843ffc04 	addi	r16,r16,-16
 80144a4:	42000204 	addi	r8,r8,8
 80144a8:	8c00130e 	bge	r17,r16,80144f8 <___svfiprintf_internal_r+0x9e4>
 80144ac:	028200b4 	movhi	r10,2050
 80144b0:	18c00404 	addi	r3,r3,16
 80144b4:	10800044 	addi	r2,r2,1
 80144b8:	52b36504 	addi	r10,r10,-12908
 80144bc:	42800015 	stw	r10,0(r8)
 80144c0:	44400115 	stw	r17,4(r8)
 80144c4:	d8c01c15 	stw	r3,112(sp)
 80144c8:	d8801b15 	stw	r2,108(sp)
 80144cc:	e0bff40e 	bge	fp,r2,80144a0 <__alt_data_end+0xf80144a0>
 80144d0:	9009883a 	mov	r4,r18
 80144d4:	a00b883a 	mov	r5,r20
 80144d8:	d9801a04 	addi	r6,sp,104
 80144dc:	801394c0 	call	801394c <__ssprint_r>
 80144e0:	1000461e 	bne	r2,zero,80145fc <___svfiprintf_internal_r+0xae8>
 80144e4:	843ffc04 	addi	r16,r16,-16
 80144e8:	d8c01c17 	ldw	r3,112(sp)
 80144ec:	d8801b17 	ldw	r2,108(sp)
 80144f0:	d811883a 	mov	r8,sp
 80144f4:	8c3fed16 	blt	r17,r16,80144ac <__alt_data_end+0xf80144ac>
 80144f8:	dac02817 	ldw	r11,160(sp)
 80144fc:	1c07883a 	add	r3,r3,r16
 8014500:	10800044 	addi	r2,r2,1
 8014504:	42c00015 	stw	r11,0(r8)
 8014508:	44000115 	stw	r16,4(r8)
 801450c:	d8c01c15 	stw	r3,112(sp)
 8014510:	d8801b15 	stw	r2,108(sp)
 8014514:	010001c4 	movi	r4,7
 8014518:	2080fe16 	blt	r4,r2,8014914 <___svfiprintf_internal_r+0xe00>
 801451c:	dd802017 	ldw	r22,128(sp)
 8014520:	da802117 	ldw	r10,132(sp)
 8014524:	b280010e 	bge	r22,r10,801452c <___svfiprintf_internal_r+0xa18>
 8014528:	502d883a 	mov	r22,r10
 801452c:	dac02417 	ldw	r11,144(sp)
 8014530:	5d97883a 	add	r11,r11,r22
 8014534:	dac02415 	stw	r11,144(sp)
 8014538:	1800751e 	bne	r3,zero,8014710 <___svfiprintf_internal_r+0xbfc>
 801453c:	a8800007 	ldb	r2,0(r21)
 8014540:	d8001b15 	stw	zero,108(sp)
 8014544:	d811883a 	mov	r8,sp
 8014548:	103d981e 	bne	r2,zero,8013bac <__alt_data_end+0xf8013bac>
 801454c:	a82d883a 	mov	r22,r21
 8014550:	003daf06 	br	8013c10 <__alt_data_end+0xf8013c10>
 8014554:	10803fcc 	andi	r2,r2,255
 8014558:	00c00044 	movi	r3,1
 801455c:	10fe311e 	bne	r2,r3,8013e24 <__alt_data_end+0xf8013e24>
 8014560:	5000e126 	beq	r10,zero,80148e8 <___svfiprintf_internal_r+0xdd4>
 8014564:	dc402015 	stw	r17,128(sp)
 8014568:	dc002215 	stw	r16,136(sp)
 801456c:	dd801a04 	addi	r22,sp,104
 8014570:	402f883a 	mov	r23,r8
 8014574:	5839883a 	mov	fp,r11
 8014578:	4821883a 	mov	r16,r9
 801457c:	5023883a 	mov	r17,r10
 8014580:	8009883a 	mov	r4,r16
 8014584:	880b883a 	mov	r5,r17
 8014588:	01800284 	movi	r6,10
 801458c:	000f883a 	mov	r7,zero
 8014590:	80154100 	call	8015410 <__umoddi3>
 8014594:	10800c04 	addi	r2,r2,48
 8014598:	b5bfffc4 	addi	r22,r22,-1
 801459c:	8009883a 	mov	r4,r16
 80145a0:	880b883a 	mov	r5,r17
 80145a4:	01800284 	movi	r6,10
 80145a8:	000f883a 	mov	r7,zero
 80145ac:	b0800005 	stb	r2,0(r22)
 80145b0:	8014e500 	call	8014e50 <__udivdi3>
 80145b4:	1021883a 	mov	r16,r2
 80145b8:	10c4b03a 	or	r2,r2,r3
 80145bc:	1823883a 	mov	r17,r3
 80145c0:	103fef1e 	bne	r2,zero,8014580 <__alt_data_end+0xf8014580>
 80145c4:	da801e17 	ldw	r10,120(sp)
 80145c8:	e017883a 	mov	r11,fp
 80145cc:	b811883a 	mov	r8,r23
 80145d0:	dc402017 	ldw	r17,128(sp)
 80145d4:	dc002217 	ldw	r16,136(sp)
 80145d8:	dd802615 	stw	r22,152(sp)
 80145dc:	55b9c83a 	sub	fp,r10,r22
 80145e0:	003e2206 	br	8013e6c <__alt_data_end+0xf8013e6c>
 80145e4:	d8801c17 	ldw	r2,112(sp)
 80145e8:	10000426 	beq	r2,zero,80145fc <___svfiprintf_internal_r+0xae8>
 80145ec:	d9002917 	ldw	r4,164(sp)
 80145f0:	d9402717 	ldw	r5,156(sp)
 80145f4:	d9801a04 	addi	r6,sp,104
 80145f8:	801394c0 	call	801394c <__ssprint_r>
 80145fc:	da802717 	ldw	r10,156(sp)
 8014600:	5080030b 	ldhu	r2,12(r10)
 8014604:	1080100c 	andi	r2,r2,64
 8014608:	1000511e 	bne	r2,zero,8014750 <___svfiprintf_internal_r+0xc3c>
 801460c:	d8802417 	ldw	r2,144(sp)
 8014610:	dfc03617 	ldw	ra,216(sp)
 8014614:	df003517 	ldw	fp,212(sp)
 8014618:	ddc03417 	ldw	r23,208(sp)
 801461c:	dd803317 	ldw	r22,204(sp)
 8014620:	dd403217 	ldw	r21,200(sp)
 8014624:	dd003117 	ldw	r20,196(sp)
 8014628:	dcc03017 	ldw	r19,192(sp)
 801462c:	dc802f17 	ldw	r18,188(sp)
 8014630:	dc402e17 	ldw	r17,184(sp)
 8014634:	dc002d17 	ldw	r16,180(sp)
 8014638:	dec03704 	addi	sp,sp,220
 801463c:	f800283a 	ret
 8014640:	da802117 	ldw	r10,132(sp)
 8014644:	dac02017 	ldw	r11,128(sp)
 8014648:	52edc83a 	sub	r22,r10,r11
 801464c:	05bf540e 	bge	zero,r22,80143a0 <__alt_data_end+0xf80143a0>
 8014650:	02400404 	movi	r9,16
 8014654:	4d812f0e 	bge	r9,r22,8014b14 <___svfiprintf_internal_r+0x1000>
 8014658:	014200b4 	movhi	r5,2050
 801465c:	29736104 	addi	r5,r5,-12924
 8014660:	d9402215 	stw	r5,136(sp)
 8014664:	05c001c4 	movi	r23,7
 8014668:	00000306 	br	8014678 <___svfiprintf_internal_r+0xb64>
 801466c:	b5bffc04 	addi	r22,r22,-16
 8014670:	42000204 	addi	r8,r8,8
 8014674:	4d80130e 	bge	r9,r22,80146c4 <___svfiprintf_internal_r+0xbb0>
 8014678:	18c00404 	addi	r3,r3,16
 801467c:	10800044 	addi	r2,r2,1
 8014680:	44c00015 	stw	r19,0(r8)
 8014684:	42400115 	stw	r9,4(r8)
 8014688:	d8c01c15 	stw	r3,112(sp)
 801468c:	d8801b15 	stw	r2,108(sp)
 8014690:	b8bff60e 	bge	r23,r2,801466c <__alt_data_end+0xf801466c>
 8014694:	9009883a 	mov	r4,r18
 8014698:	a00b883a 	mov	r5,r20
 801469c:	d9801a04 	addi	r6,sp,104
 80146a0:	da402c15 	stw	r9,176(sp)
 80146a4:	801394c0 	call	801394c <__ssprint_r>
 80146a8:	da402c17 	ldw	r9,176(sp)
 80146ac:	103fd31e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 80146b0:	b5bffc04 	addi	r22,r22,-16
 80146b4:	d8c01c17 	ldw	r3,112(sp)
 80146b8:	d8801b17 	ldw	r2,108(sp)
 80146bc:	d811883a 	mov	r8,sp
 80146c0:	4dbfed16 	blt	r9,r22,8014678 <__alt_data_end+0xf8014678>
 80146c4:	da802217 	ldw	r10,136(sp)
 80146c8:	1d87883a 	add	r3,r3,r22
 80146cc:	10800044 	addi	r2,r2,1
 80146d0:	42800015 	stw	r10,0(r8)
 80146d4:	45800115 	stw	r22,4(r8)
 80146d8:	d8c01c15 	stw	r3,112(sp)
 80146dc:	d8801b15 	stw	r2,108(sp)
 80146e0:	010001c4 	movi	r4,7
 80146e4:	2080ce16 	blt	r4,r2,8014a20 <___svfiprintf_internal_r+0xf0c>
 80146e8:	42000204 	addi	r8,r8,8
 80146ec:	003f2c06 	br	80143a0 <__alt_data_end+0xf80143a0>
 80146f0:	9009883a 	mov	r4,r18
 80146f4:	a00b883a 	mov	r5,r20
 80146f8:	d9801a04 	addi	r6,sp,104
 80146fc:	801394c0 	call	801394c <__ssprint_r>
 8014700:	103fbe1e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 8014704:	d8c01c17 	ldw	r3,112(sp)
 8014708:	d811883a 	mov	r8,sp
 801470c:	003f5606 	br	8014468 <__alt_data_end+0xf8014468>
 8014710:	9009883a 	mov	r4,r18
 8014714:	a00b883a 	mov	r5,r20
 8014718:	d9801a04 	addi	r6,sp,104
 801471c:	801394c0 	call	801394c <__ssprint_r>
 8014720:	103f8626 	beq	r2,zero,801453c <__alt_data_end+0xf801453c>
 8014724:	003fb506 	br	80145fc <__alt_data_end+0xf80145fc>
 8014728:	10803fcc 	andi	r2,r2,255
 801472c:	10003b1e 	bne	r2,zero,801481c <___svfiprintf_internal_r+0xd08>
 8014730:	8880004c 	andi	r2,r17,1
 8014734:	10007e26 	beq	r2,zero,8014930 <___svfiprintf_internal_r+0xe1c>
 8014738:	00800c04 	movi	r2,48
 801473c:	d8c019c4 	addi	r3,sp,103
 8014740:	d88019c5 	stb	r2,103(sp)
 8014744:	df002b17 	ldw	fp,172(sp)
 8014748:	d8c02615 	stw	r3,152(sp)
 801474c:	003dc706 	br	8013e6c <__alt_data_end+0xf8013e6c>
 8014750:	00bfffc4 	movi	r2,-1
 8014754:	003fae06 	br	8014610 <__alt_data_end+0xf8014610>
 8014758:	9009883a 	mov	r4,r18
 801475c:	a00b883a 	mov	r5,r20
 8014760:	d9801a04 	addi	r6,sp,104
 8014764:	801394c0 	call	801394c <__ssprint_r>
 8014768:	103fa41e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 801476c:	d811883a 	mov	r8,sp
 8014770:	003d2406 	br	8013c04 <__alt_data_end+0xf8013c04>
 8014774:	9009883a 	mov	r4,r18
 8014778:	a00b883a 	mov	r5,r20
 801477c:	d9801a04 	addi	r6,sp,104
 8014780:	801394c0 	call	801394c <__ssprint_r>
 8014784:	103f9d1e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 8014788:	d8c01c17 	ldw	r3,112(sp)
 801478c:	d8801b17 	ldw	r2,108(sp)
 8014790:	d811883a 	mov	r8,sp
 8014794:	003f2a06 	br	8014440 <__alt_data_end+0xf8014440>
 8014798:	d9402a17 	ldw	r5,168(sp)
 801479c:	d8c01a04 	addi	r3,sp,104
 80147a0:	488003cc 	andi	r2,r9,15
 80147a4:	5008973a 	slli	r4,r10,28
 80147a8:	2885883a 	add	r2,r5,r2
 80147ac:	4812d13a 	srli	r9,r9,4
 80147b0:	10800003 	ldbu	r2,0(r2)
 80147b4:	5014d13a 	srli	r10,r10,4
 80147b8:	18ffffc4 	addi	r3,r3,-1
 80147bc:	2252b03a 	or	r9,r4,r9
 80147c0:	18800005 	stb	r2,0(r3)
 80147c4:	4a84b03a 	or	r2,r9,r10
 80147c8:	103ff51e 	bne	r2,zero,80147a0 <__alt_data_end+0xf80147a0>
 80147cc:	d8c02615 	stw	r3,152(sp)
 80147d0:	003da406 	br	8013e64 <__alt_data_end+0xf8013e64>
 80147d4:	9009883a 	mov	r4,r18
 80147d8:	a00b883a 	mov	r5,r20
 80147dc:	d9801a04 	addi	r6,sp,104
 80147e0:	801394c0 	call	801394c <__ssprint_r>
 80147e4:	103f851e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 80147e8:	d8c01c17 	ldw	r3,112(sp)
 80147ec:	d8801b17 	ldw	r2,108(sp)
 80147f0:	d811883a 	mov	r8,sp
 80147f4:	003eda06 	br	8014360 <__alt_data_end+0xf8014360>
 80147f8:	9009883a 	mov	r4,r18
 80147fc:	a00b883a 	mov	r5,r20
 8014800:	d9801a04 	addi	r6,sp,104
 8014804:	801394c0 	call	801394c <__ssprint_r>
 8014808:	103f7c1e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 801480c:	d8c01c17 	ldw	r3,112(sp)
 8014810:	d8801b17 	ldw	r2,108(sp)
 8014814:	d811883a 	mov	r8,sp
 8014818:	003ede06 	br	8014394 <__alt_data_end+0xf8014394>
 801481c:	da801a04 	addi	r10,sp,104
 8014820:	da802615 	stw	r10,152(sp)
 8014824:	003d9106 	br	8013e6c <__alt_data_end+0xf8013e6c>
 8014828:	00800084 	movi	r2,2
 801482c:	4a86b03a 	or	r3,r9,r10
 8014830:	003d7106 	br	8013df8 <__alt_data_end+0xf8013df8>
 8014834:	88c0040c 	andi	r3,r17,16
 8014838:	18004f1e 	bne	r3,zero,8014978 <___svfiprintf_internal_r+0xe64>
 801483c:	88c0100c 	andi	r3,r17,64
 8014840:	18004d26 	beq	r3,zero,8014978 <___svfiprintf_internal_r+0xe64>
 8014844:	dac02317 	ldw	r11,140(sp)
 8014848:	1240000b 	ldhu	r9,0(r2)
 801484c:	0015883a 	mov	r10,zero
 8014850:	5ac00104 	addi	r11,r11,4
 8014854:	dac02315 	stw	r11,140(sp)
 8014858:	00800044 	movi	r2,1
 801485c:	4807883a 	mov	r3,r9
 8014860:	003d6506 	br	8013df8 <__alt_data_end+0xf8013df8>
 8014864:	9009883a 	mov	r4,r18
 8014868:	a00b883a 	mov	r5,r20
 801486c:	d9801a04 	addi	r6,sp,104
 8014870:	801394c0 	call	801394c <__ssprint_r>
 8014874:	103f611e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 8014878:	d8c01c17 	ldw	r3,112(sp)
 801487c:	d8801b17 	ldw	r2,108(sp)
 8014880:	d811883a 	mov	r8,sp
 8014884:	003ea906 	br	801432c <__alt_data_end+0xf801432c>
 8014888:	88c0040c 	andi	r3,r17,16
 801488c:	1800321e 	bne	r3,zero,8014958 <___svfiprintf_internal_r+0xe44>
 8014890:	88c0100c 	andi	r3,r17,64
 8014894:	18003026 	beq	r3,zero,8014958 <___svfiprintf_internal_r+0xe44>
 8014898:	dac02317 	ldw	r11,140(sp)
 801489c:	1240000b 	ldhu	r9,0(r2)
 80148a0:	0015883a 	mov	r10,zero
 80148a4:	5ac00104 	addi	r11,r11,4
 80148a8:	dac02315 	stw	r11,140(sp)
 80148ac:	0005883a 	mov	r2,zero
 80148b0:	4807883a 	mov	r3,r9
 80148b4:	003d5006 	br	8013df8 <__alt_data_end+0xf8013df8>
 80148b8:	10803fcc 	andi	r2,r2,255
 80148bc:	1080201c 	xori	r2,r2,128
 80148c0:	10bfe004 	addi	r2,r2,-128
 80148c4:	01000c04 	movi	r4,48
 80148c8:	11006826 	beq	r2,r4,8014a6c <___svfiprintf_internal_r+0xf58>
 80148cc:	da802617 	ldw	r10,152(sp)
 80148d0:	d8801e17 	ldw	r2,120(sp)
 80148d4:	193fffc5 	stb	r4,-1(r3)
 80148d8:	52bfffc4 	addi	r10,r10,-1
 80148dc:	da802615 	stw	r10,152(sp)
 80148e0:	12b9c83a 	sub	fp,r2,r10
 80148e4:	003d6106 	br	8013e6c <__alt_data_end+0xf8013e6c>
 80148e8:	00800244 	movi	r2,9
 80148ec:	127f1d36 	bltu	r2,r9,8014564 <__alt_data_end+0xf8014564>
 80148f0:	4a400c04 	addi	r9,r9,48
 80148f4:	d8c019c4 	addi	r3,sp,103
 80148f8:	da4019c5 	stb	r9,103(sp)
 80148fc:	df002b17 	ldw	fp,172(sp)
 8014900:	d8c02615 	stw	r3,152(sp)
 8014904:	003d5906 	br	8013e6c <__alt_data_end+0xf8013e6c>
 8014908:	d8802315 	stw	r2,140(sp)
 801490c:	a9000007 	ldb	r4,0(r21)
 8014910:	003ccc06 	br	8013c44 <__alt_data_end+0xf8013c44>
 8014914:	9009883a 	mov	r4,r18
 8014918:	a00b883a 	mov	r5,r20
 801491c:	d9801a04 	addi	r6,sp,104
 8014920:	801394c0 	call	801394c <__ssprint_r>
 8014924:	103f351e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 8014928:	d8c01c17 	ldw	r3,112(sp)
 801492c:	003efb06 	br	801451c <__alt_data_end+0xf801451c>
 8014930:	d8c01a04 	addi	r3,sp,104
 8014934:	d8c02615 	stw	r3,152(sp)
 8014938:	003d4c06 	br	8013e6c <__alt_data_end+0xf8013e6c>
 801493c:	da802317 	ldw	r10,140(sp)
 8014940:	1a400017 	ldw	r9,0(r3)
 8014944:	52800104 	addi	r10,r10,4
 8014948:	da802315 	stw	r10,140(sp)
 801494c:	4815d7fa 	srai	r10,r9,31
 8014950:	5005883a 	mov	r2,r10
 8014954:	003d9d06 	br	8013fcc <__alt_data_end+0xf8013fcc>
 8014958:	da802317 	ldw	r10,140(sp)
 801495c:	12400017 	ldw	r9,0(r2)
 8014960:	0005883a 	mov	r2,zero
 8014964:	52800104 	addi	r10,r10,4
 8014968:	da802315 	stw	r10,140(sp)
 801496c:	4807883a 	mov	r3,r9
 8014970:	0015883a 	mov	r10,zero
 8014974:	003d2006 	br	8013df8 <__alt_data_end+0xf8013df8>
 8014978:	da802317 	ldw	r10,140(sp)
 801497c:	12400017 	ldw	r9,0(r2)
 8014980:	00800044 	movi	r2,1
 8014984:	52800104 	addi	r10,r10,4
 8014988:	da802315 	stw	r10,140(sp)
 801498c:	4807883a 	mov	r3,r9
 8014990:	0015883a 	mov	r10,zero
 8014994:	003d1806 	br	8013df8 <__alt_data_end+0xf8013df8>
 8014998:	dac02317 	ldw	r11,140(sp)
 801499c:	12400017 	ldw	r9,0(r2)
 80149a0:	0015883a 	mov	r10,zero
 80149a4:	5ac00104 	addi	r11,r11,4
 80149a8:	dac02315 	stw	r11,140(sp)
 80149ac:	003dde06 	br	8014128 <__alt_data_end+0xf8014128>
 80149b0:	a9000007 	ldb	r4,0(r21)
 80149b4:	003ca306 	br	8013c44 <__alt_data_end+0xf8013c44>
 80149b8:	dac02317 	ldw	r11,140(sp)
 80149bc:	da802417 	ldw	r10,144(sp)
 80149c0:	58800017 	ldw	r2,0(r11)
 80149c4:	5007d7fa 	srai	r3,r10,31
 80149c8:	5ac00104 	addi	r11,r11,4
 80149cc:	dac02315 	stw	r11,140(sp)
 80149d0:	12800015 	stw	r10,0(r2)
 80149d4:	10c00115 	stw	r3,4(r2)
 80149d8:	003c7206 	br	8013ba4 <__alt_data_end+0xf8013ba4>
 80149dc:	00800c04 	movi	r2,48
 80149e0:	d8801d05 	stb	r2,116(sp)
 80149e4:	d9001d45 	stb	r4,117(sp)
 80149e8:	8c400094 	ori	r17,r17,2
 80149ec:	00800084 	movi	r2,2
 80149f0:	003d0106 	br	8013df8 <__alt_data_end+0xf8013df8>
 80149f4:	ad400044 	addi	r21,r21,1
 80149f8:	8c400814 	ori	r17,r17,32
 80149fc:	11000047 	ldb	r4,1(r2)
 8014a00:	003c9006 	br	8013c44 <__alt_data_end+0xf8013c44>
 8014a04:	dac02317 	ldw	r11,140(sp)
 8014a08:	da802417 	ldw	r10,144(sp)
 8014a0c:	58800017 	ldw	r2,0(r11)
 8014a10:	5ac00104 	addi	r11,r11,4
 8014a14:	dac02315 	stw	r11,140(sp)
 8014a18:	12800015 	stw	r10,0(r2)
 8014a1c:	003c6106 	br	8013ba4 <__alt_data_end+0xf8013ba4>
 8014a20:	9009883a 	mov	r4,r18
 8014a24:	a00b883a 	mov	r5,r20
 8014a28:	d9801a04 	addi	r6,sp,104
 8014a2c:	801394c0 	call	801394c <__ssprint_r>
 8014a30:	103ef21e 	bne	r2,zero,80145fc <__alt_data_end+0xf80145fc>
 8014a34:	d8c01c17 	ldw	r3,112(sp)
 8014a38:	d8801b17 	ldw	r2,108(sp)
 8014a3c:	d811883a 	mov	r8,sp
 8014a40:	003e5706 	br	80143a0 <__alt_data_end+0xf80143a0>
 8014a44:	02c200b4 	movhi	r11,2050
 8014a48:	5af36104 	addi	r11,r11,-12924
 8014a4c:	dac02215 	stw	r11,136(sp)
 8014a50:	003e7106 	br	8014418 <__alt_data_end+0xf8014418>
 8014a54:	dac02317 	ldw	r11,140(sp)
 8014a58:	12400017 	ldw	r9,0(r2)
 8014a5c:	0015883a 	mov	r10,zero
 8014a60:	5ac00104 	addi	r11,r11,4
 8014a64:	dac02315 	stw	r11,140(sp)
 8014a68:	003daf06 	br	8014128 <__alt_data_end+0xf8014128>
 8014a6c:	da801e17 	ldw	r10,120(sp)
 8014a70:	d8c02617 	ldw	r3,152(sp)
 8014a74:	50f9c83a 	sub	fp,r10,r3
 8014a78:	003cfc06 	br	8013e6c <__alt_data_end+0xf8013e6c>
 8014a7c:	da002c15 	stw	r8,176(sp)
 8014a80:	800338c0 	call	800338c <strlen>
 8014a84:	1039883a 	mov	fp,r2
 8014a88:	dac01d83 	ldbu	r11,118(sp)
 8014a8c:	ddc02315 	stw	r23,140(sp)
 8014a90:	0021883a 	mov	r16,zero
 8014a94:	da002c17 	ldw	r8,176(sp)
 8014a98:	003cf406 	br	8013e6c <__alt_data_end+0xf8013e6c>
 8014a9c:	04001004 	movi	r16,64
 8014aa0:	800b883a 	mov	r5,r16
 8014aa4:	80025d00 	call	80025d0 <_malloc_r>
 8014aa8:	da802717 	ldw	r10,156(sp)
 8014aac:	50800015 	stw	r2,0(r10)
 8014ab0:	50800415 	stw	r2,16(r10)
 8014ab4:	10002c26 	beq	r2,zero,8014b68 <___svfiprintf_internal_r+0x1054>
 8014ab8:	da802717 	ldw	r10,156(sp)
 8014abc:	54000515 	stw	r16,20(r10)
 8014ac0:	003c2806 	br	8013b64 <__alt_data_end+0xf8013b64>
 8014ac4:	00800184 	movi	r2,6
 8014ac8:	1400012e 	bgeu	r2,r16,8014ad0 <___svfiprintf_internal_r+0xfbc>
 8014acc:	1021883a 	mov	r16,r2
 8014ad0:	8039883a 	mov	fp,r16
 8014ad4:	802d883a 	mov	r22,r16
 8014ad8:	80001716 	blt	r16,zero,8014b38 <___svfiprintf_internal_r+0x1024>
 8014adc:	008200b4 	movhi	r2,2050
 8014ae0:	10b23804 	addi	r2,r2,-14112
 8014ae4:	dd802015 	stw	r22,128(sp)
 8014ae8:	ddc02315 	stw	r23,140(sp)
 8014aec:	d8802615 	stw	r2,152(sp)
 8014af0:	003d4706 	br	8014010 <__alt_data_end+0xf8014010>
 8014af4:	010200b4 	movhi	r4,2050
 8014af8:	21336504 	addi	r4,r4,-12908
 8014afc:	d9002815 	stw	r4,160(sp)
 8014b00:	003d7206 	br	80140cc <__alt_data_end+0xf80140cc>
 8014b04:	010200b4 	movhi	r4,2050
 8014b08:	21336504 	addi	r4,r4,-12908
 8014b0c:	d9002815 	stw	r4,160(sp)
 8014b10:	003e7906 	br	80144f8 <__alt_data_end+0xf80144f8>
 8014b14:	010200b4 	movhi	r4,2050
 8014b18:	21336104 	addi	r4,r4,-12924
 8014b1c:	d9002215 	stw	r4,136(sp)
 8014b20:	003ee806 	br	80146c4 <__alt_data_end+0xf80146c4>
 8014b24:	8039883a 	mov	fp,r16
 8014b28:	dac01d83 	ldbu	r11,118(sp)
 8014b2c:	ddc02315 	stw	r23,140(sp)
 8014b30:	0021883a 	mov	r16,zero
 8014b34:	003ccd06 	br	8013e6c <__alt_data_end+0xf8013e6c>
 8014b38:	002d883a 	mov	r22,zero
 8014b3c:	003fe706 	br	8014adc <__alt_data_end+0xf8014adc>
 8014b40:	dac02317 	ldw	r11,140(sp)
 8014b44:	a805883a 	mov	r2,r21
 8014b48:	502b883a 	mov	r21,r10
 8014b4c:	5c000017 	ldw	r16,0(r11)
 8014b50:	59000104 	addi	r4,r11,4
 8014b54:	d9002315 	stw	r4,140(sp)
 8014b58:	803fa80e 	bge	r16,zero,80149fc <__alt_data_end+0xf80149fc>
 8014b5c:	043fffc4 	movi	r16,-1
 8014b60:	11000047 	ldb	r4,1(r2)
 8014b64:	003c3706 	br	8013c44 <__alt_data_end+0xf8013c44>
 8014b68:	dac02917 	ldw	r11,164(sp)
 8014b6c:	00800304 	movi	r2,12
 8014b70:	58800015 	stw	r2,0(r11)
 8014b74:	00bfffc4 	movi	r2,-1
 8014b78:	003ea506 	br	8014610 <__alt_data_end+0xf8014610>

08014b7c <_wcrtomb_r>:
 8014b7c:	defff604 	addi	sp,sp,-40
 8014b80:	008200b4 	movhi	r2,2050
 8014b84:	dc800815 	stw	r18,32(sp)
 8014b88:	dc400715 	stw	r17,28(sp)
 8014b8c:	dc000615 	stw	r16,24(sp)
 8014b90:	10babc04 	addi	r2,r2,-5392
 8014b94:	dfc00915 	stw	ra,36(sp)
 8014b98:	2021883a 	mov	r16,r4
 8014b9c:	3823883a 	mov	r17,r7
 8014ba0:	14800017 	ldw	r18,0(r2)
 8014ba4:	28001426 	beq	r5,zero,8014bf8 <_wcrtomb_r+0x7c>
 8014ba8:	d9400415 	stw	r5,16(sp)
 8014bac:	d9800515 	stw	r6,20(sp)
 8014bb0:	80097800 	call	8009780 <__locale_charset>
 8014bb4:	d9400417 	ldw	r5,16(sp)
 8014bb8:	d9800517 	ldw	r6,20(sp)
 8014bbc:	8009883a 	mov	r4,r16
 8014bc0:	dc400015 	stw	r17,0(sp)
 8014bc4:	100f883a 	mov	r7,r2
 8014bc8:	903ee83a 	callr	r18
 8014bcc:	00ffffc4 	movi	r3,-1
 8014bd0:	10c0031e 	bne	r2,r3,8014be0 <_wcrtomb_r+0x64>
 8014bd4:	88000015 	stw	zero,0(r17)
 8014bd8:	00c02284 	movi	r3,138
 8014bdc:	80c00015 	stw	r3,0(r16)
 8014be0:	dfc00917 	ldw	ra,36(sp)
 8014be4:	dc800817 	ldw	r18,32(sp)
 8014be8:	dc400717 	ldw	r17,28(sp)
 8014bec:	dc000617 	ldw	r16,24(sp)
 8014bf0:	dec00a04 	addi	sp,sp,40
 8014bf4:	f800283a 	ret
 8014bf8:	80097800 	call	8009780 <__locale_charset>
 8014bfc:	8009883a 	mov	r4,r16
 8014c00:	dc400015 	stw	r17,0(sp)
 8014c04:	d9400104 	addi	r5,sp,4
 8014c08:	000d883a 	mov	r6,zero
 8014c0c:	100f883a 	mov	r7,r2
 8014c10:	903ee83a 	callr	r18
 8014c14:	003fed06 	br	8014bcc <__alt_data_end+0xf8014bcc>

08014c18 <wcrtomb>:
 8014c18:	defff504 	addi	sp,sp,-44
 8014c1c:	dc400515 	stw	r17,20(sp)
 8014c20:	dc000415 	stw	r16,16(sp)
 8014c24:	dfc00a15 	stw	ra,40(sp)
 8014c28:	dd400915 	stw	r21,36(sp)
 8014c2c:	dd000815 	stw	r20,32(sp)
 8014c30:	dcc00715 	stw	r19,28(sp)
 8014c34:	dc800615 	stw	r18,24(sp)
 8014c38:	2021883a 	mov	r16,r4
 8014c3c:	3023883a 	mov	r17,r6
 8014c40:	20001d26 	beq	r4,zero,8014cb8 <wcrtomb+0xa0>
 8014c44:	048200b4 	movhi	r18,2050
 8014c48:	94bab604 	addi	r18,r18,-5416
 8014c4c:	008200b4 	movhi	r2,2050
 8014c50:	95400017 	ldw	r21,0(r18)
 8014c54:	10babc04 	addi	r2,r2,-5392
 8014c58:	15000017 	ldw	r20,0(r2)
 8014c5c:	2827883a 	mov	r19,r5
 8014c60:	80097800 	call	8009780 <__locale_charset>
 8014c64:	a809883a 	mov	r4,r21
 8014c68:	dc400015 	stw	r17,0(sp)
 8014c6c:	800b883a 	mov	r5,r16
 8014c70:	980d883a 	mov	r6,r19
 8014c74:	100f883a 	mov	r7,r2
 8014c78:	a03ee83a 	callr	r20
 8014c7c:	00ffffc4 	movi	r3,-1
 8014c80:	10c0041e 	bne	r2,r3,8014c94 <wcrtomb+0x7c>
 8014c84:	90c00017 	ldw	r3,0(r18)
 8014c88:	01002284 	movi	r4,138
 8014c8c:	88000015 	stw	zero,0(r17)
 8014c90:	19000015 	stw	r4,0(r3)
 8014c94:	dfc00a17 	ldw	ra,40(sp)
 8014c98:	dd400917 	ldw	r21,36(sp)
 8014c9c:	dd000817 	ldw	r20,32(sp)
 8014ca0:	dcc00717 	ldw	r19,28(sp)
 8014ca4:	dc800617 	ldw	r18,24(sp)
 8014ca8:	dc400517 	ldw	r17,20(sp)
 8014cac:	dc000417 	ldw	r16,16(sp)
 8014cb0:	dec00b04 	addi	sp,sp,44
 8014cb4:	f800283a 	ret
 8014cb8:	048200b4 	movhi	r18,2050
 8014cbc:	94bab604 	addi	r18,r18,-5416
 8014cc0:	008200b4 	movhi	r2,2050
 8014cc4:	94c00017 	ldw	r19,0(r18)
 8014cc8:	10babc04 	addi	r2,r2,-5392
 8014ccc:	14000017 	ldw	r16,0(r2)
 8014cd0:	80097800 	call	8009780 <__locale_charset>
 8014cd4:	9809883a 	mov	r4,r19
 8014cd8:	dc400015 	stw	r17,0(sp)
 8014cdc:	d9400104 	addi	r5,sp,4
 8014ce0:	000d883a 	mov	r6,zero
 8014ce4:	100f883a 	mov	r7,r2
 8014ce8:	803ee83a 	callr	r16
 8014cec:	003fe306 	br	8014c7c <__alt_data_end+0xf8014c7c>

08014cf0 <__ascii_wctomb>:
 8014cf0:	28000526 	beq	r5,zero,8014d08 <__ascii_wctomb+0x18>
 8014cf4:	00803fc4 	movi	r2,255
 8014cf8:	11800536 	bltu	r2,r6,8014d10 <__ascii_wctomb+0x20>
 8014cfc:	29800005 	stb	r6,0(r5)
 8014d00:	00800044 	movi	r2,1
 8014d04:	f800283a 	ret
 8014d08:	0005883a 	mov	r2,zero
 8014d0c:	f800283a 	ret
 8014d10:	00802284 	movi	r2,138
 8014d14:	20800015 	stw	r2,0(r4)
 8014d18:	00bfffc4 	movi	r2,-1
 8014d1c:	f800283a 	ret

08014d20 <_wctomb_r>:
 8014d20:	008200b4 	movhi	r2,2050
 8014d24:	defff904 	addi	sp,sp,-28
 8014d28:	10babc04 	addi	r2,r2,-5392
 8014d2c:	dfc00615 	stw	ra,24(sp)
 8014d30:	dc400515 	stw	r17,20(sp)
 8014d34:	dc000415 	stw	r16,16(sp)
 8014d38:	3823883a 	mov	r17,r7
 8014d3c:	14000017 	ldw	r16,0(r2)
 8014d40:	d9000115 	stw	r4,4(sp)
 8014d44:	d9400215 	stw	r5,8(sp)
 8014d48:	d9800315 	stw	r6,12(sp)
 8014d4c:	80097800 	call	8009780 <__locale_charset>
 8014d50:	d9000117 	ldw	r4,4(sp)
 8014d54:	d9400217 	ldw	r5,8(sp)
 8014d58:	d9800317 	ldw	r6,12(sp)
 8014d5c:	dc400015 	stw	r17,0(sp)
 8014d60:	100f883a 	mov	r7,r2
 8014d64:	803ee83a 	callr	r16
 8014d68:	dfc00617 	ldw	ra,24(sp)
 8014d6c:	dc400517 	ldw	r17,20(sp)
 8014d70:	dc000417 	ldw	r16,16(sp)
 8014d74:	dec00704 	addi	sp,sp,28
 8014d78:	f800283a 	ret

08014d7c <__muldi3>:
 8014d7c:	223fffcc 	andi	r8,r4,65535
 8014d80:	2012d43a 	srli	r9,r4,16
 8014d84:	32bfffcc 	andi	r10,r6,65535
 8014d88:	3006d43a 	srli	r3,r6,16
 8014d8c:	5217383a 	mul	r11,r10,r8
 8014d90:	5255383a 	mul	r10,r10,r9
 8014d94:	1a05383a 	mul	r2,r3,r8
 8014d98:	5810d43a 	srli	r8,r11,16
 8014d9c:	5085883a 	add	r2,r10,r2
 8014da0:	1205883a 	add	r2,r2,r8
 8014da4:	1a51383a 	mul	r8,r3,r9
 8014da8:	1280022e 	bgeu	r2,r10,8014db4 <__muldi3+0x38>
 8014dac:	00c00074 	movhi	r3,1
 8014db0:	40d1883a 	add	r8,r8,r3
 8014db4:	1006d43a 	srli	r3,r2,16
 8014db8:	21cf383a 	mul	r7,r4,r7
 8014dbc:	314b383a 	mul	r5,r6,r5
 8014dc0:	1004943a 	slli	r2,r2,16
 8014dc4:	40c7883a 	add	r3,r8,r3
 8014dc8:	5affffcc 	andi	r11,r11,65535
 8014dcc:	3949883a 	add	r4,r7,r5
 8014dd0:	12c5883a 	add	r2,r2,r11
 8014dd4:	20c7883a 	add	r3,r4,r3
 8014dd8:	f800283a 	ret

08014ddc <__fixunsdfsi>:
 8014ddc:	defffd04 	addi	sp,sp,-12
 8014de0:	000d883a 	mov	r6,zero
 8014de4:	01d07834 	movhi	r7,16864
 8014de8:	dc400115 	stw	r17,4(sp)
 8014dec:	dc000015 	stw	r16,0(sp)
 8014df0:	dfc00215 	stw	ra,8(sp)
 8014df4:	2023883a 	mov	r17,r4
 8014df8:	2821883a 	mov	r16,r5
 8014dfc:	8016d700 	call	8016d70 <__gedf2>
 8014e00:	1000080e 	bge	r2,zero,8014e24 <__fixunsdfsi+0x48>
 8014e04:	8809883a 	mov	r4,r17
 8014e08:	800b883a 	mov	r5,r16
 8014e0c:	8017f240 	call	8017f24 <__fixdfsi>
 8014e10:	dfc00217 	ldw	ra,8(sp)
 8014e14:	dc400117 	ldw	r17,4(sp)
 8014e18:	dc000017 	ldw	r16,0(sp)
 8014e1c:	dec00304 	addi	sp,sp,12
 8014e20:	f800283a 	ret
 8014e24:	000d883a 	mov	r6,zero
 8014e28:	01d07834 	movhi	r7,16864
 8014e2c:	8809883a 	mov	r4,r17
 8014e30:	800b883a 	mov	r5,r16
 8014e34:	80176540 	call	8017654 <__subdf3>
 8014e38:	180b883a 	mov	r5,r3
 8014e3c:	1009883a 	mov	r4,r2
 8014e40:	8017f240 	call	8017f24 <__fixdfsi>
 8014e44:	00e00034 	movhi	r3,32768
 8014e48:	10c5883a 	add	r2,r2,r3
 8014e4c:	003ff006 	br	8014e10 <__alt_data_end+0xf8014e10>

08014e50 <__udivdi3>:
 8014e50:	defff504 	addi	sp,sp,-44
 8014e54:	dcc00415 	stw	r19,16(sp)
 8014e58:	dc000115 	stw	r16,4(sp)
 8014e5c:	dfc00a15 	stw	ra,40(sp)
 8014e60:	df000915 	stw	fp,36(sp)
 8014e64:	ddc00815 	stw	r23,32(sp)
 8014e68:	dd800715 	stw	r22,28(sp)
 8014e6c:	dd400615 	stw	r21,24(sp)
 8014e70:	dd000515 	stw	r20,20(sp)
 8014e74:	dc800315 	stw	r18,12(sp)
 8014e78:	dc400215 	stw	r17,8(sp)
 8014e7c:	2027883a 	mov	r19,r4
 8014e80:	2821883a 	mov	r16,r5
 8014e84:	3800421e 	bne	r7,zero,8014f90 <__udivdi3+0x140>
 8014e88:	3025883a 	mov	r18,r6
 8014e8c:	2023883a 	mov	r17,r4
 8014e90:	2980542e 	bgeu	r5,r6,8014fe4 <__udivdi3+0x194>
 8014e94:	00bfffd4 	movui	r2,65535
 8014e98:	282d883a 	mov	r22,r5
 8014e9c:	1180a836 	bltu	r2,r6,8015140 <__udivdi3+0x2f0>
 8014ea0:	00803fc4 	movi	r2,255
 8014ea4:	1181422e 	bgeu	r2,r6,80153b0 <__udivdi3+0x560>
 8014ea8:	00800204 	movi	r2,8
 8014eac:	1007883a 	mov	r3,r2
 8014eb0:	3084d83a 	srl	r2,r6,r2
 8014eb4:	010200b4 	movhi	r4,2050
 8014eb8:	21336904 	addi	r4,r4,-12892
 8014ebc:	2085883a 	add	r2,r4,r2
 8014ec0:	10800003 	ldbu	r2,0(r2)
 8014ec4:	10c7883a 	add	r3,r2,r3
 8014ec8:	00800804 	movi	r2,32
 8014ecc:	10c5c83a 	sub	r2,r2,r3
 8014ed0:	10000526 	beq	r2,zero,8014ee8 <__udivdi3+0x98>
 8014ed4:	80a0983a 	sll	r16,r16,r2
 8014ed8:	98c6d83a 	srl	r3,r19,r3
 8014edc:	30a4983a 	sll	r18,r6,r2
 8014ee0:	98a2983a 	sll	r17,r19,r2
 8014ee4:	80ecb03a 	or	r22,r16,r3
 8014ee8:	902ad43a 	srli	r21,r18,16
 8014eec:	b009883a 	mov	r4,r22
 8014ef0:	953fffcc 	andi	r20,r18,65535
 8014ef4:	a80b883a 	mov	r5,r21
 8014ef8:	80024980 	call	8002498 <__umodsi3>
 8014efc:	b009883a 	mov	r4,r22
 8014f00:	a80b883a 	mov	r5,r21
 8014f04:	1027883a 	mov	r19,r2
 8014f08:	80024900 	call	8002490 <__udivsi3>
 8014f0c:	1021883a 	mov	r16,r2
 8014f10:	8806d43a 	srli	r3,r17,16
 8014f14:	9804943a 	slli	r2,r19,16
 8014f18:	8527383a 	mul	r19,r16,r20
 8014f1c:	10c4b03a 	or	r2,r2,r3
 8014f20:	14c0052e 	bgeu	r2,r19,8014f38 <__udivdi3+0xe8>
 8014f24:	1485883a 	add	r2,r2,r18
 8014f28:	80ffffc4 	addi	r3,r16,-1
 8014f2c:	14800136 	bltu	r2,r18,8014f34 <__udivdi3+0xe4>
 8014f30:	14c13436 	bltu	r2,r19,8015404 <__udivdi3+0x5b4>
 8014f34:	1821883a 	mov	r16,r3
 8014f38:	14e7c83a 	sub	r19,r2,r19
 8014f3c:	9809883a 	mov	r4,r19
 8014f40:	a80b883a 	mov	r5,r21
 8014f44:	80024980 	call	8002498 <__umodsi3>
 8014f48:	102d883a 	mov	r22,r2
 8014f4c:	9809883a 	mov	r4,r19
 8014f50:	a80b883a 	mov	r5,r21
 8014f54:	80024900 	call	8002490 <__udivsi3>
 8014f58:	b02c943a 	slli	r22,r22,16
 8014f5c:	1529383a 	mul	r20,r2,r20
 8014f60:	8c7fffcc 	andi	r17,r17,65535
 8014f64:	b462b03a 	or	r17,r22,r17
 8014f68:	8d00052e 	bgeu	r17,r20,8014f80 <__udivdi3+0x130>
 8014f6c:	8ca3883a 	add	r17,r17,r18
 8014f70:	10ffffc4 	addi	r3,r2,-1
 8014f74:	8c80f636 	bltu	r17,r18,8015350 <__udivdi3+0x500>
 8014f78:	8d00f52e 	bgeu	r17,r20,8015350 <__udivdi3+0x500>
 8014f7c:	10bfff84 	addi	r2,r2,-2
 8014f80:	8020943a 	slli	r16,r16,16
 8014f84:	0007883a 	mov	r3,zero
 8014f88:	1404b03a 	or	r2,r2,r16
 8014f8c:	00005b06 	br	80150fc <__udivdi3+0x2ac>
 8014f90:	29c05836 	bltu	r5,r7,80150f4 <__udivdi3+0x2a4>
 8014f94:	00bfffd4 	movui	r2,65535
 8014f98:	11c0642e 	bgeu	r2,r7,801512c <__udivdi3+0x2dc>
 8014f9c:	00804034 	movhi	r2,256
 8014fa0:	10bfffc4 	addi	r2,r2,-1
 8014fa4:	11c0f32e 	bgeu	r2,r7,8015374 <__udivdi3+0x524>
 8014fa8:	00c00604 	movi	r3,24
 8014fac:	180b883a 	mov	r5,r3
 8014fb0:	38c6d83a 	srl	r3,r7,r3
 8014fb4:	008200b4 	movhi	r2,2050
 8014fb8:	10b36904 	addi	r2,r2,-12892
 8014fbc:	10c7883a 	add	r3,r2,r3
 8014fc0:	18c00003 	ldbu	r3,0(r3)
 8014fc4:	01000804 	movi	r4,32
 8014fc8:	1947883a 	add	r3,r3,r5
 8014fcc:	20e5c83a 	sub	r18,r4,r3
 8014fd0:	9000661e 	bne	r18,zero,801516c <__udivdi3+0x31c>
 8014fd4:	3c00f936 	bltu	r7,r16,80153bc <__udivdi3+0x56c>
 8014fd8:	9985403a 	cmpgeu	r2,r19,r6
 8014fdc:	0007883a 	mov	r3,zero
 8014fe0:	00004606 	br	80150fc <__udivdi3+0x2ac>
 8014fe4:	3000041e 	bne	r6,zero,8014ff8 <__udivdi3+0x1a8>
 8014fe8:	01000044 	movi	r4,1
 8014fec:	000b883a 	mov	r5,zero
 8014ff0:	80024900 	call	8002490 <__udivsi3>
 8014ff4:	1025883a 	mov	r18,r2
 8014ff8:	00bfffd4 	movui	r2,65535
 8014ffc:	1480562e 	bgeu	r2,r18,8015158 <__udivdi3+0x308>
 8015000:	00804034 	movhi	r2,256
 8015004:	10bfffc4 	addi	r2,r2,-1
 8015008:	1480e32e 	bgeu	r2,r18,8015398 <__udivdi3+0x548>
 801500c:	00800604 	movi	r2,24
 8015010:	1007883a 	mov	r3,r2
 8015014:	9084d83a 	srl	r2,r18,r2
 8015018:	010200b4 	movhi	r4,2050
 801501c:	21336904 	addi	r4,r4,-12892
 8015020:	2085883a 	add	r2,r4,r2
 8015024:	10800003 	ldbu	r2,0(r2)
 8015028:	10c5883a 	add	r2,r2,r3
 801502c:	00c00804 	movi	r3,32
 8015030:	1887c83a 	sub	r3,r3,r2
 8015034:	1800911e 	bne	r3,zero,801527c <__udivdi3+0x42c>
 8015038:	9028d43a 	srli	r20,r18,16
 801503c:	84a1c83a 	sub	r16,r16,r18
 8015040:	957fffcc 	andi	r21,r18,65535
 8015044:	00c00044 	movi	r3,1
 8015048:	8009883a 	mov	r4,r16
 801504c:	a00b883a 	mov	r5,r20
 8015050:	d8c00015 	stw	r3,0(sp)
 8015054:	80024980 	call	8002498 <__umodsi3>
 8015058:	8009883a 	mov	r4,r16
 801505c:	a00b883a 	mov	r5,r20
 8015060:	1027883a 	mov	r19,r2
 8015064:	80024900 	call	8002490 <__udivsi3>
 8015068:	1021883a 	mov	r16,r2
 801506c:	880cd43a 	srli	r6,r17,16
 8015070:	9804943a 	slli	r2,r19,16
 8015074:	8567383a 	mul	r19,r16,r21
 8015078:	d8c00017 	ldw	r3,0(sp)
 801507c:	1188b03a 	or	r4,r2,r6
 8015080:	24c0052e 	bgeu	r4,r19,8015098 <__udivdi3+0x248>
 8015084:	2489883a 	add	r4,r4,r18
 8015088:	80bfffc4 	addi	r2,r16,-1
 801508c:	24800136 	bltu	r4,r18,8015094 <__udivdi3+0x244>
 8015090:	24c0d936 	bltu	r4,r19,80153f8 <__udivdi3+0x5a8>
 8015094:	1021883a 	mov	r16,r2
 8015098:	24e7c83a 	sub	r19,r4,r19
 801509c:	9809883a 	mov	r4,r19
 80150a0:	a00b883a 	mov	r5,r20
 80150a4:	d8c00015 	stw	r3,0(sp)
 80150a8:	80024980 	call	8002498 <__umodsi3>
 80150ac:	102d883a 	mov	r22,r2
 80150b0:	9809883a 	mov	r4,r19
 80150b4:	a00b883a 	mov	r5,r20
 80150b8:	80024900 	call	8002490 <__udivsi3>
 80150bc:	b02c943a 	slli	r22,r22,16
 80150c0:	156b383a 	mul	r21,r2,r21
 80150c4:	8c7fffcc 	andi	r17,r17,65535
 80150c8:	b462b03a 	or	r17,r22,r17
 80150cc:	d8c00017 	ldw	r3,0(sp)
 80150d0:	8d40052e 	bgeu	r17,r21,80150e8 <__udivdi3+0x298>
 80150d4:	8ca3883a 	add	r17,r17,r18
 80150d8:	113fffc4 	addi	r4,r2,-1
 80150dc:	8c809a36 	bltu	r17,r18,8015348 <__udivdi3+0x4f8>
 80150e0:	8d40992e 	bgeu	r17,r21,8015348 <__udivdi3+0x4f8>
 80150e4:	10bfff84 	addi	r2,r2,-2
 80150e8:	8020943a 	slli	r16,r16,16
 80150ec:	1404b03a 	or	r2,r2,r16
 80150f0:	00000206 	br	80150fc <__udivdi3+0x2ac>
 80150f4:	0007883a 	mov	r3,zero
 80150f8:	0005883a 	mov	r2,zero
 80150fc:	dfc00a17 	ldw	ra,40(sp)
 8015100:	df000917 	ldw	fp,36(sp)
 8015104:	ddc00817 	ldw	r23,32(sp)
 8015108:	dd800717 	ldw	r22,28(sp)
 801510c:	dd400617 	ldw	r21,24(sp)
 8015110:	dd000517 	ldw	r20,20(sp)
 8015114:	dcc00417 	ldw	r19,16(sp)
 8015118:	dc800317 	ldw	r18,12(sp)
 801511c:	dc400217 	ldw	r17,8(sp)
 8015120:	dc000117 	ldw	r16,4(sp)
 8015124:	dec00b04 	addi	sp,sp,44
 8015128:	f800283a 	ret
 801512c:	00803fc4 	movi	r2,255
 8015130:	11c0932e 	bgeu	r2,r7,8015380 <__udivdi3+0x530>
 8015134:	00c00204 	movi	r3,8
 8015138:	180b883a 	mov	r5,r3
 801513c:	003f9c06 	br	8014fb0 <__alt_data_end+0xf8014fb0>
 8015140:	00804034 	movhi	r2,256
 8015144:	10bfffc4 	addi	r2,r2,-1
 8015148:	1180902e 	bgeu	r2,r6,801538c <__udivdi3+0x53c>
 801514c:	00800604 	movi	r2,24
 8015150:	1007883a 	mov	r3,r2
 8015154:	003f5606 	br	8014eb0 <__alt_data_end+0xf8014eb0>
 8015158:	00803fc4 	movi	r2,255
 801515c:	1480912e 	bgeu	r2,r18,80153a4 <__udivdi3+0x554>
 8015160:	00800204 	movi	r2,8
 8015164:	1007883a 	mov	r3,r2
 8015168:	003faa06 	br	8015014 <__alt_data_end+0xf8015014>
 801516c:	30eed83a 	srl	r23,r6,r3
 8015170:	3c8e983a 	sll	r7,r7,r18
 8015174:	80f8d83a 	srl	fp,r16,r3
 8015178:	98c6d83a 	srl	r3,r19,r3
 801517c:	3deeb03a 	or	r23,r7,r23
 8015180:	b828d43a 	srli	r20,r23,16
 8015184:	84a0983a 	sll	r16,r16,r18
 8015188:	e009883a 	mov	r4,fp
 801518c:	a00b883a 	mov	r5,r20
 8015190:	80e2b03a 	or	r17,r16,r3
 8015194:	34aa983a 	sll	r21,r6,r18
 8015198:	80024980 	call	8002498 <__umodsi3>
 801519c:	e009883a 	mov	r4,fp
 80151a0:	a00b883a 	mov	r5,r20
 80151a4:	102d883a 	mov	r22,r2
 80151a8:	80024900 	call	8002490 <__udivsi3>
 80151ac:	1021883a 	mov	r16,r2
 80151b0:	bf3fffcc 	andi	fp,r23,65535
 80151b4:	b004943a 	slli	r2,r22,16
 80151b8:	8808d43a 	srli	r4,r17,16
 80151bc:	872d383a 	mul	r22,r16,fp
 80151c0:	1104b03a 	or	r2,r2,r4
 80151c4:	1580042e 	bgeu	r2,r22,80151d8 <__udivdi3+0x388>
 80151c8:	15c5883a 	add	r2,r2,r23
 80151cc:	80ffffc4 	addi	r3,r16,-1
 80151d0:	15c0812e 	bgeu	r2,r23,80153d8 <__udivdi3+0x588>
 80151d4:	1821883a 	mov	r16,r3
 80151d8:	15adc83a 	sub	r22,r2,r22
 80151dc:	b009883a 	mov	r4,r22
 80151e0:	a00b883a 	mov	r5,r20
 80151e4:	80024980 	call	8002498 <__umodsi3>
 80151e8:	a00b883a 	mov	r5,r20
 80151ec:	b009883a 	mov	r4,r22
 80151f0:	d8800015 	stw	r2,0(sp)
 80151f4:	80024900 	call	8002490 <__udivsi3>
 80151f8:	d8c00017 	ldw	r3,0(sp)
 80151fc:	170b383a 	mul	r5,r2,fp
 8015200:	8c7fffcc 	andi	r17,r17,65535
 8015204:	1806943a 	slli	r3,r3,16
 8015208:	1c46b03a 	or	r3,r3,r17
 801520c:	1940042e 	bgeu	r3,r5,8015220 <__udivdi3+0x3d0>
 8015210:	1dc7883a 	add	r3,r3,r23
 8015214:	113fffc4 	addi	r4,r2,-1
 8015218:	1dc06b2e 	bgeu	r3,r23,80153c8 <__udivdi3+0x578>
 801521c:	2005883a 	mov	r2,r4
 8015220:	8020943a 	slli	r16,r16,16
 8015224:	a9ffffcc 	andi	r7,r21,65535
 8015228:	a82ad43a 	srli	r21,r21,16
 801522c:	1404b03a 	or	r2,r2,r16
 8015230:	113fffcc 	andi	r4,r2,65535
 8015234:	100cd43a 	srli	r6,r2,16
 8015238:	21d3383a 	mul	r9,r4,r7
 801523c:	2549383a 	mul	r4,r4,r21
 8015240:	31cf383a 	mul	r7,r6,r7
 8015244:	4810d43a 	srli	r8,r9,16
 8015248:	1947c83a 	sub	r3,r3,r5
 801524c:	3909883a 	add	r4,r7,r4
 8015250:	2209883a 	add	r4,r4,r8
 8015254:	354d383a 	mul	r6,r6,r21
 8015258:	21c0022e 	bgeu	r4,r7,8015264 <__udivdi3+0x414>
 801525c:	01400074 	movhi	r5,1
 8015260:	314d883a 	add	r6,r6,r5
 8015264:	202ad43a 	srli	r21,r4,16
 8015268:	354d883a 	add	r6,r6,r21
 801526c:	19803f36 	bltu	r3,r6,801536c <__udivdi3+0x51c>
 8015270:	19803926 	beq	r3,r6,8015358 <__udivdi3+0x508>
 8015274:	0007883a 	mov	r3,zero
 8015278:	003fa006 	br	80150fc <__alt_data_end+0xf80150fc>
 801527c:	90e4983a 	sll	r18,r18,r3
 8015280:	80aad83a 	srl	r21,r16,r2
 8015284:	80e0983a 	sll	r16,r16,r3
 8015288:	9028d43a 	srli	r20,r18,16
 801528c:	9884d83a 	srl	r2,r19,r2
 8015290:	a809883a 	mov	r4,r21
 8015294:	a00b883a 	mov	r5,r20
 8015298:	80acb03a 	or	r22,r16,r2
 801529c:	98e2983a 	sll	r17,r19,r3
 80152a0:	80024980 	call	8002498 <__umodsi3>
 80152a4:	a809883a 	mov	r4,r21
 80152a8:	a00b883a 	mov	r5,r20
 80152ac:	1021883a 	mov	r16,r2
 80152b0:	80024900 	call	8002490 <__udivsi3>
 80152b4:	957fffcc 	andi	r21,r18,65535
 80152b8:	8020943a 	slli	r16,r16,16
 80152bc:	b00ad43a 	srli	r5,r22,16
 80152c0:	1567383a 	mul	r19,r2,r21
 80152c4:	102f883a 	mov	r23,r2
 80152c8:	8148b03a 	or	r4,r16,r5
 80152cc:	24c0062e 	bgeu	r4,r19,80152e8 <__udivdi3+0x498>
 80152d0:	2489883a 	add	r4,r4,r18
 80152d4:	10bfffc4 	addi	r2,r2,-1
 80152d8:	24804536 	bltu	r4,r18,80153f0 <__udivdi3+0x5a0>
 80152dc:	24c0442e 	bgeu	r4,r19,80153f0 <__udivdi3+0x5a0>
 80152e0:	bdffff84 	addi	r23,r23,-2
 80152e4:	2489883a 	add	r4,r4,r18
 80152e8:	24e7c83a 	sub	r19,r4,r19
 80152ec:	9809883a 	mov	r4,r19
 80152f0:	a00b883a 	mov	r5,r20
 80152f4:	80024980 	call	8002498 <__umodsi3>
 80152f8:	1021883a 	mov	r16,r2
 80152fc:	9809883a 	mov	r4,r19
 8015300:	a00b883a 	mov	r5,r20
 8015304:	80024900 	call	8002490 <__udivsi3>
 8015308:	8020943a 	slli	r16,r16,16
 801530c:	1007883a 	mov	r3,r2
 8015310:	1545383a 	mul	r2,r2,r21
 8015314:	b13fffcc 	andi	r4,r22,65535
 8015318:	8108b03a 	or	r4,r16,r4
 801531c:	2080062e 	bgeu	r4,r2,8015338 <__udivdi3+0x4e8>
 8015320:	2489883a 	add	r4,r4,r18
 8015324:	197fffc4 	addi	r5,r3,-1
 8015328:	24802f36 	bltu	r4,r18,80153e8 <__udivdi3+0x598>
 801532c:	20802e2e 	bgeu	r4,r2,80153e8 <__udivdi3+0x598>
 8015330:	18ffff84 	addi	r3,r3,-2
 8015334:	2489883a 	add	r4,r4,r18
 8015338:	b82e943a 	slli	r23,r23,16
 801533c:	20a1c83a 	sub	r16,r4,r2
 8015340:	1dc6b03a 	or	r3,r3,r23
 8015344:	003f4006 	br	8015048 <__alt_data_end+0xf8015048>
 8015348:	2005883a 	mov	r2,r4
 801534c:	003f6606 	br	80150e8 <__alt_data_end+0xf80150e8>
 8015350:	1805883a 	mov	r2,r3
 8015354:	003f0a06 	br	8014f80 <__alt_data_end+0xf8014f80>
 8015358:	2006943a 	slli	r3,r4,16
 801535c:	9c88983a 	sll	r4,r19,r18
 8015360:	4a7fffcc 	andi	r9,r9,65535
 8015364:	1a47883a 	add	r3,r3,r9
 8015368:	20ffc22e 	bgeu	r4,r3,8015274 <__alt_data_end+0xf8015274>
 801536c:	10bfffc4 	addi	r2,r2,-1
 8015370:	003fc006 	br	8015274 <__alt_data_end+0xf8015274>
 8015374:	00c00404 	movi	r3,16
 8015378:	180b883a 	mov	r5,r3
 801537c:	003f0c06 	br	8014fb0 <__alt_data_end+0xf8014fb0>
 8015380:	0007883a 	mov	r3,zero
 8015384:	000b883a 	mov	r5,zero
 8015388:	003f0906 	br	8014fb0 <__alt_data_end+0xf8014fb0>
 801538c:	00800404 	movi	r2,16
 8015390:	1007883a 	mov	r3,r2
 8015394:	003ec606 	br	8014eb0 <__alt_data_end+0xf8014eb0>
 8015398:	00800404 	movi	r2,16
 801539c:	1007883a 	mov	r3,r2
 80153a0:	003f1c06 	br	8015014 <__alt_data_end+0xf8015014>
 80153a4:	0005883a 	mov	r2,zero
 80153a8:	0007883a 	mov	r3,zero
 80153ac:	003f1906 	br	8015014 <__alt_data_end+0xf8015014>
 80153b0:	0005883a 	mov	r2,zero
 80153b4:	0007883a 	mov	r3,zero
 80153b8:	003ebd06 	br	8014eb0 <__alt_data_end+0xf8014eb0>
 80153bc:	0007883a 	mov	r3,zero
 80153c0:	00800044 	movi	r2,1
 80153c4:	003f4d06 	br	80150fc <__alt_data_end+0xf80150fc>
 80153c8:	197f942e 	bgeu	r3,r5,801521c <__alt_data_end+0xf801521c>
 80153cc:	10bfff84 	addi	r2,r2,-2
 80153d0:	1dc7883a 	add	r3,r3,r23
 80153d4:	003f9206 	br	8015220 <__alt_data_end+0xf8015220>
 80153d8:	15bf7e2e 	bgeu	r2,r22,80151d4 <__alt_data_end+0xf80151d4>
 80153dc:	843fff84 	addi	r16,r16,-2
 80153e0:	15c5883a 	add	r2,r2,r23
 80153e4:	003f7c06 	br	80151d8 <__alt_data_end+0xf80151d8>
 80153e8:	2807883a 	mov	r3,r5
 80153ec:	003fd206 	br	8015338 <__alt_data_end+0xf8015338>
 80153f0:	102f883a 	mov	r23,r2
 80153f4:	003fbc06 	br	80152e8 <__alt_data_end+0xf80152e8>
 80153f8:	843fff84 	addi	r16,r16,-2
 80153fc:	2489883a 	add	r4,r4,r18
 8015400:	003f2506 	br	8015098 <__alt_data_end+0xf8015098>
 8015404:	843fff84 	addi	r16,r16,-2
 8015408:	1485883a 	add	r2,r2,r18
 801540c:	003eca06 	br	8014f38 <__alt_data_end+0xf8014f38>

08015410 <__umoddi3>:
 8015410:	defff404 	addi	sp,sp,-48
 8015414:	ddc00915 	stw	r23,36(sp)
 8015418:	dc400315 	stw	r17,12(sp)
 801541c:	dc000215 	stw	r16,8(sp)
 8015420:	dfc00b15 	stw	ra,44(sp)
 8015424:	df000a15 	stw	fp,40(sp)
 8015428:	dd800815 	stw	r22,32(sp)
 801542c:	dd400715 	stw	r21,28(sp)
 8015430:	dd000615 	stw	r20,24(sp)
 8015434:	dcc00515 	stw	r19,20(sp)
 8015438:	dc800415 	stw	r18,16(sp)
 801543c:	2021883a 	mov	r16,r4
 8015440:	2823883a 	mov	r17,r5
 8015444:	282f883a 	mov	r23,r5
 8015448:	3800381e 	bne	r7,zero,801552c <__umoddi3+0x11c>
 801544c:	3027883a 	mov	r19,r6
 8015450:	2029883a 	mov	r20,r4
 8015454:	29804e2e 	bgeu	r5,r6,8015590 <__umoddi3+0x180>
 8015458:	00bfffd4 	movui	r2,65535
 801545c:	11809c36 	bltu	r2,r6,80156d0 <__umoddi3+0x2c0>
 8015460:	00803fc4 	movi	r2,255
 8015464:	11813b2e 	bgeu	r2,r6,8015954 <__umoddi3+0x544>
 8015468:	01400204 	movi	r5,8
 801546c:	2805883a 	mov	r2,r5
 8015470:	314ad83a 	srl	r5,r6,r5
 8015474:	00c200b4 	movhi	r3,2050
 8015478:	18f36904 	addi	r3,r3,-12892
 801547c:	194b883a 	add	r5,r3,r5
 8015480:	29000003 	ldbu	r4,0(r5)
 8015484:	2089883a 	add	r4,r4,r2
 8015488:	00800804 	movi	r2,32
 801548c:	1105c83a 	sub	r2,r2,r4
 8015490:	1000ec26 	beq	r2,zero,8015844 <__umoddi3+0x434>
 8015494:	88a2983a 	sll	r17,r17,r2
 8015498:	8108d83a 	srl	r4,r16,r4
 801549c:	30a6983a 	sll	r19,r6,r2
 80154a0:	80a8983a 	sll	r20,r16,r2
 80154a4:	1025883a 	mov	r18,r2
 80154a8:	892eb03a 	or	r23,r17,r4
 80154ac:	982cd43a 	srli	r22,r19,16
 80154b0:	b809883a 	mov	r4,r23
 80154b4:	9d7fffcc 	andi	r21,r19,65535
 80154b8:	b00b883a 	mov	r5,r22
 80154bc:	80024980 	call	8002498 <__umodsi3>
 80154c0:	b809883a 	mov	r4,r23
 80154c4:	b00b883a 	mov	r5,r22
 80154c8:	1021883a 	mov	r16,r2
 80154cc:	80024900 	call	8002490 <__udivsi3>
 80154d0:	8020943a 	slli	r16,r16,16
 80154d4:	a00cd43a 	srli	r6,r20,16
 80154d8:	1545383a 	mul	r2,r2,r21
 80154dc:	8188b03a 	or	r4,r16,r6
 80154e0:	2080042e 	bgeu	r4,r2,80154f4 <__umoddi3+0xe4>
 80154e4:	24c9883a 	add	r4,r4,r19
 80154e8:	24c00236 	bltu	r4,r19,80154f4 <__umoddi3+0xe4>
 80154ec:	2080012e 	bgeu	r4,r2,80154f4 <__umoddi3+0xe4>
 80154f0:	24c9883a 	add	r4,r4,r19
 80154f4:	20a3c83a 	sub	r17,r4,r2
 80154f8:	8809883a 	mov	r4,r17
 80154fc:	b00b883a 	mov	r5,r22
 8015500:	80024980 	call	8002498 <__umodsi3>
 8015504:	8809883a 	mov	r4,r17
 8015508:	b00b883a 	mov	r5,r22
 801550c:	1021883a 	mov	r16,r2
 8015510:	80024900 	call	8002490 <__udivsi3>
 8015514:	8006943a 	slli	r3,r16,16
 8015518:	1545383a 	mul	r2,r2,r21
 801551c:	a13fffcc 	andi	r4,r20,65535
 8015520:	1906b03a 	or	r3,r3,r4
 8015524:	1880532e 	bgeu	r3,r2,8015674 <__umoddi3+0x264>
 8015528:	00004e06 	br	8015664 <__umoddi3+0x254>
 801552c:	29c05536 	bltu	r5,r7,8015684 <__umoddi3+0x274>
 8015530:	00bfffd4 	movui	r2,65535
 8015534:	11c0612e 	bgeu	r2,r7,80156bc <__umoddi3+0x2ac>
 8015538:	00804034 	movhi	r2,256
 801553c:	10bfffc4 	addi	r2,r2,-1
 8015540:	11c0f82e 	bgeu	r2,r7,8015924 <__umoddi3+0x514>
 8015544:	01400604 	movi	r5,24
 8015548:	282b883a 	mov	r21,r5
 801554c:	394ad83a 	srl	r5,r7,r5
 8015550:	00c200b4 	movhi	r3,2050
 8015554:	18f36904 	addi	r3,r3,-12892
 8015558:	194b883a 	add	r5,r3,r5
 801555c:	28800003 	ldbu	r2,0(r5)
 8015560:	00c00804 	movi	r3,32
 8015564:	156b883a 	add	r21,r2,r21
 8015568:	1d69c83a 	sub	r20,r3,r21
 801556c:	a000631e 	bne	r20,zero,80156fc <__umoddi3+0x2ec>
 8015570:	3c400136 	bltu	r7,r17,8015578 <__umoddi3+0x168>
 8015574:	81810436 	bltu	r16,r6,8015988 <__umoddi3+0x578>
 8015578:	8185c83a 	sub	r2,r16,r6
 801557c:	89e3c83a 	sub	r17,r17,r7
 8015580:	8087803a 	cmpltu	r3,r16,r2
 8015584:	88efc83a 	sub	r23,r17,r3
 8015588:	b807883a 	mov	r3,r23
 801558c:	00003f06 	br	801568c <__umoddi3+0x27c>
 8015590:	3000041e 	bne	r6,zero,80155a4 <__umoddi3+0x194>
 8015594:	01000044 	movi	r4,1
 8015598:	000b883a 	mov	r5,zero
 801559c:	80024900 	call	8002490 <__udivsi3>
 80155a0:	1027883a 	mov	r19,r2
 80155a4:	00bfffd4 	movui	r2,65535
 80155a8:	14c04f2e 	bgeu	r2,r19,80156e8 <__umoddi3+0x2d8>
 80155ac:	00804034 	movhi	r2,256
 80155b0:	10bfffc4 	addi	r2,r2,-1
 80155b4:	14c0e42e 	bgeu	r2,r19,8015948 <__umoddi3+0x538>
 80155b8:	00800604 	movi	r2,24
 80155bc:	1007883a 	mov	r3,r2
 80155c0:	9884d83a 	srl	r2,r19,r2
 80155c4:	010200b4 	movhi	r4,2050
 80155c8:	21336904 	addi	r4,r4,-12892
 80155cc:	2085883a 	add	r2,r4,r2
 80155d0:	11000003 	ldbu	r4,0(r2)
 80155d4:	00800804 	movi	r2,32
 80155d8:	20c7883a 	add	r3,r4,r3
 80155dc:	10c5c83a 	sub	r2,r2,r3
 80155e0:	10009a1e 	bne	r2,zero,801584c <__umoddi3+0x43c>
 80155e4:	982cd43a 	srli	r22,r19,16
 80155e8:	8ce3c83a 	sub	r17,r17,r19
 80155ec:	9c3fffcc 	andi	r16,r19,65535
 80155f0:	0025883a 	mov	r18,zero
 80155f4:	8809883a 	mov	r4,r17
 80155f8:	b00b883a 	mov	r5,r22
 80155fc:	80024980 	call	8002498 <__umodsi3>
 8015600:	8809883a 	mov	r4,r17
 8015604:	b00b883a 	mov	r5,r22
 8015608:	102b883a 	mov	r21,r2
 801560c:	80024900 	call	8002490 <__udivsi3>
 8015610:	a806943a 	slli	r3,r21,16
 8015614:	a008d43a 	srli	r4,r20,16
 8015618:	1405383a 	mul	r2,r2,r16
 801561c:	190cb03a 	or	r6,r3,r4
 8015620:	3080032e 	bgeu	r6,r2,8015630 <__umoddi3+0x220>
 8015624:	34cd883a 	add	r6,r6,r19
 8015628:	34c00136 	bltu	r6,r19,8015630 <__umoddi3+0x220>
 801562c:	3080d436 	bltu	r6,r2,8015980 <__umoddi3+0x570>
 8015630:	30abc83a 	sub	r21,r6,r2
 8015634:	a809883a 	mov	r4,r21
 8015638:	b00b883a 	mov	r5,r22
 801563c:	80024980 	call	8002498 <__umodsi3>
 8015640:	1023883a 	mov	r17,r2
 8015644:	a809883a 	mov	r4,r21
 8015648:	b00b883a 	mov	r5,r22
 801564c:	80024900 	call	8002490 <__udivsi3>
 8015650:	8822943a 	slli	r17,r17,16
 8015654:	1405383a 	mul	r2,r2,r16
 8015658:	a13fffcc 	andi	r4,r20,65535
 801565c:	8906b03a 	or	r3,r17,r4
 8015660:	1880042e 	bgeu	r3,r2,8015674 <__umoddi3+0x264>
 8015664:	1cc7883a 	add	r3,r3,r19
 8015668:	1cc00236 	bltu	r3,r19,8015674 <__umoddi3+0x264>
 801566c:	1880012e 	bgeu	r3,r2,8015674 <__umoddi3+0x264>
 8015670:	1cc7883a 	add	r3,r3,r19
 8015674:	1887c83a 	sub	r3,r3,r2
 8015678:	1c84d83a 	srl	r2,r3,r18
 801567c:	0007883a 	mov	r3,zero
 8015680:	00000206 	br	801568c <__umoddi3+0x27c>
 8015684:	2005883a 	mov	r2,r4
 8015688:	2807883a 	mov	r3,r5
 801568c:	dfc00b17 	ldw	ra,44(sp)
 8015690:	df000a17 	ldw	fp,40(sp)
 8015694:	ddc00917 	ldw	r23,36(sp)
 8015698:	dd800817 	ldw	r22,32(sp)
 801569c:	dd400717 	ldw	r21,28(sp)
 80156a0:	dd000617 	ldw	r20,24(sp)
 80156a4:	dcc00517 	ldw	r19,20(sp)
 80156a8:	dc800417 	ldw	r18,16(sp)
 80156ac:	dc400317 	ldw	r17,12(sp)
 80156b0:	dc000217 	ldw	r16,8(sp)
 80156b4:	dec00c04 	addi	sp,sp,48
 80156b8:	f800283a 	ret
 80156bc:	00803fc4 	movi	r2,255
 80156c0:	11c0952e 	bgeu	r2,r7,8015918 <__umoddi3+0x508>
 80156c4:	01400204 	movi	r5,8
 80156c8:	282b883a 	mov	r21,r5
 80156cc:	003f9f06 	br	801554c <__alt_data_end+0xf801554c>
 80156d0:	00804034 	movhi	r2,256
 80156d4:	10bfffc4 	addi	r2,r2,-1
 80156d8:	1180952e 	bgeu	r2,r6,8015930 <__umoddi3+0x520>
 80156dc:	01400604 	movi	r5,24
 80156e0:	2805883a 	mov	r2,r5
 80156e4:	003f6206 	br	8015470 <__alt_data_end+0xf8015470>
 80156e8:	00803fc4 	movi	r2,255
 80156ec:	14c0932e 	bgeu	r2,r19,801593c <__umoddi3+0x52c>
 80156f0:	00800204 	movi	r2,8
 80156f4:	1007883a 	mov	r3,r2
 80156f8:	003fb106 	br	80155c0 <__alt_data_end+0xf80155c0>
 80156fc:	3548d83a 	srl	r4,r6,r21
 8015700:	3d0e983a 	sll	r7,r7,r20
 8015704:	8d10983a 	sll	r8,r17,r20
 8015708:	8d6cd83a 	srl	r22,r17,r21
 801570c:	3922b03a 	or	r17,r7,r4
 8015710:	882ed43a 	srli	r23,r17,16
 8015714:	8564d83a 	srl	r18,r16,r21
 8015718:	b009883a 	mov	r4,r22
 801571c:	b80b883a 	mov	r5,r23
 8015720:	44a4b03a 	or	r18,r8,r18
 8015724:	3526983a 	sll	r19,r6,r20
 8015728:	80024980 	call	8002498 <__umodsi3>
 801572c:	b009883a 	mov	r4,r22
 8015730:	b80b883a 	mov	r5,r23
 8015734:	1039883a 	mov	fp,r2
 8015738:	80024900 	call	8002490 <__udivsi3>
 801573c:	102d883a 	mov	r22,r2
 8015740:	8a3fffcc 	andi	r8,r17,65535
 8015744:	e004943a 	slli	r2,fp,16
 8015748:	900cd43a 	srli	r6,r18,16
 801574c:	b239383a 	mul	fp,r22,r8
 8015750:	8520983a 	sll	r16,r16,r20
 8015754:	118ab03a 	or	r5,r2,r6
 8015758:	2f00042e 	bgeu	r5,fp,801576c <__umoddi3+0x35c>
 801575c:	2c4b883a 	add	r5,r5,r17
 8015760:	b0bfffc4 	addi	r2,r22,-1
 8015764:	2c40822e 	bgeu	r5,r17,8015970 <__umoddi3+0x560>
 8015768:	102d883a 	mov	r22,r2
 801576c:	2f39c83a 	sub	fp,r5,fp
 8015770:	e009883a 	mov	r4,fp
 8015774:	b80b883a 	mov	r5,r23
 8015778:	da000115 	stw	r8,4(sp)
 801577c:	80024980 	call	8002498 <__umodsi3>
 8015780:	e009883a 	mov	r4,fp
 8015784:	b80b883a 	mov	r5,r23
 8015788:	d8800015 	stw	r2,0(sp)
 801578c:	80024900 	call	8002490 <__udivsi3>
 8015790:	d9800017 	ldw	r6,0(sp)
 8015794:	da000117 	ldw	r8,4(sp)
 8015798:	94bfffcc 	andi	r18,r18,65535
 801579c:	300c943a 	slli	r6,r6,16
 80157a0:	1209383a 	mul	r4,r2,r8
 80157a4:	3490b03a 	or	r8,r6,r18
 80157a8:	4100042e 	bgeu	r8,r4,80157bc <__umoddi3+0x3ac>
 80157ac:	4451883a 	add	r8,r8,r17
 80157b0:	10ffffc4 	addi	r3,r2,-1
 80157b4:	44406a2e 	bgeu	r8,r17,8015960 <__umoddi3+0x550>
 80157b8:	1805883a 	mov	r2,r3
 80157bc:	b012943a 	slli	r9,r22,16
 80157c0:	9abfffcc 	andi	r10,r19,65535
 80157c4:	980ed43a 	srli	r7,r19,16
 80157c8:	124ab03a 	or	r5,r2,r9
 80157cc:	2a7fffcc 	andi	r9,r5,65535
 80157d0:	280ad43a 	srli	r5,r5,16
 80157d4:	4a8d383a 	mul	r6,r9,r10
 80157d8:	49d3383a 	mul	r9,r9,r7
 80157dc:	2a95383a 	mul	r10,r5,r10
 80157e0:	3004d43a 	srli	r2,r6,16
 80157e4:	4111c83a 	sub	r8,r8,r4
 80157e8:	5253883a 	add	r9,r10,r9
 80157ec:	4893883a 	add	r9,r9,r2
 80157f0:	29cb383a 	mul	r5,r5,r7
 80157f4:	4a80022e 	bgeu	r9,r10,8015800 <__umoddi3+0x3f0>
 80157f8:	00800074 	movhi	r2,1
 80157fc:	288b883a 	add	r5,r5,r2
 8015800:	4808d43a 	srli	r4,r9,16
 8015804:	4812943a 	slli	r9,r9,16
 8015808:	31bfffcc 	andi	r6,r6,65535
 801580c:	290b883a 	add	r5,r5,r4
 8015810:	498d883a 	add	r6,r9,r6
 8015814:	41403a36 	bltu	r8,r5,8015900 <__umoddi3+0x4f0>
 8015818:	41405d26 	beq	r8,r5,8015990 <__umoddi3+0x580>
 801581c:	4149c83a 	sub	r4,r8,r5
 8015820:	300f883a 	mov	r7,r6
 8015824:	81cfc83a 	sub	r7,r16,r7
 8015828:	81c7803a 	cmpltu	r3,r16,r7
 801582c:	20c7c83a 	sub	r3,r4,r3
 8015830:	1d44983a 	sll	r2,r3,r21
 8015834:	3d0ed83a 	srl	r7,r7,r20
 8015838:	1d06d83a 	srl	r3,r3,r20
 801583c:	11c4b03a 	or	r2,r2,r7
 8015840:	003f9206 	br	801568c <__alt_data_end+0xf801568c>
 8015844:	0025883a 	mov	r18,zero
 8015848:	003f1806 	br	80154ac <__alt_data_end+0xf80154ac>
 801584c:	98a6983a 	sll	r19,r19,r2
 8015850:	88e8d83a 	srl	r20,r17,r3
 8015854:	80c6d83a 	srl	r3,r16,r3
 8015858:	982cd43a 	srli	r22,r19,16
 801585c:	88a2983a 	sll	r17,r17,r2
 8015860:	a009883a 	mov	r4,r20
 8015864:	b00b883a 	mov	r5,r22
 8015868:	88eab03a 	or	r21,r17,r3
 801586c:	1025883a 	mov	r18,r2
 8015870:	80024980 	call	8002498 <__umodsi3>
 8015874:	a009883a 	mov	r4,r20
 8015878:	b00b883a 	mov	r5,r22
 801587c:	1023883a 	mov	r17,r2
 8015880:	80024900 	call	8002490 <__udivsi3>
 8015884:	9f3fffcc 	andi	fp,r19,65535
 8015888:	8822943a 	slli	r17,r17,16
 801588c:	a80ad43a 	srli	r5,r21,16
 8015890:	1705383a 	mul	r2,r2,fp
 8015894:	84a8983a 	sll	r20,r16,r18
 8015898:	8948b03a 	or	r4,r17,r5
 801589c:	2080042e 	bgeu	r4,r2,80158b0 <__umoddi3+0x4a0>
 80158a0:	24c9883a 	add	r4,r4,r19
 80158a4:	24c00236 	bltu	r4,r19,80158b0 <__umoddi3+0x4a0>
 80158a8:	2080012e 	bgeu	r4,r2,80158b0 <__umoddi3+0x4a0>
 80158ac:	24c9883a 	add	r4,r4,r19
 80158b0:	20afc83a 	sub	r23,r4,r2
 80158b4:	b809883a 	mov	r4,r23
 80158b8:	b00b883a 	mov	r5,r22
 80158bc:	80024980 	call	8002498 <__umodsi3>
 80158c0:	1023883a 	mov	r17,r2
 80158c4:	b809883a 	mov	r4,r23
 80158c8:	b00b883a 	mov	r5,r22
 80158cc:	80024900 	call	8002490 <__udivsi3>
 80158d0:	8822943a 	slli	r17,r17,16
 80158d4:	1705383a 	mul	r2,r2,fp
 80158d8:	a93fffcc 	andi	r4,r21,65535
 80158dc:	8908b03a 	or	r4,r17,r4
 80158e0:	2080042e 	bgeu	r4,r2,80158f4 <__umoddi3+0x4e4>
 80158e4:	24c9883a 	add	r4,r4,r19
 80158e8:	24c00236 	bltu	r4,r19,80158f4 <__umoddi3+0x4e4>
 80158ec:	2080012e 	bgeu	r4,r2,80158f4 <__umoddi3+0x4e4>
 80158f0:	24c9883a 	add	r4,r4,r19
 80158f4:	20a3c83a 	sub	r17,r4,r2
 80158f8:	e021883a 	mov	r16,fp
 80158fc:	003f3d06 	br	80155f4 <__alt_data_end+0xf80155f4>
 8015900:	34cfc83a 	sub	r7,r6,r19
 8015904:	2c4bc83a 	sub	r5,r5,r17
 8015908:	31cd803a 	cmpltu	r6,r6,r7
 801590c:	298dc83a 	sub	r6,r5,r6
 8015910:	4189c83a 	sub	r4,r8,r6
 8015914:	003fc306 	br	8015824 <__alt_data_end+0xf8015824>
 8015918:	000b883a 	mov	r5,zero
 801591c:	002b883a 	mov	r21,zero
 8015920:	003f0a06 	br	801554c <__alt_data_end+0xf801554c>
 8015924:	01400404 	movi	r5,16
 8015928:	282b883a 	mov	r21,r5
 801592c:	003f0706 	br	801554c <__alt_data_end+0xf801554c>
 8015930:	01400404 	movi	r5,16
 8015934:	2805883a 	mov	r2,r5
 8015938:	003ecd06 	br	8015470 <__alt_data_end+0xf8015470>
 801593c:	0005883a 	mov	r2,zero
 8015940:	0007883a 	mov	r3,zero
 8015944:	003f1e06 	br	80155c0 <__alt_data_end+0xf80155c0>
 8015948:	00800404 	movi	r2,16
 801594c:	1007883a 	mov	r3,r2
 8015950:	003f1b06 	br	80155c0 <__alt_data_end+0xf80155c0>
 8015954:	000b883a 	mov	r5,zero
 8015958:	0005883a 	mov	r2,zero
 801595c:	003ec406 	br	8015470 <__alt_data_end+0xf8015470>
 8015960:	413f952e 	bgeu	r8,r4,80157b8 <__alt_data_end+0xf80157b8>
 8015964:	10bfff84 	addi	r2,r2,-2
 8015968:	4451883a 	add	r8,r8,r17
 801596c:	003f9306 	br	80157bc <__alt_data_end+0xf80157bc>
 8015970:	2f3f7d2e 	bgeu	r5,fp,8015768 <__alt_data_end+0xf8015768>
 8015974:	b5bfff84 	addi	r22,r22,-2
 8015978:	2c4b883a 	add	r5,r5,r17
 801597c:	003f7b06 	br	801576c <__alt_data_end+0xf801576c>
 8015980:	34cd883a 	add	r6,r6,r19
 8015984:	003f2a06 	br	8015630 <__alt_data_end+0xf8015630>
 8015988:	8005883a 	mov	r2,r16
 801598c:	003efe06 	br	8015588 <__alt_data_end+0xf8015588>
 8015990:	81bfdb36 	bltu	r16,r6,8015900 <__alt_data_end+0xf8015900>
 8015994:	300f883a 	mov	r7,r6
 8015998:	0009883a 	mov	r4,zero
 801599c:	003fa106 	br	8015824 <__alt_data_end+0xf8015824>

080159a0 <__eqsf2>:
 80159a0:	2006d5fa 	srli	r3,r4,23
 80159a4:	280cd5fa 	srli	r6,r5,23
 80159a8:	01c02034 	movhi	r7,128
 80159ac:	39ffffc4 	addi	r7,r7,-1
 80159b0:	18c03fcc 	andi	r3,r3,255
 80159b4:	02003fc4 	movi	r8,255
 80159b8:	3904703a 	and	r2,r7,r4
 80159bc:	31803fcc 	andi	r6,r6,255
 80159c0:	394e703a 	and	r7,r7,r5
 80159c4:	2008d7fa 	srli	r4,r4,31
 80159c8:	280ad7fa 	srli	r5,r5,31
 80159cc:	1a000c26 	beq	r3,r8,8015a00 <__eqsf2+0x60>
 80159d0:	02003fc4 	movi	r8,255
 80159d4:	32000326 	beq	r6,r8,80159e4 <__eqsf2+0x44>
 80159d8:	19800426 	beq	r3,r6,80159ec <__eqsf2+0x4c>
 80159dc:	00800044 	movi	r2,1
 80159e0:	f800283a 	ret
 80159e4:	383ffd1e 	bne	r7,zero,80159dc <__alt_data_end+0xf80159dc>
 80159e8:	19bffc1e 	bne	r3,r6,80159dc <__alt_data_end+0xf80159dc>
 80159ec:	11fffb1e 	bne	r2,r7,80159dc <__alt_data_end+0xf80159dc>
 80159f0:	21400626 	beq	r4,r5,8015a0c <__eqsf2+0x6c>
 80159f4:	183ff91e 	bne	r3,zero,80159dc <__alt_data_end+0xf80159dc>
 80159f8:	1004c03a 	cmpne	r2,r2,zero
 80159fc:	f800283a 	ret
 8015a00:	103ff326 	beq	r2,zero,80159d0 <__alt_data_end+0xf80159d0>
 8015a04:	00800044 	movi	r2,1
 8015a08:	f800283a 	ret
 8015a0c:	0005883a 	mov	r2,zero
 8015a10:	f800283a 	ret

08015a14 <__gesf2>:
 8015a14:	2004d5fa 	srli	r2,r4,23
 8015a18:	2806d5fa 	srli	r3,r5,23
 8015a1c:	01802034 	movhi	r6,128
 8015a20:	31bfffc4 	addi	r6,r6,-1
 8015a24:	10803fcc 	andi	r2,r2,255
 8015a28:	01c03fc4 	movi	r7,255
 8015a2c:	3110703a 	and	r8,r6,r4
 8015a30:	18c03fcc 	andi	r3,r3,255
 8015a34:	314c703a 	and	r6,r6,r5
 8015a38:	2008d7fa 	srli	r4,r4,31
 8015a3c:	280ad7fa 	srli	r5,r5,31
 8015a40:	11c00926 	beq	r2,r7,8015a68 <__gesf2+0x54>
 8015a44:	19c01226 	beq	r3,r7,8015a90 <__gesf2+0x7c>
 8015a48:	1000091e 	bne	r2,zero,8015a70 <__gesf2+0x5c>
 8015a4c:	4013003a 	cmpeq	r9,r8,zero
 8015a50:	480f883a 	mov	r7,r9
 8015a54:	1800091e 	bne	r3,zero,8015a7c <__gesf2+0x68>
 8015a58:	3000081e 	bne	r6,zero,8015a7c <__gesf2+0x68>
 8015a5c:	48001026 	beq	r9,zero,8015aa0 <__gesf2+0x8c>
 8015a60:	0005883a 	mov	r2,zero
 8015a64:	f800283a 	ret
 8015a68:	4000161e 	bne	r8,zero,8015ac4 <__gesf2+0xb0>
 8015a6c:	18800826 	beq	r3,r2,8015a90 <__gesf2+0x7c>
 8015a70:	1800091e 	bne	r3,zero,8015a98 <__gesf2+0x84>
 8015a74:	000f883a 	mov	r7,zero
 8015a78:	30000926 	beq	r6,zero,8015aa0 <__gesf2+0x8c>
 8015a7c:	29403fcc 	andi	r5,r5,255
 8015a80:	38000626 	beq	r7,zero,8015a9c <__gesf2+0x88>
 8015a84:	2800071e 	bne	r5,zero,8015aa4 <__gesf2+0x90>
 8015a88:	00bfffc4 	movi	r2,-1
 8015a8c:	f800283a 	ret
 8015a90:	30000c1e 	bne	r6,zero,8015ac4 <__gesf2+0xb0>
 8015a94:	103fed26 	beq	r2,zero,8015a4c <__alt_data_end+0xf8015a4c>
 8015a98:	29403fcc 	andi	r5,r5,255
 8015a9c:	21400326 	beq	r4,r5,8015aac <__gesf2+0x98>
 8015aa0:	203ff91e 	bne	r4,zero,8015a88 <__alt_data_end+0xf8015a88>
 8015aa4:	00800044 	movi	r2,1
 8015aa8:	f800283a 	ret
 8015aac:	18bffc16 	blt	r3,r2,8015aa0 <__alt_data_end+0xf8015aa0>
 8015ab0:	10c00216 	blt	r2,r3,8015abc <__gesf2+0xa8>
 8015ab4:	323ffa36 	bltu	r6,r8,8015aa0 <__alt_data_end+0xf8015aa0>
 8015ab8:	41bfe92e 	bgeu	r8,r6,8015a60 <__alt_data_end+0xf8015a60>
 8015abc:	203ff226 	beq	r4,zero,8015a88 <__alt_data_end+0xf8015a88>
 8015ac0:	003ff806 	br	8015aa4 <__alt_data_end+0xf8015aa4>
 8015ac4:	00bfff84 	movi	r2,-2
 8015ac8:	f800283a 	ret

08015acc <__lesf2>:
 8015acc:	2004d5fa 	srli	r2,r4,23
 8015ad0:	280cd5fa 	srli	r6,r5,23
 8015ad4:	00c02034 	movhi	r3,128
 8015ad8:	18ffffc4 	addi	r3,r3,-1
 8015adc:	10803fcc 	andi	r2,r2,255
 8015ae0:	01c03fc4 	movi	r7,255
 8015ae4:	1910703a 	and	r8,r3,r4
 8015ae8:	31803fcc 	andi	r6,r6,255
 8015aec:	1946703a 	and	r3,r3,r5
 8015af0:	2008d7fa 	srli	r4,r4,31
 8015af4:	280ad7fa 	srli	r5,r5,31
 8015af8:	11c00a26 	beq	r2,r7,8015b24 <__lesf2+0x58>
 8015afc:	31c01526 	beq	r6,r7,8015b54 <__lesf2+0x88>
 8015b00:	10000a1e 	bne	r2,zero,8015b2c <__lesf2+0x60>
 8015b04:	4013003a 	cmpeq	r9,r8,zero
 8015b08:	480f883a 	mov	r7,r9
 8015b0c:	30000d26 	beq	r6,zero,8015b44 <__lesf2+0x78>
 8015b10:	29403fcc 	andi	r5,r5,255
 8015b14:	38001426 	beq	r7,zero,8015b68 <__lesf2+0x9c>
 8015b18:	2800081e 	bne	r5,zero,8015b3c <__lesf2+0x70>
 8015b1c:	00bfffc4 	movi	r2,-1
 8015b20:	f800283a 	ret
 8015b24:	40000c1e 	bne	r8,zero,8015b58 <__lesf2+0x8c>
 8015b28:	30800a26 	beq	r6,r2,8015b54 <__lesf2+0x88>
 8015b2c:	30000d1e 	bne	r6,zero,8015b64 <__lesf2+0x98>
 8015b30:	000f883a 	mov	r7,zero
 8015b34:	183ff61e 	bne	r3,zero,8015b10 <__alt_data_end+0xf8015b10>
 8015b38:	203ff81e 	bne	r4,zero,8015b1c <__alt_data_end+0xf8015b1c>
 8015b3c:	00800044 	movi	r2,1
 8015b40:	f800283a 	ret
 8015b44:	183ff21e 	bne	r3,zero,8015b10 <__alt_data_end+0xf8015b10>
 8015b48:	483ffb26 	beq	r9,zero,8015b38 <__alt_data_end+0xf8015b38>
 8015b4c:	0005883a 	mov	r2,zero
 8015b50:	f800283a 	ret
 8015b54:	18000226 	beq	r3,zero,8015b60 <__lesf2+0x94>
 8015b58:	00800084 	movi	r2,2
 8015b5c:	f800283a 	ret
 8015b60:	103fe826 	beq	r2,zero,8015b04 <__alt_data_end+0xf8015b04>
 8015b64:	29403fcc 	andi	r5,r5,255
 8015b68:	217ff31e 	bne	r4,r5,8015b38 <__alt_data_end+0xf8015b38>
 8015b6c:	30bff216 	blt	r6,r2,8015b38 <__alt_data_end+0xf8015b38>
 8015b70:	11800216 	blt	r2,r6,8015b7c <__lesf2+0xb0>
 8015b74:	1a3ff036 	bltu	r3,r8,8015b38 <__alt_data_end+0xf8015b38>
 8015b78:	40fff42e 	bgeu	r8,r3,8015b4c <__alt_data_end+0xf8015b4c>
 8015b7c:	203fe726 	beq	r4,zero,8015b1c <__alt_data_end+0xf8015b1c>
 8015b80:	003fee06 	br	8015b3c <__alt_data_end+0xf8015b3c>

08015b84 <__adddf3>:
 8015b84:	02000434 	movhi	r8,16
 8015b88:	423fffc4 	addi	r8,r8,-1
 8015b8c:	defffb04 	addi	sp,sp,-20
 8015b90:	2a12703a 	and	r9,r5,r8
 8015b94:	2806d7fa 	srli	r3,r5,31
 8015b98:	3a10703a 	and	r8,r7,r8
 8015b9c:	3804d53a 	srli	r2,r7,20
 8015ba0:	3014d77a 	srli	r10,r6,29
 8015ba4:	dc000015 	stw	r16,0(sp)
 8015ba8:	481290fa 	slli	r9,r9,3
 8015bac:	2820d53a 	srli	r16,r5,20
 8015bb0:	401090fa 	slli	r8,r8,3
 8015bb4:	200ad77a 	srli	r5,r4,29
 8015bb8:	380ed7fa 	srli	r7,r7,31
 8015bbc:	dc800215 	stw	r18,8(sp)
 8015bc0:	dc400115 	stw	r17,4(sp)
 8015bc4:	dfc00415 	stw	ra,16(sp)
 8015bc8:	dcc00315 	stw	r19,12(sp)
 8015bcc:	1c803fcc 	andi	r18,r3,255
 8015bd0:	8401ffcc 	andi	r16,r16,2047
 8015bd4:	494ab03a 	or	r5,r9,r5
 8015bd8:	202290fa 	slli	r17,r4,3
 8015bdc:	1081ffcc 	andi	r2,r2,2047
 8015be0:	4290b03a 	or	r8,r8,r10
 8015be4:	300c90fa 	slli	r6,r6,3
 8015be8:	91c07026 	beq	r18,r7,8015dac <__adddf3+0x228>
 8015bec:	8087c83a 	sub	r3,r16,r2
 8015bf0:	00c0b30e 	bge	zero,r3,8015ec0 <__adddf3+0x33c>
 8015bf4:	10002a1e 	bne	r2,zero,8015ca0 <__adddf3+0x11c>
 8015bf8:	4184b03a 	or	r2,r8,r6
 8015bfc:	1000991e 	bne	r2,zero,8015e64 <__adddf3+0x2e0>
 8015c00:	888001cc 	andi	r2,r17,7
 8015c04:	10005b26 	beq	r2,zero,8015d74 <__adddf3+0x1f0>
 8015c08:	88c003cc 	andi	r3,r17,15
 8015c0c:	00800104 	movi	r2,4
 8015c10:	18805826 	beq	r3,r2,8015d74 <__adddf3+0x1f0>
 8015c14:	89800104 	addi	r6,r17,4
 8015c18:	3463803a 	cmpltu	r17,r6,r17
 8015c1c:	2c4b883a 	add	r5,r5,r17
 8015c20:	2880202c 	andhi	r2,r5,128
 8015c24:	9007883a 	mov	r3,r18
 8015c28:	3023883a 	mov	r17,r6
 8015c2c:	10005426 	beq	r2,zero,8015d80 <__adddf3+0x1fc>
 8015c30:	84000044 	addi	r16,r16,1
 8015c34:	0081ffc4 	movi	r2,2047
 8015c38:	8080c126 	beq	r16,r2,8015f40 <__adddf3+0x3bc>
 8015c3c:	013fe034 	movhi	r4,65408
 8015c40:	213fffc4 	addi	r4,r4,-1
 8015c44:	290a703a 	and	r5,r5,r4
 8015c48:	2804977a 	slli	r2,r5,29
 8015c4c:	280a927a 	slli	r5,r5,9
 8015c50:	8822d0fa 	srli	r17,r17,3
 8015c54:	8401ffcc 	andi	r16,r16,2047
 8015c58:	2808d33a 	srli	r4,r5,12
 8015c5c:	1444b03a 	or	r2,r2,r17
 8015c60:	8401ffcc 	andi	r16,r16,2047
 8015c64:	800a953a 	slli	r5,r16,20
 8015c68:	18c03fcc 	andi	r3,r3,255
 8015c6c:	04000434 	movhi	r16,16
 8015c70:	180697fa 	slli	r3,r3,31
 8015c74:	843fffc4 	addi	r16,r16,-1
 8015c78:	2420703a 	and	r16,r4,r16
 8015c7c:	8160b03a 	or	r16,r16,r5
 8015c80:	80c6b03a 	or	r3,r16,r3
 8015c84:	dfc00417 	ldw	ra,16(sp)
 8015c88:	dcc00317 	ldw	r19,12(sp)
 8015c8c:	dc800217 	ldw	r18,8(sp)
 8015c90:	dc400117 	ldw	r17,4(sp)
 8015c94:	dc000017 	ldw	r16,0(sp)
 8015c98:	dec00504 	addi	sp,sp,20
 8015c9c:	f800283a 	ret
 8015ca0:	0081ffc4 	movi	r2,2047
 8015ca4:	80bfd626 	beq	r16,r2,8015c00 <__alt_data_end+0xf8015c00>
 8015ca8:	42002034 	orhi	r8,r8,128
 8015cac:	00800e04 	movi	r2,56
 8015cb0:	10c0a616 	blt	r2,r3,8015f4c <__adddf3+0x3c8>
 8015cb4:	008007c4 	movi	r2,31
 8015cb8:	10c0c916 	blt	r2,r3,8015fe0 <__adddf3+0x45c>
 8015cbc:	00800804 	movi	r2,32
 8015cc0:	10c5c83a 	sub	r2,r2,r3
 8015cc4:	408e983a 	sll	r7,r8,r2
 8015cc8:	30c8d83a 	srl	r4,r6,r3
 8015ccc:	3084983a 	sll	r2,r6,r2
 8015cd0:	40c6d83a 	srl	r3,r8,r3
 8015cd4:	390cb03a 	or	r6,r7,r4
 8015cd8:	1004c03a 	cmpne	r2,r2,zero
 8015cdc:	308cb03a 	or	r6,r6,r2
 8015ce0:	898dc83a 	sub	r6,r17,r6
 8015ce4:	89a3803a 	cmpltu	r17,r17,r6
 8015ce8:	28cbc83a 	sub	r5,r5,r3
 8015cec:	2c4bc83a 	sub	r5,r5,r17
 8015cf0:	3023883a 	mov	r17,r6
 8015cf4:	2880202c 	andhi	r2,r5,128
 8015cf8:	10006d26 	beq	r2,zero,8015eb0 <__adddf3+0x32c>
 8015cfc:	04c02034 	movhi	r19,128
 8015d00:	9cffffc4 	addi	r19,r19,-1
 8015d04:	2ce6703a 	and	r19,r5,r19
 8015d08:	98007e26 	beq	r19,zero,8015f04 <__adddf3+0x380>
 8015d0c:	9809883a 	mov	r4,r19
 8015d10:	80182b80 	call	80182b8 <__clzsi2>
 8015d14:	10fffe04 	addi	r3,r2,-8
 8015d18:	010007c4 	movi	r4,31
 8015d1c:	20c07f16 	blt	r4,r3,8015f1c <__adddf3+0x398>
 8015d20:	01400a04 	movi	r5,40
 8015d24:	2885c83a 	sub	r2,r5,r2
 8015d28:	888ad83a 	srl	r5,r17,r2
 8015d2c:	98e6983a 	sll	r19,r19,r3
 8015d30:	88e2983a 	sll	r17,r17,r3
 8015d34:	2ce6b03a 	or	r19,r5,r19
 8015d38:	1c007c16 	blt	r3,r16,8015f2c <__adddf3+0x3a8>
 8015d3c:	1c21c83a 	sub	r16,r3,r16
 8015d40:	81400044 	addi	r5,r16,1
 8015d44:	00c007c4 	movi	r3,31
 8015d48:	19409816 	blt	r3,r5,8015fac <__adddf3+0x428>
 8015d4c:	1c21c83a 	sub	r16,r3,r16
 8015d50:	8c08983a 	sll	r4,r17,r16
 8015d54:	8946d83a 	srl	r3,r17,r5
 8015d58:	9c20983a 	sll	r16,r19,r16
 8015d5c:	2008c03a 	cmpne	r4,r4,zero
 8015d60:	994ad83a 	srl	r5,r19,r5
 8015d64:	1c06b03a 	or	r3,r3,r16
 8015d68:	1922b03a 	or	r17,r3,r4
 8015d6c:	0021883a 	mov	r16,zero
 8015d70:	003fa306 	br	8015c00 <__alt_data_end+0xf8015c00>
 8015d74:	2880202c 	andhi	r2,r5,128
 8015d78:	9007883a 	mov	r3,r18
 8015d7c:	103fac1e 	bne	r2,zero,8015c30 <__alt_data_end+0xf8015c30>
 8015d80:	2804977a 	slli	r2,r5,29
 8015d84:	8822d0fa 	srli	r17,r17,3
 8015d88:	0101ffc4 	movi	r4,2047
 8015d8c:	280ad0fa 	srli	r5,r5,3
 8015d90:	1444b03a 	or	r2,r2,r17
 8015d94:	81002c26 	beq	r16,r4,8015e48 <__adddf3+0x2c4>
 8015d98:	8120703a 	and	r16,r16,r4
 8015d9c:	01000434 	movhi	r4,16
 8015da0:	213fffc4 	addi	r4,r4,-1
 8015da4:	2908703a 	and	r4,r5,r4
 8015da8:	003fad06 	br	8015c60 <__alt_data_end+0xf8015c60>
 8015dac:	8089c83a 	sub	r4,r16,r2
 8015db0:	01006a0e 	bge	zero,r4,8015f5c <__adddf3+0x3d8>
 8015db4:	10003326 	beq	r2,zero,8015e84 <__adddf3+0x300>
 8015db8:	0081ffc4 	movi	r2,2047
 8015dbc:	80bf9026 	beq	r16,r2,8015c00 <__alt_data_end+0xf8015c00>
 8015dc0:	42002034 	orhi	r8,r8,128
 8015dc4:	00800e04 	movi	r2,56
 8015dc8:	1100b116 	blt	r2,r4,8016090 <__adddf3+0x50c>
 8015dcc:	008007c4 	movi	r2,31
 8015dd0:	1100e216 	blt	r2,r4,801615c <__adddf3+0x5d8>
 8015dd4:	00800804 	movi	r2,32
 8015dd8:	1105c83a 	sub	r2,r2,r4
 8015ddc:	4092983a 	sll	r9,r8,r2
 8015de0:	310ed83a 	srl	r7,r6,r4
 8015de4:	3084983a 	sll	r2,r6,r2
 8015de8:	4110d83a 	srl	r8,r8,r4
 8015dec:	49ccb03a 	or	r6,r9,r7
 8015df0:	1004c03a 	cmpne	r2,r2,zero
 8015df4:	308cb03a 	or	r6,r6,r2
 8015df8:	344d883a 	add	r6,r6,r17
 8015dfc:	3463803a 	cmpltu	r17,r6,r17
 8015e00:	414b883a 	add	r5,r8,r5
 8015e04:	2c4b883a 	add	r5,r5,r17
 8015e08:	3023883a 	mov	r17,r6
 8015e0c:	2880202c 	andhi	r2,r5,128
 8015e10:	10002726 	beq	r2,zero,8015eb0 <__adddf3+0x32c>
 8015e14:	84000044 	addi	r16,r16,1
 8015e18:	0081ffc4 	movi	r2,2047
 8015e1c:	8080ae26 	beq	r16,r2,80160d8 <__adddf3+0x554>
 8015e20:	00bfe034 	movhi	r2,65408
 8015e24:	10bfffc4 	addi	r2,r2,-1
 8015e28:	288a703a 	and	r5,r5,r2
 8015e2c:	880cd07a 	srli	r6,r17,1
 8015e30:	280897fa 	slli	r4,r5,31
 8015e34:	88c0004c 	andi	r3,r17,1
 8015e38:	30e2b03a 	or	r17,r6,r3
 8015e3c:	280ad07a 	srli	r5,r5,1
 8015e40:	8922b03a 	or	r17,r17,r4
 8015e44:	003f6e06 	br	8015c00 <__alt_data_end+0xf8015c00>
 8015e48:	1148b03a 	or	r4,r2,r5
 8015e4c:	20003c26 	beq	r4,zero,8015f40 <__adddf3+0x3bc>
 8015e50:	29000234 	orhi	r4,r5,8
 8015e54:	01400434 	movhi	r5,16
 8015e58:	297fffc4 	addi	r5,r5,-1
 8015e5c:	2148703a 	and	r4,r4,r5
 8015e60:	003f7f06 	br	8015c60 <__alt_data_end+0xf8015c60>
 8015e64:	18ffffc4 	addi	r3,r3,-1
 8015e68:	18004d1e 	bne	r3,zero,8015fa0 <__adddf3+0x41c>
 8015e6c:	898dc83a 	sub	r6,r17,r6
 8015e70:	89a3803a 	cmpltu	r17,r17,r6
 8015e74:	2a0bc83a 	sub	r5,r5,r8
 8015e78:	2c4bc83a 	sub	r5,r5,r17
 8015e7c:	3023883a 	mov	r17,r6
 8015e80:	003f9c06 	br	8015cf4 <__alt_data_end+0xf8015cf4>
 8015e84:	4184b03a 	or	r2,r8,r6
 8015e88:	103f5d26 	beq	r2,zero,8015c00 <__alt_data_end+0xf8015c00>
 8015e8c:	213fffc4 	addi	r4,r4,-1
 8015e90:	203fd926 	beq	r4,zero,8015df8 <__alt_data_end+0xf8015df8>
 8015e94:	0081ffc4 	movi	r2,2047
 8015e98:	80bfca1e 	bne	r16,r2,8015dc4 <__alt_data_end+0xf8015dc4>
 8015e9c:	003f5806 	br	8015c00 <__alt_data_end+0xf8015c00>
 8015ea0:	10c8b03a 	or	r4,r2,r3
 8015ea4:	20008b26 	beq	r4,zero,80160d4 <__adddf3+0x550>
 8015ea8:	100b883a 	mov	r5,r2
 8015eac:	1823883a 	mov	r17,r3
 8015eb0:	888001cc 	andi	r2,r17,7
 8015eb4:	103f541e 	bne	r2,zero,8015c08 <__alt_data_end+0xf8015c08>
 8015eb8:	9007883a 	mov	r3,r18
 8015ebc:	003fb006 	br	8015d80 <__alt_data_end+0xf8015d80>
 8015ec0:	1800531e 	bne	r3,zero,8016010 <__adddf3+0x48c>
 8015ec4:	80800044 	addi	r2,r16,1
 8015ec8:	1081ffcc 	andi	r2,r2,2047
 8015ecc:	00c00044 	movi	r3,1
 8015ed0:	1880990e 	bge	r3,r2,8016138 <__adddf3+0x5b4>
 8015ed4:	8985c83a 	sub	r2,r17,r6
 8015ed8:	8887803a 	cmpltu	r3,r17,r2
 8015edc:	2a27c83a 	sub	r19,r5,r8
 8015ee0:	98e7c83a 	sub	r19,r19,r3
 8015ee4:	98c0202c 	andhi	r3,r19,128
 8015ee8:	18006226 	beq	r3,zero,8016074 <__adddf3+0x4f0>
 8015eec:	3463c83a 	sub	r17,r6,r17
 8015ef0:	4151c83a 	sub	r8,r8,r5
 8015ef4:	344d803a 	cmpltu	r6,r6,r17
 8015ef8:	41a7c83a 	sub	r19,r8,r6
 8015efc:	3825883a 	mov	r18,r7
 8015f00:	983f821e 	bne	r19,zero,8015d0c <__alt_data_end+0xf8015d0c>
 8015f04:	8809883a 	mov	r4,r17
 8015f08:	80182b80 	call	80182b8 <__clzsi2>
 8015f0c:	10800804 	addi	r2,r2,32
 8015f10:	10fffe04 	addi	r3,r2,-8
 8015f14:	010007c4 	movi	r4,31
 8015f18:	20ff810e 	bge	r4,r3,8015d20 <__alt_data_end+0xf8015d20>
 8015f1c:	14fff604 	addi	r19,r2,-40
 8015f20:	8ce6983a 	sll	r19,r17,r19
 8015f24:	0023883a 	mov	r17,zero
 8015f28:	1c3f840e 	bge	r3,r16,8015d3c <__alt_data_end+0xf8015d3c>
 8015f2c:	017fe034 	movhi	r5,65408
 8015f30:	297fffc4 	addi	r5,r5,-1
 8015f34:	80e1c83a 	sub	r16,r16,r3
 8015f38:	994a703a 	and	r5,r19,r5
 8015f3c:	003f3006 	br	8015c00 <__alt_data_end+0xf8015c00>
 8015f40:	0009883a 	mov	r4,zero
 8015f44:	0005883a 	mov	r2,zero
 8015f48:	003f4506 	br	8015c60 <__alt_data_end+0xf8015c60>
 8015f4c:	418cb03a 	or	r6,r8,r6
 8015f50:	300cc03a 	cmpne	r6,r6,zero
 8015f54:	0007883a 	mov	r3,zero
 8015f58:	003f6106 	br	8015ce0 <__alt_data_end+0xf8015ce0>
 8015f5c:	2000921e 	bne	r4,zero,80161a8 <__adddf3+0x624>
 8015f60:	80800044 	addi	r2,r16,1
 8015f64:	11c1ffcc 	andi	r7,r2,2047
 8015f68:	01000044 	movi	r4,1
 8015f6c:	21c0610e 	bge	r4,r7,80160f4 <__adddf3+0x570>
 8015f70:	0101ffc4 	movi	r4,2047
 8015f74:	1100a326 	beq	r2,r4,8016204 <__adddf3+0x680>
 8015f78:	344d883a 	add	r6,r6,r17
 8015f7c:	3463803a 	cmpltu	r17,r6,r17
 8015f80:	414b883a 	add	r5,r8,r5
 8015f84:	2c4b883a 	add	r5,r5,r17
 8015f88:	282297fa 	slli	r17,r5,31
 8015f8c:	300cd07a 	srli	r6,r6,1
 8015f90:	280ad07a 	srli	r5,r5,1
 8015f94:	1021883a 	mov	r16,r2
 8015f98:	89a2b03a 	or	r17,r17,r6
 8015f9c:	003f1806 	br	8015c00 <__alt_data_end+0xf8015c00>
 8015fa0:	0081ffc4 	movi	r2,2047
 8015fa4:	80bf411e 	bne	r16,r2,8015cac <__alt_data_end+0xf8015cac>
 8015fa8:	003f1506 	br	8015c00 <__alt_data_end+0xf8015c00>
 8015fac:	80bff844 	addi	r2,r16,-31
 8015fb0:	00c00804 	movi	r3,32
 8015fb4:	9884d83a 	srl	r2,r19,r2
 8015fb8:	28c04a26 	beq	r5,r3,80160e4 <__adddf3+0x560>
 8015fbc:	00c00fc4 	movi	r3,63
 8015fc0:	1c21c83a 	sub	r16,r3,r16
 8015fc4:	9c26983a 	sll	r19,r19,r16
 8015fc8:	9c62b03a 	or	r17,r19,r17
 8015fcc:	8822c03a 	cmpne	r17,r17,zero
 8015fd0:	88a2b03a 	or	r17,r17,r2
 8015fd4:	000b883a 	mov	r5,zero
 8015fd8:	0021883a 	mov	r16,zero
 8015fdc:	003fb406 	br	8015eb0 <__alt_data_end+0xf8015eb0>
 8015fe0:	18bff804 	addi	r2,r3,-32
 8015fe4:	01000804 	movi	r4,32
 8015fe8:	4084d83a 	srl	r2,r8,r2
 8015fec:	19003f26 	beq	r3,r4,80160ec <__adddf3+0x568>
 8015ff0:	01001004 	movi	r4,64
 8015ff4:	20c7c83a 	sub	r3,r4,r3
 8015ff8:	40d0983a 	sll	r8,r8,r3
 8015ffc:	418cb03a 	or	r6,r8,r6
 8016000:	300cc03a 	cmpne	r6,r6,zero
 8016004:	308cb03a 	or	r6,r6,r2
 8016008:	0007883a 	mov	r3,zero
 801600c:	003f3406 	br	8015ce0 <__alt_data_end+0xf8015ce0>
 8016010:	80002326 	beq	r16,zero,80160a0 <__adddf3+0x51c>
 8016014:	0101ffc4 	movi	r4,2047
 8016018:	11005e26 	beq	r2,r4,8016194 <__adddf3+0x610>
 801601c:	00c7c83a 	sub	r3,zero,r3
 8016020:	29402034 	orhi	r5,r5,128
 8016024:	01000e04 	movi	r4,56
 8016028:	20c07216 	blt	r4,r3,80161f4 <__adddf3+0x670>
 801602c:	010007c4 	movi	r4,31
 8016030:	20c0ce16 	blt	r4,r3,801636c <__adddf3+0x7e8>
 8016034:	01000804 	movi	r4,32
 8016038:	20c9c83a 	sub	r4,r4,r3
 801603c:	2914983a 	sll	r10,r5,r4
 8016040:	88d2d83a 	srl	r9,r17,r3
 8016044:	8908983a 	sll	r4,r17,r4
 8016048:	28c6d83a 	srl	r3,r5,r3
 801604c:	5262b03a 	or	r17,r10,r9
 8016050:	2008c03a 	cmpne	r4,r4,zero
 8016054:	8922b03a 	or	r17,r17,r4
 8016058:	3463c83a 	sub	r17,r6,r17
 801605c:	40c7c83a 	sub	r3,r8,r3
 8016060:	344d803a 	cmpltu	r6,r6,r17
 8016064:	198bc83a 	sub	r5,r3,r6
 8016068:	1021883a 	mov	r16,r2
 801606c:	3825883a 	mov	r18,r7
 8016070:	003f2006 	br	8015cf4 <__alt_data_end+0xf8015cf4>
 8016074:	9886b03a 	or	r3,r19,r2
 8016078:	1800141e 	bne	r3,zero,80160cc <__adddf3+0x548>
 801607c:	0007883a 	mov	r3,zero
 8016080:	000b883a 	mov	r5,zero
 8016084:	0023883a 	mov	r17,zero
 8016088:	0021883a 	mov	r16,zero
 801608c:	003f3c06 	br	8015d80 <__alt_data_end+0xf8015d80>
 8016090:	418cb03a 	or	r6,r8,r6
 8016094:	300cc03a 	cmpne	r6,r6,zero
 8016098:	0011883a 	mov	r8,zero
 801609c:	003f5606 	br	8015df8 <__alt_data_end+0xf8015df8>
 80160a0:	2c48b03a 	or	r4,r5,r17
 80160a4:	20003b26 	beq	r4,zero,8016194 <__adddf3+0x610>
 80160a8:	00c6303a 	nor	r3,zero,r3
 80160ac:	1800371e 	bne	r3,zero,801618c <__adddf3+0x608>
 80160b0:	3463c83a 	sub	r17,r6,r17
 80160b4:	414bc83a 	sub	r5,r8,r5
 80160b8:	344d803a 	cmpltu	r6,r6,r17
 80160bc:	298bc83a 	sub	r5,r5,r6
 80160c0:	1021883a 	mov	r16,r2
 80160c4:	3825883a 	mov	r18,r7
 80160c8:	003f0a06 	br	8015cf4 <__alt_data_end+0xf8015cf4>
 80160cc:	1023883a 	mov	r17,r2
 80160d0:	003f0d06 	br	8015d08 <__alt_data_end+0xf8015d08>
 80160d4:	0007883a 	mov	r3,zero
 80160d8:	000b883a 	mov	r5,zero
 80160dc:	0023883a 	mov	r17,zero
 80160e0:	003f2706 	br	8015d80 <__alt_data_end+0xf8015d80>
 80160e4:	0027883a 	mov	r19,zero
 80160e8:	003fb706 	br	8015fc8 <__alt_data_end+0xf8015fc8>
 80160ec:	0011883a 	mov	r8,zero
 80160f0:	003fc206 	br	8015ffc <__alt_data_end+0xf8015ffc>
 80160f4:	2c44b03a 	or	r2,r5,r17
 80160f8:	8000871e 	bne	r16,zero,8016318 <__adddf3+0x794>
 80160fc:	1000b126 	beq	r2,zero,80163c4 <__adddf3+0x840>
 8016100:	4184b03a 	or	r2,r8,r6
 8016104:	103ebe26 	beq	r2,zero,8015c00 <__alt_data_end+0xf8015c00>
 8016108:	3445883a 	add	r2,r6,r17
 801610c:	1463803a 	cmpltu	r17,r2,r17
 8016110:	414b883a 	add	r5,r8,r5
 8016114:	2c4b883a 	add	r5,r5,r17
 8016118:	28c0202c 	andhi	r3,r5,128
 801611c:	1023883a 	mov	r17,r2
 8016120:	183f6326 	beq	r3,zero,8015eb0 <__alt_data_end+0xf8015eb0>
 8016124:	00bfe034 	movhi	r2,65408
 8016128:	10bfffc4 	addi	r2,r2,-1
 801612c:	2021883a 	mov	r16,r4
 8016130:	288a703a 	and	r5,r5,r2
 8016134:	003eb206 	br	8015c00 <__alt_data_end+0xf8015c00>
 8016138:	2c44b03a 	or	r2,r5,r17
 801613c:	8000251e 	bne	r16,zero,80161d4 <__adddf3+0x650>
 8016140:	10004b1e 	bne	r2,zero,8016270 <__adddf3+0x6ec>
 8016144:	4184b03a 	or	r2,r8,r6
 8016148:	103fe226 	beq	r2,zero,80160d4 <__alt_data_end+0xf80160d4>
 801614c:	400b883a 	mov	r5,r8
 8016150:	3023883a 	mov	r17,r6
 8016154:	3825883a 	mov	r18,r7
 8016158:	003ea906 	br	8015c00 <__alt_data_end+0xf8015c00>
 801615c:	20bff804 	addi	r2,r4,-32
 8016160:	01c00804 	movi	r7,32
 8016164:	4084d83a 	srl	r2,r8,r2
 8016168:	21c07e26 	beq	r4,r7,8016364 <__adddf3+0x7e0>
 801616c:	01c01004 	movi	r7,64
 8016170:	3909c83a 	sub	r4,r7,r4
 8016174:	4110983a 	sll	r8,r8,r4
 8016178:	418cb03a 	or	r6,r8,r6
 801617c:	300cc03a 	cmpne	r6,r6,zero
 8016180:	308cb03a 	or	r6,r6,r2
 8016184:	0011883a 	mov	r8,zero
 8016188:	003f1b06 	br	8015df8 <__alt_data_end+0xf8015df8>
 801618c:	0101ffc4 	movi	r4,2047
 8016190:	113fa41e 	bne	r2,r4,8016024 <__alt_data_end+0xf8016024>
 8016194:	400b883a 	mov	r5,r8
 8016198:	3023883a 	mov	r17,r6
 801619c:	1021883a 	mov	r16,r2
 80161a0:	3825883a 	mov	r18,r7
 80161a4:	003e9606 	br	8015c00 <__alt_data_end+0xf8015c00>
 80161a8:	80001a1e 	bne	r16,zero,8016214 <__adddf3+0x690>
 80161ac:	2c4eb03a 	or	r7,r5,r17
 80161b0:	38005526 	beq	r7,zero,8016308 <__adddf3+0x784>
 80161b4:	0108303a 	nor	r4,zero,r4
 80161b8:	2000511e 	bne	r4,zero,8016300 <__adddf3+0x77c>
 80161bc:	89a3883a 	add	r17,r17,r6
 80161c0:	414b883a 	add	r5,r8,r5
 80161c4:	898d803a 	cmpltu	r6,r17,r6
 80161c8:	298b883a 	add	r5,r5,r6
 80161cc:	1021883a 	mov	r16,r2
 80161d0:	003f0e06 	br	8015e0c <__alt_data_end+0xf8015e0c>
 80161d4:	1000341e 	bne	r2,zero,80162a8 <__adddf3+0x724>
 80161d8:	4184b03a 	or	r2,r8,r6
 80161dc:	10006f26 	beq	r2,zero,801639c <__adddf3+0x818>
 80161e0:	400b883a 	mov	r5,r8
 80161e4:	3023883a 	mov	r17,r6
 80161e8:	3825883a 	mov	r18,r7
 80161ec:	0401ffc4 	movi	r16,2047
 80161f0:	003e8306 	br	8015c00 <__alt_data_end+0xf8015c00>
 80161f4:	2c62b03a 	or	r17,r5,r17
 80161f8:	8822c03a 	cmpne	r17,r17,zero
 80161fc:	0007883a 	mov	r3,zero
 8016200:	003f9506 	br	8016058 <__alt_data_end+0xf8016058>
 8016204:	1021883a 	mov	r16,r2
 8016208:	000b883a 	mov	r5,zero
 801620c:	0023883a 	mov	r17,zero
 8016210:	003edb06 	br	8015d80 <__alt_data_end+0xf8015d80>
 8016214:	01c1ffc4 	movi	r7,2047
 8016218:	11c03b26 	beq	r2,r7,8016308 <__adddf3+0x784>
 801621c:	0109c83a 	sub	r4,zero,r4
 8016220:	29402034 	orhi	r5,r5,128
 8016224:	01c00e04 	movi	r7,56
 8016228:	39006216 	blt	r7,r4,80163b4 <__adddf3+0x830>
 801622c:	01c007c4 	movi	r7,31
 8016230:	39006b16 	blt	r7,r4,80163e0 <__adddf3+0x85c>
 8016234:	01c00804 	movi	r7,32
 8016238:	390fc83a 	sub	r7,r7,r4
 801623c:	29d4983a 	sll	r10,r5,r7
 8016240:	8912d83a 	srl	r9,r17,r4
 8016244:	89ce983a 	sll	r7,r17,r7
 8016248:	2908d83a 	srl	r4,r5,r4
 801624c:	5262b03a 	or	r17,r10,r9
 8016250:	380ac03a 	cmpne	r5,r7,zero
 8016254:	8962b03a 	or	r17,r17,r5
 8016258:	89a3883a 	add	r17,r17,r6
 801625c:	2211883a 	add	r8,r4,r8
 8016260:	898d803a 	cmpltu	r6,r17,r6
 8016264:	418b883a 	add	r5,r8,r6
 8016268:	1021883a 	mov	r16,r2
 801626c:	003ee706 	br	8015e0c <__alt_data_end+0xf8015e0c>
 8016270:	4184b03a 	or	r2,r8,r6
 8016274:	103e6226 	beq	r2,zero,8015c00 <__alt_data_end+0xf8015c00>
 8016278:	8987c83a 	sub	r3,r17,r6
 801627c:	88c9803a 	cmpltu	r4,r17,r3
 8016280:	2a05c83a 	sub	r2,r5,r8
 8016284:	1105c83a 	sub	r2,r2,r4
 8016288:	1100202c 	andhi	r4,r2,128
 801628c:	203f0426 	beq	r4,zero,8015ea0 <__alt_data_end+0xf8015ea0>
 8016290:	3463c83a 	sub	r17,r6,r17
 8016294:	414bc83a 	sub	r5,r8,r5
 8016298:	344d803a 	cmpltu	r6,r6,r17
 801629c:	298bc83a 	sub	r5,r5,r6
 80162a0:	3825883a 	mov	r18,r7
 80162a4:	003e5606 	br	8015c00 <__alt_data_end+0xf8015c00>
 80162a8:	4184b03a 	or	r2,r8,r6
 80162ac:	10002b26 	beq	r2,zero,801635c <__adddf3+0x7d8>
 80162b0:	2804d0fa 	srli	r2,r5,3
 80162b4:	8822d0fa 	srli	r17,r17,3
 80162b8:	280a977a 	slli	r5,r5,29
 80162bc:	10c0022c 	andhi	r3,r2,8
 80162c0:	2c62b03a 	or	r17,r5,r17
 80162c4:	18000826 	beq	r3,zero,80162e8 <__adddf3+0x764>
 80162c8:	4008d0fa 	srli	r4,r8,3
 80162cc:	20c0022c 	andhi	r3,r4,8
 80162d0:	1800051e 	bne	r3,zero,80162e8 <__adddf3+0x764>
 80162d4:	300cd0fa 	srli	r6,r6,3
 80162d8:	4010977a 	slli	r8,r8,29
 80162dc:	2005883a 	mov	r2,r4
 80162e0:	3825883a 	mov	r18,r7
 80162e4:	41a2b03a 	or	r17,r8,r6
 80162e8:	880ad77a 	srli	r5,r17,29
 80162ec:	100490fa 	slli	r2,r2,3
 80162f0:	882290fa 	slli	r17,r17,3
 80162f4:	0401ffc4 	movi	r16,2047
 80162f8:	288ab03a 	or	r5,r5,r2
 80162fc:	003e4006 	br	8015c00 <__alt_data_end+0xf8015c00>
 8016300:	01c1ffc4 	movi	r7,2047
 8016304:	11ffc71e 	bne	r2,r7,8016224 <__alt_data_end+0xf8016224>
 8016308:	400b883a 	mov	r5,r8
 801630c:	3023883a 	mov	r17,r6
 8016310:	1021883a 	mov	r16,r2
 8016314:	003e3a06 	br	8015c00 <__alt_data_end+0xf8015c00>
 8016318:	10002d26 	beq	r2,zero,80163d0 <__adddf3+0x84c>
 801631c:	4184b03a 	or	r2,r8,r6
 8016320:	10000e26 	beq	r2,zero,801635c <__adddf3+0x7d8>
 8016324:	2804d0fa 	srli	r2,r5,3
 8016328:	8822d0fa 	srli	r17,r17,3
 801632c:	280a977a 	slli	r5,r5,29
 8016330:	10c0022c 	andhi	r3,r2,8
 8016334:	2c62b03a 	or	r17,r5,r17
 8016338:	183feb26 	beq	r3,zero,80162e8 <__alt_data_end+0xf80162e8>
 801633c:	4008d0fa 	srli	r4,r8,3
 8016340:	20c0022c 	andhi	r3,r4,8
 8016344:	183fe81e 	bne	r3,zero,80162e8 <__alt_data_end+0xf80162e8>
 8016348:	300cd0fa 	srli	r6,r6,3
 801634c:	4010977a 	slli	r8,r8,29
 8016350:	2005883a 	mov	r2,r4
 8016354:	41a2b03a 	or	r17,r8,r6
 8016358:	003fe306 	br	80162e8 <__alt_data_end+0xf80162e8>
 801635c:	0401ffc4 	movi	r16,2047
 8016360:	003e2706 	br	8015c00 <__alt_data_end+0xf8015c00>
 8016364:	0011883a 	mov	r8,zero
 8016368:	003f8306 	br	8016178 <__alt_data_end+0xf8016178>
 801636c:	193ff804 	addi	r4,r3,-32
 8016370:	02400804 	movi	r9,32
 8016374:	2908d83a 	srl	r4,r5,r4
 8016378:	1a402526 	beq	r3,r9,8016410 <__adddf3+0x88c>
 801637c:	02401004 	movi	r9,64
 8016380:	48c7c83a 	sub	r3,r9,r3
 8016384:	28ca983a 	sll	r5,r5,r3
 8016388:	2c62b03a 	or	r17,r5,r17
 801638c:	8822c03a 	cmpne	r17,r17,zero
 8016390:	8922b03a 	or	r17,r17,r4
 8016394:	0007883a 	mov	r3,zero
 8016398:	003f2f06 	br	8016058 <__alt_data_end+0xf8016058>
 801639c:	01402034 	movhi	r5,128
 80163a0:	0007883a 	mov	r3,zero
 80163a4:	297fffc4 	addi	r5,r5,-1
 80163a8:	047ffe04 	movi	r17,-8
 80163ac:	0401ffc4 	movi	r16,2047
 80163b0:	003e7306 	br	8015d80 <__alt_data_end+0xf8015d80>
 80163b4:	2c62b03a 	or	r17,r5,r17
 80163b8:	8822c03a 	cmpne	r17,r17,zero
 80163bc:	0009883a 	mov	r4,zero
 80163c0:	003fa506 	br	8016258 <__alt_data_end+0xf8016258>
 80163c4:	400b883a 	mov	r5,r8
 80163c8:	3023883a 	mov	r17,r6
 80163cc:	003e0c06 	br	8015c00 <__alt_data_end+0xf8015c00>
 80163d0:	400b883a 	mov	r5,r8
 80163d4:	3023883a 	mov	r17,r6
 80163d8:	0401ffc4 	movi	r16,2047
 80163dc:	003e0806 	br	8015c00 <__alt_data_end+0xf8015c00>
 80163e0:	21fff804 	addi	r7,r4,-32
 80163e4:	02400804 	movi	r9,32
 80163e8:	29ced83a 	srl	r7,r5,r7
 80163ec:	22400a26 	beq	r4,r9,8016418 <__adddf3+0x894>
 80163f0:	02401004 	movi	r9,64
 80163f4:	4909c83a 	sub	r4,r9,r4
 80163f8:	290a983a 	sll	r5,r5,r4
 80163fc:	2c62b03a 	or	r17,r5,r17
 8016400:	8822c03a 	cmpne	r17,r17,zero
 8016404:	89e2b03a 	or	r17,r17,r7
 8016408:	0009883a 	mov	r4,zero
 801640c:	003f9206 	br	8016258 <__alt_data_end+0xf8016258>
 8016410:	000b883a 	mov	r5,zero
 8016414:	003fdc06 	br	8016388 <__alt_data_end+0xf8016388>
 8016418:	000b883a 	mov	r5,zero
 801641c:	003ff706 	br	80163fc <__alt_data_end+0xf80163fc>

08016420 <__divdf3>:
 8016420:	defff204 	addi	sp,sp,-56
 8016424:	dd000815 	stw	r20,32(sp)
 8016428:	2828d53a 	srli	r20,r5,20
 801642c:	dd800a15 	stw	r22,40(sp)
 8016430:	282cd7fa 	srli	r22,r5,31
 8016434:	dc000415 	stw	r16,16(sp)
 8016438:	04000434 	movhi	r16,16
 801643c:	df000c15 	stw	fp,48(sp)
 8016440:	dcc00715 	stw	r19,28(sp)
 8016444:	dc800615 	stw	r18,24(sp)
 8016448:	dc400515 	stw	r17,20(sp)
 801644c:	843fffc4 	addi	r16,r16,-1
 8016450:	dfc00d15 	stw	ra,52(sp)
 8016454:	ddc00b15 	stw	r23,44(sp)
 8016458:	dd400915 	stw	r21,36(sp)
 801645c:	a501ffcc 	andi	r20,r20,2047
 8016460:	2025883a 	mov	r18,r4
 8016464:	2027883a 	mov	r19,r4
 8016468:	2c22703a 	and	r17,r5,r16
 801646c:	b7003fcc 	andi	fp,r22,255
 8016470:	a0005e26 	beq	r20,zero,80165ec <__divdf3+0x1cc>
 8016474:	0081ffc4 	movi	r2,2047
 8016478:	a0803526 	beq	r20,r2,8016550 <__divdf3+0x130>
 801647c:	8c000434 	orhi	r16,r17,16
 8016480:	2004d77a 	srli	r2,r4,29
 8016484:	802090fa 	slli	r16,r16,3
 8016488:	202690fa 	slli	r19,r4,3
 801648c:	a53f0044 	addi	r20,r20,-1023
 8016490:	80a2b03a 	or	r17,r16,r2
 8016494:	0025883a 	mov	r18,zero
 8016498:	0011883a 	mov	r8,zero
 801649c:	380ad53a 	srli	r5,r7,20
 80164a0:	382ed7fa 	srli	r23,r7,31
 80164a4:	04000434 	movhi	r16,16
 80164a8:	843fffc4 	addi	r16,r16,-1
 80164ac:	2941ffcc 	andi	r5,r5,2047
 80164b0:	302b883a 	mov	r21,r6
 80164b4:	3c20703a 	and	r16,r7,r16
 80164b8:	ba403fcc 	andi	r9,r23,255
 80164bc:	28006726 	beq	r5,zero,801665c <__divdf3+0x23c>
 80164c0:	0081ffc4 	movi	r2,2047
 80164c4:	28805f26 	beq	r5,r2,8016644 <__divdf3+0x224>
 80164c8:	84000434 	orhi	r16,r16,16
 80164cc:	3004d77a 	srli	r2,r6,29
 80164d0:	802090fa 	slli	r16,r16,3
 80164d4:	302a90fa 	slli	r21,r6,3
 80164d8:	297f0044 	addi	r5,r5,-1023
 80164dc:	80a0b03a 	or	r16,r16,r2
 80164e0:	000f883a 	mov	r7,zero
 80164e4:	3c86b03a 	or	r3,r7,r18
 80164e8:	180690ba 	slli	r3,r3,2
 80164ec:	00820074 	movhi	r2,2049
 80164f0:	10994404 	addi	r2,r2,25872
 80164f4:	1887883a 	add	r3,r3,r2
 80164f8:	18c00017 	ldw	r3,0(r3)
 80164fc:	b5c8f03a 	xor	r4,r22,r23
 8016500:	200d883a 	mov	r6,r4
 8016504:	24803fcc 	andi	r18,r4,255
 8016508:	a169c83a 	sub	r20,r20,r5
 801650c:	1800683a 	jmp	r3
 8016510:	08016758 	cmpnei	zero,at,1437
 8016514:	08016588 	cmpgei	zero,at,1430
 8016518:	0801671c 	xori	zero,at,1436
 801651c:	0801656c 	andhi	zero,at,1429
 8016520:	0801671c 	xori	zero,at,1436
 8016524:	080166f0 	cmpltui	zero,at,1435
 8016528:	0801671c 	xori	zero,at,1436
 801652c:	0801656c 	andhi	zero,at,1429
 8016530:	08016588 	cmpgei	zero,at,1430
 8016534:	08016588 	cmpgei	zero,at,1430
 8016538:	080166f0 	cmpltui	zero,at,1435
 801653c:	0801656c 	andhi	zero,at,1429
 8016540:	0801657c 	xorhi	zero,at,1429
 8016544:	0801657c 	xorhi	zero,at,1429
 8016548:	0801657c 	xorhi	zero,at,1429
 801654c:	0801672c 	andhi	zero,at,1436
 8016550:	8904b03a 	or	r2,r17,r4
 8016554:	1000631e 	bne	r2,zero,80166e4 <__divdf3+0x2c4>
 8016558:	04800204 	movi	r18,8
 801655c:	0023883a 	mov	r17,zero
 8016560:	0027883a 	mov	r19,zero
 8016564:	02000084 	movi	r8,2
 8016568:	003fcc06 	br	801649c <__alt_data_end+0xf801649c>
 801656c:	8023883a 	mov	r17,r16
 8016570:	a827883a 	mov	r19,r21
 8016574:	4839883a 	mov	fp,r9
 8016578:	3811883a 	mov	r8,r7
 801657c:	00800084 	movi	r2,2
 8016580:	40812a1e 	bne	r8,r2,8016a2c <__divdf3+0x60c>
 8016584:	e025883a 	mov	r18,fp
 8016588:	9180004c 	andi	r6,r18,1
 801658c:	0101ffc4 	movi	r4,2047
 8016590:	000b883a 	mov	r5,zero
 8016594:	0027883a 	mov	r19,zero
 8016598:	2008953a 	slli	r4,r4,20
 801659c:	30c03fcc 	andi	r3,r6,255
 80165a0:	04000434 	movhi	r16,16
 80165a4:	180697fa 	slli	r3,r3,31
 80165a8:	843fffc4 	addi	r16,r16,-1
 80165ac:	2c20703a 	and	r16,r5,r16
 80165b0:	8120b03a 	or	r16,r16,r4
 80165b4:	80c6b03a 	or	r3,r16,r3
 80165b8:	9805883a 	mov	r2,r19
 80165bc:	dfc00d17 	ldw	ra,52(sp)
 80165c0:	df000c17 	ldw	fp,48(sp)
 80165c4:	ddc00b17 	ldw	r23,44(sp)
 80165c8:	dd800a17 	ldw	r22,40(sp)
 80165cc:	dd400917 	ldw	r21,36(sp)
 80165d0:	dd000817 	ldw	r20,32(sp)
 80165d4:	dcc00717 	ldw	r19,28(sp)
 80165d8:	dc800617 	ldw	r18,24(sp)
 80165dc:	dc400517 	ldw	r17,20(sp)
 80165e0:	dc000417 	ldw	r16,16(sp)
 80165e4:	dec00e04 	addi	sp,sp,56
 80165e8:	f800283a 	ret
 80165ec:	8904b03a 	or	r2,r17,r4
 80165f0:	10003726 	beq	r2,zero,80166d0 <__divdf3+0x2b0>
 80165f4:	88011c26 	beq	r17,zero,8016a68 <__divdf3+0x648>
 80165f8:	8809883a 	mov	r4,r17
 80165fc:	d9800315 	stw	r6,12(sp)
 8016600:	d9c00115 	stw	r7,4(sp)
 8016604:	80182b80 	call	80182b8 <__clzsi2>
 8016608:	d9800317 	ldw	r6,12(sp)
 801660c:	d9c00117 	ldw	r7,4(sp)
 8016610:	1007883a 	mov	r3,r2
 8016614:	01000a04 	movi	r4,40
 8016618:	1cfffe04 	addi	r19,r3,-8
 801661c:	20c9c83a 	sub	r4,r4,r3
 8016620:	8cca983a 	sll	r5,r17,r19
 8016624:	9108d83a 	srl	r4,r18,r4
 8016628:	94e6983a 	sll	r19,r18,r19
 801662c:	2162b03a 	or	r17,r4,r5
 8016630:	053f0344 	movi	r20,-1011
 8016634:	a0e9c83a 	sub	r20,r20,r3
 8016638:	0025883a 	mov	r18,zero
 801663c:	0011883a 	mov	r8,zero
 8016640:	003f9606 	br	801649c <__alt_data_end+0xf801649c>
 8016644:	8184b03a 	or	r2,r16,r6
 8016648:	10001f1e 	bne	r2,zero,80166c8 <__divdf3+0x2a8>
 801664c:	0021883a 	mov	r16,zero
 8016650:	002b883a 	mov	r21,zero
 8016654:	01c00084 	movi	r7,2
 8016658:	003fa206 	br	80164e4 <__alt_data_end+0xf80164e4>
 801665c:	8184b03a 	or	r2,r16,r6
 8016660:	10001526 	beq	r2,zero,80166b8 <__divdf3+0x298>
 8016664:	80010c26 	beq	r16,zero,8016a98 <__divdf3+0x678>
 8016668:	8009883a 	mov	r4,r16
 801666c:	d9800315 	stw	r6,12(sp)
 8016670:	da000215 	stw	r8,8(sp)
 8016674:	da400015 	stw	r9,0(sp)
 8016678:	80182b80 	call	80182b8 <__clzsi2>
 801667c:	d9800317 	ldw	r6,12(sp)
 8016680:	da000217 	ldw	r8,8(sp)
 8016684:	da400017 	ldw	r9,0(sp)
 8016688:	1007883a 	mov	r3,r2
 801668c:	01000a04 	movi	r4,40
 8016690:	1d7ffe04 	addi	r21,r3,-8
 8016694:	20c9c83a 	sub	r4,r4,r3
 8016698:	8560983a 	sll	r16,r16,r21
 801669c:	3108d83a 	srl	r4,r6,r4
 80166a0:	356a983a 	sll	r21,r6,r21
 80166a4:	2420b03a 	or	r16,r4,r16
 80166a8:	017f0344 	movi	r5,-1011
 80166ac:	28cbc83a 	sub	r5,r5,r3
 80166b0:	000f883a 	mov	r7,zero
 80166b4:	003f8b06 	br	80164e4 <__alt_data_end+0xf80164e4>
 80166b8:	0021883a 	mov	r16,zero
 80166bc:	002b883a 	mov	r21,zero
 80166c0:	01c00044 	movi	r7,1
 80166c4:	003f8706 	br	80164e4 <__alt_data_end+0xf80164e4>
 80166c8:	01c000c4 	movi	r7,3
 80166cc:	003f8506 	br	80164e4 <__alt_data_end+0xf80164e4>
 80166d0:	04800104 	movi	r18,4
 80166d4:	0023883a 	mov	r17,zero
 80166d8:	0027883a 	mov	r19,zero
 80166dc:	02000044 	movi	r8,1
 80166e0:	003f6e06 	br	801649c <__alt_data_end+0xf801649c>
 80166e4:	04800304 	movi	r18,12
 80166e8:	020000c4 	movi	r8,3
 80166ec:	003f6b06 	br	801649c <__alt_data_end+0xf801649c>
 80166f0:	01400434 	movhi	r5,16
 80166f4:	000d883a 	mov	r6,zero
 80166f8:	297fffc4 	addi	r5,r5,-1
 80166fc:	04ffffc4 	movi	r19,-1
 8016700:	0101ffc4 	movi	r4,2047
 8016704:	003fa406 	br	8016598 <__alt_data_end+0xf8016598>
 8016708:	043f0084 	movi	r16,-1022
 801670c:	8521c83a 	sub	r16,r16,r20
 8016710:	00800e04 	movi	r2,56
 8016714:	1401200e 	bge	r2,r16,8016b98 <__divdf3+0x778>
 8016718:	9180004c 	andi	r6,r18,1
 801671c:	0009883a 	mov	r4,zero
 8016720:	000b883a 	mov	r5,zero
 8016724:	0027883a 	mov	r19,zero
 8016728:	003f9b06 	br	8016598 <__alt_data_end+0xf8016598>
 801672c:	8880022c 	andhi	r2,r17,8
 8016730:	1000c726 	beq	r2,zero,8016a50 <__divdf3+0x630>
 8016734:	8080022c 	andhi	r2,r16,8
 8016738:	1000c51e 	bne	r2,zero,8016a50 <__divdf3+0x630>
 801673c:	00800434 	movhi	r2,16
 8016740:	81400234 	orhi	r5,r16,8
 8016744:	10bfffc4 	addi	r2,r2,-1
 8016748:	b80d883a 	mov	r6,r23
 801674c:	288a703a 	and	r5,r5,r2
 8016750:	a827883a 	mov	r19,r21
 8016754:	003fea06 	br	8016700 <__alt_data_end+0xf8016700>
 8016758:	8440ea36 	bltu	r16,r17,8016b04 <__divdf3+0x6e4>
 801675c:	8c00e826 	beq	r17,r16,8016b00 <__divdf3+0x6e0>
 8016760:	a53fffc4 	addi	r20,r20,-1
 8016764:	882d883a 	mov	r22,r17
 8016768:	000d883a 	mov	r6,zero
 801676c:	a804d63a 	srli	r2,r21,24
 8016770:	8020923a 	slli	r16,r16,8
 8016774:	b009883a 	mov	r4,r22
 8016778:	d9800315 	stw	r6,12(sp)
 801677c:	1420b03a 	or	r16,r2,r16
 8016780:	802ed43a 	srli	r23,r16,16
 8016784:	873fffcc 	andi	fp,r16,65535
 8016788:	a82a923a 	slli	r21,r21,8
 801678c:	b80b883a 	mov	r5,r23
 8016790:	80024900 	call	8002490 <__udivsi3>
 8016794:	b009883a 	mov	r4,r22
 8016798:	b80b883a 	mov	r5,r23
 801679c:	1023883a 	mov	r17,r2
 80167a0:	80024980 	call	8002498 <__umodsi3>
 80167a4:	1004943a 	slli	r2,r2,16
 80167a8:	9808d43a 	srli	r4,r19,16
 80167ac:	8f2d383a 	mul	r22,r17,fp
 80167b0:	d9800317 	ldw	r6,12(sp)
 80167b4:	1106b03a 	or	r3,r2,r4
 80167b8:	1d80062e 	bgeu	r3,r22,80167d4 <__divdf3+0x3b4>
 80167bc:	1c07883a 	add	r3,r3,r16
 80167c0:	88bfffc4 	addi	r2,r17,-1
 80167c4:	1c00dc36 	bltu	r3,r16,8016b38 <__divdf3+0x718>
 80167c8:	1d80db2e 	bgeu	r3,r22,8016b38 <__divdf3+0x718>
 80167cc:	8c7fff84 	addi	r17,r17,-2
 80167d0:	1c07883a 	add	r3,r3,r16
 80167d4:	1dadc83a 	sub	r22,r3,r22
 80167d8:	b009883a 	mov	r4,r22
 80167dc:	b80b883a 	mov	r5,r23
 80167e0:	d9800315 	stw	r6,12(sp)
 80167e4:	80024900 	call	8002490 <__udivsi3>
 80167e8:	b009883a 	mov	r4,r22
 80167ec:	b80b883a 	mov	r5,r23
 80167f0:	d8800015 	stw	r2,0(sp)
 80167f4:	80024980 	call	8002498 <__umodsi3>
 80167f8:	da400017 	ldw	r9,0(sp)
 80167fc:	1004943a 	slli	r2,r2,16
 8016800:	9cffffcc 	andi	r19,r19,65535
 8016804:	4f07383a 	mul	r3,r9,fp
 8016808:	14c8b03a 	or	r4,r2,r19
 801680c:	d9800317 	ldw	r6,12(sp)
 8016810:	20c0062e 	bgeu	r4,r3,801682c <__divdf3+0x40c>
 8016814:	2409883a 	add	r4,r4,r16
 8016818:	48bfffc4 	addi	r2,r9,-1
 801681c:	2400c436 	bltu	r4,r16,8016b30 <__divdf3+0x710>
 8016820:	20c0c32e 	bgeu	r4,r3,8016b30 <__divdf3+0x710>
 8016824:	4a7fff84 	addi	r9,r9,-2
 8016828:	2409883a 	add	r4,r4,r16
 801682c:	8822943a 	slli	r17,r17,16
 8016830:	a80ed43a 	srli	r7,r21,16
 8016834:	aa3fffcc 	andi	r8,r21,65535
 8016838:	4c62b03a 	or	r17,r9,r17
 801683c:	8816d43a 	srli	r11,r17,16
 8016840:	897fffcc 	andi	r5,r17,65535
 8016844:	2a15383a 	mul	r10,r5,r8
 8016848:	5a19383a 	mul	r12,r11,r8
 801684c:	29cb383a 	mul	r5,r5,r7
 8016850:	5012d43a 	srli	r9,r10,16
 8016854:	20c5c83a 	sub	r2,r4,r3
 8016858:	614b883a 	add	r5,r12,r5
 801685c:	2a4b883a 	add	r5,r5,r9
 8016860:	59c7383a 	mul	r3,r11,r7
 8016864:	2b00022e 	bgeu	r5,r12,8016870 <__divdf3+0x450>
 8016868:	01000074 	movhi	r4,1
 801686c:	1907883a 	add	r3,r3,r4
 8016870:	2808d43a 	srli	r4,r5,16
 8016874:	280a943a 	slli	r5,r5,16
 8016878:	54ffffcc 	andi	r19,r10,65535
 801687c:	1907883a 	add	r3,r3,r4
 8016880:	2ccb883a 	add	r5,r5,r19
 8016884:	10c09336 	bltu	r2,r3,8016ad4 <__divdf3+0x6b4>
 8016888:	10c0ad26 	beq	r2,r3,8016b40 <__divdf3+0x720>
 801688c:	10c7c83a 	sub	r3,r2,r3
 8016890:	3167c83a 	sub	r19,r6,r5
 8016894:	34ed803a 	cmpltu	r22,r6,r19
 8016898:	1dadc83a 	sub	r22,r3,r22
 801689c:	b400b226 	beq	r22,r16,8016b68 <__divdf3+0x748>
 80168a0:	b009883a 	mov	r4,r22
 80168a4:	b80b883a 	mov	r5,r23
 80168a8:	d9c00115 	stw	r7,4(sp)
 80168ac:	da000215 	stw	r8,8(sp)
 80168b0:	80024900 	call	8002490 <__udivsi3>
 80168b4:	b009883a 	mov	r4,r22
 80168b8:	b80b883a 	mov	r5,r23
 80168bc:	d8800315 	stw	r2,12(sp)
 80168c0:	80024980 	call	8002498 <__umodsi3>
 80168c4:	d9800317 	ldw	r6,12(sp)
 80168c8:	1004943a 	slli	r2,r2,16
 80168cc:	9808d43a 	srli	r4,r19,16
 80168d0:	372d383a 	mul	r22,r6,fp
 80168d4:	d9c00117 	ldw	r7,4(sp)
 80168d8:	1106b03a 	or	r3,r2,r4
 80168dc:	da000217 	ldw	r8,8(sp)
 80168e0:	1d80062e 	bgeu	r3,r22,80168fc <__divdf3+0x4dc>
 80168e4:	1c07883a 	add	r3,r3,r16
 80168e8:	30bfffc4 	addi	r2,r6,-1
 80168ec:	1c00a036 	bltu	r3,r16,8016b70 <__divdf3+0x750>
 80168f0:	1d809f2e 	bgeu	r3,r22,8016b70 <__divdf3+0x750>
 80168f4:	31bfff84 	addi	r6,r6,-2
 80168f8:	1c07883a 	add	r3,r3,r16
 80168fc:	1dadc83a 	sub	r22,r3,r22
 8016900:	b009883a 	mov	r4,r22
 8016904:	b80b883a 	mov	r5,r23
 8016908:	d9800315 	stw	r6,12(sp)
 801690c:	d9c00115 	stw	r7,4(sp)
 8016910:	da000215 	stw	r8,8(sp)
 8016914:	80024900 	call	8002490 <__udivsi3>
 8016918:	b009883a 	mov	r4,r22
 801691c:	b80b883a 	mov	r5,r23
 8016920:	d8800015 	stw	r2,0(sp)
 8016924:	80024980 	call	8002498 <__umodsi3>
 8016928:	da400017 	ldw	r9,0(sp)
 801692c:	1004943a 	slli	r2,r2,16
 8016930:	993fffcc 	andi	r4,r19,65535
 8016934:	4f39383a 	mul	fp,r9,fp
 8016938:	1106b03a 	or	r3,r2,r4
 801693c:	d9800317 	ldw	r6,12(sp)
 8016940:	d9c00117 	ldw	r7,4(sp)
 8016944:	da000217 	ldw	r8,8(sp)
 8016948:	1f00062e 	bgeu	r3,fp,8016964 <__divdf3+0x544>
 801694c:	1c07883a 	add	r3,r3,r16
 8016950:	48bfffc4 	addi	r2,r9,-1
 8016954:	1c008836 	bltu	r3,r16,8016b78 <__divdf3+0x758>
 8016958:	1f00872e 	bgeu	r3,fp,8016b78 <__divdf3+0x758>
 801695c:	4a7fff84 	addi	r9,r9,-2
 8016960:	1c07883a 	add	r3,r3,r16
 8016964:	3008943a 	slli	r4,r6,16
 8016968:	1f07c83a 	sub	r3,r3,fp
 801696c:	4926b03a 	or	r19,r9,r4
 8016970:	993fffcc 	andi	r4,r19,65535
 8016974:	980cd43a 	srli	r6,r19,16
 8016978:	220b383a 	mul	r5,r4,r8
 801697c:	21c5383a 	mul	r2,r4,r7
 8016980:	3211383a 	mul	r8,r6,r8
 8016984:	2808d43a 	srli	r4,r5,16
 8016988:	31cf383a 	mul	r7,r6,r7
 801698c:	4085883a 	add	r2,r8,r2
 8016990:	1105883a 	add	r2,r2,r4
 8016994:	1200022e 	bgeu	r2,r8,80169a0 <__divdf3+0x580>
 8016998:	01000074 	movhi	r4,1
 801699c:	390f883a 	add	r7,r7,r4
 80169a0:	1008d43a 	srli	r4,r2,16
 80169a4:	1004943a 	slli	r2,r2,16
 80169a8:	297fffcc 	andi	r5,r5,65535
 80169ac:	390f883a 	add	r7,r7,r4
 80169b0:	1145883a 	add	r2,r2,r5
 80169b4:	19c06536 	bltu	r3,r7,8016b4c <__divdf3+0x72c>
 80169b8:	19c09f26 	beq	r3,r7,8016c38 <__divdf3+0x818>
 80169bc:	9cc00054 	ori	r19,r19,1
 80169c0:	a100ffc4 	addi	r4,r20,1023
 80169c4:	013f500e 	bge	zero,r4,8016708 <__alt_data_end+0xf8016708>
 80169c8:	988001cc 	andi	r2,r19,7
 80169cc:	10000726 	beq	r2,zero,80169ec <__divdf3+0x5cc>
 80169d0:	98c003cc 	andi	r3,r19,15
 80169d4:	00800104 	movi	r2,4
 80169d8:	18800426 	beq	r3,r2,80169ec <__divdf3+0x5cc>
 80169dc:	9885883a 	add	r2,r19,r2
 80169e0:	14e1803a 	cmpltu	r16,r2,r19
 80169e4:	8c23883a 	add	r17,r17,r16
 80169e8:	1027883a 	mov	r19,r2
 80169ec:	8880402c 	andhi	r2,r17,256
 80169f0:	10000426 	beq	r2,zero,8016a04 <__divdf3+0x5e4>
 80169f4:	00bfc034 	movhi	r2,65280
 80169f8:	10bfffc4 	addi	r2,r2,-1
 80169fc:	a1010004 	addi	r4,r20,1024
 8016a00:	88a2703a 	and	r17,r17,r2
 8016a04:	0081ff84 	movi	r2,2046
 8016a08:	113edf16 	blt	r2,r4,8016588 <__alt_data_end+0xf8016588>
 8016a0c:	9826d0fa 	srli	r19,r19,3
 8016a10:	8804977a 	slli	r2,r17,29
 8016a14:	8820927a 	slli	r16,r17,9
 8016a18:	2101ffcc 	andi	r4,r4,2047
 8016a1c:	14e6b03a 	or	r19,r2,r19
 8016a20:	800ad33a 	srli	r5,r16,12
 8016a24:	9180004c 	andi	r6,r18,1
 8016a28:	003edb06 	br	8016598 <__alt_data_end+0xf8016598>
 8016a2c:	008000c4 	movi	r2,3
 8016a30:	4080a826 	beq	r8,r2,8016cd4 <__divdf3+0x8b4>
 8016a34:	00800044 	movi	r2,1
 8016a38:	4080551e 	bne	r8,r2,8016b90 <__divdf3+0x770>
 8016a3c:	e00d883a 	mov	r6,fp
 8016a40:	0009883a 	mov	r4,zero
 8016a44:	000b883a 	mov	r5,zero
 8016a48:	0027883a 	mov	r19,zero
 8016a4c:	003ed206 	br	8016598 <__alt_data_end+0xf8016598>
 8016a50:	00800434 	movhi	r2,16
 8016a54:	89400234 	orhi	r5,r17,8
 8016a58:	10bfffc4 	addi	r2,r2,-1
 8016a5c:	b00d883a 	mov	r6,r22
 8016a60:	288a703a 	and	r5,r5,r2
 8016a64:	003f2606 	br	8016700 <__alt_data_end+0xf8016700>
 8016a68:	d9800315 	stw	r6,12(sp)
 8016a6c:	d9c00115 	stw	r7,4(sp)
 8016a70:	80182b80 	call	80182b8 <__clzsi2>
 8016a74:	10c00804 	addi	r3,r2,32
 8016a78:	010009c4 	movi	r4,39
 8016a7c:	d9800317 	ldw	r6,12(sp)
 8016a80:	d9c00117 	ldw	r7,4(sp)
 8016a84:	20fee30e 	bge	r4,r3,8016614 <__alt_data_end+0xf8016614>
 8016a88:	117ffe04 	addi	r5,r2,-8
 8016a8c:	9162983a 	sll	r17,r18,r5
 8016a90:	0027883a 	mov	r19,zero
 8016a94:	003ee606 	br	8016630 <__alt_data_end+0xf8016630>
 8016a98:	3009883a 	mov	r4,r6
 8016a9c:	d9800315 	stw	r6,12(sp)
 8016aa0:	da000215 	stw	r8,8(sp)
 8016aa4:	da400015 	stw	r9,0(sp)
 8016aa8:	80182b80 	call	80182b8 <__clzsi2>
 8016aac:	10c00804 	addi	r3,r2,32
 8016ab0:	010009c4 	movi	r4,39
 8016ab4:	d9800317 	ldw	r6,12(sp)
 8016ab8:	da000217 	ldw	r8,8(sp)
 8016abc:	da400017 	ldw	r9,0(sp)
 8016ac0:	20fef20e 	bge	r4,r3,801668c <__alt_data_end+0xf801668c>
 8016ac4:	10bffe04 	addi	r2,r2,-8
 8016ac8:	a8a0983a 	sll	r16,r21,r2
 8016acc:	002b883a 	mov	r21,zero
 8016ad0:	003ef506 	br	80166a8 <__alt_data_end+0xf80166a8>
 8016ad4:	354d883a 	add	r6,r6,r21
 8016ad8:	3549803a 	cmpltu	r4,r6,r21
 8016adc:	2409883a 	add	r4,r4,r16
 8016ae0:	2089883a 	add	r4,r4,r2
 8016ae4:	88bfffc4 	addi	r2,r17,-1
 8016ae8:	81000c2e 	bgeu	r16,r4,8016b1c <__divdf3+0x6fc>
 8016aec:	20c04436 	bltu	r4,r3,8016c00 <__divdf3+0x7e0>
 8016af0:	19006f26 	beq	r3,r4,8016cb0 <__divdf3+0x890>
 8016af4:	20c7c83a 	sub	r3,r4,r3
 8016af8:	1023883a 	mov	r17,r2
 8016afc:	003f6406 	br	8016890 <__alt_data_end+0xf8016890>
 8016b00:	9d7f1736 	bltu	r19,r21,8016760 <__alt_data_end+0xf8016760>
 8016b04:	9806d07a 	srli	r3,r19,1
 8016b08:	880497fa 	slli	r2,r17,31
 8016b0c:	980c97fa 	slli	r6,r19,31
 8016b10:	882cd07a 	srli	r22,r17,1
 8016b14:	18a6b03a 	or	r19,r3,r2
 8016b18:	003f1406 	br	801676c <__alt_data_end+0xf801676c>
 8016b1c:	243ff51e 	bne	r4,r16,8016af4 <__alt_data_end+0xf8016af4>
 8016b20:	357ff22e 	bgeu	r6,r21,8016aec <__alt_data_end+0xf8016aec>
 8016b24:	80c7c83a 	sub	r3,r16,r3
 8016b28:	1023883a 	mov	r17,r2
 8016b2c:	003f5806 	br	8016890 <__alt_data_end+0xf8016890>
 8016b30:	1013883a 	mov	r9,r2
 8016b34:	003f3d06 	br	801682c <__alt_data_end+0xf801682c>
 8016b38:	1023883a 	mov	r17,r2
 8016b3c:	003f2506 	br	80167d4 <__alt_data_end+0xf80167d4>
 8016b40:	317fe436 	bltu	r6,r5,8016ad4 <__alt_data_end+0xf8016ad4>
 8016b44:	0007883a 	mov	r3,zero
 8016b48:	003f5106 	br	8016890 <__alt_data_end+0xf8016890>
 8016b4c:	1c07883a 	add	r3,r3,r16
 8016b50:	993fffc4 	addi	r4,r19,-1
 8016b54:	1c000a2e 	bgeu	r3,r16,8016b80 <__divdf3+0x760>
 8016b58:	2027883a 	mov	r19,r4
 8016b5c:	19ff971e 	bne	r3,r7,80169bc <__alt_data_end+0xf80169bc>
 8016b60:	a8bf961e 	bne	r21,r2,80169bc <__alt_data_end+0xf80169bc>
 8016b64:	003f9606 	br	80169c0 <__alt_data_end+0xf80169c0>
 8016b68:	04ffffc4 	movi	r19,-1
 8016b6c:	003f9406 	br	80169c0 <__alt_data_end+0xf80169c0>
 8016b70:	100d883a 	mov	r6,r2
 8016b74:	003f6106 	br	80168fc <__alt_data_end+0xf80168fc>
 8016b78:	1013883a 	mov	r9,r2
 8016b7c:	003f7906 	br	8016964 <__alt_data_end+0xf8016964>
 8016b80:	19c02636 	bltu	r3,r7,8016c1c <__divdf3+0x7fc>
 8016b84:	38c04d26 	beq	r7,r3,8016cbc <__divdf3+0x89c>
 8016b88:	2027883a 	mov	r19,r4
 8016b8c:	003f8b06 	br	80169bc <__alt_data_end+0xf80169bc>
 8016b90:	e025883a 	mov	r18,fp
 8016b94:	003f8a06 	br	80169c0 <__alt_data_end+0xf80169c0>
 8016b98:	008007c4 	movi	r2,31
 8016b9c:	14002a16 	blt	r2,r16,8016c48 <__divdf3+0x828>
 8016ba0:	a5010784 	addi	r20,r20,1054
 8016ba4:	8d04983a 	sll	r2,r17,r20
 8016ba8:	9c06d83a 	srl	r3,r19,r16
 8016bac:	9d28983a 	sll	r20,r19,r20
 8016bb0:	8c20d83a 	srl	r16,r17,r16
 8016bb4:	1886b03a 	or	r3,r3,r2
 8016bb8:	a004c03a 	cmpne	r2,r20,zero
 8016bbc:	1884b03a 	or	r2,r3,r2
 8016bc0:	10c001cc 	andi	r3,r2,7
 8016bc4:	18000726 	beq	r3,zero,8016be4 <__divdf3+0x7c4>
 8016bc8:	110003cc 	andi	r4,r2,15
 8016bcc:	00c00104 	movi	r3,4
 8016bd0:	20c00426 	beq	r4,r3,8016be4 <__divdf3+0x7c4>
 8016bd4:	10c00104 	addi	r3,r2,4
 8016bd8:	1885803a 	cmpltu	r2,r3,r2
 8016bdc:	80a1883a 	add	r16,r16,r2
 8016be0:	1805883a 	mov	r2,r3
 8016be4:	80c0202c 	andhi	r3,r16,128
 8016be8:	18002d26 	beq	r3,zero,8016ca0 <__divdf3+0x880>
 8016bec:	9180004c 	andi	r6,r18,1
 8016bf0:	01000044 	movi	r4,1
 8016bf4:	000b883a 	mov	r5,zero
 8016bf8:	0027883a 	mov	r19,zero
 8016bfc:	003e6606 	br	8016598 <__alt_data_end+0xf8016598>
 8016c00:	354d883a 	add	r6,r6,r21
 8016c04:	356d803a 	cmpltu	r22,r6,r21
 8016c08:	b42d883a 	add	r22,r22,r16
 8016c0c:	b12d883a 	add	r22,r22,r4
 8016c10:	8c7fff84 	addi	r17,r17,-2
 8016c14:	b0c7c83a 	sub	r3,r22,r3
 8016c18:	003f1d06 	br	8016890 <__alt_data_end+0xf8016890>
 8016c1c:	ad4b883a 	add	r5,r21,r21
 8016c20:	2d6b803a 	cmpltu	r21,r5,r21
 8016c24:	ac2b883a 	add	r21,r21,r16
 8016c28:	1d47883a 	add	r3,r3,r21
 8016c2c:	993fff84 	addi	r4,r19,-2
 8016c30:	282b883a 	mov	r21,r5
 8016c34:	003fc806 	br	8016b58 <__alt_data_end+0xf8016b58>
 8016c38:	103fc41e 	bne	r2,zero,8016b4c <__alt_data_end+0xf8016b4c>
 8016c3c:	002b883a 	mov	r21,zero
 8016c40:	a8bf5e1e 	bne	r21,r2,80169bc <__alt_data_end+0xf80169bc>
 8016c44:	003f5e06 	br	80169c0 <__alt_data_end+0xf80169c0>
 8016c48:	00bef884 	movi	r2,-1054
 8016c4c:	1505c83a 	sub	r2,r2,r20
 8016c50:	00c00804 	movi	r3,32
 8016c54:	8884d83a 	srl	r2,r17,r2
 8016c58:	80c01c26 	beq	r16,r3,8016ccc <__divdf3+0x8ac>
 8016c5c:	a0c10f84 	addi	r3,r20,1086
 8016c60:	88c6983a 	sll	r3,r17,r3
 8016c64:	1cc6b03a 	or	r3,r3,r19
 8016c68:	1806c03a 	cmpne	r3,r3,zero
 8016c6c:	1884b03a 	or	r2,r3,r2
 8016c70:	140001cc 	andi	r16,r2,7
 8016c74:	8000061e 	bne	r16,zero,8016c90 <__divdf3+0x870>
 8016c78:	000b883a 	mov	r5,zero
 8016c7c:	1004d0fa 	srli	r2,r2,3
 8016c80:	9180004c 	andi	r6,r18,1
 8016c84:	0009883a 	mov	r4,zero
 8016c88:	1426b03a 	or	r19,r2,r16
 8016c8c:	003e4206 	br	8016598 <__alt_data_end+0xf8016598>
 8016c90:	110003cc 	andi	r4,r2,15
 8016c94:	00c00104 	movi	r3,4
 8016c98:	0021883a 	mov	r16,zero
 8016c9c:	20ffcd1e 	bne	r4,r3,8016bd4 <__alt_data_end+0xf8016bd4>
 8016ca0:	800a927a 	slli	r5,r16,9
 8016ca4:	8020977a 	slli	r16,r16,29
 8016ca8:	280ad33a 	srli	r5,r5,12
 8016cac:	003ff306 	br	8016c7c <__alt_data_end+0xf8016c7c>
 8016cb0:	317fd336 	bltu	r6,r5,8016c00 <__alt_data_end+0xf8016c00>
 8016cb4:	1023883a 	mov	r17,r2
 8016cb8:	003fa206 	br	8016b44 <__alt_data_end+0xf8016b44>
 8016cbc:	a8bfd736 	bltu	r21,r2,8016c1c <__alt_data_end+0xf8016c1c>
 8016cc0:	2027883a 	mov	r19,r4
 8016cc4:	a8bf3d1e 	bne	r21,r2,80169bc <__alt_data_end+0xf80169bc>
 8016cc8:	003f3d06 	br	80169c0 <__alt_data_end+0xf80169c0>
 8016ccc:	0007883a 	mov	r3,zero
 8016cd0:	003fe406 	br	8016c64 <__alt_data_end+0xf8016c64>
 8016cd4:	00800434 	movhi	r2,16
 8016cd8:	89400234 	orhi	r5,r17,8
 8016cdc:	10bfffc4 	addi	r2,r2,-1
 8016ce0:	e00d883a 	mov	r6,fp
 8016ce4:	288a703a 	and	r5,r5,r2
 8016ce8:	003e8506 	br	8016700 <__alt_data_end+0xf8016700>

08016cec <__eqdf2>:
 8016cec:	2804d53a 	srli	r2,r5,20
 8016cf0:	3806d53a 	srli	r3,r7,20
 8016cf4:	02000434 	movhi	r8,16
 8016cf8:	423fffc4 	addi	r8,r8,-1
 8016cfc:	1081ffcc 	andi	r2,r2,2047
 8016d00:	0241ffc4 	movi	r9,2047
 8016d04:	2a14703a 	and	r10,r5,r8
 8016d08:	18c1ffcc 	andi	r3,r3,2047
 8016d0c:	3a10703a 	and	r8,r7,r8
 8016d10:	280ad7fa 	srli	r5,r5,31
 8016d14:	380ed7fa 	srli	r7,r7,31
 8016d18:	12400f26 	beq	r2,r9,8016d58 <__eqdf2+0x6c>
 8016d1c:	0241ffc4 	movi	r9,2047
 8016d20:	1a400326 	beq	r3,r9,8016d30 <__eqdf2+0x44>
 8016d24:	10c00526 	beq	r2,r3,8016d3c <__eqdf2+0x50>
 8016d28:	00800044 	movi	r2,1
 8016d2c:	f800283a 	ret
 8016d30:	4192b03a 	or	r9,r8,r6
 8016d34:	483ffc1e 	bne	r9,zero,8016d28 <__alt_data_end+0xf8016d28>
 8016d38:	10fffb1e 	bne	r2,r3,8016d28 <__alt_data_end+0xf8016d28>
 8016d3c:	523ffa1e 	bne	r10,r8,8016d28 <__alt_data_end+0xf8016d28>
 8016d40:	21bff91e 	bne	r4,r6,8016d28 <__alt_data_end+0xf8016d28>
 8016d44:	29c00826 	beq	r5,r7,8016d68 <__eqdf2+0x7c>
 8016d48:	103ff71e 	bne	r2,zero,8016d28 <__alt_data_end+0xf8016d28>
 8016d4c:	5104b03a 	or	r2,r10,r4
 8016d50:	1004c03a 	cmpne	r2,r2,zero
 8016d54:	f800283a 	ret
 8016d58:	5112b03a 	or	r9,r10,r4
 8016d5c:	483fef26 	beq	r9,zero,8016d1c <__alt_data_end+0xf8016d1c>
 8016d60:	00800044 	movi	r2,1
 8016d64:	f800283a 	ret
 8016d68:	0005883a 	mov	r2,zero
 8016d6c:	f800283a 	ret

08016d70 <__gedf2>:
 8016d70:	2804d53a 	srli	r2,r5,20
 8016d74:	3806d53a 	srli	r3,r7,20
 8016d78:	02000434 	movhi	r8,16
 8016d7c:	423fffc4 	addi	r8,r8,-1
 8016d80:	0241ffc4 	movi	r9,2047
 8016d84:	1081ffcc 	andi	r2,r2,2047
 8016d88:	2a14703a 	and	r10,r5,r8
 8016d8c:	1a46703a 	and	r3,r3,r9
 8016d90:	3a10703a 	and	r8,r7,r8
 8016d94:	280ad7fa 	srli	r5,r5,31
 8016d98:	380ed7fa 	srli	r7,r7,31
 8016d9c:	12400b26 	beq	r2,r9,8016dcc <__gedf2+0x5c>
 8016da0:	1a401626 	beq	r3,r9,8016dfc <__gedf2+0x8c>
 8016da4:	10000c1e 	bne	r2,zero,8016dd8 <__gedf2+0x68>
 8016da8:	5112b03a 	or	r9,r10,r4
 8016dac:	4813003a 	cmpeq	r9,r9,zero
 8016db0:	4817883a 	mov	r11,r9
 8016db4:	18000c1e 	bne	r3,zero,8016de8 <__gedf2+0x78>
 8016db8:	4198b03a 	or	r12,r8,r6
 8016dbc:	60000a1e 	bne	r12,zero,8016de8 <__gedf2+0x78>
 8016dc0:	48001326 	beq	r9,zero,8016e10 <__gedf2+0xa0>
 8016dc4:	0005883a 	mov	r2,zero
 8016dc8:	f800283a 	ret
 8016dcc:	5112b03a 	or	r9,r10,r4
 8016dd0:	4800191e 	bne	r9,zero,8016e38 <__gedf2+0xc8>
 8016dd4:	18800926 	beq	r3,r2,8016dfc <__gedf2+0x8c>
 8016dd8:	18000b1e 	bne	r3,zero,8016e08 <__gedf2+0x98>
 8016ddc:	4192b03a 	or	r9,r8,r6
 8016de0:	0017883a 	mov	r11,zero
 8016de4:	48000a26 	beq	r9,zero,8016e10 <__gedf2+0xa0>
 8016de8:	39c03fcc 	andi	r7,r7,255
 8016dec:	58000726 	beq	r11,zero,8016e0c <__gedf2+0x9c>
 8016df0:	3800081e 	bne	r7,zero,8016e14 <__gedf2+0xa4>
 8016df4:	00bfffc4 	movi	r2,-1
 8016df8:	f800283a 	ret
 8016dfc:	4192b03a 	or	r9,r8,r6
 8016e00:	48000d1e 	bne	r9,zero,8016e38 <__gedf2+0xc8>
 8016e04:	103fe826 	beq	r2,zero,8016da8 <__alt_data_end+0xf8016da8>
 8016e08:	39c03fcc 	andi	r7,r7,255
 8016e0c:	29c00326 	beq	r5,r7,8016e1c <__gedf2+0xac>
 8016e10:	283ff81e 	bne	r5,zero,8016df4 <__alt_data_end+0xf8016df4>
 8016e14:	00800044 	movi	r2,1
 8016e18:	f800283a 	ret
 8016e1c:	18bffc16 	blt	r3,r2,8016e10 <__alt_data_end+0xf8016e10>
 8016e20:	10c00316 	blt	r2,r3,8016e30 <__gedf2+0xc0>
 8016e24:	42bffa36 	bltu	r8,r10,8016e10 <__alt_data_end+0xf8016e10>
 8016e28:	52000526 	beq	r10,r8,8016e40 <__gedf2+0xd0>
 8016e2c:	523fe52e 	bgeu	r10,r8,8016dc4 <__alt_data_end+0xf8016dc4>
 8016e30:	283ff026 	beq	r5,zero,8016df4 <__alt_data_end+0xf8016df4>
 8016e34:	003ff706 	br	8016e14 <__alt_data_end+0xf8016e14>
 8016e38:	00bfff84 	movi	r2,-2
 8016e3c:	f800283a 	ret
 8016e40:	313ff336 	bltu	r6,r4,8016e10 <__alt_data_end+0xf8016e10>
 8016e44:	21bfdf2e 	bgeu	r4,r6,8016dc4 <__alt_data_end+0xf8016dc4>
 8016e48:	283fea26 	beq	r5,zero,8016df4 <__alt_data_end+0xf8016df4>
 8016e4c:	003ff106 	br	8016e14 <__alt_data_end+0xf8016e14>

08016e50 <__ledf2>:
 8016e50:	2804d53a 	srli	r2,r5,20
 8016e54:	3810d53a 	srli	r8,r7,20
 8016e58:	00c00434 	movhi	r3,16
 8016e5c:	18ffffc4 	addi	r3,r3,-1
 8016e60:	0241ffc4 	movi	r9,2047
 8016e64:	1081ffcc 	andi	r2,r2,2047
 8016e68:	28d4703a 	and	r10,r5,r3
 8016e6c:	4250703a 	and	r8,r8,r9
 8016e70:	38c6703a 	and	r3,r7,r3
 8016e74:	280ad7fa 	srli	r5,r5,31
 8016e78:	380ed7fa 	srli	r7,r7,31
 8016e7c:	12400b26 	beq	r2,r9,8016eac <__ledf2+0x5c>
 8016e80:	42401926 	beq	r8,r9,8016ee8 <__ledf2+0x98>
 8016e84:	10000c1e 	bne	r2,zero,8016eb8 <__ledf2+0x68>
 8016e88:	5112b03a 	or	r9,r10,r4
 8016e8c:	4813003a 	cmpeq	r9,r9,zero
 8016e90:	4817883a 	mov	r11,r9
 8016e94:	40000f26 	beq	r8,zero,8016ed4 <__ledf2+0x84>
 8016e98:	39c03fcc 	andi	r7,r7,255
 8016e9c:	58001826 	beq	r11,zero,8016f00 <__ledf2+0xb0>
 8016ea0:	38000a1e 	bne	r7,zero,8016ecc <__ledf2+0x7c>
 8016ea4:	00bfffc4 	movi	r2,-1
 8016ea8:	f800283a 	ret
 8016eac:	5112b03a 	or	r9,r10,r4
 8016eb0:	48000f1e 	bne	r9,zero,8016ef0 <__ledf2+0xa0>
 8016eb4:	40800c26 	beq	r8,r2,8016ee8 <__ledf2+0x98>
 8016eb8:	4000101e 	bne	r8,zero,8016efc <__ledf2+0xac>
 8016ebc:	1992b03a 	or	r9,r3,r6
 8016ec0:	0017883a 	mov	r11,zero
 8016ec4:	483ff41e 	bne	r9,zero,8016e98 <__alt_data_end+0xf8016e98>
 8016ec8:	283ff61e 	bne	r5,zero,8016ea4 <__alt_data_end+0xf8016ea4>
 8016ecc:	00800044 	movi	r2,1
 8016ed0:	f800283a 	ret
 8016ed4:	1998b03a 	or	r12,r3,r6
 8016ed8:	603fef1e 	bne	r12,zero,8016e98 <__alt_data_end+0xf8016e98>
 8016edc:	483ffa26 	beq	r9,zero,8016ec8 <__alt_data_end+0xf8016ec8>
 8016ee0:	0005883a 	mov	r2,zero
 8016ee4:	f800283a 	ret
 8016ee8:	1992b03a 	or	r9,r3,r6
 8016eec:	48000226 	beq	r9,zero,8016ef8 <__ledf2+0xa8>
 8016ef0:	00800084 	movi	r2,2
 8016ef4:	f800283a 	ret
 8016ef8:	103fe326 	beq	r2,zero,8016e88 <__alt_data_end+0xf8016e88>
 8016efc:	39c03fcc 	andi	r7,r7,255
 8016f00:	29fff11e 	bne	r5,r7,8016ec8 <__alt_data_end+0xf8016ec8>
 8016f04:	40bff016 	blt	r8,r2,8016ec8 <__alt_data_end+0xf8016ec8>
 8016f08:	12000316 	blt	r2,r8,8016f18 <__ledf2+0xc8>
 8016f0c:	1abfee36 	bltu	r3,r10,8016ec8 <__alt_data_end+0xf8016ec8>
 8016f10:	50c00326 	beq	r10,r3,8016f20 <__ledf2+0xd0>
 8016f14:	50fff22e 	bgeu	r10,r3,8016ee0 <__alt_data_end+0xf8016ee0>
 8016f18:	283fe226 	beq	r5,zero,8016ea4 <__alt_data_end+0xf8016ea4>
 8016f1c:	003feb06 	br	8016ecc <__alt_data_end+0xf8016ecc>
 8016f20:	313fe936 	bltu	r6,r4,8016ec8 <__alt_data_end+0xf8016ec8>
 8016f24:	21bfee2e 	bgeu	r4,r6,8016ee0 <__alt_data_end+0xf8016ee0>
 8016f28:	283fde26 	beq	r5,zero,8016ea4 <__alt_data_end+0xf8016ea4>
 8016f2c:	003fe706 	br	8016ecc <__alt_data_end+0xf8016ecc>

08016f30 <__muldf3>:
 8016f30:	defff204 	addi	sp,sp,-56
 8016f34:	2804d53a 	srli	r2,r5,20
 8016f38:	dd800a15 	stw	r22,40(sp)
 8016f3c:	282cd7fa 	srli	r22,r5,31
 8016f40:	dc000415 	stw	r16,16(sp)
 8016f44:	04000434 	movhi	r16,16
 8016f48:	df000c15 	stw	fp,48(sp)
 8016f4c:	dd000815 	stw	r20,32(sp)
 8016f50:	dcc00715 	stw	r19,28(sp)
 8016f54:	dc800615 	stw	r18,24(sp)
 8016f58:	dc400515 	stw	r17,20(sp)
 8016f5c:	843fffc4 	addi	r16,r16,-1
 8016f60:	dfc00d15 	stw	ra,52(sp)
 8016f64:	ddc00b15 	stw	r23,44(sp)
 8016f68:	dd400915 	stw	r21,36(sp)
 8016f6c:	1501ffcc 	andi	r20,r2,2047
 8016f70:	2023883a 	mov	r17,r4
 8016f74:	2025883a 	mov	r18,r4
 8016f78:	2c20703a 	and	r16,r5,r16
 8016f7c:	b027883a 	mov	r19,r22
 8016f80:	b7003fcc 	andi	fp,r22,255
 8016f84:	a0005926 	beq	r20,zero,80170ec <__muldf3+0x1bc>
 8016f88:	0081ffc4 	movi	r2,2047
 8016f8c:	a0803426 	beq	r20,r2,8017060 <__muldf3+0x130>
 8016f90:	84000434 	orhi	r16,r16,16
 8016f94:	2004d77a 	srli	r2,r4,29
 8016f98:	802090fa 	slli	r16,r16,3
 8016f9c:	202490fa 	slli	r18,r4,3
 8016fa0:	a53f0044 	addi	r20,r20,-1023
 8016fa4:	80a0b03a 	or	r16,r16,r2
 8016fa8:	002b883a 	mov	r21,zero
 8016fac:	0015883a 	mov	r10,zero
 8016fb0:	3812d53a 	srli	r9,r7,20
 8016fb4:	3806d7fa 	srli	r3,r7,31
 8016fb8:	02000434 	movhi	r8,16
 8016fbc:	423fffc4 	addi	r8,r8,-1
 8016fc0:	4941ffcc 	andi	r5,r9,2047
 8016fc4:	302f883a 	mov	r23,r6
 8016fc8:	3a22703a 	and	r17,r7,r8
 8016fcc:	1ac03fcc 	andi	r11,r3,255
 8016fd0:	28006226 	beq	r5,zero,801715c <__muldf3+0x22c>
 8016fd4:	0081ffc4 	movi	r2,2047
 8016fd8:	28805a26 	beq	r5,r2,8017144 <__muldf3+0x214>
 8016fdc:	8a000434 	orhi	r8,r17,16
 8016fe0:	3004d77a 	srli	r2,r6,29
 8016fe4:	401090fa 	slli	r8,r8,3
 8016fe8:	302e90fa 	slli	r23,r6,3
 8016fec:	297f0044 	addi	r5,r5,-1023
 8016ff0:	40a2b03a 	or	r17,r8,r2
 8016ff4:	0013883a 	mov	r9,zero
 8016ff8:	4d4cb03a 	or	r6,r9,r21
 8016ffc:	300c90ba 	slli	r6,r6,2
 8017000:	02020074 	movhi	r8,2049
 8017004:	421c0804 	addi	r8,r8,28704
 8017008:	320d883a 	add	r6,r6,r8
 801700c:	31800017 	ldw	r6,0(r6)
 8017010:	a14b883a 	add	r5,r20,r5
 8017014:	1dacf03a 	xor	r22,r3,r22
 8017018:	2b000044 	addi	r12,r5,1
 801701c:	3000683a 	jmp	r6
 8017020:	0801725c 	xori	zero,at,1481
 8017024:	08017248 	cmpgei	zero,at,1481
 8017028:	08017248 	cmpgei	zero,at,1481
 801702c:	08017234 	orhi	zero,at,1480
 8017030:	0801707c 	xorhi	zero,at,1473
 8017034:	0801707c 	xorhi	zero,at,1473
 8017038:	0801721c 	xori	zero,at,1480
 801703c:	08017234 	orhi	zero,at,1480
 8017040:	0801707c 	xorhi	zero,at,1473
 8017044:	0801721c 	xori	zero,at,1480
 8017048:	0801707c 	xorhi	zero,at,1473
 801704c:	08017234 	orhi	zero,at,1480
 8017050:	08017080 	call	801708 <__alt_mem_epcs+0x801708>
 8017054:	08017080 	call	801708 <__alt_mem_epcs+0x801708>
 8017058:	08017080 	call	801708 <__alt_mem_epcs+0x801708>
 801705c:	08017458 	cmpnei	zero,at,1489
 8017060:	8104b03a 	or	r2,r16,r4
 8017064:	10006a1e 	bne	r2,zero,8017210 <__muldf3+0x2e0>
 8017068:	05400204 	movi	r21,8
 801706c:	0021883a 	mov	r16,zero
 8017070:	0025883a 	mov	r18,zero
 8017074:	02800084 	movi	r10,2
 8017078:	003fcd06 	br	8016fb0 <__alt_data_end+0xf8016fb0>
 801707c:	b039883a 	mov	fp,r22
 8017080:	00800084 	movi	r2,2
 8017084:	50804e1e 	bne	r10,r2,80171c0 <__muldf3+0x290>
 8017088:	e4c0004c 	andi	r19,fp,1
 801708c:	0101ffc4 	movi	r4,2047
 8017090:	0021883a 	mov	r16,zero
 8017094:	0025883a 	mov	r18,zero
 8017098:	2008953a 	slli	r4,r4,20
 801709c:	98c03fcc 	andi	r3,r19,255
 80170a0:	01400434 	movhi	r5,16
 80170a4:	297fffc4 	addi	r5,r5,-1
 80170a8:	180697fa 	slli	r3,r3,31
 80170ac:	8160703a 	and	r16,r16,r5
 80170b0:	8120b03a 	or	r16,r16,r4
 80170b4:	80c6b03a 	or	r3,r16,r3
 80170b8:	9005883a 	mov	r2,r18
 80170bc:	dfc00d17 	ldw	ra,52(sp)
 80170c0:	df000c17 	ldw	fp,48(sp)
 80170c4:	ddc00b17 	ldw	r23,44(sp)
 80170c8:	dd800a17 	ldw	r22,40(sp)
 80170cc:	dd400917 	ldw	r21,36(sp)
 80170d0:	dd000817 	ldw	r20,32(sp)
 80170d4:	dcc00717 	ldw	r19,28(sp)
 80170d8:	dc800617 	ldw	r18,24(sp)
 80170dc:	dc400517 	ldw	r17,20(sp)
 80170e0:	dc000417 	ldw	r16,16(sp)
 80170e4:	dec00e04 	addi	sp,sp,56
 80170e8:	f800283a 	ret
 80170ec:	8104b03a 	or	r2,r16,r4
 80170f0:	10004226 	beq	r2,zero,80171fc <__muldf3+0x2cc>
 80170f4:	8000f926 	beq	r16,zero,80174dc <__muldf3+0x5ac>
 80170f8:	8009883a 	mov	r4,r16
 80170fc:	d9800315 	stw	r6,12(sp)
 8017100:	d9c00015 	stw	r7,0(sp)
 8017104:	80182b80 	call	80182b8 <__clzsi2>
 8017108:	d9800317 	ldw	r6,12(sp)
 801710c:	d9c00017 	ldw	r7,0(sp)
 8017110:	1007883a 	mov	r3,r2
 8017114:	01000a04 	movi	r4,40
 8017118:	18bffe04 	addi	r2,r3,-8
 801711c:	20c9c83a 	sub	r4,r4,r3
 8017120:	80a0983a 	sll	r16,r16,r2
 8017124:	8908d83a 	srl	r4,r17,r4
 8017128:	88a4983a 	sll	r18,r17,r2
 801712c:	2420b03a 	or	r16,r4,r16
 8017130:	017f0344 	movi	r5,-1011
 8017134:	28e9c83a 	sub	r20,r5,r3
 8017138:	002b883a 	mov	r21,zero
 801713c:	0015883a 	mov	r10,zero
 8017140:	003f9b06 	br	8016fb0 <__alt_data_end+0xf8016fb0>
 8017144:	8984b03a 	or	r2,r17,r6
 8017148:	10002a1e 	bne	r2,zero,80171f4 <__muldf3+0x2c4>
 801714c:	0023883a 	mov	r17,zero
 8017150:	002f883a 	mov	r23,zero
 8017154:	02400084 	movi	r9,2
 8017158:	003fa706 	br	8016ff8 <__alt_data_end+0xf8016ff8>
 801715c:	8984b03a 	or	r2,r17,r6
 8017160:	10002026 	beq	r2,zero,80171e4 <__muldf3+0x2b4>
 8017164:	8800cc26 	beq	r17,zero,8017498 <__muldf3+0x568>
 8017168:	8809883a 	mov	r4,r17
 801716c:	d8c00215 	stw	r3,8(sp)
 8017170:	d9800315 	stw	r6,12(sp)
 8017174:	da800015 	stw	r10,0(sp)
 8017178:	dac00115 	stw	r11,4(sp)
 801717c:	80182b80 	call	80182b8 <__clzsi2>
 8017180:	d8c00217 	ldw	r3,8(sp)
 8017184:	d9800317 	ldw	r6,12(sp)
 8017188:	da800017 	ldw	r10,0(sp)
 801718c:	dac00117 	ldw	r11,4(sp)
 8017190:	1009883a 	mov	r4,r2
 8017194:	01400a04 	movi	r5,40
 8017198:	25fffe04 	addi	r23,r4,-8
 801719c:	290bc83a 	sub	r5,r5,r4
 80171a0:	8dd0983a 	sll	r8,r17,r23
 80171a4:	314ad83a 	srl	r5,r6,r5
 80171a8:	35ee983a 	sll	r23,r6,r23
 80171ac:	2a22b03a 	or	r17,r5,r8
 80171b0:	017f0344 	movi	r5,-1011
 80171b4:	290bc83a 	sub	r5,r5,r4
 80171b8:	0013883a 	mov	r9,zero
 80171bc:	003f8e06 	br	8016ff8 <__alt_data_end+0xf8016ff8>
 80171c0:	008000c4 	movi	r2,3
 80171c4:	50811d26 	beq	r10,r2,801763c <__muldf3+0x70c>
 80171c8:	00800044 	movi	r2,1
 80171cc:	5080e01e 	bne	r10,r2,8017550 <__muldf3+0x620>
 80171d0:	e0a6703a 	and	r19,fp,r2
 80171d4:	0009883a 	mov	r4,zero
 80171d8:	0021883a 	mov	r16,zero
 80171dc:	0025883a 	mov	r18,zero
 80171e0:	003fad06 	br	8017098 <__alt_data_end+0xf8017098>
 80171e4:	0023883a 	mov	r17,zero
 80171e8:	002f883a 	mov	r23,zero
 80171ec:	02400044 	movi	r9,1
 80171f0:	003f8106 	br	8016ff8 <__alt_data_end+0xf8016ff8>
 80171f4:	024000c4 	movi	r9,3
 80171f8:	003f7f06 	br	8016ff8 <__alt_data_end+0xf8016ff8>
 80171fc:	05400104 	movi	r21,4
 8017200:	0021883a 	mov	r16,zero
 8017204:	0025883a 	mov	r18,zero
 8017208:	02800044 	movi	r10,1
 801720c:	003f6806 	br	8016fb0 <__alt_data_end+0xf8016fb0>
 8017210:	05400304 	movi	r21,12
 8017214:	028000c4 	movi	r10,3
 8017218:	003f6506 	br	8016fb0 <__alt_data_end+0xf8016fb0>
 801721c:	04000434 	movhi	r16,16
 8017220:	0027883a 	mov	r19,zero
 8017224:	843fffc4 	addi	r16,r16,-1
 8017228:	04bfffc4 	movi	r18,-1
 801722c:	0101ffc4 	movi	r4,2047
 8017230:	003f9906 	br	8017098 <__alt_data_end+0xf8017098>
 8017234:	8821883a 	mov	r16,r17
 8017238:	b825883a 	mov	r18,r23
 801723c:	5839883a 	mov	fp,r11
 8017240:	4815883a 	mov	r10,r9
 8017244:	003f8e06 	br	8017080 <__alt_data_end+0xf8017080>
 8017248:	8821883a 	mov	r16,r17
 801724c:	b825883a 	mov	r18,r23
 8017250:	b039883a 	mov	fp,r22
 8017254:	4815883a 	mov	r10,r9
 8017258:	003f8906 	br	8017080 <__alt_data_end+0xf8017080>
 801725c:	b80cd43a 	srli	r6,r23,16
 8017260:	9006d43a 	srli	r3,r18,16
 8017264:	90bfffcc 	andi	r2,r18,65535
 8017268:	bdffffcc 	andi	r23,r23,65535
 801726c:	b891383a 	mul	r8,r23,r2
 8017270:	b8c9383a 	mul	r4,r23,r3
 8017274:	309b383a 	mul	r13,r6,r2
 8017278:	400ed43a 	srli	r7,r8,16
 801727c:	30df383a 	mul	r15,r6,r3
 8017280:	235b883a 	add	r13,r4,r13
 8017284:	69db883a 	add	r13,r13,r7
 8017288:	6900022e 	bgeu	r13,r4,8017294 <__muldf3+0x364>
 801728c:	01000074 	movhi	r4,1
 8017290:	791f883a 	add	r15,r15,r4
 8017294:	8828d43a 	srli	r20,r17,16
 8017298:	8c7fffcc 	andi	r17,r17,65535
 801729c:	888f383a 	mul	r7,r17,r2
 80172a0:	88d3383a 	mul	r9,r17,r3
 80172a4:	a0a5383a 	mul	r18,r20,r2
 80172a8:	3816d43a 	srli	r11,r7,16
 80172ac:	6814943a 	slli	r10,r13,16
 80172b0:	4ca5883a 	add	r18,r9,r18
 80172b4:	423fffcc 	andi	r8,r8,65535
 80172b8:	92e5883a 	add	r18,r18,r11
 80172bc:	6808d43a 	srli	r4,r13,16
 80172c0:	5215883a 	add	r10,r10,r8
 80172c4:	a0c7383a 	mul	r3,r20,r3
 80172c8:	9240022e 	bgeu	r18,r9,80172d4 <__muldf3+0x3a4>
 80172cc:	00800074 	movhi	r2,1
 80172d0:	1887883a 	add	r3,r3,r2
 80172d4:	802ad43a 	srli	r21,r16,16
 80172d8:	80bfffcc 	andi	r2,r16,65535
 80172dc:	b893383a 	mul	r9,r23,r2
 80172e0:	3091383a 	mul	r8,r6,r2
 80172e4:	bd6f383a 	mul	r23,r23,r21
 80172e8:	9026943a 	slli	r19,r18,16
 80172ec:	481ad43a 	srli	r13,r9,16
 80172f0:	9024d43a 	srli	r18,r18,16
 80172f4:	39ffffcc 	andi	r7,r7,65535
 80172f8:	ba11883a 	add	r8,r23,r8
 80172fc:	99e7883a 	add	r19,r19,r7
 8017300:	4351883a 	add	r8,r8,r13
 8017304:	1c97883a 	add	r11,r3,r18
 8017308:	354d383a 	mul	r6,r6,r21
 801730c:	9925883a 	add	r18,r19,r4
 8017310:	45c0022e 	bgeu	r8,r23,801731c <__muldf3+0x3ec>
 8017314:	00c00074 	movhi	r3,1
 8017318:	30cd883a 	add	r6,r6,r3
 801731c:	8889383a 	mul	r4,r17,r2
 8017320:	8d63383a 	mul	r17,r17,r21
 8017324:	a085383a 	mul	r2,r20,r2
 8017328:	200ed43a 	srli	r7,r4,16
 801732c:	401cd43a 	srli	r14,r8,16
 8017330:	401a943a 	slli	r13,r8,16
 8017334:	8885883a 	add	r2,r17,r2
 8017338:	4a3fffcc 	andi	r8,r9,65535
 801733c:	11c5883a 	add	r2,r2,r7
 8017340:	339d883a 	add	r14,r6,r14
 8017344:	6a11883a 	add	r8,r13,r8
 8017348:	a561383a 	mul	r16,r20,r21
 801734c:	1440022e 	bgeu	r2,r17,8017358 <__muldf3+0x428>
 8017350:	00c00074 	movhi	r3,1
 8017354:	80e1883a 	add	r16,r16,r3
 8017358:	1006943a 	slli	r3,r2,16
 801735c:	213fffcc 	andi	r4,r4,65535
 8017360:	93db883a 	add	r13,r18,r15
 8017364:	1909883a 	add	r4,r3,r4
 8017368:	22c7883a 	add	r3,r4,r11
 801736c:	6cd3803a 	cmpltu	r9,r13,r19
 8017370:	6a09883a 	add	r4,r13,r8
 8017374:	1a5b883a 	add	r13,r3,r9
 8017378:	2211803a 	cmpltu	r8,r4,r8
 801737c:	734d883a 	add	r6,r14,r13
 8017380:	100ed43a 	srli	r7,r2,16
 8017384:	6a53803a 	cmpltu	r9,r13,r9
 8017388:	3205883a 	add	r2,r6,r8
 801738c:	1ac7803a 	cmpltu	r3,r3,r11
 8017390:	1211803a 	cmpltu	r8,r2,r8
 8017394:	48c6b03a 	or	r3,r9,r3
 8017398:	338d803a 	cmpltu	r6,r6,r14
 801739c:	19c7883a 	add	r3,r3,r7
 80173a0:	418cb03a 	or	r6,r8,r6
 80173a4:	1987883a 	add	r3,r3,r6
 80173a8:	2024927a 	slli	r18,r4,9
 80173ac:	1c07883a 	add	r3,r3,r16
 80173b0:	1806927a 	slli	r3,r3,9
 80173b4:	1020d5fa 	srli	r16,r2,23
 80173b8:	2008d5fa 	srli	r4,r4,23
 80173bc:	9294b03a 	or	r10,r18,r10
 80173c0:	1004927a 	slli	r2,r2,9
 80173c4:	5024c03a 	cmpne	r18,r10,zero
 80173c8:	1c20b03a 	or	r16,r3,r16
 80173cc:	9108b03a 	or	r4,r18,r4
 80173d0:	80c0402c 	andhi	r3,r16,256
 80173d4:	20a4b03a 	or	r18,r4,r2
 80173d8:	18000726 	beq	r3,zero,80173f8 <__muldf3+0x4c8>
 80173dc:	9006d07a 	srli	r3,r18,1
 80173e0:	800897fa 	slli	r4,r16,31
 80173e4:	9080004c 	andi	r2,r18,1
 80173e8:	8020d07a 	srli	r16,r16,1
 80173ec:	10c4b03a 	or	r2,r2,r3
 80173f0:	1124b03a 	or	r18,r2,r4
 80173f4:	600b883a 	mov	r5,r12
 80173f8:	2900ffc4 	addi	r4,r5,1023
 80173fc:	01004b0e 	bge	zero,r4,801752c <__muldf3+0x5fc>
 8017400:	908001cc 	andi	r2,r18,7
 8017404:	10000726 	beq	r2,zero,8017424 <__muldf3+0x4f4>
 8017408:	90c003cc 	andi	r3,r18,15
 801740c:	00800104 	movi	r2,4
 8017410:	18800426 	beq	r3,r2,8017424 <__muldf3+0x4f4>
 8017414:	9087883a 	add	r3,r18,r2
 8017418:	1c85803a 	cmpltu	r2,r3,r18
 801741c:	80a1883a 	add	r16,r16,r2
 8017420:	1825883a 	mov	r18,r3
 8017424:	8080402c 	andhi	r2,r16,256
 8017428:	10000426 	beq	r2,zero,801743c <__muldf3+0x50c>
 801742c:	00bfc034 	movhi	r2,65280
 8017430:	10bfffc4 	addi	r2,r2,-1
 8017434:	29010004 	addi	r4,r5,1024
 8017438:	80a0703a 	and	r16,r16,r2
 801743c:	0081ff84 	movi	r2,2046
 8017440:	1100320e 	bge	r2,r4,801750c <__muldf3+0x5dc>
 8017444:	b4c0004c 	andi	r19,r22,1
 8017448:	0101ffc4 	movi	r4,2047
 801744c:	0021883a 	mov	r16,zero
 8017450:	0025883a 	mov	r18,zero
 8017454:	003f1006 	br	8017098 <__alt_data_end+0xf8017098>
 8017458:	8080022c 	andhi	r2,r16,8
 801745c:	10000926 	beq	r2,zero,8017484 <__muldf3+0x554>
 8017460:	8880022c 	andhi	r2,r17,8
 8017464:	1000071e 	bne	r2,zero,8017484 <__muldf3+0x554>
 8017468:	00800434 	movhi	r2,16
 801746c:	8c000234 	orhi	r16,r17,8
 8017470:	10bfffc4 	addi	r2,r2,-1
 8017474:	1827883a 	mov	r19,r3
 8017478:	80a0703a 	and	r16,r16,r2
 801747c:	b825883a 	mov	r18,r23
 8017480:	003f6a06 	br	801722c <__alt_data_end+0xf801722c>
 8017484:	00800434 	movhi	r2,16
 8017488:	84000234 	orhi	r16,r16,8
 801748c:	10bfffc4 	addi	r2,r2,-1
 8017490:	80a0703a 	and	r16,r16,r2
 8017494:	003f6506 	br	801722c <__alt_data_end+0xf801722c>
 8017498:	3009883a 	mov	r4,r6
 801749c:	d8c00215 	stw	r3,8(sp)
 80174a0:	d9800315 	stw	r6,12(sp)
 80174a4:	da800015 	stw	r10,0(sp)
 80174a8:	dac00115 	stw	r11,4(sp)
 80174ac:	80182b80 	call	80182b8 <__clzsi2>
 80174b0:	11000804 	addi	r4,r2,32
 80174b4:	014009c4 	movi	r5,39
 80174b8:	d8c00217 	ldw	r3,8(sp)
 80174bc:	d9800317 	ldw	r6,12(sp)
 80174c0:	da800017 	ldw	r10,0(sp)
 80174c4:	dac00117 	ldw	r11,4(sp)
 80174c8:	293f320e 	bge	r5,r4,8017194 <__alt_data_end+0xf8017194>
 80174cc:	10bffe04 	addi	r2,r2,-8
 80174d0:	b8a2983a 	sll	r17,r23,r2
 80174d4:	002f883a 	mov	r23,zero
 80174d8:	003f3506 	br	80171b0 <__alt_data_end+0xf80171b0>
 80174dc:	d9800315 	stw	r6,12(sp)
 80174e0:	d9c00015 	stw	r7,0(sp)
 80174e4:	80182b80 	call	80182b8 <__clzsi2>
 80174e8:	10c00804 	addi	r3,r2,32
 80174ec:	010009c4 	movi	r4,39
 80174f0:	d9800317 	ldw	r6,12(sp)
 80174f4:	d9c00017 	ldw	r7,0(sp)
 80174f8:	20ff060e 	bge	r4,r3,8017114 <__alt_data_end+0xf8017114>
 80174fc:	10bffe04 	addi	r2,r2,-8
 8017500:	88a0983a 	sll	r16,r17,r2
 8017504:	0025883a 	mov	r18,zero
 8017508:	003f0906 	br	8017130 <__alt_data_end+0xf8017130>
 801750c:	9004d0fa 	srli	r2,r18,3
 8017510:	8024977a 	slli	r18,r16,29
 8017514:	8020927a 	slli	r16,r16,9
 8017518:	2101ffcc 	andi	r4,r4,2047
 801751c:	90a4b03a 	or	r18,r18,r2
 8017520:	8020d33a 	srli	r16,r16,12
 8017524:	b4c0004c 	andi	r19,r22,1
 8017528:	003edb06 	br	8017098 <__alt_data_end+0xf8017098>
 801752c:	00ff0084 	movi	r3,-1022
 8017530:	1947c83a 	sub	r3,r3,r5
 8017534:	00800e04 	movi	r2,56
 8017538:	10c0080e 	bge	r2,r3,801755c <__muldf3+0x62c>
 801753c:	b4c0004c 	andi	r19,r22,1
 8017540:	0009883a 	mov	r4,zero
 8017544:	0021883a 	mov	r16,zero
 8017548:	0025883a 	mov	r18,zero
 801754c:	003ed206 	br	8017098 <__alt_data_end+0xf8017098>
 8017550:	600b883a 	mov	r5,r12
 8017554:	e02d883a 	mov	r22,fp
 8017558:	003fa706 	br	80173f8 <__alt_data_end+0xf80173f8>
 801755c:	008007c4 	movi	r2,31
 8017560:	10c01816 	blt	r2,r3,80175c4 <__muldf3+0x694>
 8017564:	29410784 	addi	r5,r5,1054
 8017568:	8144983a 	sll	r2,r16,r5
 801756c:	90c8d83a 	srl	r4,r18,r3
 8017570:	914a983a 	sll	r5,r18,r5
 8017574:	80c6d83a 	srl	r3,r16,r3
 8017578:	2088b03a 	or	r4,r4,r2
 801757c:	2804c03a 	cmpne	r2,r5,zero
 8017580:	2084b03a 	or	r2,r4,r2
 8017584:	110001cc 	andi	r4,r2,7
 8017588:	20000726 	beq	r4,zero,80175a8 <__muldf3+0x678>
 801758c:	114003cc 	andi	r5,r2,15
 8017590:	01000104 	movi	r4,4
 8017594:	29000426 	beq	r5,r4,80175a8 <__muldf3+0x678>
 8017598:	11000104 	addi	r4,r2,4
 801759c:	2085803a 	cmpltu	r2,r4,r2
 80175a0:	1887883a 	add	r3,r3,r2
 80175a4:	2005883a 	mov	r2,r4
 80175a8:	1900202c 	andhi	r4,r3,128
 80175ac:	20001826 	beq	r4,zero,8017610 <__muldf3+0x6e0>
 80175b0:	b4c0004c 	andi	r19,r22,1
 80175b4:	01000044 	movi	r4,1
 80175b8:	0021883a 	mov	r16,zero
 80175bc:	0025883a 	mov	r18,zero
 80175c0:	003eb506 	br	8017098 <__alt_data_end+0xf8017098>
 80175c4:	00bef884 	movi	r2,-1054
 80175c8:	1145c83a 	sub	r2,r2,r5
 80175cc:	8088d83a 	srl	r4,r16,r2
 80175d0:	00800804 	movi	r2,32
 80175d4:	18801726 	beq	r3,r2,8017634 <__muldf3+0x704>
 80175d8:	28810f84 	addi	r2,r5,1086
 80175dc:	8084983a 	sll	r2,r16,r2
 80175e0:	1484b03a 	or	r2,r2,r18
 80175e4:	1004c03a 	cmpne	r2,r2,zero
 80175e8:	1104b03a 	or	r2,r2,r4
 80175ec:	10c001cc 	andi	r3,r2,7
 80175f0:	18000b1e 	bne	r3,zero,8017620 <__muldf3+0x6f0>
 80175f4:	0021883a 	mov	r16,zero
 80175f8:	1004d0fa 	srli	r2,r2,3
 80175fc:	b4c0004c 	andi	r19,r22,1
 8017600:	0009883a 	mov	r4,zero
 8017604:	10e4b03a 	or	r18,r2,r3
 8017608:	003ea306 	br	8017098 <__alt_data_end+0xf8017098>
 801760c:	0007883a 	mov	r3,zero
 8017610:	1820927a 	slli	r16,r3,9
 8017614:	1806977a 	slli	r3,r3,29
 8017618:	8020d33a 	srli	r16,r16,12
 801761c:	003ff606 	br	80175f8 <__alt_data_end+0xf80175f8>
 8017620:	110003cc 	andi	r4,r2,15
 8017624:	00c00104 	movi	r3,4
 8017628:	20fff826 	beq	r4,r3,801760c <__alt_data_end+0xf801760c>
 801762c:	0007883a 	mov	r3,zero
 8017630:	003fd906 	br	8017598 <__alt_data_end+0xf8017598>
 8017634:	0005883a 	mov	r2,zero
 8017638:	003fe906 	br	80175e0 <__alt_data_end+0xf80175e0>
 801763c:	00800434 	movhi	r2,16
 8017640:	84000234 	orhi	r16,r16,8
 8017644:	10bfffc4 	addi	r2,r2,-1
 8017648:	e4c0004c 	andi	r19,fp,1
 801764c:	80a0703a 	and	r16,r16,r2
 8017650:	003ef606 	br	801722c <__alt_data_end+0xf801722c>

08017654 <__subdf3>:
 8017654:	00c00434 	movhi	r3,16
 8017658:	18ffffc4 	addi	r3,r3,-1
 801765c:	defffb04 	addi	sp,sp,-20
 8017660:	28d2703a 	and	r9,r5,r3
 8017664:	3814d53a 	srli	r10,r7,20
 8017668:	38c6703a 	and	r3,r7,r3
 801766c:	3004d77a 	srli	r2,r6,29
 8017670:	dc800215 	stw	r18,8(sp)
 8017674:	dc000015 	stw	r16,0(sp)
 8017678:	2824d7fa 	srli	r18,r5,31
 801767c:	2820d53a 	srli	r16,r5,20
 8017680:	481290fa 	slli	r9,r9,3
 8017684:	200ad77a 	srli	r5,r4,29
 8017688:	180690fa 	slli	r3,r3,3
 801768c:	dc400115 	stw	r17,4(sp)
 8017690:	dfc00415 	stw	ra,16(sp)
 8017694:	202290fa 	slli	r17,r4,3
 8017698:	dcc00315 	stw	r19,12(sp)
 801769c:	5281ffcc 	andi	r10,r10,2047
 80176a0:	0101ffc4 	movi	r4,2047
 80176a4:	9011883a 	mov	r8,r18
 80176a8:	8401ffcc 	andi	r16,r16,2047
 80176ac:	94803fcc 	andi	r18,r18,255
 80176b0:	494ab03a 	or	r5,r9,r5
 80176b4:	380ed7fa 	srli	r7,r7,31
 80176b8:	1886b03a 	or	r3,r3,r2
 80176bc:	300c90fa 	slli	r6,r6,3
 80176c0:	51009026 	beq	r10,r4,8017904 <__subdf3+0x2b0>
 80176c4:	39c0005c 	xori	r7,r7,1
 80176c8:	8285c83a 	sub	r2,r16,r10
 80176cc:	91c06f26 	beq	r18,r7,801788c <__subdf3+0x238>
 80176d0:	0080b10e 	bge	zero,r2,8017998 <__subdf3+0x344>
 80176d4:	50002a1e 	bne	r10,zero,8017780 <__subdf3+0x12c>
 80176d8:	1988b03a 	or	r4,r3,r6
 80176dc:	2000941e 	bne	r4,zero,8017930 <__subdf3+0x2dc>
 80176e0:	888001cc 	andi	r2,r17,7
 80176e4:	10005b26 	beq	r2,zero,8017854 <__subdf3+0x200>
 80176e8:	88c003cc 	andi	r3,r17,15
 80176ec:	00800104 	movi	r2,4
 80176f0:	18805826 	beq	r3,r2,8017854 <__subdf3+0x200>
 80176f4:	88c00104 	addi	r3,r17,4
 80176f8:	1c63803a 	cmpltu	r17,r3,r17
 80176fc:	2c4b883a 	add	r5,r5,r17
 8017700:	2880202c 	andhi	r2,r5,128
 8017704:	9200004c 	andi	r8,r18,1
 8017708:	1823883a 	mov	r17,r3
 801770c:	10005426 	beq	r2,zero,8017860 <__subdf3+0x20c>
 8017710:	84000044 	addi	r16,r16,1
 8017714:	0081ffc4 	movi	r2,2047
 8017718:	8080bf26 	beq	r16,r2,8017a18 <__subdf3+0x3c4>
 801771c:	013fe034 	movhi	r4,65408
 8017720:	213fffc4 	addi	r4,r4,-1
 8017724:	290a703a 	and	r5,r5,r4
 8017728:	2804977a 	slli	r2,r5,29
 801772c:	280a927a 	slli	r5,r5,9
 8017730:	8822d0fa 	srli	r17,r17,3
 8017734:	8401ffcc 	andi	r16,r16,2047
 8017738:	2808d33a 	srli	r4,r5,12
 801773c:	1444b03a 	or	r2,r2,r17
 8017740:	8401ffcc 	andi	r16,r16,2047
 8017744:	800a953a 	slli	r5,r16,20
 8017748:	40c03fcc 	andi	r3,r8,255
 801774c:	04000434 	movhi	r16,16
 8017750:	180697fa 	slli	r3,r3,31
 8017754:	843fffc4 	addi	r16,r16,-1
 8017758:	2420703a 	and	r16,r4,r16
 801775c:	8160b03a 	or	r16,r16,r5
 8017760:	80c6b03a 	or	r3,r16,r3
 8017764:	dfc00417 	ldw	ra,16(sp)
 8017768:	dcc00317 	ldw	r19,12(sp)
 801776c:	dc800217 	ldw	r18,8(sp)
 8017770:	dc400117 	ldw	r17,4(sp)
 8017774:	dc000017 	ldw	r16,0(sp)
 8017778:	dec00504 	addi	sp,sp,20
 801777c:	f800283a 	ret
 8017780:	0101ffc4 	movi	r4,2047
 8017784:	813fd626 	beq	r16,r4,80176e0 <__alt_data_end+0xf80176e0>
 8017788:	18c02034 	orhi	r3,r3,128
 801778c:	01000e04 	movi	r4,56
 8017790:	2080a416 	blt	r4,r2,8017a24 <__subdf3+0x3d0>
 8017794:	010007c4 	movi	r4,31
 8017798:	2080c716 	blt	r4,r2,8017ab8 <__subdf3+0x464>
 801779c:	01000804 	movi	r4,32
 80177a0:	2089c83a 	sub	r4,r4,r2
 80177a4:	1910983a 	sll	r8,r3,r4
 80177a8:	308ed83a 	srl	r7,r6,r2
 80177ac:	3108983a 	sll	r4,r6,r4
 80177b0:	1884d83a 	srl	r2,r3,r2
 80177b4:	41ccb03a 	or	r6,r8,r7
 80177b8:	2008c03a 	cmpne	r4,r4,zero
 80177bc:	310cb03a 	or	r6,r6,r4
 80177c0:	898dc83a 	sub	r6,r17,r6
 80177c4:	89a3803a 	cmpltu	r17,r17,r6
 80177c8:	288bc83a 	sub	r5,r5,r2
 80177cc:	2c4bc83a 	sub	r5,r5,r17
 80177d0:	3023883a 	mov	r17,r6
 80177d4:	2880202c 	andhi	r2,r5,128
 80177d8:	10006b26 	beq	r2,zero,8017988 <__subdf3+0x334>
 80177dc:	04c02034 	movhi	r19,128
 80177e0:	9cffffc4 	addi	r19,r19,-1
 80177e4:	2ce6703a 	and	r19,r5,r19
 80177e8:	98007c26 	beq	r19,zero,80179dc <__subdf3+0x388>
 80177ec:	9809883a 	mov	r4,r19
 80177f0:	80182b80 	call	80182b8 <__clzsi2>
 80177f4:	10fffe04 	addi	r3,r2,-8
 80177f8:	010007c4 	movi	r4,31
 80177fc:	20c07d16 	blt	r4,r3,80179f4 <__subdf3+0x3a0>
 8017800:	01400a04 	movi	r5,40
 8017804:	2885c83a 	sub	r2,r5,r2
 8017808:	888ad83a 	srl	r5,r17,r2
 801780c:	98e6983a 	sll	r19,r19,r3
 8017810:	88e2983a 	sll	r17,r17,r3
 8017814:	2ce6b03a 	or	r19,r5,r19
 8017818:	1c007a16 	blt	r3,r16,8017a04 <__subdf3+0x3b0>
 801781c:	1c21c83a 	sub	r16,r3,r16
 8017820:	81400044 	addi	r5,r16,1
 8017824:	00c007c4 	movi	r3,31
 8017828:	19409616 	blt	r3,r5,8017a84 <__subdf3+0x430>
 801782c:	1c21c83a 	sub	r16,r3,r16
 8017830:	8c08983a 	sll	r4,r17,r16
 8017834:	8946d83a 	srl	r3,r17,r5
 8017838:	9c20983a 	sll	r16,r19,r16
 801783c:	2008c03a 	cmpne	r4,r4,zero
 8017840:	994ad83a 	srl	r5,r19,r5
 8017844:	1c06b03a 	or	r3,r3,r16
 8017848:	1922b03a 	or	r17,r3,r4
 801784c:	0021883a 	mov	r16,zero
 8017850:	003fa306 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017854:	2880202c 	andhi	r2,r5,128
 8017858:	9200004c 	andi	r8,r18,1
 801785c:	103fac1e 	bne	r2,zero,8017710 <__alt_data_end+0xf8017710>
 8017860:	2804977a 	slli	r2,r5,29
 8017864:	8822d0fa 	srli	r17,r17,3
 8017868:	00c1ffc4 	movi	r3,2047
 801786c:	280ad0fa 	srli	r5,r5,3
 8017870:	1444b03a 	or	r2,r2,r17
 8017874:	80c02726 	beq	r16,r3,8017914 <__subdf3+0x2c0>
 8017878:	01000434 	movhi	r4,16
 801787c:	213fffc4 	addi	r4,r4,-1
 8017880:	80e0703a 	and	r16,r16,r3
 8017884:	2908703a 	and	r4,r5,r4
 8017888:	003fad06 	br	8017740 <__alt_data_end+0xf8017740>
 801788c:	0080690e 	bge	zero,r2,8017a34 <__subdf3+0x3e0>
 8017890:	50002f26 	beq	r10,zero,8017950 <__subdf3+0x2fc>
 8017894:	0101ffc4 	movi	r4,2047
 8017898:	813f9126 	beq	r16,r4,80176e0 <__alt_data_end+0xf80176e0>
 801789c:	18c02034 	orhi	r3,r3,128
 80178a0:	01000e04 	movi	r4,56
 80178a4:	2080b00e 	bge	r4,r2,8017b68 <__subdf3+0x514>
 80178a8:	198cb03a 	or	r6,r3,r6
 80178ac:	300ec03a 	cmpne	r7,r6,zero
 80178b0:	0005883a 	mov	r2,zero
 80178b4:	3c4f883a 	add	r7,r7,r17
 80178b8:	3c63803a 	cmpltu	r17,r7,r17
 80178bc:	114b883a 	add	r5,r2,r5
 80178c0:	2c4b883a 	add	r5,r5,r17
 80178c4:	3823883a 	mov	r17,r7
 80178c8:	2880202c 	andhi	r2,r5,128
 80178cc:	10002e26 	beq	r2,zero,8017988 <__subdf3+0x334>
 80178d0:	84000044 	addi	r16,r16,1
 80178d4:	0081ffc4 	movi	r2,2047
 80178d8:	8080de26 	beq	r16,r2,8017c54 <__subdf3+0x600>
 80178dc:	00bfe034 	movhi	r2,65408
 80178e0:	10bfffc4 	addi	r2,r2,-1
 80178e4:	288a703a 	and	r5,r5,r2
 80178e8:	880cd07a 	srli	r6,r17,1
 80178ec:	280897fa 	slli	r4,r5,31
 80178f0:	88c0004c 	andi	r3,r17,1
 80178f4:	30e2b03a 	or	r17,r6,r3
 80178f8:	280ad07a 	srli	r5,r5,1
 80178fc:	8922b03a 	or	r17,r17,r4
 8017900:	003f7706 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017904:	1984b03a 	or	r2,r3,r6
 8017908:	103f6e26 	beq	r2,zero,80176c4 <__alt_data_end+0xf80176c4>
 801790c:	39c03fcc 	andi	r7,r7,255
 8017910:	003f6d06 	br	80176c8 <__alt_data_end+0xf80176c8>
 8017914:	1146b03a 	or	r3,r2,r5
 8017918:	18003f26 	beq	r3,zero,8017a18 <__subdf3+0x3c4>
 801791c:	00c00434 	movhi	r3,16
 8017920:	29000234 	orhi	r4,r5,8
 8017924:	18ffffc4 	addi	r3,r3,-1
 8017928:	20c8703a 	and	r4,r4,r3
 801792c:	003f8406 	br	8017740 <__alt_data_end+0xf8017740>
 8017930:	10bfffc4 	addi	r2,r2,-1
 8017934:	1000501e 	bne	r2,zero,8017a78 <__subdf3+0x424>
 8017938:	898fc83a 	sub	r7,r17,r6
 801793c:	89e3803a 	cmpltu	r17,r17,r7
 8017940:	28cbc83a 	sub	r5,r5,r3
 8017944:	2c4bc83a 	sub	r5,r5,r17
 8017948:	3823883a 	mov	r17,r7
 801794c:	003fa106 	br	80177d4 <__alt_data_end+0xf80177d4>
 8017950:	1988b03a 	or	r4,r3,r6
 8017954:	203f6226 	beq	r4,zero,80176e0 <__alt_data_end+0xf80176e0>
 8017958:	10bfffc4 	addi	r2,r2,-1
 801795c:	10009b1e 	bne	r2,zero,8017bcc <__subdf3+0x578>
 8017960:	344d883a 	add	r6,r6,r17
 8017964:	3463803a 	cmpltu	r17,r6,r17
 8017968:	194b883a 	add	r5,r3,r5
 801796c:	2c4b883a 	add	r5,r5,r17
 8017970:	3023883a 	mov	r17,r6
 8017974:	003fd406 	br	80178c8 <__alt_data_end+0xf80178c8>
 8017978:	1106b03a 	or	r3,r2,r4
 801797c:	1800b426 	beq	r3,zero,8017c50 <__subdf3+0x5fc>
 8017980:	100b883a 	mov	r5,r2
 8017984:	2023883a 	mov	r17,r4
 8017988:	888001cc 	andi	r2,r17,7
 801798c:	103f561e 	bne	r2,zero,80176e8 <__alt_data_end+0xf80176e8>
 8017990:	9200004c 	andi	r8,r18,1
 8017994:	003fb206 	br	8017860 <__alt_data_end+0xf8017860>
 8017998:	1000531e 	bne	r2,zero,8017ae8 <__subdf3+0x494>
 801799c:	80800044 	addi	r2,r16,1
 80179a0:	1081ffcc 	andi	r2,r2,2047
 80179a4:	01000044 	movi	r4,1
 80179a8:	2080a00e 	bge	r4,r2,8017c2c <__subdf3+0x5d8>
 80179ac:	8985c83a 	sub	r2,r17,r6
 80179b0:	8889803a 	cmpltu	r4,r17,r2
 80179b4:	28e7c83a 	sub	r19,r5,r3
 80179b8:	9927c83a 	sub	r19,r19,r4
 80179bc:	9900202c 	andhi	r4,r19,128
 80179c0:	20006226 	beq	r4,zero,8017b4c <__subdf3+0x4f8>
 80179c4:	3463c83a 	sub	r17,r6,r17
 80179c8:	194bc83a 	sub	r5,r3,r5
 80179cc:	344d803a 	cmpltu	r6,r6,r17
 80179d0:	29a7c83a 	sub	r19,r5,r6
 80179d4:	3825883a 	mov	r18,r7
 80179d8:	983f841e 	bne	r19,zero,80177ec <__alt_data_end+0xf80177ec>
 80179dc:	8809883a 	mov	r4,r17
 80179e0:	80182b80 	call	80182b8 <__clzsi2>
 80179e4:	10800804 	addi	r2,r2,32
 80179e8:	10fffe04 	addi	r3,r2,-8
 80179ec:	010007c4 	movi	r4,31
 80179f0:	20ff830e 	bge	r4,r3,8017800 <__alt_data_end+0xf8017800>
 80179f4:	14fff604 	addi	r19,r2,-40
 80179f8:	8ce6983a 	sll	r19,r17,r19
 80179fc:	0023883a 	mov	r17,zero
 8017a00:	1c3f860e 	bge	r3,r16,801781c <__alt_data_end+0xf801781c>
 8017a04:	017fe034 	movhi	r5,65408
 8017a08:	297fffc4 	addi	r5,r5,-1
 8017a0c:	80e1c83a 	sub	r16,r16,r3
 8017a10:	994a703a 	and	r5,r19,r5
 8017a14:	003f3206 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017a18:	0009883a 	mov	r4,zero
 8017a1c:	0005883a 	mov	r2,zero
 8017a20:	003f4706 	br	8017740 <__alt_data_end+0xf8017740>
 8017a24:	198cb03a 	or	r6,r3,r6
 8017a28:	300cc03a 	cmpne	r6,r6,zero
 8017a2c:	0005883a 	mov	r2,zero
 8017a30:	003f6306 	br	80177c0 <__alt_data_end+0xf80177c0>
 8017a34:	10009d1e 	bne	r2,zero,8017cac <__subdf3+0x658>
 8017a38:	81c00044 	addi	r7,r16,1
 8017a3c:	3881ffcc 	andi	r2,r7,2047
 8017a40:	02400044 	movi	r9,1
 8017a44:	4880680e 	bge	r9,r2,8017be8 <__subdf3+0x594>
 8017a48:	0081ffc4 	movi	r2,2047
 8017a4c:	3880ae26 	beq	r7,r2,8017d08 <__subdf3+0x6b4>
 8017a50:	344d883a 	add	r6,r6,r17
 8017a54:	3463803a 	cmpltu	r17,r6,r17
 8017a58:	194b883a 	add	r5,r3,r5
 8017a5c:	2c4b883a 	add	r5,r5,r17
 8017a60:	282297fa 	slli	r17,r5,31
 8017a64:	300cd07a 	srli	r6,r6,1
 8017a68:	280ad07a 	srli	r5,r5,1
 8017a6c:	3821883a 	mov	r16,r7
 8017a70:	89a2b03a 	or	r17,r17,r6
 8017a74:	003f1a06 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017a78:	0101ffc4 	movi	r4,2047
 8017a7c:	813f431e 	bne	r16,r4,801778c <__alt_data_end+0xf801778c>
 8017a80:	003f1706 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017a84:	80bff844 	addi	r2,r16,-31
 8017a88:	00c00804 	movi	r3,32
 8017a8c:	9884d83a 	srl	r2,r19,r2
 8017a90:	28c05126 	beq	r5,r3,8017bd8 <__subdf3+0x584>
 8017a94:	00c00fc4 	movi	r3,63
 8017a98:	1c21c83a 	sub	r16,r3,r16
 8017a9c:	9c26983a 	sll	r19,r19,r16
 8017aa0:	9c62b03a 	or	r17,r19,r17
 8017aa4:	8822c03a 	cmpne	r17,r17,zero
 8017aa8:	88a2b03a 	or	r17,r17,r2
 8017aac:	000b883a 	mov	r5,zero
 8017ab0:	0021883a 	mov	r16,zero
 8017ab4:	003fb406 	br	8017988 <__alt_data_end+0xf8017988>
 8017ab8:	113ff804 	addi	r4,r2,-32
 8017abc:	01c00804 	movi	r7,32
 8017ac0:	1908d83a 	srl	r4,r3,r4
 8017ac4:	11c04626 	beq	r2,r7,8017be0 <__subdf3+0x58c>
 8017ac8:	01c01004 	movi	r7,64
 8017acc:	3885c83a 	sub	r2,r7,r2
 8017ad0:	1884983a 	sll	r2,r3,r2
 8017ad4:	118cb03a 	or	r6,r2,r6
 8017ad8:	300cc03a 	cmpne	r6,r6,zero
 8017adc:	310cb03a 	or	r6,r6,r4
 8017ae0:	0005883a 	mov	r2,zero
 8017ae4:	003f3606 	br	80177c0 <__alt_data_end+0xf80177c0>
 8017ae8:	80002b26 	beq	r16,zero,8017b98 <__subdf3+0x544>
 8017aec:	0101ffc4 	movi	r4,2047
 8017af0:	51006926 	beq	r10,r4,8017c98 <__subdf3+0x644>
 8017af4:	0085c83a 	sub	r2,zero,r2
 8017af8:	29402034 	orhi	r5,r5,128
 8017afc:	01000e04 	movi	r4,56
 8017b00:	20807d16 	blt	r4,r2,8017cf8 <__subdf3+0x6a4>
 8017b04:	010007c4 	movi	r4,31
 8017b08:	2080d916 	blt	r4,r2,8017e70 <__subdf3+0x81c>
 8017b0c:	01000804 	movi	r4,32
 8017b10:	2089c83a 	sub	r4,r4,r2
 8017b14:	2912983a 	sll	r9,r5,r4
 8017b18:	8890d83a 	srl	r8,r17,r2
 8017b1c:	8908983a 	sll	r4,r17,r4
 8017b20:	2884d83a 	srl	r2,r5,r2
 8017b24:	4a22b03a 	or	r17,r9,r8
 8017b28:	2008c03a 	cmpne	r4,r4,zero
 8017b2c:	8922b03a 	or	r17,r17,r4
 8017b30:	3463c83a 	sub	r17,r6,r17
 8017b34:	1885c83a 	sub	r2,r3,r2
 8017b38:	344d803a 	cmpltu	r6,r6,r17
 8017b3c:	118bc83a 	sub	r5,r2,r6
 8017b40:	5021883a 	mov	r16,r10
 8017b44:	3825883a 	mov	r18,r7
 8017b48:	003f2206 	br	80177d4 <__alt_data_end+0xf80177d4>
 8017b4c:	9886b03a 	or	r3,r19,r2
 8017b50:	18001c1e 	bne	r3,zero,8017bc4 <__subdf3+0x570>
 8017b54:	0011883a 	mov	r8,zero
 8017b58:	000b883a 	mov	r5,zero
 8017b5c:	0023883a 	mov	r17,zero
 8017b60:	0021883a 	mov	r16,zero
 8017b64:	003f3e06 	br	8017860 <__alt_data_end+0xf8017860>
 8017b68:	010007c4 	movi	r4,31
 8017b6c:	20803c16 	blt	r4,r2,8017c60 <__subdf3+0x60c>
 8017b70:	01000804 	movi	r4,32
 8017b74:	2089c83a 	sub	r4,r4,r2
 8017b78:	1912983a 	sll	r9,r3,r4
 8017b7c:	308ed83a 	srl	r7,r6,r2
 8017b80:	3108983a 	sll	r4,r6,r4
 8017b84:	1884d83a 	srl	r2,r3,r2
 8017b88:	49ceb03a 	or	r7,r9,r7
 8017b8c:	2008c03a 	cmpne	r4,r4,zero
 8017b90:	390eb03a 	or	r7,r7,r4
 8017b94:	003f4706 	br	80178b4 <__alt_data_end+0xf80178b4>
 8017b98:	2c48b03a 	or	r4,r5,r17
 8017b9c:	20003e26 	beq	r4,zero,8017c98 <__subdf3+0x644>
 8017ba0:	0084303a 	nor	r2,zero,r2
 8017ba4:	10003a1e 	bne	r2,zero,8017c90 <__subdf3+0x63c>
 8017ba8:	3463c83a 	sub	r17,r6,r17
 8017bac:	194bc83a 	sub	r5,r3,r5
 8017bb0:	344d803a 	cmpltu	r6,r6,r17
 8017bb4:	298bc83a 	sub	r5,r5,r6
 8017bb8:	5021883a 	mov	r16,r10
 8017bbc:	3825883a 	mov	r18,r7
 8017bc0:	003f0406 	br	80177d4 <__alt_data_end+0xf80177d4>
 8017bc4:	1023883a 	mov	r17,r2
 8017bc8:	003f0706 	br	80177e8 <__alt_data_end+0xf80177e8>
 8017bcc:	0101ffc4 	movi	r4,2047
 8017bd0:	813f331e 	bne	r16,r4,80178a0 <__alt_data_end+0xf80178a0>
 8017bd4:	003ec206 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017bd8:	0027883a 	mov	r19,zero
 8017bdc:	003fb006 	br	8017aa0 <__alt_data_end+0xf8017aa0>
 8017be0:	0005883a 	mov	r2,zero
 8017be4:	003fbb06 	br	8017ad4 <__alt_data_end+0xf8017ad4>
 8017be8:	2c44b03a 	or	r2,r5,r17
 8017bec:	80008b1e 	bne	r16,zero,8017e1c <__subdf3+0x7c8>
 8017bf0:	1000b526 	beq	r2,zero,8017ec8 <__subdf3+0x874>
 8017bf4:	1984b03a 	or	r2,r3,r6
 8017bf8:	103eb926 	beq	r2,zero,80176e0 <__alt_data_end+0xf80176e0>
 8017bfc:	3449883a 	add	r4,r6,r17
 8017c00:	2463803a 	cmpltu	r17,r4,r17
 8017c04:	194b883a 	add	r5,r3,r5
 8017c08:	2c4b883a 	add	r5,r5,r17
 8017c0c:	2880202c 	andhi	r2,r5,128
 8017c10:	2023883a 	mov	r17,r4
 8017c14:	103f5c26 	beq	r2,zero,8017988 <__alt_data_end+0xf8017988>
 8017c18:	00bfe034 	movhi	r2,65408
 8017c1c:	10bfffc4 	addi	r2,r2,-1
 8017c20:	4821883a 	mov	r16,r9
 8017c24:	288a703a 	and	r5,r5,r2
 8017c28:	003ead06 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017c2c:	2c44b03a 	or	r2,r5,r17
 8017c30:	8000291e 	bne	r16,zero,8017cd8 <__subdf3+0x684>
 8017c34:	10004f1e 	bne	r2,zero,8017d74 <__subdf3+0x720>
 8017c38:	1984b03a 	or	r2,r3,r6
 8017c3c:	10000426 	beq	r2,zero,8017c50 <__subdf3+0x5fc>
 8017c40:	180b883a 	mov	r5,r3
 8017c44:	3023883a 	mov	r17,r6
 8017c48:	3825883a 	mov	r18,r7
 8017c4c:	003ea406 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017c50:	0011883a 	mov	r8,zero
 8017c54:	000b883a 	mov	r5,zero
 8017c58:	0023883a 	mov	r17,zero
 8017c5c:	003f0006 	br	8017860 <__alt_data_end+0xf8017860>
 8017c60:	11fff804 	addi	r7,r2,-32
 8017c64:	19c8d83a 	srl	r4,r3,r7
 8017c68:	01c00804 	movi	r7,32
 8017c6c:	11c07e26 	beq	r2,r7,8017e68 <__subdf3+0x814>
 8017c70:	01c01004 	movi	r7,64
 8017c74:	3885c83a 	sub	r2,r7,r2
 8017c78:	1884983a 	sll	r2,r3,r2
 8017c7c:	118cb03a 	or	r6,r2,r6
 8017c80:	300ec03a 	cmpne	r7,r6,zero
 8017c84:	390eb03a 	or	r7,r7,r4
 8017c88:	0005883a 	mov	r2,zero
 8017c8c:	003f0906 	br	80178b4 <__alt_data_end+0xf80178b4>
 8017c90:	0101ffc4 	movi	r4,2047
 8017c94:	513f991e 	bne	r10,r4,8017afc <__alt_data_end+0xf8017afc>
 8017c98:	180b883a 	mov	r5,r3
 8017c9c:	3023883a 	mov	r17,r6
 8017ca0:	5021883a 	mov	r16,r10
 8017ca4:	3825883a 	mov	r18,r7
 8017ca8:	003e8d06 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017cac:	80001a1e 	bne	r16,zero,8017d18 <__subdf3+0x6c4>
 8017cb0:	2c48b03a 	or	r4,r5,r17
 8017cb4:	20005526 	beq	r4,zero,8017e0c <__subdf3+0x7b8>
 8017cb8:	0084303a 	nor	r2,zero,r2
 8017cbc:	1000511e 	bne	r2,zero,8017e04 <__subdf3+0x7b0>
 8017cc0:	89a3883a 	add	r17,r17,r6
 8017cc4:	194b883a 	add	r5,r3,r5
 8017cc8:	898d803a 	cmpltu	r6,r17,r6
 8017ccc:	298b883a 	add	r5,r5,r6
 8017cd0:	5021883a 	mov	r16,r10
 8017cd4:	003efc06 	br	80178c8 <__alt_data_end+0xf80178c8>
 8017cd8:	1000341e 	bne	r2,zero,8017dac <__subdf3+0x758>
 8017cdc:	1984b03a 	or	r2,r3,r6
 8017ce0:	10006f26 	beq	r2,zero,8017ea0 <__subdf3+0x84c>
 8017ce4:	180b883a 	mov	r5,r3
 8017ce8:	3023883a 	mov	r17,r6
 8017cec:	3825883a 	mov	r18,r7
 8017cf0:	0401ffc4 	movi	r16,2047
 8017cf4:	003e7a06 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017cf8:	2c62b03a 	or	r17,r5,r17
 8017cfc:	8822c03a 	cmpne	r17,r17,zero
 8017d00:	0005883a 	mov	r2,zero
 8017d04:	003f8a06 	br	8017b30 <__alt_data_end+0xf8017b30>
 8017d08:	3821883a 	mov	r16,r7
 8017d0c:	000b883a 	mov	r5,zero
 8017d10:	0023883a 	mov	r17,zero
 8017d14:	003ed206 	br	8017860 <__alt_data_end+0xf8017860>
 8017d18:	0101ffc4 	movi	r4,2047
 8017d1c:	51003b26 	beq	r10,r4,8017e0c <__subdf3+0x7b8>
 8017d20:	0085c83a 	sub	r2,zero,r2
 8017d24:	29402034 	orhi	r5,r5,128
 8017d28:	01000e04 	movi	r4,56
 8017d2c:	20806216 	blt	r4,r2,8017eb8 <__subdf3+0x864>
 8017d30:	010007c4 	movi	r4,31
 8017d34:	20806b16 	blt	r4,r2,8017ee4 <__subdf3+0x890>
 8017d38:	01000804 	movi	r4,32
 8017d3c:	2089c83a 	sub	r4,r4,r2
 8017d40:	2912983a 	sll	r9,r5,r4
 8017d44:	888ed83a 	srl	r7,r17,r2
 8017d48:	8908983a 	sll	r4,r17,r4
 8017d4c:	2884d83a 	srl	r2,r5,r2
 8017d50:	49e2b03a 	or	r17,r9,r7
 8017d54:	2008c03a 	cmpne	r4,r4,zero
 8017d58:	8922b03a 	or	r17,r17,r4
 8017d5c:	89a3883a 	add	r17,r17,r6
 8017d60:	10c5883a 	add	r2,r2,r3
 8017d64:	898d803a 	cmpltu	r6,r17,r6
 8017d68:	118b883a 	add	r5,r2,r6
 8017d6c:	5021883a 	mov	r16,r10
 8017d70:	003ed506 	br	80178c8 <__alt_data_end+0xf80178c8>
 8017d74:	1984b03a 	or	r2,r3,r6
 8017d78:	103e5926 	beq	r2,zero,80176e0 <__alt_data_end+0xf80176e0>
 8017d7c:	8989c83a 	sub	r4,r17,r6
 8017d80:	8911803a 	cmpltu	r8,r17,r4
 8017d84:	28c5c83a 	sub	r2,r5,r3
 8017d88:	1205c83a 	sub	r2,r2,r8
 8017d8c:	1200202c 	andhi	r8,r2,128
 8017d90:	403ef926 	beq	r8,zero,8017978 <__alt_data_end+0xf8017978>
 8017d94:	3463c83a 	sub	r17,r6,r17
 8017d98:	194bc83a 	sub	r5,r3,r5
 8017d9c:	344d803a 	cmpltu	r6,r6,r17
 8017da0:	298bc83a 	sub	r5,r5,r6
 8017da4:	3825883a 	mov	r18,r7
 8017da8:	003e4d06 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017dac:	1984b03a 	or	r2,r3,r6
 8017db0:	10002b26 	beq	r2,zero,8017e60 <__subdf3+0x80c>
 8017db4:	2808d0fa 	srli	r4,r5,3
 8017db8:	8822d0fa 	srli	r17,r17,3
 8017dbc:	280a977a 	slli	r5,r5,29
 8017dc0:	2080022c 	andhi	r2,r4,8
 8017dc4:	2c62b03a 	or	r17,r5,r17
 8017dc8:	10000826 	beq	r2,zero,8017dec <__subdf3+0x798>
 8017dcc:	1810d0fa 	srli	r8,r3,3
 8017dd0:	4080022c 	andhi	r2,r8,8
 8017dd4:	1000051e 	bne	r2,zero,8017dec <__subdf3+0x798>
 8017dd8:	300cd0fa 	srli	r6,r6,3
 8017ddc:	1804977a 	slli	r2,r3,29
 8017de0:	4009883a 	mov	r4,r8
 8017de4:	3825883a 	mov	r18,r7
 8017de8:	11a2b03a 	or	r17,r2,r6
 8017dec:	880ad77a 	srli	r5,r17,29
 8017df0:	200890fa 	slli	r4,r4,3
 8017df4:	882290fa 	slli	r17,r17,3
 8017df8:	0401ffc4 	movi	r16,2047
 8017dfc:	290ab03a 	or	r5,r5,r4
 8017e00:	003e3706 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017e04:	0101ffc4 	movi	r4,2047
 8017e08:	513fc71e 	bne	r10,r4,8017d28 <__alt_data_end+0xf8017d28>
 8017e0c:	180b883a 	mov	r5,r3
 8017e10:	3023883a 	mov	r17,r6
 8017e14:	5021883a 	mov	r16,r10
 8017e18:	003e3106 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017e1c:	10002d26 	beq	r2,zero,8017ed4 <__subdf3+0x880>
 8017e20:	1984b03a 	or	r2,r3,r6
 8017e24:	10000e26 	beq	r2,zero,8017e60 <__subdf3+0x80c>
 8017e28:	2808d0fa 	srli	r4,r5,3
 8017e2c:	8822d0fa 	srli	r17,r17,3
 8017e30:	280a977a 	slli	r5,r5,29
 8017e34:	2080022c 	andhi	r2,r4,8
 8017e38:	2c62b03a 	or	r17,r5,r17
 8017e3c:	103feb26 	beq	r2,zero,8017dec <__alt_data_end+0xf8017dec>
 8017e40:	180ed0fa 	srli	r7,r3,3
 8017e44:	3880022c 	andhi	r2,r7,8
 8017e48:	103fe81e 	bne	r2,zero,8017dec <__alt_data_end+0xf8017dec>
 8017e4c:	300cd0fa 	srli	r6,r6,3
 8017e50:	1804977a 	slli	r2,r3,29
 8017e54:	3809883a 	mov	r4,r7
 8017e58:	11a2b03a 	or	r17,r2,r6
 8017e5c:	003fe306 	br	8017dec <__alt_data_end+0xf8017dec>
 8017e60:	0401ffc4 	movi	r16,2047
 8017e64:	003e1e06 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017e68:	0005883a 	mov	r2,zero
 8017e6c:	003f8306 	br	8017c7c <__alt_data_end+0xf8017c7c>
 8017e70:	113ff804 	addi	r4,r2,-32
 8017e74:	02000804 	movi	r8,32
 8017e78:	2908d83a 	srl	r4,r5,r4
 8017e7c:	12002526 	beq	r2,r8,8017f14 <__subdf3+0x8c0>
 8017e80:	02001004 	movi	r8,64
 8017e84:	4085c83a 	sub	r2,r8,r2
 8017e88:	288a983a 	sll	r5,r5,r2
 8017e8c:	2c62b03a 	or	r17,r5,r17
 8017e90:	8822c03a 	cmpne	r17,r17,zero
 8017e94:	8922b03a 	or	r17,r17,r4
 8017e98:	0005883a 	mov	r2,zero
 8017e9c:	003f2406 	br	8017b30 <__alt_data_end+0xf8017b30>
 8017ea0:	01402034 	movhi	r5,128
 8017ea4:	0011883a 	mov	r8,zero
 8017ea8:	297fffc4 	addi	r5,r5,-1
 8017eac:	047ffe04 	movi	r17,-8
 8017eb0:	0401ffc4 	movi	r16,2047
 8017eb4:	003e6a06 	br	8017860 <__alt_data_end+0xf8017860>
 8017eb8:	2c62b03a 	or	r17,r5,r17
 8017ebc:	8822c03a 	cmpne	r17,r17,zero
 8017ec0:	0005883a 	mov	r2,zero
 8017ec4:	003fa506 	br	8017d5c <__alt_data_end+0xf8017d5c>
 8017ec8:	180b883a 	mov	r5,r3
 8017ecc:	3023883a 	mov	r17,r6
 8017ed0:	003e0306 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017ed4:	180b883a 	mov	r5,r3
 8017ed8:	3023883a 	mov	r17,r6
 8017edc:	0401ffc4 	movi	r16,2047
 8017ee0:	003dff06 	br	80176e0 <__alt_data_end+0xf80176e0>
 8017ee4:	113ff804 	addi	r4,r2,-32
 8017ee8:	01c00804 	movi	r7,32
 8017eec:	2908d83a 	srl	r4,r5,r4
 8017ef0:	11c00a26 	beq	r2,r7,8017f1c <__subdf3+0x8c8>
 8017ef4:	01c01004 	movi	r7,64
 8017ef8:	3885c83a 	sub	r2,r7,r2
 8017efc:	288a983a 	sll	r5,r5,r2
 8017f00:	2c62b03a 	or	r17,r5,r17
 8017f04:	8822c03a 	cmpne	r17,r17,zero
 8017f08:	8922b03a 	or	r17,r17,r4
 8017f0c:	0005883a 	mov	r2,zero
 8017f10:	003f9206 	br	8017d5c <__alt_data_end+0xf8017d5c>
 8017f14:	000b883a 	mov	r5,zero
 8017f18:	003fdc06 	br	8017e8c <__alt_data_end+0xf8017e8c>
 8017f1c:	000b883a 	mov	r5,zero
 8017f20:	003ff706 	br	8017f00 <__alt_data_end+0xf8017f00>

08017f24 <__fixdfsi>:
 8017f24:	2806d53a 	srli	r3,r5,20
 8017f28:	00800434 	movhi	r2,16
 8017f2c:	10bfffc4 	addi	r2,r2,-1
 8017f30:	18c1ffcc 	andi	r3,r3,2047
 8017f34:	0180ff84 	movi	r6,1022
 8017f38:	2884703a 	and	r2,r5,r2
 8017f3c:	280ad7fa 	srli	r5,r5,31
 8017f40:	30c0130e 	bge	r6,r3,8017f90 <__fixdfsi+0x6c>
 8017f44:	01810744 	movi	r6,1053
 8017f48:	30c00d16 	blt	r6,r3,8017f80 <__fixdfsi+0x5c>
 8017f4c:	01810cc4 	movi	r6,1075
 8017f50:	30cdc83a 	sub	r6,r6,r3
 8017f54:	01c007c4 	movi	r7,31
 8017f58:	10800434 	orhi	r2,r2,16
 8017f5c:	39800e0e 	bge	r7,r6,8017f98 <__fixdfsi+0x74>
 8017f60:	010104c4 	movi	r4,1043
 8017f64:	20c7c83a 	sub	r3,r4,r3
 8017f68:	10c6d83a 	srl	r3,r2,r3
 8017f6c:	29403fcc 	andi	r5,r5,255
 8017f70:	0145c83a 	sub	r2,zero,r5
 8017f74:	1884f03a 	xor	r2,r3,r2
 8017f78:	1145883a 	add	r2,r2,r5
 8017f7c:	f800283a 	ret
 8017f80:	00a00034 	movhi	r2,32768
 8017f84:	10bfffc4 	addi	r2,r2,-1
 8017f88:	2885883a 	add	r2,r5,r2
 8017f8c:	f800283a 	ret
 8017f90:	0005883a 	mov	r2,zero
 8017f94:	f800283a 	ret
 8017f98:	18fefb44 	addi	r3,r3,-1043
 8017f9c:	2188d83a 	srl	r4,r4,r6
 8017fa0:	10c6983a 	sll	r3,r2,r3
 8017fa4:	20c6b03a 	or	r3,r4,r3
 8017fa8:	003ff006 	br	8017f6c <__alt_data_end+0xf8017f6c>

08017fac <__floatsidf>:
 8017fac:	defffd04 	addi	sp,sp,-12
 8017fb0:	dc400115 	stw	r17,4(sp)
 8017fb4:	dfc00215 	stw	ra,8(sp)
 8017fb8:	dc000015 	stw	r16,0(sp)
 8017fbc:	2023883a 	mov	r17,r4
 8017fc0:	20001426 	beq	r4,zero,8018014 <__floatsidf+0x68>
 8017fc4:	2020d7fa 	srli	r16,r4,31
 8017fc8:	80000126 	beq	r16,zero,8017fd0 <__floatsidf+0x24>
 8017fcc:	0123c83a 	sub	r17,zero,r4
 8017fd0:	8809883a 	mov	r4,r17
 8017fd4:	80182b80 	call	80182b8 <__clzsi2>
 8017fd8:	01410784 	movi	r5,1054
 8017fdc:	00c00284 	movi	r3,10
 8017fe0:	288bc83a 	sub	r5,r5,r2
 8017fe4:	18801c16 	blt	r3,r2,8018058 <__floatsidf+0xac>
 8017fe8:	00c002c4 	movi	r3,11
 8017fec:	1887c83a 	sub	r3,r3,r2
 8017ff0:	88c8d83a 	srl	r4,r17,r3
 8017ff4:	00c00434 	movhi	r3,16
 8017ff8:	18ffffc4 	addi	r3,r3,-1
 8017ffc:	10800544 	addi	r2,r2,21
 8018000:	20c8703a 	and	r4,r4,r3
 8018004:	8884983a 	sll	r2,r17,r2
 8018008:	28c1ffcc 	andi	r3,r5,2047
 801800c:	800d883a 	mov	r6,r16
 8018010:	00000406 	br	8018024 <__floatsidf+0x78>
 8018014:	000d883a 	mov	r6,zero
 8018018:	0007883a 	mov	r3,zero
 801801c:	0009883a 	mov	r4,zero
 8018020:	0005883a 	mov	r2,zero
 8018024:	180a953a 	slli	r5,r3,20
 8018028:	31803fcc 	andi	r6,r6,255
 801802c:	00c00434 	movhi	r3,16
 8018030:	300c97fa 	slli	r6,r6,31
 8018034:	18ffffc4 	addi	r3,r3,-1
 8018038:	20c6703a 	and	r3,r4,r3
 801803c:	1946b03a 	or	r3,r3,r5
 8018040:	1986b03a 	or	r3,r3,r6
 8018044:	dfc00217 	ldw	ra,8(sp)
 8018048:	dc400117 	ldw	r17,4(sp)
 801804c:	dc000017 	ldw	r16,0(sp)
 8018050:	dec00304 	addi	sp,sp,12
 8018054:	f800283a 	ret
 8018058:	10fffd44 	addi	r3,r2,-11
 801805c:	88c8983a 	sll	r4,r17,r3
 8018060:	00800434 	movhi	r2,16
 8018064:	10bfffc4 	addi	r2,r2,-1
 8018068:	2088703a 	and	r4,r4,r2
 801806c:	28c1ffcc 	andi	r3,r5,2047
 8018070:	800d883a 	mov	r6,r16
 8018074:	0005883a 	mov	r2,zero
 8018078:	003fea06 	br	8018024 <__alt_data_end+0xf8018024>

0801807c <__floatunsidf>:
 801807c:	defffe04 	addi	sp,sp,-8
 8018080:	dc000015 	stw	r16,0(sp)
 8018084:	dfc00115 	stw	ra,4(sp)
 8018088:	2021883a 	mov	r16,r4
 801808c:	20001026 	beq	r4,zero,80180d0 <__floatunsidf+0x54>
 8018090:	80182b80 	call	80182b8 <__clzsi2>
 8018094:	01410784 	movi	r5,1054
 8018098:	100d883a 	mov	r6,r2
 801809c:	288bc83a 	sub	r5,r5,r2
 80180a0:	00800284 	movi	r2,10
 80180a4:	11801616 	blt	r2,r6,8018100 <__floatunsidf+0x84>
 80180a8:	008002c4 	movi	r2,11
 80180ac:	1185c83a 	sub	r2,r2,r6
 80180b0:	8084d83a 	srl	r2,r16,r2
 80180b4:	00c00434 	movhi	r3,16
 80180b8:	31c00544 	addi	r7,r6,21
 80180bc:	18ffffc4 	addi	r3,r3,-1
 80180c0:	81e0983a 	sll	r16,r16,r7
 80180c4:	10cc703a 	and	r6,r2,r3
 80180c8:	2941ffcc 	andi	r5,r5,2047
 80180cc:	00000206 	br	80180d8 <__floatunsidf+0x5c>
 80180d0:	000b883a 	mov	r5,zero
 80180d4:	000d883a 	mov	r6,zero
 80180d8:	280a953a 	slli	r5,r5,20
 80180dc:	00c00434 	movhi	r3,16
 80180e0:	18ffffc4 	addi	r3,r3,-1
 80180e4:	30c6703a 	and	r3,r6,r3
 80180e8:	8005883a 	mov	r2,r16
 80180ec:	1946b03a 	or	r3,r3,r5
 80180f0:	dfc00117 	ldw	ra,4(sp)
 80180f4:	dc000017 	ldw	r16,0(sp)
 80180f8:	dec00204 	addi	sp,sp,8
 80180fc:	f800283a 	ret
 8018100:	31bffd44 	addi	r6,r6,-11
 8018104:	818c983a 	sll	r6,r16,r6
 8018108:	00800434 	movhi	r2,16
 801810c:	10bfffc4 	addi	r2,r2,-1
 8018110:	2941ffcc 	andi	r5,r5,2047
 8018114:	0021883a 	mov	r16,zero
 8018118:	308c703a 	and	r6,r6,r2
 801811c:	003fee06 	br	80180d8 <__alt_data_end+0xf80180d8>

08018120 <__truncdfsf2>:
 8018120:	2810d53a 	srli	r8,r5,20
 8018124:	01c00434 	movhi	r7,16
 8018128:	39ffffc4 	addi	r7,r7,-1
 801812c:	29ce703a 	and	r7,r5,r7
 8018130:	380e90fa 	slli	r7,r7,3
 8018134:	4201ffcc 	andi	r8,r8,2047
 8018138:	200cd77a 	srli	r6,r4,29
 801813c:	42400044 	addi	r9,r8,1
 8018140:	4a41ffcc 	andi	r9,r9,2047
 8018144:	00800044 	movi	r2,1
 8018148:	398cb03a 	or	r6,r7,r6
 801814c:	280ad7fa 	srli	r5,r5,31
 8018150:	200e90fa 	slli	r7,r4,3
 8018154:	1240230e 	bge	r2,r9,80181e4 <__truncdfsf2+0xc4>
 8018158:	40ff2004 	addi	r3,r8,-896
 801815c:	00803f84 	movi	r2,254
 8018160:	10c01516 	blt	r2,r3,80181b8 <__truncdfsf2+0x98>
 8018164:	00c02d0e 	bge	zero,r3,801821c <__truncdfsf2+0xfc>
 8018168:	200891ba 	slli	r4,r4,6
 801816c:	300c90fa 	slli	r6,r6,3
 8018170:	380ed77a 	srli	r7,r7,29
 8018174:	2008c03a 	cmpne	r4,r4,zero
 8018178:	310cb03a 	or	r6,r6,r4
 801817c:	31ccb03a 	or	r6,r6,r7
 8018180:	308001cc 	andi	r2,r6,7
 8018184:	10000426 	beq	r2,zero,8018198 <__truncdfsf2+0x78>
 8018188:	310003cc 	andi	r4,r6,15
 801818c:	00800104 	movi	r2,4
 8018190:	20800126 	beq	r4,r2,8018198 <__truncdfsf2+0x78>
 8018194:	31800104 	addi	r6,r6,4
 8018198:	3081002c 	andhi	r2,r6,1024
 801819c:	10002326 	beq	r2,zero,801822c <__truncdfsf2+0x10c>
 80181a0:	18c00044 	addi	r3,r3,1
 80181a4:	00803fc4 	movi	r2,255
 80181a8:	18800326 	beq	r3,r2,80181b8 <__truncdfsf2+0x98>
 80181ac:	300c91ba 	slli	r6,r6,6
 80181b0:	300cd27a 	srli	r6,r6,9
 80181b4:	00000206 	br	80181c0 <__truncdfsf2+0xa0>
 80181b8:	00ffffc4 	movi	r3,-1
 80181bc:	000d883a 	mov	r6,zero
 80181c0:	18c03fcc 	andi	r3,r3,255
 80181c4:	180895fa 	slli	r4,r3,23
 80181c8:	00c02034 	movhi	r3,128
 80181cc:	280a97fa 	slli	r5,r5,31
 80181d0:	18ffffc4 	addi	r3,r3,-1
 80181d4:	30c6703a 	and	r3,r6,r3
 80181d8:	1906b03a 	or	r3,r3,r4
 80181dc:	1944b03a 	or	r2,r3,r5
 80181e0:	f800283a 	ret
 80181e4:	4000071e 	bne	r8,zero,8018204 <__truncdfsf2+0xe4>
 80181e8:	31ccb03a 	or	r6,r6,r7
 80181ec:	30000d1e 	bne	r6,zero,8018224 <__truncdfsf2+0x104>
 80181f0:	0007883a 	mov	r3,zero
 80181f4:	00802034 	movhi	r2,128
 80181f8:	10bfffc4 	addi	r2,r2,-1
 80181fc:	308c703a 	and	r6,r6,r2
 8018200:	003fef06 	br	80181c0 <__alt_data_end+0xf80181c0>
 8018204:	31c8b03a 	or	r4,r6,r7
 8018208:	203feb26 	beq	r4,zero,80181b8 <__alt_data_end+0xf80181b8>
 801820c:	300c90fa 	slli	r6,r6,3
 8018210:	00c03fc4 	movi	r3,255
 8018214:	31808034 	orhi	r6,r6,512
 8018218:	003fd906 	br	8018180 <__alt_data_end+0xf8018180>
 801821c:	00bffa44 	movi	r2,-23
 8018220:	1880090e 	bge	r3,r2,8018248 <__truncdfsf2+0x128>
 8018224:	01800144 	movi	r6,5
 8018228:	0007883a 	mov	r3,zero
 801822c:	00803fc4 	movi	r2,255
 8018230:	300cd0fa 	srli	r6,r6,3
 8018234:	18bfef1e 	bne	r3,r2,80181f4 <__alt_data_end+0xf80181f4>
 8018238:	303fdf26 	beq	r6,zero,80181b8 <__alt_data_end+0xf80181b8>
 801823c:	31801034 	orhi	r6,r6,64
 8018240:	00ffffc4 	movi	r3,-1
 8018244:	003feb06 	br	80181f4 <__alt_data_end+0xf80181f4>
 8018248:	0080e784 	movi	r2,926
 801824c:	1205c83a 	sub	r2,r2,r8
 8018250:	00c007c4 	movi	r3,31
 8018254:	31802034 	orhi	r6,r6,128
 8018258:	18800916 	blt	r3,r2,8018280 <__truncdfsf2+0x160>
 801825c:	423f2084 	addi	r8,r8,-894
 8018260:	3a06983a 	sll	r3,r7,r8
 8018264:	3210983a 	sll	r8,r6,r8
 8018268:	388ed83a 	srl	r7,r7,r2
 801826c:	180cc03a 	cmpne	r6,r3,zero
 8018270:	418cb03a 	or	r6,r8,r6
 8018274:	31ccb03a 	or	r6,r6,r7
 8018278:	0007883a 	mov	r3,zero
 801827c:	003fc006 	br	8018180 <__alt_data_end+0xf8018180>
 8018280:	00c0df84 	movi	r3,894
 8018284:	1a07c83a 	sub	r3,r3,r8
 8018288:	01000804 	movi	r4,32
 801828c:	30c6d83a 	srl	r3,r6,r3
 8018290:	11000726 	beq	r2,r4,80182b0 <__truncdfsf2+0x190>
 8018294:	423f2884 	addi	r8,r8,-862
 8018298:	3210983a 	sll	r8,r6,r8
 801829c:	41ceb03a 	or	r7,r8,r7
 80182a0:	380ec03a 	cmpne	r7,r7,zero
 80182a4:	38ccb03a 	or	r6,r7,r3
 80182a8:	0007883a 	mov	r3,zero
 80182ac:	003fb406 	br	8018180 <__alt_data_end+0xf8018180>
 80182b0:	0011883a 	mov	r8,zero
 80182b4:	003ff906 	br	801829c <__alt_data_end+0xf801829c>

080182b8 <__clzsi2>:
 80182b8:	00bfffd4 	movui	r2,65535
 80182bc:	11000b36 	bltu	r2,r4,80182ec <__clzsi2+0x34>
 80182c0:	00803fc4 	movi	r2,255
 80182c4:	1100122e 	bgeu	r2,r4,8018310 <__clzsi2+0x58>
 80182c8:	00c00204 	movi	r3,8
 80182cc:	01400604 	movi	r5,24
 80182d0:	20c8d83a 	srl	r4,r4,r3
 80182d4:	008200b4 	movhi	r2,2050
 80182d8:	10b36904 	addi	r2,r2,-12892
 80182dc:	1109883a 	add	r4,r2,r4
 80182e0:	20800003 	ldbu	r2,0(r4)
 80182e4:	2885c83a 	sub	r2,r5,r2
 80182e8:	f800283a 	ret
 80182ec:	00804034 	movhi	r2,256
 80182f0:	10bfffc4 	addi	r2,r2,-1
 80182f4:	11000336 	bltu	r2,r4,8018304 <__clzsi2+0x4c>
 80182f8:	00c00404 	movi	r3,16
 80182fc:	180b883a 	mov	r5,r3
 8018300:	003ff306 	br	80182d0 <__alt_data_end+0xf80182d0>
 8018304:	00c00604 	movi	r3,24
 8018308:	01400204 	movi	r5,8
 801830c:	003ff006 	br	80182d0 <__alt_data_end+0xf80182d0>
 8018310:	0007883a 	mov	r3,zero
 8018314:	01400804 	movi	r5,32
 8018318:	003fed06 	br	80182d0 <__alt_data_end+0xf80182d0>

0801831c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801831c:	defffe04 	addi	sp,sp,-8
 8018320:	dfc00115 	stw	ra,4(sp)
 8018324:	df000015 	stw	fp,0(sp)
 8018328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801832c:	008200b4 	movhi	r2,2050
 8018330:	10bac204 	addi	r2,r2,-5368
 8018334:	10800017 	ldw	r2,0(r2)
 8018338:	10000526 	beq	r2,zero,8018350 <alt_get_errno+0x34>
 801833c:	008200b4 	movhi	r2,2050
 8018340:	10bac204 	addi	r2,r2,-5368
 8018344:	10800017 	ldw	r2,0(r2)
 8018348:	103ee83a 	callr	r2
 801834c:	00000206 	br	8018358 <alt_get_errno+0x3c>
 8018350:	008200b4 	movhi	r2,2050
 8018354:	10bace04 	addi	r2,r2,-5320
}
 8018358:	e037883a 	mov	sp,fp
 801835c:	dfc00117 	ldw	ra,4(sp)
 8018360:	df000017 	ldw	fp,0(sp)
 8018364:	dec00204 	addi	sp,sp,8
 8018368:	f800283a 	ret

0801836c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 801836c:	defffb04 	addi	sp,sp,-20
 8018370:	dfc00415 	stw	ra,16(sp)
 8018374:	df000315 	stw	fp,12(sp)
 8018378:	df000304 	addi	fp,sp,12
 801837c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8018380:	e0bfff17 	ldw	r2,-4(fp)
 8018384:	10000616 	blt	r2,zero,80183a0 <close+0x34>
 8018388:	e0bfff17 	ldw	r2,-4(fp)
 801838c:	10c00324 	muli	r3,r2,12
 8018390:	008200b4 	movhi	r2,2050
 8018394:	10b5ff04 	addi	r2,r2,-10244
 8018398:	1885883a 	add	r2,r3,r2
 801839c:	00000106 	br	80183a4 <close+0x38>
 80183a0:	0005883a 	mov	r2,zero
 80183a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80183a8:	e0bffd17 	ldw	r2,-12(fp)
 80183ac:	10001926 	beq	r2,zero,8018414 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80183b0:	e0bffd17 	ldw	r2,-12(fp)
 80183b4:	10800017 	ldw	r2,0(r2)
 80183b8:	10800417 	ldw	r2,16(r2)
 80183bc:	10000626 	beq	r2,zero,80183d8 <close+0x6c>
 80183c0:	e0bffd17 	ldw	r2,-12(fp)
 80183c4:	10800017 	ldw	r2,0(r2)
 80183c8:	10800417 	ldw	r2,16(r2)
 80183cc:	e13ffd17 	ldw	r4,-12(fp)
 80183d0:	103ee83a 	callr	r2
 80183d4:	00000106 	br	80183dc <close+0x70>
 80183d8:	0005883a 	mov	r2,zero
 80183dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80183e0:	e13fff17 	ldw	r4,-4(fp)
 80183e4:	8018ab00 	call	8018ab0 <alt_release_fd>
    if (rval < 0)
 80183e8:	e0bffe17 	ldw	r2,-8(fp)
 80183ec:	1000070e 	bge	r2,zero,801840c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 80183f0:	801831c0 	call	801831c <alt_get_errno>
 80183f4:	1007883a 	mov	r3,r2
 80183f8:	e0bffe17 	ldw	r2,-8(fp)
 80183fc:	0085c83a 	sub	r2,zero,r2
 8018400:	18800015 	stw	r2,0(r3)
      return -1;
 8018404:	00bfffc4 	movi	r2,-1
 8018408:	00000706 	br	8018428 <close+0xbc>
    }
    return 0;
 801840c:	0005883a 	mov	r2,zero
 8018410:	00000506 	br	8018428 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8018414:	801831c0 	call	801831c <alt_get_errno>
 8018418:	1007883a 	mov	r3,r2
 801841c:	00801444 	movi	r2,81
 8018420:	18800015 	stw	r2,0(r3)
    return -1;
 8018424:	00bfffc4 	movi	r2,-1
  }
}
 8018428:	e037883a 	mov	sp,fp
 801842c:	dfc00117 	ldw	ra,4(sp)
 8018430:	df000017 	ldw	fp,0(sp)
 8018434:	dec00204 	addi	sp,sp,8
 8018438:	f800283a 	ret

0801843c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 801843c:	defffb04 	addi	sp,sp,-20
 8018440:	df000415 	stw	fp,16(sp)
 8018444:	df000404 	addi	fp,sp,16
 8018448:	e13ffe15 	stw	r4,-8(fp)
 801844c:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 8018450:	e0fffe17 	ldw	r3,-8(fp)
 8018454:	e0bfff17 	ldw	r2,-4(fp)
 8018458:	1885883a 	add	r2,r3,r2
 801845c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 8018460:	e0bffe17 	ldw	r2,-8(fp)
 8018464:	e0bffc15 	stw	r2,-16(fp)
 8018468:	00000506 	br	8018480 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 801846c:	e0bffc17 	ldw	r2,-16(fp)
 8018470:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 8018474:	e0bffc17 	ldw	r2,-16(fp)
 8018478:	10800804 	addi	r2,r2,32
 801847c:	e0bffc15 	stw	r2,-16(fp)
 8018480:	e0fffc17 	ldw	r3,-16(fp)
 8018484:	e0bffd17 	ldw	r2,-12(fp)
 8018488:	18bff836 	bltu	r3,r2,801846c <__alt_data_end+0xf801846c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 801848c:	e0bffe17 	ldw	r2,-8(fp)
 8018490:	108007cc 	andi	r2,r2,31
 8018494:	10000226 	beq	r2,zero,80184a0 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
 8018498:	e0bffc17 	ldw	r2,-16(fp)
 801849c:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80184a0:	e037883a 	mov	sp,fp
 80184a4:	df000017 	ldw	fp,0(sp)
 80184a8:	dec00104 	addi	sp,sp,4
 80184ac:	f800283a 	ret

080184b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80184b0:	defffc04 	addi	sp,sp,-16
 80184b4:	df000315 	stw	fp,12(sp)
 80184b8:	df000304 	addi	fp,sp,12
 80184bc:	e13ffd15 	stw	r4,-12(fp)
 80184c0:	e17ffe15 	stw	r5,-8(fp)
 80184c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80184c8:	e0bfff17 	ldw	r2,-4(fp)
}
 80184cc:	e037883a 	mov	sp,fp
 80184d0:	df000017 	ldw	fp,0(sp)
 80184d4:	dec00104 	addi	sp,sp,4
 80184d8:	f800283a 	ret

080184dc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 80184dc:	defffc04 	addi	sp,sp,-16
 80184e0:	dfc00315 	stw	ra,12(sp)
 80184e4:	df000215 	stw	fp,8(sp)
 80184e8:	df000204 	addi	fp,sp,8
 80184ec:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 80184f0:	e13fff17 	ldw	r4,-4(fp)
 80184f4:	d1600e04 	addi	r5,gp,-32712
 80184f8:	801ad440 	call	801ad44 <alt_find_dev>
 80184fc:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 8018500:	e0bffe17 	ldw	r2,-8(fp)
 8018504:	10000926 	beq	r2,zero,801852c <alt_flash_open_dev+0x50>
 8018508:	e0bffe17 	ldw	r2,-8(fp)
 801850c:	10800317 	ldw	r2,12(r2)
 8018510:	10000626 	beq	r2,zero,801852c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 8018514:	e0bffe17 	ldw	r2,-8(fp)
 8018518:	10800317 	ldw	r2,12(r2)
 801851c:	e13ffe17 	ldw	r4,-8(fp)
 8018520:	e17fff17 	ldw	r5,-4(fp)
 8018524:	103ee83a 	callr	r2
 8018528:	00000106 	br	8018530 <alt_flash_open_dev+0x54>
  }

  return dev;
 801852c:	e0bffe17 	ldw	r2,-8(fp)
}
 8018530:	e037883a 	mov	sp,fp
 8018534:	dfc00117 	ldw	ra,4(sp)
 8018538:	df000017 	ldw	fp,0(sp)
 801853c:	dec00204 	addi	sp,sp,8
 8018540:	f800283a 	ret

08018544 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 8018544:	defffd04 	addi	sp,sp,-12
 8018548:	dfc00215 	stw	ra,8(sp)
 801854c:	df000115 	stw	fp,4(sp)
 8018550:	df000104 	addi	fp,sp,4
 8018554:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 8018558:	e0bfff17 	ldw	r2,-4(fp)
 801855c:	10000726 	beq	r2,zero,801857c <alt_flash_close_dev+0x38>
 8018560:	e0bfff17 	ldw	r2,-4(fp)
 8018564:	10800417 	ldw	r2,16(r2)
 8018568:	10000426 	beq	r2,zero,801857c <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 801856c:	e0bfff17 	ldw	r2,-4(fp)
 8018570:	10800417 	ldw	r2,16(r2)
 8018574:	e13fff17 	ldw	r4,-4(fp)
 8018578:	103ee83a 	callr	r2
  }
  return;
 801857c:	0001883a 	nop
}
 8018580:	e037883a 	mov	sp,fp
 8018584:	dfc00117 	ldw	ra,4(sp)
 8018588:	df000017 	ldw	fp,0(sp)
 801858c:	dec00204 	addi	sp,sp,8
 8018590:	f800283a 	ret

08018594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018594:	defffe04 	addi	sp,sp,-8
 8018598:	dfc00115 	stw	ra,4(sp)
 801859c:	df000015 	stw	fp,0(sp)
 80185a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80185a4:	008200b4 	movhi	r2,2050
 80185a8:	10bac204 	addi	r2,r2,-5368
 80185ac:	10800017 	ldw	r2,0(r2)
 80185b0:	10000526 	beq	r2,zero,80185c8 <alt_get_errno+0x34>
 80185b4:	008200b4 	movhi	r2,2050
 80185b8:	10bac204 	addi	r2,r2,-5368
 80185bc:	10800017 	ldw	r2,0(r2)
 80185c0:	103ee83a 	callr	r2
 80185c4:	00000206 	br	80185d0 <alt_get_errno+0x3c>
 80185c8:	008200b4 	movhi	r2,2050
 80185cc:	10bace04 	addi	r2,r2,-5320
}
 80185d0:	e037883a 	mov	sp,fp
 80185d4:	dfc00117 	ldw	ra,4(sp)
 80185d8:	df000017 	ldw	fp,0(sp)
 80185dc:	dec00204 	addi	sp,sp,8
 80185e0:	f800283a 	ret

080185e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80185e4:	defffb04 	addi	sp,sp,-20
 80185e8:	dfc00415 	stw	ra,16(sp)
 80185ec:	df000315 	stw	fp,12(sp)
 80185f0:	df000304 	addi	fp,sp,12
 80185f4:	e13ffe15 	stw	r4,-8(fp)
 80185f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80185fc:	e0bffe17 	ldw	r2,-8(fp)
 8018600:	10000616 	blt	r2,zero,801861c <fstat+0x38>
 8018604:	e0bffe17 	ldw	r2,-8(fp)
 8018608:	10c00324 	muli	r3,r2,12
 801860c:	008200b4 	movhi	r2,2050
 8018610:	10b5ff04 	addi	r2,r2,-10244
 8018614:	1885883a 	add	r2,r3,r2
 8018618:	00000106 	br	8018620 <fstat+0x3c>
 801861c:	0005883a 	mov	r2,zero
 8018620:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8018624:	e0bffd17 	ldw	r2,-12(fp)
 8018628:	10001026 	beq	r2,zero,801866c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 801862c:	e0bffd17 	ldw	r2,-12(fp)
 8018630:	10800017 	ldw	r2,0(r2)
 8018634:	10800817 	ldw	r2,32(r2)
 8018638:	10000726 	beq	r2,zero,8018658 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 801863c:	e0bffd17 	ldw	r2,-12(fp)
 8018640:	10800017 	ldw	r2,0(r2)
 8018644:	10800817 	ldw	r2,32(r2)
 8018648:	e13ffd17 	ldw	r4,-12(fp)
 801864c:	e17fff17 	ldw	r5,-4(fp)
 8018650:	103ee83a 	callr	r2
 8018654:	00000a06 	br	8018680 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8018658:	e0bfff17 	ldw	r2,-4(fp)
 801865c:	00c80004 	movi	r3,8192
 8018660:	10c00115 	stw	r3,4(r2)
      return 0;
 8018664:	0005883a 	mov	r2,zero
 8018668:	00000506 	br	8018680 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801866c:	80185940 	call	8018594 <alt_get_errno>
 8018670:	1007883a 	mov	r3,r2
 8018674:	00801444 	movi	r2,81
 8018678:	18800015 	stw	r2,0(r3)
    return -1;
 801867c:	00bfffc4 	movi	r2,-1
  }
}
 8018680:	e037883a 	mov	sp,fp
 8018684:	dfc00117 	ldw	ra,4(sp)
 8018688:	df000017 	ldw	fp,0(sp)
 801868c:	dec00204 	addi	sp,sp,8
 8018690:	f800283a 	ret

08018694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018694:	defffe04 	addi	sp,sp,-8
 8018698:	dfc00115 	stw	ra,4(sp)
 801869c:	df000015 	stw	fp,0(sp)
 80186a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80186a4:	008200b4 	movhi	r2,2050
 80186a8:	10bac204 	addi	r2,r2,-5368
 80186ac:	10800017 	ldw	r2,0(r2)
 80186b0:	10000526 	beq	r2,zero,80186c8 <alt_get_errno+0x34>
 80186b4:	008200b4 	movhi	r2,2050
 80186b8:	10bac204 	addi	r2,r2,-5368
 80186bc:	10800017 	ldw	r2,0(r2)
 80186c0:	103ee83a 	callr	r2
 80186c4:	00000206 	br	80186d0 <alt_get_errno+0x3c>
 80186c8:	008200b4 	movhi	r2,2050
 80186cc:	10bace04 	addi	r2,r2,-5320
}
 80186d0:	e037883a 	mov	sp,fp
 80186d4:	dfc00117 	ldw	ra,4(sp)
 80186d8:	df000017 	ldw	fp,0(sp)
 80186dc:	dec00204 	addi	sp,sp,8
 80186e0:	f800283a 	ret

080186e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80186e4:	deffed04 	addi	sp,sp,-76
 80186e8:	dfc01215 	stw	ra,72(sp)
 80186ec:	df001115 	stw	fp,68(sp)
 80186f0:	df001104 	addi	fp,sp,68
 80186f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80186f8:	e0bfff17 	ldw	r2,-4(fp)
 80186fc:	10000616 	blt	r2,zero,8018718 <isatty+0x34>
 8018700:	e0bfff17 	ldw	r2,-4(fp)
 8018704:	10c00324 	muli	r3,r2,12
 8018708:	008200b4 	movhi	r2,2050
 801870c:	10b5ff04 	addi	r2,r2,-10244
 8018710:	1885883a 	add	r2,r3,r2
 8018714:	00000106 	br	801871c <isatty+0x38>
 8018718:	0005883a 	mov	r2,zero
 801871c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8018720:	e0bfef17 	ldw	r2,-68(fp)
 8018724:	10000e26 	beq	r2,zero,8018760 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8018728:	e0bfef17 	ldw	r2,-68(fp)
 801872c:	10800017 	ldw	r2,0(r2)
 8018730:	10800817 	ldw	r2,32(r2)
 8018734:	1000021e 	bne	r2,zero,8018740 <isatty+0x5c>
    {
      return 1;
 8018738:	00800044 	movi	r2,1
 801873c:	00000d06 	br	8018774 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8018740:	e0bff004 	addi	r2,fp,-64
 8018744:	e13fff17 	ldw	r4,-4(fp)
 8018748:	100b883a 	mov	r5,r2
 801874c:	80185e40 	call	80185e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8018750:	e0bff117 	ldw	r2,-60(fp)
 8018754:	10880020 	cmpeqi	r2,r2,8192
 8018758:	10803fcc 	andi	r2,r2,255
 801875c:	00000506 	br	8018774 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8018760:	80186940 	call	8018694 <alt_get_errno>
 8018764:	1007883a 	mov	r3,r2
 8018768:	00801444 	movi	r2,81
 801876c:	18800015 	stw	r2,0(r3)
    return 0;
 8018770:	0005883a 	mov	r2,zero
  }
}
 8018774:	e037883a 	mov	sp,fp
 8018778:	dfc00117 	ldw	ra,4(sp)
 801877c:	df000017 	ldw	fp,0(sp)
 8018780:	dec00204 	addi	sp,sp,8
 8018784:	f800283a 	ret

08018788 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018788:	defffe04 	addi	sp,sp,-8
 801878c:	dfc00115 	stw	ra,4(sp)
 8018790:	df000015 	stw	fp,0(sp)
 8018794:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018798:	008200b4 	movhi	r2,2050
 801879c:	10bac204 	addi	r2,r2,-5368
 80187a0:	10800017 	ldw	r2,0(r2)
 80187a4:	10000526 	beq	r2,zero,80187bc <alt_get_errno+0x34>
 80187a8:	008200b4 	movhi	r2,2050
 80187ac:	10bac204 	addi	r2,r2,-5368
 80187b0:	10800017 	ldw	r2,0(r2)
 80187b4:	103ee83a 	callr	r2
 80187b8:	00000206 	br	80187c4 <alt_get_errno+0x3c>
 80187bc:	008200b4 	movhi	r2,2050
 80187c0:	10bace04 	addi	r2,r2,-5320
}
 80187c4:	e037883a 	mov	sp,fp
 80187c8:	dfc00117 	ldw	ra,4(sp)
 80187cc:	df000017 	ldw	fp,0(sp)
 80187d0:	dec00204 	addi	sp,sp,8
 80187d4:	f800283a 	ret

080187d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80187d8:	defff904 	addi	sp,sp,-28
 80187dc:	dfc00615 	stw	ra,24(sp)
 80187e0:	df000515 	stw	fp,20(sp)
 80187e4:	df000504 	addi	fp,sp,20
 80187e8:	e13ffd15 	stw	r4,-12(fp)
 80187ec:	e17ffe15 	stw	r5,-8(fp)
 80187f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80187f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80187f8:	e0bffd17 	ldw	r2,-12(fp)
 80187fc:	10000616 	blt	r2,zero,8018818 <lseek+0x40>
 8018800:	e0bffd17 	ldw	r2,-12(fp)
 8018804:	10c00324 	muli	r3,r2,12
 8018808:	008200b4 	movhi	r2,2050
 801880c:	10b5ff04 	addi	r2,r2,-10244
 8018810:	1885883a 	add	r2,r3,r2
 8018814:	00000106 	br	801881c <lseek+0x44>
 8018818:	0005883a 	mov	r2,zero
 801881c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8018820:	e0bffc17 	ldw	r2,-16(fp)
 8018824:	10001026 	beq	r2,zero,8018868 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8018828:	e0bffc17 	ldw	r2,-16(fp)
 801882c:	10800017 	ldw	r2,0(r2)
 8018830:	10800717 	ldw	r2,28(r2)
 8018834:	10000926 	beq	r2,zero,801885c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8018838:	e0bffc17 	ldw	r2,-16(fp)
 801883c:	10800017 	ldw	r2,0(r2)
 8018840:	10800717 	ldw	r2,28(r2)
 8018844:	e13ffc17 	ldw	r4,-16(fp)
 8018848:	e17ffe17 	ldw	r5,-8(fp)
 801884c:	e1bfff17 	ldw	r6,-4(fp)
 8018850:	103ee83a 	callr	r2
 8018854:	e0bffb15 	stw	r2,-20(fp)
 8018858:	00000506 	br	8018870 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 801885c:	00bfde84 	movi	r2,-134
 8018860:	e0bffb15 	stw	r2,-20(fp)
 8018864:	00000206 	br	8018870 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8018868:	00bfebc4 	movi	r2,-81
 801886c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8018870:	e0bffb17 	ldw	r2,-20(fp)
 8018874:	1000070e 	bge	r2,zero,8018894 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8018878:	80187880 	call	8018788 <alt_get_errno>
 801887c:	1007883a 	mov	r3,r2
 8018880:	e0bffb17 	ldw	r2,-20(fp)
 8018884:	0085c83a 	sub	r2,zero,r2
 8018888:	18800015 	stw	r2,0(r3)
    rc = -1;
 801888c:	00bfffc4 	movi	r2,-1
 8018890:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8018894:	e0bffb17 	ldw	r2,-20(fp)
}
 8018898:	e037883a 	mov	sp,fp
 801889c:	dfc00117 	ldw	ra,4(sp)
 80188a0:	df000017 	ldw	fp,0(sp)
 80188a4:	dec00204 	addi	sp,sp,8
 80188a8:	f800283a 	ret

080188ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80188ac:	defffd04 	addi	sp,sp,-12
 80188b0:	dfc00215 	stw	ra,8(sp)
 80188b4:	df000115 	stw	fp,4(sp)
 80188b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80188bc:	0009883a 	mov	r4,zero
 80188c0:	8018d400 	call	8018d40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80188c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80188c8:	8018d740 	call	8018d74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80188cc:	010200b4 	movhi	r4,2050
 80188d0:	2133ac04 	addi	r4,r4,-12624
 80188d4:	014200b4 	movhi	r5,2050
 80188d8:	2973ac04 	addi	r5,r5,-12624
 80188dc:	018200b4 	movhi	r6,2050
 80188e0:	31b3ac04 	addi	r6,r6,-12624
 80188e4:	801b1640 	call	801b164 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80188e8:	801ac8c0 	call	801ac8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80188ec:	010200b4 	movhi	r4,2050
 80188f0:	212b3a04 	addi	r4,r4,-21272
 80188f4:	801ba740 	call	801ba74 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80188f8:	d1201d17 	ldw	r4,-32652(gp)
 80188fc:	d0e01e17 	ldw	r3,-32648(gp)
 8018900:	d0a01f17 	ldw	r2,-32644(gp)
 8018904:	180b883a 	mov	r5,r3
 8018908:	100d883a 	mov	r6,r2
 801890c:	80023200 	call	8002320 <main>
 8018910:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8018914:	01000044 	movi	r4,1
 8018918:	801836c0 	call	801836c <close>
  exit (result);
 801891c:	e13fff17 	ldw	r4,-4(fp)
 8018920:	801ba880 	call	801ba88 <exit>

08018924 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8018924:	defffe04 	addi	sp,sp,-8
 8018928:	df000115 	stw	fp,4(sp)
 801892c:	df000104 	addi	fp,sp,4
 8018930:	e13fff15 	stw	r4,-4(fp)
}
 8018934:	e037883a 	mov	sp,fp
 8018938:	df000017 	ldw	fp,0(sp)
 801893c:	dec00104 	addi	sp,sp,4
 8018940:	f800283a 	ret

08018944 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8018944:	defffe04 	addi	sp,sp,-8
 8018948:	df000115 	stw	fp,4(sp)
 801894c:	df000104 	addi	fp,sp,4
 8018950:	e13fff15 	stw	r4,-4(fp)
}
 8018954:	e037883a 	mov	sp,fp
 8018958:	df000017 	ldw	fp,0(sp)
 801895c:	dec00104 	addi	sp,sp,4
 8018960:	f800283a 	ret

08018964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018964:	defffe04 	addi	sp,sp,-8
 8018968:	dfc00115 	stw	ra,4(sp)
 801896c:	df000015 	stw	fp,0(sp)
 8018970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018974:	008200b4 	movhi	r2,2050
 8018978:	10bac204 	addi	r2,r2,-5368
 801897c:	10800017 	ldw	r2,0(r2)
 8018980:	10000526 	beq	r2,zero,8018998 <alt_get_errno+0x34>
 8018984:	008200b4 	movhi	r2,2050
 8018988:	10bac204 	addi	r2,r2,-5368
 801898c:	10800017 	ldw	r2,0(r2)
 8018990:	103ee83a 	callr	r2
 8018994:	00000206 	br	80189a0 <alt_get_errno+0x3c>
 8018998:	008200b4 	movhi	r2,2050
 801899c:	10bace04 	addi	r2,r2,-5320
}
 80189a0:	e037883a 	mov	sp,fp
 80189a4:	dfc00117 	ldw	ra,4(sp)
 80189a8:	df000017 	ldw	fp,0(sp)
 80189ac:	dec00204 	addi	sp,sp,8
 80189b0:	f800283a 	ret

080189b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80189b4:	defff904 	addi	sp,sp,-28
 80189b8:	dfc00615 	stw	ra,24(sp)
 80189bc:	df000515 	stw	fp,20(sp)
 80189c0:	df000504 	addi	fp,sp,20
 80189c4:	e13ffd15 	stw	r4,-12(fp)
 80189c8:	e17ffe15 	stw	r5,-8(fp)
 80189cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80189d0:	e0bffd17 	ldw	r2,-12(fp)
 80189d4:	10000616 	blt	r2,zero,80189f0 <read+0x3c>
 80189d8:	e0bffd17 	ldw	r2,-12(fp)
 80189dc:	10c00324 	muli	r3,r2,12
 80189e0:	008200b4 	movhi	r2,2050
 80189e4:	10b5ff04 	addi	r2,r2,-10244
 80189e8:	1885883a 	add	r2,r3,r2
 80189ec:	00000106 	br	80189f4 <read+0x40>
 80189f0:	0005883a 	mov	r2,zero
 80189f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80189f8:	e0bffb17 	ldw	r2,-20(fp)
 80189fc:	10002226 	beq	r2,zero,8018a88 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8018a00:	e0bffb17 	ldw	r2,-20(fp)
 8018a04:	10800217 	ldw	r2,8(r2)
 8018a08:	108000cc 	andi	r2,r2,3
 8018a0c:	10800060 	cmpeqi	r2,r2,1
 8018a10:	1000181e 	bne	r2,zero,8018a74 <read+0xc0>
        (fd->dev->read))
 8018a14:	e0bffb17 	ldw	r2,-20(fp)
 8018a18:	10800017 	ldw	r2,0(r2)
 8018a1c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8018a20:	10001426 	beq	r2,zero,8018a74 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8018a24:	e0bffb17 	ldw	r2,-20(fp)
 8018a28:	10800017 	ldw	r2,0(r2)
 8018a2c:	10800517 	ldw	r2,20(r2)
 8018a30:	e0ffff17 	ldw	r3,-4(fp)
 8018a34:	e13ffb17 	ldw	r4,-20(fp)
 8018a38:	e17ffe17 	ldw	r5,-8(fp)
 8018a3c:	180d883a 	mov	r6,r3
 8018a40:	103ee83a 	callr	r2
 8018a44:	e0bffc15 	stw	r2,-16(fp)
 8018a48:	e0bffc17 	ldw	r2,-16(fp)
 8018a4c:	1000070e 	bge	r2,zero,8018a6c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8018a50:	80189640 	call	8018964 <alt_get_errno>
 8018a54:	1007883a 	mov	r3,r2
 8018a58:	e0bffc17 	ldw	r2,-16(fp)
 8018a5c:	0085c83a 	sub	r2,zero,r2
 8018a60:	18800015 	stw	r2,0(r3)
          return -1;
 8018a64:	00bfffc4 	movi	r2,-1
 8018a68:	00000c06 	br	8018a9c <read+0xe8>
        }
        return rval;
 8018a6c:	e0bffc17 	ldw	r2,-16(fp)
 8018a70:	00000a06 	br	8018a9c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8018a74:	80189640 	call	8018964 <alt_get_errno>
 8018a78:	1007883a 	mov	r3,r2
 8018a7c:	00800344 	movi	r2,13
 8018a80:	18800015 	stw	r2,0(r3)
 8018a84:	00000406 	br	8018a98 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8018a88:	80189640 	call	8018964 <alt_get_errno>
 8018a8c:	1007883a 	mov	r3,r2
 8018a90:	00801444 	movi	r2,81
 8018a94:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8018a98:	00bfffc4 	movi	r2,-1
}
 8018a9c:	e037883a 	mov	sp,fp
 8018aa0:	dfc00117 	ldw	ra,4(sp)
 8018aa4:	df000017 	ldw	fp,0(sp)
 8018aa8:	dec00204 	addi	sp,sp,8
 8018aac:	f800283a 	ret

08018ab0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8018ab0:	defffe04 	addi	sp,sp,-8
 8018ab4:	df000115 	stw	fp,4(sp)
 8018ab8:	df000104 	addi	fp,sp,4
 8018abc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8018ac0:	e0bfff17 	ldw	r2,-4(fp)
 8018ac4:	108000d0 	cmplti	r2,r2,3
 8018ac8:	10000d1e 	bne	r2,zero,8018b00 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8018acc:	008200b4 	movhi	r2,2050
 8018ad0:	10b5ff04 	addi	r2,r2,-10244
 8018ad4:	e0ffff17 	ldw	r3,-4(fp)
 8018ad8:	18c00324 	muli	r3,r3,12
 8018adc:	10c5883a 	add	r2,r2,r3
 8018ae0:	10800204 	addi	r2,r2,8
 8018ae4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8018ae8:	008200b4 	movhi	r2,2050
 8018aec:	10b5ff04 	addi	r2,r2,-10244
 8018af0:	e0ffff17 	ldw	r3,-4(fp)
 8018af4:	18c00324 	muli	r3,r3,12
 8018af8:	10c5883a 	add	r2,r2,r3
 8018afc:	10000015 	stw	zero,0(r2)
  }
}
 8018b00:	e037883a 	mov	sp,fp
 8018b04:	df000017 	ldw	fp,0(sp)
 8018b08:	dec00104 	addi	sp,sp,4
 8018b0c:	f800283a 	ret

08018b10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8018b10:	defff904 	addi	sp,sp,-28
 8018b14:	df000615 	stw	fp,24(sp)
 8018b18:	df000604 	addi	fp,sp,24
 8018b1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018b20:	0005303a 	rdctl	r2,status
 8018b24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018b28:	e0fffc17 	ldw	r3,-16(fp)
 8018b2c:	00bfff84 	movi	r2,-2
 8018b30:	1884703a 	and	r2,r3,r2
 8018b34:	1001703a 	wrctl	status,r2
  
  return context;
 8018b38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8018b3c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8018b40:	d0a01017 	ldw	r2,-32704(gp)
 8018b44:	10c000c4 	addi	r3,r2,3
 8018b48:	00bfff04 	movi	r2,-4
 8018b4c:	1884703a 	and	r2,r3,r2
 8018b50:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8018b54:	d0e01017 	ldw	r3,-32704(gp)
 8018b58:	e0bfff17 	ldw	r2,-4(fp)
 8018b5c:	1887883a 	add	r3,r3,r2
 8018b60:	00840034 	movhi	r2,4096
 8018b64:	10800004 	addi	r2,r2,0
 8018b68:	10c0062e 	bgeu	r2,r3,8018b84 <sbrk+0x74>
 8018b6c:	e0bffa17 	ldw	r2,-24(fp)
 8018b70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018b74:	e0bffd17 	ldw	r2,-12(fp)
 8018b78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8018b7c:	00bfffc4 	movi	r2,-1
 8018b80:	00000b06 	br	8018bb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8018b84:	d0a01017 	ldw	r2,-32704(gp)
 8018b88:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8018b8c:	d0e01017 	ldw	r3,-32704(gp)
 8018b90:	e0bfff17 	ldw	r2,-4(fp)
 8018b94:	1885883a 	add	r2,r3,r2
 8018b98:	d0a01015 	stw	r2,-32704(gp)
 8018b9c:	e0bffa17 	ldw	r2,-24(fp)
 8018ba0:	e0bffe15 	stw	r2,-8(fp)
 8018ba4:	e0bffe17 	ldw	r2,-8(fp)
 8018ba8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8018bac:	e0bffb17 	ldw	r2,-20(fp)
} 
 8018bb0:	e037883a 	mov	sp,fp
 8018bb4:	df000017 	ldw	fp,0(sp)
 8018bb8:	dec00104 	addi	sp,sp,4
 8018bbc:	f800283a 	ret

08018bc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018bc0:	defffe04 	addi	sp,sp,-8
 8018bc4:	dfc00115 	stw	ra,4(sp)
 8018bc8:	df000015 	stw	fp,0(sp)
 8018bcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018bd0:	008200b4 	movhi	r2,2050
 8018bd4:	10bac204 	addi	r2,r2,-5368
 8018bd8:	10800017 	ldw	r2,0(r2)
 8018bdc:	10000526 	beq	r2,zero,8018bf4 <alt_get_errno+0x34>
 8018be0:	008200b4 	movhi	r2,2050
 8018be4:	10bac204 	addi	r2,r2,-5368
 8018be8:	10800017 	ldw	r2,0(r2)
 8018bec:	103ee83a 	callr	r2
 8018bf0:	00000206 	br	8018bfc <alt_get_errno+0x3c>
 8018bf4:	008200b4 	movhi	r2,2050
 8018bf8:	10bace04 	addi	r2,r2,-5320
}
 8018bfc:	e037883a 	mov	sp,fp
 8018c00:	dfc00117 	ldw	ra,4(sp)
 8018c04:	df000017 	ldw	fp,0(sp)
 8018c08:	dec00204 	addi	sp,sp,8
 8018c0c:	f800283a 	ret

08018c10 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8018c10:	defff904 	addi	sp,sp,-28
 8018c14:	dfc00615 	stw	ra,24(sp)
 8018c18:	df000515 	stw	fp,20(sp)
 8018c1c:	df000504 	addi	fp,sp,20
 8018c20:	e13ffd15 	stw	r4,-12(fp)
 8018c24:	e17ffe15 	stw	r5,-8(fp)
 8018c28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8018c2c:	e0bffd17 	ldw	r2,-12(fp)
 8018c30:	10000616 	blt	r2,zero,8018c4c <write+0x3c>
 8018c34:	e0bffd17 	ldw	r2,-12(fp)
 8018c38:	10c00324 	muli	r3,r2,12
 8018c3c:	008200b4 	movhi	r2,2050
 8018c40:	10b5ff04 	addi	r2,r2,-10244
 8018c44:	1885883a 	add	r2,r3,r2
 8018c48:	00000106 	br	8018c50 <write+0x40>
 8018c4c:	0005883a 	mov	r2,zero
 8018c50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8018c54:	e0bffb17 	ldw	r2,-20(fp)
 8018c58:	10002126 	beq	r2,zero,8018ce0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8018c5c:	e0bffb17 	ldw	r2,-20(fp)
 8018c60:	10800217 	ldw	r2,8(r2)
 8018c64:	108000cc 	andi	r2,r2,3
 8018c68:	10001826 	beq	r2,zero,8018ccc <write+0xbc>
 8018c6c:	e0bffb17 	ldw	r2,-20(fp)
 8018c70:	10800017 	ldw	r2,0(r2)
 8018c74:	10800617 	ldw	r2,24(r2)
 8018c78:	10001426 	beq	r2,zero,8018ccc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8018c7c:	e0bffb17 	ldw	r2,-20(fp)
 8018c80:	10800017 	ldw	r2,0(r2)
 8018c84:	10800617 	ldw	r2,24(r2)
 8018c88:	e0ffff17 	ldw	r3,-4(fp)
 8018c8c:	e13ffb17 	ldw	r4,-20(fp)
 8018c90:	e17ffe17 	ldw	r5,-8(fp)
 8018c94:	180d883a 	mov	r6,r3
 8018c98:	103ee83a 	callr	r2
 8018c9c:	e0bffc15 	stw	r2,-16(fp)
 8018ca0:	e0bffc17 	ldw	r2,-16(fp)
 8018ca4:	1000070e 	bge	r2,zero,8018cc4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8018ca8:	8018bc00 	call	8018bc0 <alt_get_errno>
 8018cac:	1007883a 	mov	r3,r2
 8018cb0:	e0bffc17 	ldw	r2,-16(fp)
 8018cb4:	0085c83a 	sub	r2,zero,r2
 8018cb8:	18800015 	stw	r2,0(r3)
        return -1;
 8018cbc:	00bfffc4 	movi	r2,-1
 8018cc0:	00000c06 	br	8018cf4 <write+0xe4>
      }
      return rval;
 8018cc4:	e0bffc17 	ldw	r2,-16(fp)
 8018cc8:	00000a06 	br	8018cf4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8018ccc:	8018bc00 	call	8018bc0 <alt_get_errno>
 8018cd0:	1007883a 	mov	r3,r2
 8018cd4:	00800344 	movi	r2,13
 8018cd8:	18800015 	stw	r2,0(r3)
 8018cdc:	00000406 	br	8018cf0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8018ce0:	8018bc00 	call	8018bc0 <alt_get_errno>
 8018ce4:	1007883a 	mov	r3,r2
 8018ce8:	00801444 	movi	r2,81
 8018cec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8018cf0:	00bfffc4 	movi	r2,-1
}
 8018cf4:	e037883a 	mov	sp,fp
 8018cf8:	dfc00117 	ldw	ra,4(sp)
 8018cfc:	df000017 	ldw	fp,0(sp)
 8018d00:	dec00204 	addi	sp,sp,8
 8018d04:	f800283a 	ret

08018d08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8018d08:	defffd04 	addi	sp,sp,-12
 8018d0c:	dfc00215 	stw	ra,8(sp)
 8018d10:	df000115 	stw	fp,4(sp)
 8018d14:	df000104 	addi	fp,sp,4
 8018d18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8018d1c:	e13fff17 	ldw	r4,-4(fp)
 8018d20:	014200b4 	movhi	r5,2050
 8018d24:	297abf04 	addi	r5,r5,-5380
 8018d28:	801abe80 	call	801abe8 <alt_dev_llist_insert>
}
 8018d2c:	e037883a 	mov	sp,fp
 8018d30:	dfc00117 	ldw	ra,4(sp)
 8018d34:	df000017 	ldw	fp,0(sp)
 8018d38:	dec00204 	addi	sp,sp,8
 8018d3c:	f800283a 	ret

08018d40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8018d40:	defffd04 	addi	sp,sp,-12
 8018d44:	dfc00215 	stw	ra,8(sp)
 8018d48:	df000115 	stw	fp,4(sp)
 8018d4c:	df000104 	addi	fp,sp,4
 8018d50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 8018d54:	801b5ec0 	call	801b5ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8018d58:	00800044 	movi	r2,1
 8018d5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8018d60:	e037883a 	mov	sp,fp
 8018d64:	dfc00117 	ldw	ra,4(sp)
 8018d68:	df000017 	ldw	fp,0(sp)
 8018d6c:	dec00204 	addi	sp,sp,8
 8018d70:	f800283a 	ret

08018d74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8018d74:	defffe04 	addi	sp,sp,-8
 8018d78:	dfc00115 	stw	ra,4(sp)
 8018d7c:	df000015 	stw	fp,0(sp)
 8018d80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1S, timer_1s);
 8018d84:	01008034 	movhi	r4,512
 8018d88:	21140004 	addi	r4,r4,20480
 8018d8c:	000b883a 	mov	r5,zero
 8018d90:	01800084 	movi	r6,2
 8018d94:	01c00044 	movi	r7,1
 8018d98:	801a3a40 	call	801a3a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_SCROLLX, timer_scrollX);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 8018d9c:	010200b4 	movhi	r4,2050
 8018da0:	21365f04 	addi	r4,r4,-9860
 8018da4:	8018e240 	call	8018e24 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 8018da8:	010200b4 	movhi	r4,2050
 8018dac:	21369c04 	addi	r4,r4,-9616
 8018db0:	000b883a 	mov	r5,zero
 8018db4:	01800044 	movi	r6,1
 8018db8:	8019a480 	call	8019a48 <altera_avalon_jtag_uart_init>
 8018dbc:	010200b4 	movhi	r4,2050
 8018dc0:	21369204 	addi	r4,r4,-9656
 8018dc4:	8018d080 	call	8018d08 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID0, sysid0);
 8018dc8:	0001883a 	nop
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 8018dcc:	010200b4 	movhi	r4,2050
 8018dd0:	213aaa04 	addi	r4,r4,-5464
 8018dd4:	8018d080 	call	8018d08 <alt_dev_reg>
}
 8018dd8:	e037883a 	mov	sp,fp
 8018ddc:	dfc00117 	ldw	ra,4(sp)
 8018de0:	df000017 	ldw	fp,0(sp)
 8018de4:	dec00204 	addi	sp,sp,8
 8018de8:	f800283a 	ret

08018dec <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 8018dec:	defffd04 	addi	sp,sp,-12
 8018df0:	dfc00215 	stw	ra,8(sp)
 8018df4:	df000115 	stw	fp,4(sp)
 8018df8:	df000104 	addi	fp,sp,4
 8018dfc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 8018e00:	e13fff17 	ldw	r4,-4(fp)
 8018e04:	014200b4 	movhi	r5,2050
 8018e08:	297ac304 	addi	r5,r5,-5364
 8018e0c:	801abe80 	call	801abe8 <alt_dev_llist_insert>
}
 8018e10:	e037883a 	mov	sp,fp
 8018e14:	dfc00117 	ldw	ra,4(sp)
 8018e18:	df000017 	ldw	fp,0(sp)
 8018e1c:	dec00204 	addi	sp,sp,8
 8018e20:	f800283a 	ret

08018e24 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 8018e24:	defffc04 	addi	sp,sp,-16
 8018e28:	dfc00315 	stw	ra,12(sp)
 8018e2c:	df000215 	stw	fp,8(sp)
 8018e30:	df000204 	addi	fp,sp,8
 8018e34:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 8018e38:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 8018e3c:	e13fff17 	ldw	r4,-4(fp)
 8018e40:	8018e780 	call	8018e78 <alt_epcs_flash_query>
 8018e44:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 8018e48:	e0bffe17 	ldw	r2,-8(fp)
 8018e4c:	1000041e 	bne	r2,zero,8018e60 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 8018e50:	e0bfff17 	ldw	r2,-4(fp)
 8018e54:	1009883a 	mov	r4,r2
 8018e58:	8018dec0 	call	8018dec <alt_flash_device_register>
 8018e5c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 8018e60:	e0bffe17 	ldw	r2,-8(fp)
}
 8018e64:	e037883a 	mov	sp,fp
 8018e68:	dfc00117 	ldw	ra,4(sp)
 8018e6c:	df000017 	ldw	fp,0(sp)
 8018e70:	dec00204 	addi	sp,sp,8
 8018e74:	f800283a 	ret

08018e78 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 8018e78:	defffc04 	addi	sp,sp,-16
 8018e7c:	dfc00315 	stw	ra,12(sp)
 8018e80:	df000215 	stw	fp,8(sp)
 8018e84:	df000204 	addi	fp,sp,8
 8018e88:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 8018e8c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 8018e90:	e0bfff17 	ldw	r2,-4(fp)
 8018e94:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 8018e98:	e0bfff17 	ldw	r2,-4(fp)
 8018e9c:	10802e17 	ldw	r2,184(r2)
 8018ea0:	1009883a 	mov	r4,r2
 8018ea4:	801a8b80 	call	801a8b8 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 8018ea8:	10c03fcc 	andi	r3,r2,255
 8018eac:	e0bfff17 	ldw	r2,-4(fp)
 8018eb0:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 8018eb4:	e0bfff17 	ldw	r2,-4(fp)
 8018eb8:	10803017 	ldw	r2,192(r2)
 8018ebc:	10800598 	cmpnei	r2,r2,22
 8018ec0:	10000a1e 	bne	r2,zero,8018eec <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 8018ec4:	e0bfff17 	ldw	r2,-4(fp)
 8018ec8:	00c02034 	movhi	r3,128
 8018ecc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 8018ed0:	e0bfff17 	ldw	r2,-4(fp)
 8018ed4:	00c02004 	movi	r3,128
 8018ed8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 8018edc:	e0bfff17 	ldw	r2,-4(fp)
 8018ee0:	00c00074 	movhi	r3,1
 8018ee4:	10c01015 	stw	r3,64(r2)
 8018ee8:	0000ce06 	br	8019224 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 8018eec:	e0bfff17 	ldw	r2,-4(fp)
 8018ef0:	10803017 	ldw	r2,192(r2)
 8018ef4:	10800518 	cmpnei	r2,r2,20
 8018ef8:	10000a1e 	bne	r2,zero,8018f24 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 8018efc:	e0bfff17 	ldw	r2,-4(fp)
 8018f00:	00c00834 	movhi	r3,32
 8018f04:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 8018f08:	e0bfff17 	ldw	r2,-4(fp)
 8018f0c:	00c00804 	movi	r3,32
 8018f10:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 8018f14:	e0bfff17 	ldw	r2,-4(fp)
 8018f18:	00c00074 	movhi	r3,1
 8018f1c:	10c01015 	stw	r3,64(r2)
 8018f20:	0000c006 	br	8019224 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 8018f24:	e0bfff17 	ldw	r2,-4(fp)
 8018f28:	10803017 	ldw	r2,192(r2)
 8018f2c:	108004d8 	cmpnei	r2,r2,19
 8018f30:	10000a1e 	bne	r2,zero,8018f5c <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 8018f34:	e0bfff17 	ldw	r2,-4(fp)
 8018f38:	00c00434 	movhi	r3,16
 8018f3c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 8018f40:	e0bfff17 	ldw	r2,-4(fp)
 8018f44:	00c00404 	movi	r3,16
 8018f48:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 8018f4c:	e0bfff17 	ldw	r2,-4(fp)
 8018f50:	00c00074 	movhi	r3,1
 8018f54:	10c01015 	stw	r3,64(r2)
 8018f58:	0000b206 	br	8019224 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 8018f5c:	e0bfff17 	ldw	r2,-4(fp)
 8018f60:	10803017 	ldw	r2,192(r2)
 8018f64:	10800498 	cmpnei	r2,r2,18
 8018f68:	10000a1e 	bne	r2,zero,8018f94 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 8018f6c:	e0bfff17 	ldw	r2,-4(fp)
 8018f70:	00c00234 	movhi	r3,8
 8018f74:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 8018f78:	e0bfff17 	ldw	r2,-4(fp)
 8018f7c:	00c00204 	movi	r3,8
 8018f80:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 8018f84:	e0bfff17 	ldw	r2,-4(fp)
 8018f88:	00c00074 	movhi	r3,1
 8018f8c:	10c01015 	stw	r3,64(r2)
 8018f90:	0000a406 	br	8019224 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 8018f94:	e0bfff17 	ldw	r2,-4(fp)
 8018f98:	10803017 	ldw	r2,192(r2)
 8018f9c:	10800418 	cmpnei	r2,r2,16
 8018fa0:	10000a1e 	bne	r2,zero,8018fcc <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 8018fa4:	e0bfff17 	ldw	r2,-4(fp)
 8018fa8:	00c000b4 	movhi	r3,2
 8018fac:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 8018fb0:	e0bfff17 	ldw	r2,-4(fp)
 8018fb4:	00c00104 	movi	r3,4
 8018fb8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 8018fbc:	e0bfff17 	ldw	r2,-4(fp)
 8018fc0:	00e00014 	movui	r3,32768
 8018fc4:	10c01015 	stw	r3,64(r2)
 8018fc8:	00009606 	br	8019224 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 8018fcc:	e0bfff17 	ldw	r2,-4(fp)
 8018fd0:	10802e17 	ldw	r2,184(r2)
 8018fd4:	1009883a 	mov	r4,r2
 8018fd8:	801a9200 	call	801a920 <epcs_read_device_id>
 8018fdc:	1007883a 	mov	r3,r2
 8018fe0:	e0bfff17 	ldw	r2,-4(fp)
 8018fe4:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 8018fe8:	e0bfff17 	ldw	r2,-4(fp)
 8018fec:	10c03017 	ldw	r3,192(r2)
 8018ff0:	00804034 	movhi	r2,256
 8018ff4:	10bfffc4 	addi	r2,r2,-1
 8018ff8:	1886703a 	and	r3,r3,r2
 8018ffc:	00800874 	movhi	r2,33
 8019000:	10ae8544 	addi	r2,r2,-17899
 8019004:	18800a1e 	bne	r3,r2,8019030 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 8019008:	e0bfff17 	ldw	r2,-4(fp)
 801900c:	00c00834 	movhi	r3,32
 8019010:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 8019014:	e0bfff17 	ldw	r2,-4(fp)
 8019018:	00c00804 	movi	r3,32
 801901c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 8019020:	e0bfff17 	ldw	r2,-4(fp)
 8019024:	00c00074 	movhi	r3,1
 8019028:	10c01015 	stw	r3,64(r2)
 801902c:	00007d06 	br	8019224 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 8019030:	e0bfff17 	ldw	r2,-4(fp)
 8019034:	10c03017 	ldw	r3,192(r2)
 8019038:	00804034 	movhi	r2,256
 801903c:	10bfffc4 	addi	r2,r2,-1
 8019040:	1886703a 	and	r3,r3,r2
 8019044:	00800874 	movhi	r2,33
 8019048:	10ae8584 	addi	r2,r2,-17898
 801904c:	18800a1e 	bne	r3,r2,8019078 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 8019050:	e0bfff17 	ldw	r2,-4(fp)
 8019054:	00c01034 	movhi	r3,64
 8019058:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 801905c:	e0bfff17 	ldw	r2,-4(fp)
 8019060:	00c01004 	movi	r3,64
 8019064:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 8019068:	e0bfff17 	ldw	r2,-4(fp)
 801906c:	00c00074 	movhi	r3,1
 8019070:	10c01015 	stw	r3,64(r2)
 8019074:	00006b06 	br	8019224 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 8019078:	e0bfff17 	ldw	r2,-4(fp)
 801907c:	10c03017 	ldw	r3,192(r2)
 8019080:	00804034 	movhi	r2,256
 8019084:	10bfffc4 	addi	r2,r2,-1
 8019088:	1886703a 	and	r3,r3,r2
 801908c:	00800874 	movhi	r2,33
 8019090:	10ae85c4 	addi	r2,r2,-17897
 8019094:	18800a1e 	bne	r3,r2,80190c0 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 8019098:	e0bfff17 	ldw	r2,-4(fp)
 801909c:	00c02034 	movhi	r3,128
 80190a0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 80190a4:	e0bfff17 	ldw	r2,-4(fp)
 80190a8:	00c02004 	movi	r3,128
 80190ac:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 80190b0:	e0bfff17 	ldw	r2,-4(fp)
 80190b4:	00c00074 	movhi	r3,1
 80190b8:	10c01015 	stw	r3,64(r2)
 80190bc:	00005906 	br	8019224 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 80190c0:	e0bfff17 	ldw	r2,-4(fp)
 80190c4:	10c03017 	ldw	r3,192(r2)
 80190c8:	00804034 	movhi	r2,256
 80190cc:	10bfffc4 	addi	r2,r2,-1
 80190d0:	1886703a 	and	r3,r3,r2
 80190d4:	00800874 	movhi	r2,33
 80190d8:	10ae8604 	addi	r2,r2,-17896
 80190dc:	18800a1e 	bne	r3,r2,8019108 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 80190e0:	e0bfff17 	ldw	r2,-4(fp)
 80190e4:	00c04034 	movhi	r3,256
 80190e8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 80190ec:	e0bfff17 	ldw	r2,-4(fp)
 80190f0:	00c04004 	movi	r3,256
 80190f4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 80190f8:	e0bfff17 	ldw	r2,-4(fp)
 80190fc:	00c00074 	movhi	r3,1
 8019100:	10c01015 	stw	r3,64(r2)
 8019104:	00004706 	br	8019224 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 8019108:	e0bfff17 	ldw	r2,-4(fp)
 801910c:	10803017 	ldw	r2,192(r2)
 8019110:	10803fcc 	andi	r2,r2,255
 8019114:	10800618 	cmpnei	r2,r2,24
 8019118:	10000a1e 	bne	r2,zero,8019144 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 801911c:	e0bfff17 	ldw	r2,-4(fp)
 8019120:	00c04034 	movhi	r3,256
 8019124:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 8019128:	e0bfff17 	ldw	r2,-4(fp)
 801912c:	00c01004 	movi	r3,64
 8019130:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 8019134:	e0bfff17 	ldw	r2,-4(fp)
 8019138:	00c00134 	movhi	r3,4
 801913c:	10c01015 	stw	r3,64(r2)
 8019140:	00003806 	br	8019224 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 8019144:	e0bfff17 	ldw	r2,-4(fp)
 8019148:	10803017 	ldw	r2,192(r2)
 801914c:	10803fcc 	andi	r2,r2,255
 8019150:	10800658 	cmpnei	r2,r2,25
 8019154:	10000d1e 	bne	r2,zero,801918c <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 8019158:	e0bfff17 	ldw	r2,-4(fp)
 801915c:	00c08034 	movhi	r3,512
 8019160:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 8019164:	e0bfff17 	ldw	r2,-4(fp)
 8019168:	00c08004 	movi	r3,512
 801916c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 8019170:	e0bfff17 	ldw	r2,-4(fp)
 8019174:	00c00074 	movhi	r3,1
 8019178:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 801917c:	e0bfff17 	ldw	r2,-4(fp)
 8019180:	00c00044 	movi	r3,1
 8019184:	10c03215 	stw	r3,200(r2)
 8019188:	00002606 	br	8019224 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 801918c:	e0bfff17 	ldw	r2,-4(fp)
 8019190:	10803017 	ldw	r2,192(r2)
 8019194:	10803fcc 	andi	r2,r2,255
 8019198:	10800818 	cmpnei	r2,r2,32
 801919c:	10000d1e 	bne	r2,zero,80191d4 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 80191a0:	e0bfff17 	ldw	r2,-4(fp)
 80191a4:	00c10034 	movhi	r3,1024
 80191a8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 80191ac:	e0bfff17 	ldw	r2,-4(fp)
 80191b0:	00c10004 	movi	r3,1024
 80191b4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 80191b8:	e0bfff17 	ldw	r2,-4(fp)
 80191bc:	00c00074 	movhi	r3,1
 80191c0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 80191c4:	e0bfff17 	ldw	r2,-4(fp)
 80191c8:	00c00044 	movi	r3,1
 80191cc:	10c03215 	stw	r3,200(r2)
 80191d0:	00001406 	br	8019224 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 80191d4:	e0bfff17 	ldw	r2,-4(fp)
 80191d8:	10803017 	ldw	r2,192(r2)
 80191dc:	10803fcc 	andi	r2,r2,255
 80191e0:	10800858 	cmpnei	r2,r2,33
 80191e4:	10000d1e 	bne	r2,zero,801921c <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 80191e8:	e0bfff17 	ldw	r2,-4(fp)
 80191ec:	00c20034 	movhi	r3,2048
 80191f0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 80191f4:	e0bfff17 	ldw	r2,-4(fp)
 80191f8:	00c20004 	movi	r3,2048
 80191fc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 8019200:	e0bfff17 	ldw	r2,-4(fp)
 8019204:	00c00074 	movhi	r3,1
 8019208:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 801920c:	e0bfff17 	ldw	r2,-4(fp)
 8019210:	00c00044 	movi	r3,1
 8019214:	10c03215 	stw	r3,200(r2)
 8019218:	00000206 	br	8019224 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 801921c:	00bffb44 	movi	r2,-19
 8019220:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 8019224:	e0bfff17 	ldw	r2,-4(fp)
 8019228:	10800e17 	ldw	r2,56(r2)
 801922c:	1007883a 	mov	r3,r2
 8019230:	e0bfff17 	ldw	r2,-4(fp)
 8019234:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 8019238:	e0bfff17 	ldw	r2,-4(fp)
 801923c:	00c00044 	movi	r3,1
 8019240:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 8019244:	e0bfff17 	ldw	r2,-4(fp)
 8019248:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 801924c:	e0bfff17 	ldw	r2,-4(fp)
 8019250:	00c04004 	movi	r3,256
 8019254:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 8019258:	e0bffe17 	ldw	r2,-8(fp)
}
 801925c:	e037883a 	mov	sp,fp
 8019260:	dfc00117 	ldw	ra,4(sp)
 8019264:	df000017 	ldw	fp,0(sp)
 8019268:	dec00204 	addi	sp,sp,8
 801926c:	f800283a 	ret

08019270 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 8019270:	deffee04 	addi	sp,sp,-72
 8019274:	dfc01115 	stw	ra,68(sp)
 8019278:	df001015 	stw	fp,64(sp)
 801927c:	df001004 	addi	fp,sp,64
 8019280:	e13ffc15 	stw	r4,-16(fp)
 8019284:	e17ffd15 	stw	r5,-12(fp)
 8019288:	e1bffe15 	stw	r6,-8(fp)
 801928c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 8019290:	00800804 	movi	r2,32
 8019294:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 8019298:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 801929c:	00002606 	br	8019338 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 80192a0:	e0bff117 	ldw	r2,-60(fp)
 80192a4:	e0ffff17 	ldw	r3,-4(fp)
 80192a8:	1880012e 	bgeu	r3,r2,80192b0 <alt_epcs_flash_memcmp+0x40>
 80192ac:	1805883a 	mov	r2,r3
 80192b0:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 80192b4:	e0fffe17 	ldw	r3,-8(fp)
 80192b8:	e0bff017 	ldw	r2,-64(fp)
 80192bc:	1887883a 	add	r3,r3,r2
 80192c0:	e0bff404 	addi	r2,fp,-48
 80192c4:	e13ffc17 	ldw	r4,-16(fp)
 80192c8:	180b883a 	mov	r5,r3
 80192cc:	100d883a 	mov	r6,r2
 80192d0:	e1fff217 	ldw	r7,-56(fp)
 80192d4:	801984c0 	call	801984c <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 80192d8:	1000020e 	bge	r2,zero,80192e4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 80192dc:	00bfffc4 	movi	r2,-1
 80192e0:	00001806 	br	8019344 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 80192e4:	e0bff017 	ldw	r2,-64(fp)
 80192e8:	e0fffd17 	ldw	r3,-12(fp)
 80192ec:	1889883a 	add	r4,r3,r2
 80192f0:	e0bff217 	ldw	r2,-56(fp)
 80192f4:	e0fff404 	addi	r3,fp,-48
 80192f8:	180b883a 	mov	r5,r3
 80192fc:	100d883a 	mov	r6,r2
 8019300:	8002d780 	call	8002d78 <memcmp>
 8019304:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 8019308:	e0bff317 	ldw	r2,-52(fp)
 801930c:	10000226 	beq	r2,zero,8019318 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 8019310:	e0bff317 	ldw	r2,-52(fp)
 8019314:	00000b06 	br	8019344 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 8019318:	e0bff217 	ldw	r2,-56(fp)
 801931c:	e0ffff17 	ldw	r3,-4(fp)
 8019320:	1885c83a 	sub	r2,r3,r2
 8019324:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 8019328:	e0fff017 	ldw	r3,-64(fp)
 801932c:	e0bff217 	ldw	r2,-56(fp)
 8019330:	1885883a 	add	r2,r3,r2
 8019334:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 8019338:	e0bfff17 	ldw	r2,-4(fp)
 801933c:	103fd81e 	bne	r2,zero,80192a0 <__alt_data_end+0xf80192a0>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 8019340:	0005883a 	mov	r2,zero
}
 8019344:	e037883a 	mov	sp,fp
 8019348:	dfc00117 	ldw	ra,4(sp)
 801934c:	df000017 	ldw	fp,0(sp)
 8019350:	dec00204 	addi	sp,sp,8
 8019354:	f800283a 	ret

08019358 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 8019358:	defff404 	addi	sp,sp,-48
 801935c:	dfc00b15 	stw	ra,44(sp)
 8019360:	df000a15 	stw	fp,40(sp)
 8019364:	df000a04 	addi	fp,sp,40
 8019368:	e13ffc15 	stw	r4,-16(fp)
 801936c:	e17ffd15 	stw	r5,-12(fp)
 8019370:	e1bffe15 	stw	r6,-8(fp)
 8019374:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 8019378:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 801937c:	e03ff815 	stw	zero,-32(fp)
 8019380:	00008306 	br	8019590 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 8019384:	e0fffc17 	ldw	r3,-16(fp)
 8019388:	e0bff817 	ldw	r2,-32(fp)
 801938c:	1004913a 	slli	r2,r2,4
 8019390:	1885883a 	add	r2,r3,r2
 8019394:	10800d04 	addi	r2,r2,52
 8019398:	10800017 	ldw	r2,0(r2)
 801939c:	e0fffd17 	ldw	r3,-12(fp)
 80193a0:	18807816 	blt	r3,r2,8019584 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 80193a4:	e0fffc17 	ldw	r3,-16(fp)
 80193a8:	e0bff817 	ldw	r2,-32(fp)
 80193ac:	1004913a 	slli	r2,r2,4
 80193b0:	1885883a 	add	r2,r3,r2
 80193b4:	10800d04 	addi	r2,r2,52
 80193b8:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 80193bc:	e13ffc17 	ldw	r4,-16(fp)
 80193c0:	e0bff817 	ldw	r2,-32(fp)
 80193c4:	1004913a 	slli	r2,r2,4
 80193c8:	2085883a 	add	r2,r4,r2
 80193cc:	10800e04 	addi	r2,r2,56
 80193d0:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 80193d4:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 80193d8:	e0fffd17 	ldw	r3,-12(fp)
 80193dc:	1880690e 	bge	r3,r2,8019584 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 80193e0:	e0fffc17 	ldw	r3,-16(fp)
 80193e4:	e0bff817 	ldw	r2,-32(fp)
 80193e8:	1004913a 	slli	r2,r2,4
 80193ec:	1885883a 	add	r2,r3,r2
 80193f0:	10800d04 	addi	r2,r2,52
 80193f4:	10800017 	ldw	r2,0(r2)
 80193f8:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 80193fc:	e03ff915 	stw	zero,-28(fp)
 8019400:	00005806 	br	8019564 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 8019404:	e0fffd17 	ldw	r3,-12(fp)
 8019408:	e0bffa17 	ldw	r2,-24(fp)
 801940c:	18804916 	blt	r3,r2,8019534 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 8019410:	e0fffc17 	ldw	r3,-16(fp)
 8019414:	e0bff817 	ldw	r2,-32(fp)
 8019418:	10800104 	addi	r2,r2,4
 801941c:	1004913a 	slli	r2,r2,4
 8019420:	1885883a 	add	r2,r3,r2
 8019424:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 8019428:	e0bffa17 	ldw	r2,-24(fp)
 801942c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 8019430:	e0fffd17 	ldw	r3,-12(fp)
 8019434:	18803f0e 	bge	r3,r2,8019534 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 8019438:	e0fffc17 	ldw	r3,-16(fp)
 801943c:	e0bff817 	ldw	r2,-32(fp)
 8019440:	10800104 	addi	r2,r2,4
 8019444:	1004913a 	slli	r2,r2,4
 8019448:	1885883a 	add	r2,r3,r2
 801944c:	10c00017 	ldw	r3,0(r2)
 8019450:	e0bffa17 	ldw	r2,-24(fp)
 8019454:	1887883a 	add	r3,r3,r2
 8019458:	e0bffd17 	ldw	r2,-12(fp)
 801945c:	1885c83a 	sub	r2,r3,r2
 8019460:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 8019464:	e0fffb17 	ldw	r3,-20(fp)
 8019468:	e0bfff17 	ldw	r2,-4(fp)
 801946c:	1880010e 	bge	r3,r2,8019474 <alt_epcs_flash_write+0x11c>
 8019470:	1805883a 	mov	r2,r3
 8019474:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 8019478:	e0bffb17 	ldw	r2,-20(fp)
 801947c:	e13ffc17 	ldw	r4,-16(fp)
 8019480:	e17ffe17 	ldw	r5,-8(fp)
 8019484:	e1bffd17 	ldw	r6,-12(fp)
 8019488:	100f883a 	mov	r7,r2
 801948c:	80192700 	call	8019270 <alt_epcs_flash_memcmp>
 8019490:	10001226 	beq	r2,zero,80194dc <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 8019494:	e0bffc17 	ldw	r2,-16(fp)
 8019498:	10800817 	ldw	r2,32(r2)
 801949c:	e13ffc17 	ldw	r4,-16(fp)
 80194a0:	e17ffa17 	ldw	r5,-24(fp)
 80194a4:	103ee83a 	callr	r2
 80194a8:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 80194ac:	e0bff717 	ldw	r2,-36(fp)
 80194b0:	10000a1e 	bne	r2,zero,80194dc <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 80194b4:	e0bffc17 	ldw	r2,-16(fp)
 80194b8:	10800917 	ldw	r2,36(r2)
 80194bc:	e0fffb17 	ldw	r3,-20(fp)
 80194c0:	d8c00015 	stw	r3,0(sp)
 80194c4:	e13ffc17 	ldw	r4,-16(fp)
 80194c8:	e17ffa17 	ldw	r5,-24(fp)
 80194cc:	e1bffd17 	ldw	r6,-12(fp)
 80194d0:	e1fffe17 	ldw	r7,-8(fp)
 80194d4:	103ee83a 	callr	r2
 80194d8:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 80194dc:	e0ffff17 	ldw	r3,-4(fp)
 80194e0:	e0bffb17 	ldw	r2,-20(fp)
 80194e4:	18802e26 	beq	r3,r2,80195a0 <alt_epcs_flash_write+0x248>
 80194e8:	e0bff717 	ldw	r2,-36(fp)
 80194ec:	10002c1e 	bne	r2,zero,80195a0 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 80194f0:	e0ffff17 	ldw	r3,-4(fp)
 80194f4:	e0bffb17 	ldw	r2,-20(fp)
 80194f8:	1885c83a 	sub	r2,r3,r2
 80194fc:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 8019500:	e0fffc17 	ldw	r3,-16(fp)
 8019504:	e0bff817 	ldw	r2,-32(fp)
 8019508:	10800104 	addi	r2,r2,4
 801950c:	1004913a 	slli	r2,r2,4
 8019510:	1885883a 	add	r2,r3,r2
 8019514:	10c00017 	ldw	r3,0(r2)
 8019518:	e0bffa17 	ldw	r2,-24(fp)
 801951c:	1885883a 	add	r2,r3,r2
 8019520:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 8019524:	e0bffb17 	ldw	r2,-20(fp)
 8019528:	e0fffe17 	ldw	r3,-8(fp)
 801952c:	1885883a 	add	r2,r3,r2
 8019530:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 8019534:	e0fffc17 	ldw	r3,-16(fp)
 8019538:	e0bff817 	ldw	r2,-32(fp)
 801953c:	10800104 	addi	r2,r2,4
 8019540:	1004913a 	slli	r2,r2,4
 8019544:	1885883a 	add	r2,r3,r2
 8019548:	10800017 	ldw	r2,0(r2)
 801954c:	e0fffa17 	ldw	r3,-24(fp)
 8019550:	1885883a 	add	r2,r3,r2
 8019554:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 8019558:	e0bff917 	ldw	r2,-28(fp)
 801955c:	10800044 	addi	r2,r2,1
 8019560:	e0bff915 	stw	r2,-28(fp)
 8019564:	e0fffc17 	ldw	r3,-16(fp)
 8019568:	e0bff817 	ldw	r2,-32(fp)
 801956c:	1004913a 	slli	r2,r2,4
 8019570:	1885883a 	add	r2,r3,r2
 8019574:	10800f04 	addi	r2,r2,60
 8019578:	10800017 	ldw	r2,0(r2)
 801957c:	e0fff917 	ldw	r3,-28(fp)
 8019580:	18bfa016 	blt	r3,r2,8019404 <__alt_data_end+0xf8019404>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 8019584:	e0bff817 	ldw	r2,-32(fp)
 8019588:	10800044 	addi	r2,r2,1
 801958c:	e0bff815 	stw	r2,-32(fp)
 8019590:	e0bffc17 	ldw	r2,-16(fp)
 8019594:	10800c17 	ldw	r2,48(r2)
 8019598:	e0fff817 	ldw	r3,-32(fp)
 801959c:	18bf7916 	blt	r3,r2,8019384 <__alt_data_end+0xf8019384>
      }
    }
  }

finished:
  return ret_code;
 80195a0:	e0bff717 	ldw	r2,-36(fp)
}
 80195a4:	e037883a 	mov	sp,fp
 80195a8:	dfc00117 	ldw	ra,4(sp)
 80195ac:	df000017 	ldw	fp,0(sp)
 80195b0:	dec00204 	addi	sp,sp,8
 80195b4:	f800283a 	ret

080195b8 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 80195b8:	defffa04 	addi	sp,sp,-24
 80195bc:	df000515 	stw	fp,20(sp)
 80195c0:	df000504 	addi	fp,sp,20
 80195c4:	e13ffd15 	stw	r4,-12(fp)
 80195c8:	e17ffe15 	stw	r5,-8(fp)
 80195cc:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 80195d0:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 80195d4:	e0bffd17 	ldw	r2,-12(fp)
 80195d8:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 80195dc:	e0bffc17 	ldw	r2,-16(fp)
 80195e0:	10c00c17 	ldw	r3,48(r2)
 80195e4:	e0bfff17 	ldw	r2,-4(fp)
 80195e8:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 80195ec:	e0bffc17 	ldw	r2,-16(fp)
 80195f0:	10800c17 	ldw	r2,48(r2)
 80195f4:	1000031e 	bne	r2,zero,8019604 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 80195f8:	00bffec4 	movi	r2,-5
 80195fc:	e0bffb15 	stw	r2,-20(fp)
 8019600:	00000b06 	br	8019630 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 8019604:	e0bffc17 	ldw	r2,-16(fp)
 8019608:	10800c17 	ldw	r2,48(r2)
 801960c:	10800250 	cmplti	r2,r2,9
 8019610:	1000031e 	bne	r2,zero,8019620 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 8019614:	00bffd04 	movi	r2,-12
 8019618:	e0bffb15 	stw	r2,-20(fp)
 801961c:	00000406 	br	8019630 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 8019620:	e0bffc17 	ldw	r2,-16(fp)
 8019624:	10c00d04 	addi	r3,r2,52
 8019628:	e0bffe17 	ldw	r2,-8(fp)
 801962c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 8019630:	e0bffb17 	ldw	r2,-20(fp)
}
 8019634:	e037883a 	mov	sp,fp
 8019638:	df000017 	ldw	fp,0(sp)
 801963c:	dec00104 	addi	sp,sp,4
 8019640:	f800283a 	ret

08019644 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 8019644:	defff904 	addi	sp,sp,-28
 8019648:	df000615 	stw	fp,24(sp)
 801964c:	df000604 	addi	fp,sp,24
 8019650:	e13ffe15 	stw	r4,-8(fp)
 8019654:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 8019658:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 801965c:	e0bffe17 	ldw	r2,-8(fp)
 8019660:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 8019664:	e0bffb17 	ldw	r2,-20(fp)
 8019668:	10800c17 	ldw	r2,48(r2)
 801966c:	10bfffc4 	addi	r2,r2,-1
 8019670:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 8019674:	e0fffb17 	ldw	r3,-20(fp)
 8019678:	e0bffc17 	ldw	r2,-16(fp)
 801967c:	1004913a 	slli	r2,r2,4
 8019680:	1885883a 	add	r2,r3,r2
 8019684:	10800d04 	addi	r2,r2,52
 8019688:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 801968c:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 8019690:	e13ffb17 	ldw	r4,-20(fp)
 8019694:	e0bffc17 	ldw	r2,-16(fp)
 8019698:	1004913a 	slli	r2,r2,4
 801969c:	2085883a 	add	r2,r4,r2
 80196a0:	10800e04 	addi	r2,r2,56
 80196a4:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 80196a8:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 80196ac:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 80196b0:	e0bfff17 	ldw	r2,-4(fp)
 80196b4:	e0fffd17 	ldw	r3,-12(fp)
 80196b8:	1880022e 	bgeu	r3,r2,80196c4 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 80196bc:	00bffec4 	movi	r2,-5
 80196c0:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 80196c4:	e0bffa17 	ldw	r2,-24(fp)
}
 80196c8:	e037883a 	mov	sp,fp
 80196cc:	df000017 	ldw	fp,0(sp)
 80196d0:	dec00104 	addi	sp,sp,4
 80196d4:	f800283a 	ret

080196d8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 80196d8:	defffa04 	addi	sp,sp,-24
 80196dc:	dfc00515 	stw	ra,20(sp)
 80196e0:	df000415 	stw	fp,16(sp)
 80196e4:	df000404 	addi	fp,sp,16
 80196e8:	e13ffe15 	stw	r4,-8(fp)
 80196ec:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 80196f0:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 80196f4:	e0bffe17 	ldw	r2,-8(fp)
 80196f8:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 80196fc:	e13ffe17 	ldw	r4,-8(fp)
 8019700:	e17fff17 	ldw	r5,-4(fp)
 8019704:	80196440 	call	8019644 <alt_epcs_test_address>
 8019708:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 801970c:	e0bffc17 	ldw	r2,-16(fp)
 8019710:	10000816 	blt	r2,zero,8019734 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 8019714:	e0bffd17 	ldw	r2,-12(fp)
 8019718:	11002e17 	ldw	r4,184(r2)
 801971c:	e0ffff17 	ldw	r3,-4(fp)
 8019720:	e0bffd17 	ldw	r2,-12(fp)
 8019724:	10803217 	ldw	r2,200(r2)
 8019728:	180b883a 	mov	r5,r3
 801972c:	100d883a 	mov	r6,r2
 8019730:	801a4f80 	call	801a4f8 <epcs_sector_erase>
  }
  return ret_code;
 8019734:	e0bffc17 	ldw	r2,-16(fp)
}
 8019738:	e037883a 	mov	sp,fp
 801973c:	dfc00117 	ldw	ra,4(sp)
 8019740:	df000017 	ldw	fp,0(sp)
 8019744:	dec00204 	addi	sp,sp,8
 8019748:	f800283a 	ret

0801974c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 801974c:	defff404 	addi	sp,sp,-48
 8019750:	dfc00b15 	stw	ra,44(sp)
 8019754:	df000a15 	stw	fp,40(sp)
 8019758:	df000a04 	addi	fp,sp,40
 801975c:	e13ffc15 	stw	r4,-16(fp)
 8019760:	e17ffd15 	stw	r5,-12(fp)
 8019764:	e1bffe15 	stw	r6,-8(fp)
 8019768:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 801976c:	e0bffc17 	ldw	r2,-16(fp)
 8019770:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 8019774:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 8019778:	e13ffc17 	ldw	r4,-16(fp)
 801977c:	e17ffe17 	ldw	r5,-8(fp)
 8019780:	80196440 	call	8019644 <alt_epcs_test_address>
 8019784:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 8019788:	e0bff917 	ldw	r2,-28(fp)
 801978c:	10002916 	blt	r2,zero,8019834 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 8019790:	00002606 	br	801982c <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 8019794:	e0bff817 	ldw	r2,-32(fp)
 8019798:	10c03117 	ldw	r3,196(r2)
 801979c:	e0bffe17 	ldw	r2,-8(fp)
 80197a0:	1887883a 	add	r3,r3,r2
 80197a4:	e0bff817 	ldw	r2,-32(fp)
 80197a8:	10803117 	ldw	r2,196(r2)
 80197ac:	0085c83a 	sub	r2,zero,r2
 80197b0:	1884703a 	and	r2,r3,r2
 80197b4:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 80197b8:	e0fffa17 	ldw	r3,-24(fp)
 80197bc:	e0bffe17 	ldw	r2,-8(fp)
 80197c0:	1885c83a 	sub	r2,r3,r2
 80197c4:	e0c00217 	ldw	r3,8(fp)
 80197c8:	1880010e 	bge	r3,r2,80197d0 <alt_epcs_flash_write_block+0x84>
 80197cc:	1805883a 	mov	r2,r3
 80197d0:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 80197d4:	e0bff817 	ldw	r2,-32(fp)
 80197d8:	11002e17 	ldw	r4,184(r2)
 80197dc:	e0bff717 	ldw	r2,-36(fp)
 80197e0:	e0ffff17 	ldw	r3,-4(fp)
 80197e4:	1887883a 	add	r3,r3,r2
 80197e8:	e0bff817 	ldw	r2,-32(fp)
 80197ec:	10803217 	ldw	r2,200(r2)
 80197f0:	d8800015 	stw	r2,0(sp)
 80197f4:	e17ffe17 	ldw	r5,-8(fp)
 80197f8:	180d883a 	mov	r6,r3
 80197fc:	e1fffb17 	ldw	r7,-20(fp)
 8019800:	801a79c0 	call	801a79c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 8019804:	e0c00217 	ldw	r3,8(fp)
 8019808:	e0bffb17 	ldw	r2,-20(fp)
 801980c:	1885c83a 	sub	r2,r3,r2
 8019810:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 8019814:	e0fff717 	ldw	r3,-36(fp)
 8019818:	e0bffb17 	ldw	r2,-20(fp)
 801981c:	1885883a 	add	r2,r3,r2
 8019820:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 8019824:	e0bffa17 	ldw	r2,-24(fp)
 8019828:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 801982c:	e0800217 	ldw	r2,8(fp)
 8019830:	103fd81e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 8019834:	e0bff917 	ldw	r2,-28(fp)
}
 8019838:	e037883a 	mov	sp,fp
 801983c:	dfc00117 	ldw	ra,4(sp)
 8019840:	df000017 	ldw	fp,0(sp)
 8019844:	dec00204 	addi	sp,sp,8
 8019848:	f800283a 	ret

0801984c <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 801984c:	defff704 	addi	sp,sp,-36
 8019850:	dfc00815 	stw	ra,32(sp)
 8019854:	df000715 	stw	fp,28(sp)
 8019858:	df000704 	addi	fp,sp,28
 801985c:	e13ffc15 	stw	r4,-16(fp)
 8019860:	e17ffd15 	stw	r5,-12(fp)
 8019864:	e1bffe15 	stw	r6,-8(fp)
 8019868:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 801986c:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 8019870:	e0bffc17 	ldw	r2,-16(fp)
 8019874:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 8019878:	e13ffc17 	ldw	r4,-16(fp)
 801987c:	e17ffd17 	ldw	r5,-12(fp)
 8019880:	80196440 	call	8019644 <alt_epcs_test_address>
 8019884:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 8019888:	e0bffa17 	ldw	r2,-24(fp)
 801988c:	10000f16 	blt	r2,zero,80198cc <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 8019890:	e0bffb17 	ldw	r2,-20(fp)
 8019894:	10c02e17 	ldw	r3,184(r2)
 8019898:	e0bffb17 	ldw	r2,-20(fp)
 801989c:	10803217 	ldw	r2,200(r2)
 80198a0:	d8800015 	stw	r2,0(sp)
 80198a4:	1809883a 	mov	r4,r3
 80198a8:	e17ffd17 	ldw	r5,-12(fp)
 80198ac:	e1bffe17 	ldw	r6,-8(fp)
 80198b0:	e1ffff17 	ldw	r7,-4(fp)
 80198b4:	801a5f00 	call	801a5f0 <epcs_read_buffer>
 80198b8:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 80198bc:	e0fffa17 	ldw	r3,-24(fp)
 80198c0:	e0bfff17 	ldw	r2,-4(fp)
 80198c4:	1880011e 	bne	r3,r2,80198cc <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 80198c8:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 80198cc:	e0bffa17 	ldw	r2,-24(fp)
}
 80198d0:	e037883a 	mov	sp,fp
 80198d4:	dfc00117 	ldw	ra,4(sp)
 80198d8:	df000017 	ldw	fp,0(sp)
 80198dc:	dec00204 	addi	sp,sp,8
 80198e0:	f800283a 	ret

080198e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80198e4:	defffa04 	addi	sp,sp,-24
 80198e8:	dfc00515 	stw	ra,20(sp)
 80198ec:	df000415 	stw	fp,16(sp)
 80198f0:	df000404 	addi	fp,sp,16
 80198f4:	e13ffd15 	stw	r4,-12(fp)
 80198f8:	e17ffe15 	stw	r5,-8(fp)
 80198fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8019900:	e0bffd17 	ldw	r2,-12(fp)
 8019904:	10800017 	ldw	r2,0(r2)
 8019908:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801990c:	e0bffc17 	ldw	r2,-16(fp)
 8019910:	10c00a04 	addi	r3,r2,40
 8019914:	e0bffd17 	ldw	r2,-12(fp)
 8019918:	10800217 	ldw	r2,8(r2)
 801991c:	1809883a 	mov	r4,r3
 8019920:	e17ffe17 	ldw	r5,-8(fp)
 8019924:	e1bfff17 	ldw	r6,-4(fp)
 8019928:	100f883a 	mov	r7,r2
 801992c:	8019f0c0 	call	8019f0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8019930:	e037883a 	mov	sp,fp
 8019934:	dfc00117 	ldw	ra,4(sp)
 8019938:	df000017 	ldw	fp,0(sp)
 801993c:	dec00204 	addi	sp,sp,8
 8019940:	f800283a 	ret

08019944 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8019944:	defffa04 	addi	sp,sp,-24
 8019948:	dfc00515 	stw	ra,20(sp)
 801994c:	df000415 	stw	fp,16(sp)
 8019950:	df000404 	addi	fp,sp,16
 8019954:	e13ffd15 	stw	r4,-12(fp)
 8019958:	e17ffe15 	stw	r5,-8(fp)
 801995c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8019960:	e0bffd17 	ldw	r2,-12(fp)
 8019964:	10800017 	ldw	r2,0(r2)
 8019968:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 801996c:	e0bffc17 	ldw	r2,-16(fp)
 8019970:	10c00a04 	addi	r3,r2,40
 8019974:	e0bffd17 	ldw	r2,-12(fp)
 8019978:	10800217 	ldw	r2,8(r2)
 801997c:	1809883a 	mov	r4,r3
 8019980:	e17ffe17 	ldw	r5,-8(fp)
 8019984:	e1bfff17 	ldw	r6,-4(fp)
 8019988:	100f883a 	mov	r7,r2
 801998c:	801a1180 	call	801a118 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8019990:	e037883a 	mov	sp,fp
 8019994:	dfc00117 	ldw	ra,4(sp)
 8019998:	df000017 	ldw	fp,0(sp)
 801999c:	dec00204 	addi	sp,sp,8
 80199a0:	f800283a 	ret

080199a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80199a4:	defffc04 	addi	sp,sp,-16
 80199a8:	dfc00315 	stw	ra,12(sp)
 80199ac:	df000215 	stw	fp,8(sp)
 80199b0:	df000204 	addi	fp,sp,8
 80199b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80199b8:	e0bfff17 	ldw	r2,-4(fp)
 80199bc:	10800017 	ldw	r2,0(r2)
 80199c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80199c4:	e0bffe17 	ldw	r2,-8(fp)
 80199c8:	10c00a04 	addi	r3,r2,40
 80199cc:	e0bfff17 	ldw	r2,-4(fp)
 80199d0:	10800217 	ldw	r2,8(r2)
 80199d4:	1809883a 	mov	r4,r3
 80199d8:	100b883a 	mov	r5,r2
 80199dc:	8019db80 	call	8019db8 <altera_avalon_jtag_uart_close>
}
 80199e0:	e037883a 	mov	sp,fp
 80199e4:	dfc00117 	ldw	ra,4(sp)
 80199e8:	df000017 	ldw	fp,0(sp)
 80199ec:	dec00204 	addi	sp,sp,8
 80199f0:	f800283a 	ret

080199f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80199f4:	defffa04 	addi	sp,sp,-24
 80199f8:	dfc00515 	stw	ra,20(sp)
 80199fc:	df000415 	stw	fp,16(sp)
 8019a00:	df000404 	addi	fp,sp,16
 8019a04:	e13ffd15 	stw	r4,-12(fp)
 8019a08:	e17ffe15 	stw	r5,-8(fp)
 8019a0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8019a10:	e0bffd17 	ldw	r2,-12(fp)
 8019a14:	10800017 	ldw	r2,0(r2)
 8019a18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8019a1c:	e0bffc17 	ldw	r2,-16(fp)
 8019a20:	10800a04 	addi	r2,r2,40
 8019a24:	1009883a 	mov	r4,r2
 8019a28:	e17ffe17 	ldw	r5,-8(fp)
 8019a2c:	e1bfff17 	ldw	r6,-4(fp)
 8019a30:	8019e200 	call	8019e20 <altera_avalon_jtag_uart_ioctl>
}
 8019a34:	e037883a 	mov	sp,fp
 8019a38:	dfc00117 	ldw	ra,4(sp)
 8019a3c:	df000017 	ldw	fp,0(sp)
 8019a40:	dec00204 	addi	sp,sp,8
 8019a44:	f800283a 	ret

08019a48 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8019a48:	defffa04 	addi	sp,sp,-24
 8019a4c:	dfc00515 	stw	ra,20(sp)
 8019a50:	df000415 	stw	fp,16(sp)
 8019a54:	df000404 	addi	fp,sp,16
 8019a58:	e13ffd15 	stw	r4,-12(fp)
 8019a5c:	e17ffe15 	stw	r5,-8(fp)
 8019a60:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8019a64:	e0bffd17 	ldw	r2,-12(fp)
 8019a68:	00c00044 	movi	r3,1
 8019a6c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8019a70:	e0bffd17 	ldw	r2,-12(fp)
 8019a74:	10800017 	ldw	r2,0(r2)
 8019a78:	10800104 	addi	r2,r2,4
 8019a7c:	1007883a 	mov	r3,r2
 8019a80:	e0bffd17 	ldw	r2,-12(fp)
 8019a84:	10800817 	ldw	r2,32(r2)
 8019a88:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8019a8c:	e0fffe17 	ldw	r3,-8(fp)
 8019a90:	e0bfff17 	ldw	r2,-4(fp)
 8019a94:	d8000015 	stw	zero,0(sp)
 8019a98:	1809883a 	mov	r4,r3
 8019a9c:	100b883a 	mov	r5,r2
 8019aa0:	018200b4 	movhi	r6,2050
 8019aa4:	31a6c304 	addi	r6,r6,-25844
 8019aa8:	e1fffd17 	ldw	r7,-12(fp)
 8019aac:	801add40 	call	801add4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8019ab0:	e0bffd17 	ldw	r2,-12(fp)
 8019ab4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8019ab8:	e0bffd17 	ldw	r2,-12(fp)
 8019abc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8019ac0:	008200b4 	movhi	r2,2050
 8019ac4:	10bad604 	addi	r2,r2,-5288
 8019ac8:	10800017 	ldw	r2,0(r2)
 8019acc:	1809883a 	mov	r4,r3
 8019ad0:	100b883a 	mov	r5,r2
 8019ad4:	018200b4 	movhi	r6,2050
 8019ad8:	31a74404 	addi	r6,r6,-25328
 8019adc:	e1fffd17 	ldw	r7,-12(fp)
 8019ae0:	801aa580 	call	801aa58 <alt_alarm_start>
 8019ae4:	1000040e 	bge	r2,zero,8019af8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8019ae8:	e0fffd17 	ldw	r3,-12(fp)
 8019aec:	00a00034 	movhi	r2,32768
 8019af0:	10bfffc4 	addi	r2,r2,-1
 8019af4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8019af8:	e037883a 	mov	sp,fp
 8019afc:	dfc00117 	ldw	ra,4(sp)
 8019b00:	df000017 	ldw	fp,0(sp)
 8019b04:	dec00204 	addi	sp,sp,8
 8019b08:	f800283a 	ret

08019b0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8019b0c:	defff804 	addi	sp,sp,-32
 8019b10:	df000715 	stw	fp,28(sp)
 8019b14:	df000704 	addi	fp,sp,28
 8019b18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8019b1c:	e0bfff17 	ldw	r2,-4(fp)
 8019b20:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8019b24:	e0bffb17 	ldw	r2,-20(fp)
 8019b28:	10800017 	ldw	r2,0(r2)
 8019b2c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8019b30:	e0bffc17 	ldw	r2,-16(fp)
 8019b34:	10800104 	addi	r2,r2,4
 8019b38:	10800037 	ldwio	r2,0(r2)
 8019b3c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8019b40:	e0bffd17 	ldw	r2,-12(fp)
 8019b44:	1080c00c 	andi	r2,r2,768
 8019b48:	1000011e 	bne	r2,zero,8019b50 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8019b4c:	00006c06 	br	8019d00 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8019b50:	e0bffd17 	ldw	r2,-12(fp)
 8019b54:	1080400c 	andi	r2,r2,256
 8019b58:	10003426 	beq	r2,zero,8019c2c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8019b5c:	00800074 	movhi	r2,1
 8019b60:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8019b64:	e0bffb17 	ldw	r2,-20(fp)
 8019b68:	10800a17 	ldw	r2,40(r2)
 8019b6c:	10800044 	addi	r2,r2,1
 8019b70:	1081ffcc 	andi	r2,r2,2047
 8019b74:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8019b78:	e0bffb17 	ldw	r2,-20(fp)
 8019b7c:	10c00b17 	ldw	r3,44(r2)
 8019b80:	e0bffe17 	ldw	r2,-8(fp)
 8019b84:	1880011e 	bne	r3,r2,8019b8c <altera_avalon_jtag_uart_irq+0x80>
          break;
 8019b88:	00001606 	br	8019be4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8019b8c:	e0bffc17 	ldw	r2,-16(fp)
 8019b90:	10800037 	ldwio	r2,0(r2)
 8019b94:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8019b98:	e0bff917 	ldw	r2,-28(fp)
 8019b9c:	10a0000c 	andi	r2,r2,32768
 8019ba0:	1000011e 	bne	r2,zero,8019ba8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8019ba4:	00000f06 	br	8019be4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8019ba8:	e0bffb17 	ldw	r2,-20(fp)
 8019bac:	10800a17 	ldw	r2,40(r2)
 8019bb0:	e0fff917 	ldw	r3,-28(fp)
 8019bb4:	1809883a 	mov	r4,r3
 8019bb8:	e0fffb17 	ldw	r3,-20(fp)
 8019bbc:	1885883a 	add	r2,r3,r2
 8019bc0:	10800e04 	addi	r2,r2,56
 8019bc4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8019bc8:	e0bffb17 	ldw	r2,-20(fp)
 8019bcc:	10800a17 	ldw	r2,40(r2)
 8019bd0:	10800044 	addi	r2,r2,1
 8019bd4:	10c1ffcc 	andi	r3,r2,2047
 8019bd8:	e0bffb17 	ldw	r2,-20(fp)
 8019bdc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8019be0:	003fe006 	br	8019b64 <__alt_data_end+0xf8019b64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8019be4:	e0bff917 	ldw	r2,-28(fp)
 8019be8:	10bfffec 	andhi	r2,r2,65535
 8019bec:	10000f26 	beq	r2,zero,8019c2c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8019bf0:	e0bffb17 	ldw	r2,-20(fp)
 8019bf4:	10c00817 	ldw	r3,32(r2)
 8019bf8:	00bfff84 	movi	r2,-2
 8019bfc:	1886703a 	and	r3,r3,r2
 8019c00:	e0bffb17 	ldw	r2,-20(fp)
 8019c04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8019c08:	e0bffc17 	ldw	r2,-16(fp)
 8019c0c:	10800104 	addi	r2,r2,4
 8019c10:	1007883a 	mov	r3,r2
 8019c14:	e0bffb17 	ldw	r2,-20(fp)
 8019c18:	10800817 	ldw	r2,32(r2)
 8019c1c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8019c20:	e0bffc17 	ldw	r2,-16(fp)
 8019c24:	10800104 	addi	r2,r2,4
 8019c28:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8019c2c:	e0bffd17 	ldw	r2,-12(fp)
 8019c30:	1080800c 	andi	r2,r2,512
 8019c34:	10003126 	beq	r2,zero,8019cfc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8019c38:	e0bffd17 	ldw	r2,-12(fp)
 8019c3c:	1004d43a 	srli	r2,r2,16
 8019c40:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8019c44:	00001406 	br	8019c98 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8019c48:	e0bffc17 	ldw	r2,-16(fp)
 8019c4c:	e0fffb17 	ldw	r3,-20(fp)
 8019c50:	18c00d17 	ldw	r3,52(r3)
 8019c54:	e13ffb17 	ldw	r4,-20(fp)
 8019c58:	20c7883a 	add	r3,r4,r3
 8019c5c:	18c20e04 	addi	r3,r3,2104
 8019c60:	18c00003 	ldbu	r3,0(r3)
 8019c64:	18c03fcc 	andi	r3,r3,255
 8019c68:	18c0201c 	xori	r3,r3,128
 8019c6c:	18ffe004 	addi	r3,r3,-128
 8019c70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8019c74:	e0bffb17 	ldw	r2,-20(fp)
 8019c78:	10800d17 	ldw	r2,52(r2)
 8019c7c:	10800044 	addi	r2,r2,1
 8019c80:	10c1ffcc 	andi	r3,r2,2047
 8019c84:	e0bffb17 	ldw	r2,-20(fp)
 8019c88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8019c8c:	e0bffa17 	ldw	r2,-24(fp)
 8019c90:	10bfffc4 	addi	r2,r2,-1
 8019c94:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8019c98:	e0bffa17 	ldw	r2,-24(fp)
 8019c9c:	10000526 	beq	r2,zero,8019cb4 <altera_avalon_jtag_uart_irq+0x1a8>
 8019ca0:	e0bffb17 	ldw	r2,-20(fp)
 8019ca4:	10c00d17 	ldw	r3,52(r2)
 8019ca8:	e0bffb17 	ldw	r2,-20(fp)
 8019cac:	10800c17 	ldw	r2,48(r2)
 8019cb0:	18bfe51e 	bne	r3,r2,8019c48 <__alt_data_end+0xf8019c48>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8019cb4:	e0bffa17 	ldw	r2,-24(fp)
 8019cb8:	10001026 	beq	r2,zero,8019cfc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8019cbc:	e0bffb17 	ldw	r2,-20(fp)
 8019cc0:	10c00817 	ldw	r3,32(r2)
 8019cc4:	00bfff44 	movi	r2,-3
 8019cc8:	1886703a 	and	r3,r3,r2
 8019ccc:	e0bffb17 	ldw	r2,-20(fp)
 8019cd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8019cd4:	e0bffb17 	ldw	r2,-20(fp)
 8019cd8:	10800017 	ldw	r2,0(r2)
 8019cdc:	10800104 	addi	r2,r2,4
 8019ce0:	1007883a 	mov	r3,r2
 8019ce4:	e0bffb17 	ldw	r2,-20(fp)
 8019ce8:	10800817 	ldw	r2,32(r2)
 8019cec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8019cf0:	e0bffc17 	ldw	r2,-16(fp)
 8019cf4:	10800104 	addi	r2,r2,4
 8019cf8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8019cfc:	003f8c06 	br	8019b30 <__alt_data_end+0xf8019b30>
}
 8019d00:	e037883a 	mov	sp,fp
 8019d04:	df000017 	ldw	fp,0(sp)
 8019d08:	dec00104 	addi	sp,sp,4
 8019d0c:	f800283a 	ret

08019d10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8019d10:	defff804 	addi	sp,sp,-32
 8019d14:	df000715 	stw	fp,28(sp)
 8019d18:	df000704 	addi	fp,sp,28
 8019d1c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8019d20:	e0bffb17 	ldw	r2,-20(fp)
 8019d24:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8019d28:	e0bff917 	ldw	r2,-28(fp)
 8019d2c:	10800017 	ldw	r2,0(r2)
 8019d30:	10800104 	addi	r2,r2,4
 8019d34:	10800037 	ldwio	r2,0(r2)
 8019d38:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8019d3c:	e0bffa17 	ldw	r2,-24(fp)
 8019d40:	1081000c 	andi	r2,r2,1024
 8019d44:	10000b26 	beq	r2,zero,8019d74 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8019d48:	e0bff917 	ldw	r2,-28(fp)
 8019d4c:	10800017 	ldw	r2,0(r2)
 8019d50:	10800104 	addi	r2,r2,4
 8019d54:	1007883a 	mov	r3,r2
 8019d58:	e0bff917 	ldw	r2,-28(fp)
 8019d5c:	10800817 	ldw	r2,32(r2)
 8019d60:	10810014 	ori	r2,r2,1024
 8019d64:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8019d68:	e0bff917 	ldw	r2,-28(fp)
 8019d6c:	10000915 	stw	zero,36(r2)
 8019d70:	00000a06 	br	8019d9c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8019d74:	e0bff917 	ldw	r2,-28(fp)
 8019d78:	10c00917 	ldw	r3,36(r2)
 8019d7c:	00a00034 	movhi	r2,32768
 8019d80:	10bfff04 	addi	r2,r2,-4
 8019d84:	10c00536 	bltu	r2,r3,8019d9c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8019d88:	e0bff917 	ldw	r2,-28(fp)
 8019d8c:	10800917 	ldw	r2,36(r2)
 8019d90:	10c00044 	addi	r3,r2,1
 8019d94:	e0bff917 	ldw	r2,-28(fp)
 8019d98:	10c00915 	stw	r3,36(r2)
 8019d9c:	008200b4 	movhi	r2,2050
 8019da0:	10bad604 	addi	r2,r2,-5288
 8019da4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8019da8:	e037883a 	mov	sp,fp
 8019dac:	df000017 	ldw	fp,0(sp)
 8019db0:	dec00104 	addi	sp,sp,4
 8019db4:	f800283a 	ret

08019db8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8019db8:	defffd04 	addi	sp,sp,-12
 8019dbc:	df000215 	stw	fp,8(sp)
 8019dc0:	df000204 	addi	fp,sp,8
 8019dc4:	e13ffe15 	stw	r4,-8(fp)
 8019dc8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8019dcc:	00000506 	br	8019de4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8019dd0:	e0bfff17 	ldw	r2,-4(fp)
 8019dd4:	1090000c 	andi	r2,r2,16384
 8019dd8:	10000226 	beq	r2,zero,8019de4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8019ddc:	00bffd44 	movi	r2,-11
 8019de0:	00000b06 	br	8019e10 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8019de4:	e0bffe17 	ldw	r2,-8(fp)
 8019de8:	10c00d17 	ldw	r3,52(r2)
 8019dec:	e0bffe17 	ldw	r2,-8(fp)
 8019df0:	10800c17 	ldw	r2,48(r2)
 8019df4:	18800526 	beq	r3,r2,8019e0c <altera_avalon_jtag_uart_close+0x54>
 8019df8:	e0bffe17 	ldw	r2,-8(fp)
 8019dfc:	10c00917 	ldw	r3,36(r2)
 8019e00:	e0bffe17 	ldw	r2,-8(fp)
 8019e04:	10800117 	ldw	r2,4(r2)
 8019e08:	18bff136 	bltu	r3,r2,8019dd0 <__alt_data_end+0xf8019dd0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8019e0c:	0005883a 	mov	r2,zero
}
 8019e10:	e037883a 	mov	sp,fp
 8019e14:	df000017 	ldw	fp,0(sp)
 8019e18:	dec00104 	addi	sp,sp,4
 8019e1c:	f800283a 	ret

08019e20 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8019e20:	defffa04 	addi	sp,sp,-24
 8019e24:	df000515 	stw	fp,20(sp)
 8019e28:	df000504 	addi	fp,sp,20
 8019e2c:	e13ffd15 	stw	r4,-12(fp)
 8019e30:	e17ffe15 	stw	r5,-8(fp)
 8019e34:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8019e38:	00bff9c4 	movi	r2,-25
 8019e3c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8019e40:	e0bffe17 	ldw	r2,-8(fp)
 8019e44:	10da8060 	cmpeqi	r3,r2,27137
 8019e48:	1800031e 	bne	r3,zero,8019e58 <altera_avalon_jtag_uart_ioctl+0x38>
 8019e4c:	109a80a0 	cmpeqi	r2,r2,27138
 8019e50:	1000191e 	bne	r2,zero,8019eb8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8019e54:	00002806 	br	8019ef8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8019e58:	e0bffd17 	ldw	r2,-12(fp)
 8019e5c:	10c00117 	ldw	r3,4(r2)
 8019e60:	00a00034 	movhi	r2,32768
 8019e64:	10bfffc4 	addi	r2,r2,-1
 8019e68:	18801226 	beq	r3,r2,8019eb4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8019e6c:	e0bfff17 	ldw	r2,-4(fp)
 8019e70:	10800017 	ldw	r2,0(r2)
 8019e74:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8019e78:	e0bffc17 	ldw	r2,-16(fp)
 8019e7c:	10800090 	cmplti	r2,r2,2
 8019e80:	1000061e 	bne	r2,zero,8019e9c <altera_avalon_jtag_uart_ioctl+0x7c>
 8019e84:	e0fffc17 	ldw	r3,-16(fp)
 8019e88:	00a00034 	movhi	r2,32768
 8019e8c:	10bfffc4 	addi	r2,r2,-1
 8019e90:	18800226 	beq	r3,r2,8019e9c <altera_avalon_jtag_uart_ioctl+0x7c>
 8019e94:	e0bffc17 	ldw	r2,-16(fp)
 8019e98:	00000206 	br	8019ea4 <altera_avalon_jtag_uart_ioctl+0x84>
 8019e9c:	00a00034 	movhi	r2,32768
 8019ea0:	10bfff84 	addi	r2,r2,-2
 8019ea4:	e0fffd17 	ldw	r3,-12(fp)
 8019ea8:	18800115 	stw	r2,4(r3)
      rc = 0;
 8019eac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8019eb0:	00001106 	br	8019ef8 <altera_avalon_jtag_uart_ioctl+0xd8>
 8019eb4:	00001006 	br	8019ef8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8019eb8:	e0bffd17 	ldw	r2,-12(fp)
 8019ebc:	10c00117 	ldw	r3,4(r2)
 8019ec0:	00a00034 	movhi	r2,32768
 8019ec4:	10bfffc4 	addi	r2,r2,-1
 8019ec8:	18800a26 	beq	r3,r2,8019ef4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8019ecc:	e0bffd17 	ldw	r2,-12(fp)
 8019ed0:	10c00917 	ldw	r3,36(r2)
 8019ed4:	e0bffd17 	ldw	r2,-12(fp)
 8019ed8:	10800117 	ldw	r2,4(r2)
 8019edc:	1885803a 	cmpltu	r2,r3,r2
 8019ee0:	10c03fcc 	andi	r3,r2,255
 8019ee4:	e0bfff17 	ldw	r2,-4(fp)
 8019ee8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8019eec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8019ef0:	00000006 	br	8019ef4 <altera_avalon_jtag_uart_ioctl+0xd4>
 8019ef4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8019ef8:	e0bffb17 	ldw	r2,-20(fp)
}
 8019efc:	e037883a 	mov	sp,fp
 8019f00:	df000017 	ldw	fp,0(sp)
 8019f04:	dec00104 	addi	sp,sp,4
 8019f08:	f800283a 	ret

08019f0c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8019f0c:	defff304 	addi	sp,sp,-52
 8019f10:	dfc00c15 	stw	ra,48(sp)
 8019f14:	df000b15 	stw	fp,44(sp)
 8019f18:	df000b04 	addi	fp,sp,44
 8019f1c:	e13ffc15 	stw	r4,-16(fp)
 8019f20:	e17ffd15 	stw	r5,-12(fp)
 8019f24:	e1bffe15 	stw	r6,-8(fp)
 8019f28:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8019f2c:	e0bffd17 	ldw	r2,-12(fp)
 8019f30:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8019f34:	00004906 	br	801a05c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8019f38:	e0bffc17 	ldw	r2,-16(fp)
 8019f3c:	10800a17 	ldw	r2,40(r2)
 8019f40:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8019f44:	e0bffc17 	ldw	r2,-16(fp)
 8019f48:	10800b17 	ldw	r2,44(r2)
 8019f4c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8019f50:	e0fff717 	ldw	r3,-36(fp)
 8019f54:	e0bff817 	ldw	r2,-32(fp)
 8019f58:	18800536 	bltu	r3,r2,8019f70 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8019f5c:	e0fff717 	ldw	r3,-36(fp)
 8019f60:	e0bff817 	ldw	r2,-32(fp)
 8019f64:	1885c83a 	sub	r2,r3,r2
 8019f68:	e0bff615 	stw	r2,-40(fp)
 8019f6c:	00000406 	br	8019f80 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8019f70:	00c20004 	movi	r3,2048
 8019f74:	e0bff817 	ldw	r2,-32(fp)
 8019f78:	1885c83a 	sub	r2,r3,r2
 8019f7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8019f80:	e0bff617 	ldw	r2,-40(fp)
 8019f84:	1000011e 	bne	r2,zero,8019f8c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8019f88:	00001d06 	br	801a000 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8019f8c:	e0fffe17 	ldw	r3,-8(fp)
 8019f90:	e0bff617 	ldw	r2,-40(fp)
 8019f94:	1880022e 	bgeu	r3,r2,8019fa0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8019f98:	e0bffe17 	ldw	r2,-8(fp)
 8019f9c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8019fa0:	e0bff817 	ldw	r2,-32(fp)
 8019fa4:	10800e04 	addi	r2,r2,56
 8019fa8:	e0fffc17 	ldw	r3,-16(fp)
 8019fac:	1885883a 	add	r2,r3,r2
 8019fb0:	e13ff517 	ldw	r4,-44(fp)
 8019fb4:	100b883a 	mov	r5,r2
 8019fb8:	e1bff617 	ldw	r6,-40(fp)
 8019fbc:	8002df40 	call	8002df4 <memcpy>
      ptr   += n;
 8019fc0:	e0fff517 	ldw	r3,-44(fp)
 8019fc4:	e0bff617 	ldw	r2,-40(fp)
 8019fc8:	1885883a 	add	r2,r3,r2
 8019fcc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8019fd0:	e0fffe17 	ldw	r3,-8(fp)
 8019fd4:	e0bff617 	ldw	r2,-40(fp)
 8019fd8:	1885c83a 	sub	r2,r3,r2
 8019fdc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8019fe0:	e0fff817 	ldw	r3,-32(fp)
 8019fe4:	e0bff617 	ldw	r2,-40(fp)
 8019fe8:	1885883a 	add	r2,r3,r2
 8019fec:	10c1ffcc 	andi	r3,r2,2047
 8019ff0:	e0bffc17 	ldw	r2,-16(fp)
 8019ff4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8019ff8:	e0bffe17 	ldw	r2,-8(fp)
 8019ffc:	00bfce16 	blt	zero,r2,8019f38 <__alt_data_end+0xf8019f38>

    /* If we read any data then return it */
    if (ptr != buffer)
 801a000:	e0fff517 	ldw	r3,-44(fp)
 801a004:	e0bffd17 	ldw	r2,-12(fp)
 801a008:	18800126 	beq	r3,r2,801a010 <altera_avalon_jtag_uart_read+0x104>
      break;
 801a00c:	00001506 	br	801a064 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801a010:	e0bfff17 	ldw	r2,-4(fp)
 801a014:	1090000c 	andi	r2,r2,16384
 801a018:	10000126 	beq	r2,zero,801a020 <altera_avalon_jtag_uart_read+0x114>
      break;
 801a01c:	00001106 	br	801a064 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 801a020:	0001883a 	nop
 801a024:	e0bffc17 	ldw	r2,-16(fp)
 801a028:	10c00a17 	ldw	r3,40(r2)
 801a02c:	e0bff717 	ldw	r2,-36(fp)
 801a030:	1880051e 	bne	r3,r2,801a048 <altera_avalon_jtag_uart_read+0x13c>
 801a034:	e0bffc17 	ldw	r2,-16(fp)
 801a038:	10c00917 	ldw	r3,36(r2)
 801a03c:	e0bffc17 	ldw	r2,-16(fp)
 801a040:	10800117 	ldw	r2,4(r2)
 801a044:	18bff736 	bltu	r3,r2,801a024 <__alt_data_end+0xf801a024>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801a048:	e0bffc17 	ldw	r2,-16(fp)
 801a04c:	10c00a17 	ldw	r3,40(r2)
 801a050:	e0bff717 	ldw	r2,-36(fp)
 801a054:	1880011e 	bne	r3,r2,801a05c <altera_avalon_jtag_uart_read+0x150>
      break;
 801a058:	00000206 	br	801a064 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801a05c:	e0bffe17 	ldw	r2,-8(fp)
 801a060:	00bfb516 	blt	zero,r2,8019f38 <__alt_data_end+0xf8019f38>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801a064:	e0fff517 	ldw	r3,-44(fp)
 801a068:	e0bffd17 	ldw	r2,-12(fp)
 801a06c:	18801826 	beq	r3,r2,801a0d0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a070:	0005303a 	rdctl	r2,status
 801a074:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a078:	e0fffa17 	ldw	r3,-24(fp)
 801a07c:	00bfff84 	movi	r2,-2
 801a080:	1884703a 	and	r2,r3,r2
 801a084:	1001703a 	wrctl	status,r2
  
  return context;
 801a088:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801a08c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801a090:	e0bffc17 	ldw	r2,-16(fp)
 801a094:	10800817 	ldw	r2,32(r2)
 801a098:	10c00054 	ori	r3,r2,1
 801a09c:	e0bffc17 	ldw	r2,-16(fp)
 801a0a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801a0a4:	e0bffc17 	ldw	r2,-16(fp)
 801a0a8:	10800017 	ldw	r2,0(r2)
 801a0ac:	10800104 	addi	r2,r2,4
 801a0b0:	1007883a 	mov	r3,r2
 801a0b4:	e0bffc17 	ldw	r2,-16(fp)
 801a0b8:	10800817 	ldw	r2,32(r2)
 801a0bc:	18800035 	stwio	r2,0(r3)
 801a0c0:	e0bff917 	ldw	r2,-28(fp)
 801a0c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a0c8:	e0bffb17 	ldw	r2,-20(fp)
 801a0cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801a0d0:	e0fff517 	ldw	r3,-44(fp)
 801a0d4:	e0bffd17 	ldw	r2,-12(fp)
 801a0d8:	18800426 	beq	r3,r2,801a0ec <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 801a0dc:	e0fff517 	ldw	r3,-44(fp)
 801a0e0:	e0bffd17 	ldw	r2,-12(fp)
 801a0e4:	1885c83a 	sub	r2,r3,r2
 801a0e8:	00000606 	br	801a104 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 801a0ec:	e0bfff17 	ldw	r2,-4(fp)
 801a0f0:	1090000c 	andi	r2,r2,16384
 801a0f4:	10000226 	beq	r2,zero,801a100 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 801a0f8:	00bffd44 	movi	r2,-11
 801a0fc:	00000106 	br	801a104 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 801a100:	00bffec4 	movi	r2,-5
}
 801a104:	e037883a 	mov	sp,fp
 801a108:	dfc00117 	ldw	ra,4(sp)
 801a10c:	df000017 	ldw	fp,0(sp)
 801a110:	dec00204 	addi	sp,sp,8
 801a114:	f800283a 	ret

0801a118 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 801a118:	defff304 	addi	sp,sp,-52
 801a11c:	dfc00c15 	stw	ra,48(sp)
 801a120:	df000b15 	stw	fp,44(sp)
 801a124:	df000b04 	addi	fp,sp,44
 801a128:	e13ffc15 	stw	r4,-16(fp)
 801a12c:	e17ffd15 	stw	r5,-12(fp)
 801a130:	e1bffe15 	stw	r6,-8(fp)
 801a134:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801a138:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801a13c:	e0bffd17 	ldw	r2,-12(fp)
 801a140:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801a144:	00003806 	br	801a228 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801a148:	e0bffc17 	ldw	r2,-16(fp)
 801a14c:	10800c17 	ldw	r2,48(r2)
 801a150:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 801a154:	e0bffc17 	ldw	r2,-16(fp)
 801a158:	10800d17 	ldw	r2,52(r2)
 801a15c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 801a160:	e0fff817 	ldw	r3,-32(fp)
 801a164:	e0bff517 	ldw	r2,-44(fp)
 801a168:	1880062e 	bgeu	r3,r2,801a184 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801a16c:	e0fff517 	ldw	r3,-44(fp)
 801a170:	e0bff817 	ldw	r2,-32(fp)
 801a174:	1885c83a 	sub	r2,r3,r2
 801a178:	10bfffc4 	addi	r2,r2,-1
 801a17c:	e0bff615 	stw	r2,-40(fp)
 801a180:	00000b06 	br	801a1b0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801a184:	e0bff517 	ldw	r2,-44(fp)
 801a188:	10000526 	beq	r2,zero,801a1a0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801a18c:	00c20004 	movi	r3,2048
 801a190:	e0bff817 	ldw	r2,-32(fp)
 801a194:	1885c83a 	sub	r2,r3,r2
 801a198:	e0bff615 	stw	r2,-40(fp)
 801a19c:	00000406 	br	801a1b0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801a1a0:	00c1ffc4 	movi	r3,2047
 801a1a4:	e0bff817 	ldw	r2,-32(fp)
 801a1a8:	1885c83a 	sub	r2,r3,r2
 801a1ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801a1b0:	e0bff617 	ldw	r2,-40(fp)
 801a1b4:	1000011e 	bne	r2,zero,801a1bc <altera_avalon_jtag_uart_write+0xa4>
        break;
 801a1b8:	00001d06 	br	801a230 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 801a1bc:	e0fffe17 	ldw	r3,-8(fp)
 801a1c0:	e0bff617 	ldw	r2,-40(fp)
 801a1c4:	1880022e 	bgeu	r3,r2,801a1d0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 801a1c8:	e0bffe17 	ldw	r2,-8(fp)
 801a1cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801a1d0:	e0bff817 	ldw	r2,-32(fp)
 801a1d4:	10820e04 	addi	r2,r2,2104
 801a1d8:	e0fffc17 	ldw	r3,-16(fp)
 801a1dc:	1885883a 	add	r2,r3,r2
 801a1e0:	1009883a 	mov	r4,r2
 801a1e4:	e17ffd17 	ldw	r5,-12(fp)
 801a1e8:	e1bff617 	ldw	r6,-40(fp)
 801a1ec:	8002df40 	call	8002df4 <memcpy>
      ptr   += n;
 801a1f0:	e0fffd17 	ldw	r3,-12(fp)
 801a1f4:	e0bff617 	ldw	r2,-40(fp)
 801a1f8:	1885883a 	add	r2,r3,r2
 801a1fc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 801a200:	e0fffe17 	ldw	r3,-8(fp)
 801a204:	e0bff617 	ldw	r2,-40(fp)
 801a208:	1885c83a 	sub	r2,r3,r2
 801a20c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801a210:	e0fff817 	ldw	r3,-32(fp)
 801a214:	e0bff617 	ldw	r2,-40(fp)
 801a218:	1885883a 	add	r2,r3,r2
 801a21c:	10c1ffcc 	andi	r3,r2,2047
 801a220:	e0bffc17 	ldw	r2,-16(fp)
 801a224:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801a228:	e0bffe17 	ldw	r2,-8(fp)
 801a22c:	00bfc616 	blt	zero,r2,801a148 <__alt_data_end+0xf801a148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a230:	0005303a 	rdctl	r2,status
 801a234:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a238:	e0fffa17 	ldw	r3,-24(fp)
 801a23c:	00bfff84 	movi	r2,-2
 801a240:	1884703a 	and	r2,r3,r2
 801a244:	1001703a 	wrctl	status,r2
  
  return context;
 801a248:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801a24c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801a250:	e0bffc17 	ldw	r2,-16(fp)
 801a254:	10800817 	ldw	r2,32(r2)
 801a258:	10c00094 	ori	r3,r2,2
 801a25c:	e0bffc17 	ldw	r2,-16(fp)
 801a260:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801a264:	e0bffc17 	ldw	r2,-16(fp)
 801a268:	10800017 	ldw	r2,0(r2)
 801a26c:	10800104 	addi	r2,r2,4
 801a270:	1007883a 	mov	r3,r2
 801a274:	e0bffc17 	ldw	r2,-16(fp)
 801a278:	10800817 	ldw	r2,32(r2)
 801a27c:	18800035 	stwio	r2,0(r3)
 801a280:	e0bff917 	ldw	r2,-28(fp)
 801a284:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a288:	e0bffb17 	ldw	r2,-20(fp)
 801a28c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801a290:	e0bffe17 	ldw	r2,-8(fp)
 801a294:	0080120e 	bge	zero,r2,801a2e0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 801a298:	e0bfff17 	ldw	r2,-4(fp)
 801a29c:	1090000c 	andi	r2,r2,16384
 801a2a0:	10000126 	beq	r2,zero,801a2a8 <altera_avalon_jtag_uart_write+0x190>
        break;
 801a2a4:	00001006 	br	801a2e8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801a2a8:	0001883a 	nop
 801a2ac:	e0bffc17 	ldw	r2,-16(fp)
 801a2b0:	10c00d17 	ldw	r3,52(r2)
 801a2b4:	e0bff517 	ldw	r2,-44(fp)
 801a2b8:	1880051e 	bne	r3,r2,801a2d0 <altera_avalon_jtag_uart_write+0x1b8>
 801a2bc:	e0bffc17 	ldw	r2,-16(fp)
 801a2c0:	10c00917 	ldw	r3,36(r2)
 801a2c4:	e0bffc17 	ldw	r2,-16(fp)
 801a2c8:	10800117 	ldw	r2,4(r2)
 801a2cc:	18bff736 	bltu	r3,r2,801a2ac <__alt_data_end+0xf801a2ac>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801a2d0:	e0bffc17 	ldw	r2,-16(fp)
 801a2d4:	10800917 	ldw	r2,36(r2)
 801a2d8:	10000126 	beq	r2,zero,801a2e0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 801a2dc:	00000206 	br	801a2e8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 801a2e0:	e0bffe17 	ldw	r2,-8(fp)
 801a2e4:	00bf9716 	blt	zero,r2,801a144 <__alt_data_end+0xf801a144>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 801a2e8:	e0fffd17 	ldw	r3,-12(fp)
 801a2ec:	e0bff717 	ldw	r2,-36(fp)
 801a2f0:	18800426 	beq	r3,r2,801a304 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 801a2f4:	e0fffd17 	ldw	r3,-12(fp)
 801a2f8:	e0bff717 	ldw	r2,-36(fp)
 801a2fc:	1885c83a 	sub	r2,r3,r2
 801a300:	00000606 	br	801a31c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 801a304:	e0bfff17 	ldw	r2,-4(fp)
 801a308:	1090000c 	andi	r2,r2,16384
 801a30c:	10000226 	beq	r2,zero,801a318 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 801a310:	00bffd44 	movi	r2,-11
 801a314:	00000106 	br	801a31c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801a318:	00bffec4 	movi	r2,-5
}
 801a31c:	e037883a 	mov	sp,fp
 801a320:	dfc00117 	ldw	ra,4(sp)
 801a324:	df000017 	ldw	fp,0(sp)
 801a328:	dec00204 	addi	sp,sp,8
 801a32c:	f800283a 	ret

0801a330 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801a330:	defffa04 	addi	sp,sp,-24
 801a334:	dfc00515 	stw	ra,20(sp)
 801a338:	df000415 	stw	fp,16(sp)
 801a33c:	df000404 	addi	fp,sp,16
 801a340:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801a344:	0007883a 	mov	r3,zero
 801a348:	e0bfff17 	ldw	r2,-4(fp)
 801a34c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801a350:	e0bfff17 	ldw	r2,-4(fp)
 801a354:	10800104 	addi	r2,r2,4
 801a358:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a35c:	0005303a 	rdctl	r2,status
 801a360:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a364:	e0fffd17 	ldw	r3,-12(fp)
 801a368:	00bfff84 	movi	r2,-2
 801a36c:	1884703a 	and	r2,r3,r2
 801a370:	1001703a 	wrctl	status,r2
  
  return context;
 801a374:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 801a378:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 801a37c:	801b4e80 	call	801b4e8 <alt_tick>
 801a380:	e0bffc17 	ldw	r2,-16(fp)
 801a384:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a388:	e0bffe17 	ldw	r2,-8(fp)
 801a38c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 801a390:	e037883a 	mov	sp,fp
 801a394:	dfc00117 	ldw	ra,4(sp)
 801a398:	df000017 	ldw	fp,0(sp)
 801a39c:	dec00204 	addi	sp,sp,8
 801a3a0:	f800283a 	ret

0801a3a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801a3a4:	defff804 	addi	sp,sp,-32
 801a3a8:	dfc00715 	stw	ra,28(sp)
 801a3ac:	df000615 	stw	fp,24(sp)
 801a3b0:	df000604 	addi	fp,sp,24
 801a3b4:	e13ffc15 	stw	r4,-16(fp)
 801a3b8:	e17ffd15 	stw	r5,-12(fp)
 801a3bc:	e1bffe15 	stw	r6,-8(fp)
 801a3c0:	e1ffff15 	stw	r7,-4(fp)
 801a3c4:	e0bfff17 	ldw	r2,-4(fp)
 801a3c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801a3cc:	008200b4 	movhi	r2,2050
 801a3d0:	10bad604 	addi	r2,r2,-5288
 801a3d4:	10800017 	ldw	r2,0(r2)
 801a3d8:	1000041e 	bne	r2,zero,801a3ec <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 801a3dc:	008200b4 	movhi	r2,2050
 801a3e0:	10bad604 	addi	r2,r2,-5288
 801a3e4:	e0fffb17 	ldw	r3,-20(fp)
 801a3e8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801a3ec:	e0bffc17 	ldw	r2,-16(fp)
 801a3f0:	10800104 	addi	r2,r2,4
 801a3f4:	00c001c4 	movi	r3,7
 801a3f8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801a3fc:	d8000015 	stw	zero,0(sp)
 801a400:	e13ffd17 	ldw	r4,-12(fp)
 801a404:	e17ffe17 	ldw	r5,-8(fp)
 801a408:	018200b4 	movhi	r6,2050
 801a40c:	31a8cc04 	addi	r6,r6,-23760
 801a410:	e1fffc17 	ldw	r7,-16(fp)
 801a414:	801add40 	call	801add4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 801a418:	e037883a 	mov	sp,fp
 801a41c:	dfc00117 	ldw	ra,4(sp)
 801a420:	df000017 	ldw	fp,0(sp)
 801a424:	dec00204 	addi	sp,sp,8
 801a428:	f800283a 	ret

0801a42c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 801a42c:	defff904 	addi	sp,sp,-28
 801a430:	dfc00615 	stw	ra,24(sp)
 801a434:	df000515 	stw	fp,20(sp)
 801a438:	df000504 	addi	fp,sp,20
 801a43c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 801a440:	00800144 	movi	r2,5
 801a444:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 801a448:	00800044 	movi	r2,1
 801a44c:	d8800015 	stw	r2,0(sp)
 801a450:	e0bffe44 	addi	r2,fp,-7
 801a454:	d8800115 	stw	r2,4(sp)
 801a458:	d8000215 	stw	zero,8(sp)
 801a45c:	e13fff17 	ldw	r4,-4(fp)
 801a460:	000b883a 	mov	r5,zero
 801a464:	01800044 	movi	r6,1
 801a468:	e1fffe04 	addi	r7,fp,-8
 801a46c:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 801a470:	e0bffe43 	ldbu	r2,-7(fp)
}
 801a474:	e037883a 	mov	sp,fp
 801a478:	dfc00117 	ldw	ra,4(sp)
 801a47c:	df000017 	ldw	fp,0(sp)
 801a480:	dec00204 	addi	sp,sp,8
 801a484:	f800283a 	ret

0801a488 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 801a488:	defffd04 	addi	sp,sp,-12
 801a48c:	dfc00215 	stw	ra,8(sp)
 801a490:	df000115 	stw	fp,4(sp)
 801a494:	df000104 	addi	fp,sp,4
 801a498:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 801a49c:	e13fff17 	ldw	r4,-4(fp)
 801a4a0:	801a42c0 	call	801a42c <epcs_read_status_register>
 801a4a4:	10803fcc 	andi	r2,r2,255
 801a4a8:	1080004c 	andi	r2,r2,1
}
 801a4ac:	e037883a 	mov	sp,fp
 801a4b0:	dfc00117 	ldw	ra,4(sp)
 801a4b4:	df000017 	ldw	fp,0(sp)
 801a4b8:	dec00204 	addi	sp,sp,8
 801a4bc:	f800283a 	ret

0801a4c0 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 801a4c0:	defffd04 	addi	sp,sp,-12
 801a4c4:	dfc00215 	stw	ra,8(sp)
 801a4c8:	df000115 	stw	fp,4(sp)
 801a4cc:	df000104 	addi	fp,sp,4
 801a4d0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 801a4d4:	0001883a 	nop
 801a4d8:	e13fff17 	ldw	r4,-4(fp)
 801a4dc:	801a4880 	call	801a488 <epcs_test_wip>
 801a4e0:	103ffd1e 	bne	r2,zero,801a4d8 <__alt_data_end+0xf801a4d8>
  {
  }
}
 801a4e4:	e037883a 	mov	sp,fp
 801a4e8:	dfc00117 	ldw	ra,4(sp)
 801a4ec:	df000017 	ldw	fp,0(sp)
 801a4f0:	dec00204 	addi	sp,sp,8
 801a4f4:	f800283a 	ret

0801a4f8 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 801a4f8:	defff604 	addi	sp,sp,-40
 801a4fc:	dfc00915 	stw	ra,36(sp)
 801a500:	df000815 	stw	fp,32(sp)
 801a504:	df000804 	addi	fp,sp,32
 801a508:	e13ffd15 	stw	r4,-12(fp)
 801a50c:	e17ffe15 	stw	r5,-8(fp)
 801a510:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 801a514:	e0bfff17 	ldw	r2,-4(fp)
 801a518:	10001226 	beq	r2,zero,801a564 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 801a51c:	00bff604 	movi	r2,-40
 801a520:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 801a524:	e0bffe17 	ldw	r2,-8(fp)
 801a528:	1004d63a 	srli	r2,r2,24
 801a52c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 801a530:	e0bffe17 	ldw	r2,-8(fp)
 801a534:	1004d43a 	srli	r2,r2,16
 801a538:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 801a53c:	e0bffe17 	ldw	r2,-8(fp)
 801a540:	1004d23a 	srli	r2,r2,8
 801a544:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 801a548:	e0bffe17 	ldw	r2,-8(fp)
 801a54c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 801a550:	00800144 	movi	r2,5
 801a554:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 801a558:	e13ffd17 	ldw	r4,-12(fp)
 801a55c:	801a9a00 	call	801a9a0 <epcs_enter_4_bytes_mode>
 801a560:	00000c06 	br	801a594 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 801a564:	00bff604 	movi	r2,-40
 801a568:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 801a56c:	e0bffe17 	ldw	r2,-8(fp)
 801a570:	1004d43a 	srli	r2,r2,16
 801a574:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 801a578:	e0bffe17 	ldw	r2,-8(fp)
 801a57c:	1004d23a 	srli	r2,r2,8
 801a580:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 801a584:	e0bffe17 	ldw	r2,-8(fp)
 801a588:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 801a58c:	00800104 	movi	r2,4
 801a590:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 801a594:	e13ffd17 	ldw	r4,-12(fp)
 801a598:	801a6e40 	call	801a6e4 <epcs_write_enable>

  alt_avalon_spi_command(
 801a59c:	e0fffb03 	ldbu	r3,-20(fp)
 801a5a0:	e0bffb44 	addi	r2,fp,-19
 801a5a4:	d8000015 	stw	zero,0(sp)
 801a5a8:	d8000115 	stw	zero,4(sp)
 801a5ac:	d8000215 	stw	zero,8(sp)
 801a5b0:	e13ffd17 	ldw	r4,-12(fp)
 801a5b4:	000b883a 	mov	r5,zero
 801a5b8:	180d883a 	mov	r6,r3
 801a5bc:	100f883a 	mov	r7,r2
 801a5c0:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 801a5c4:	e13ffd17 	ldw	r4,-12(fp)
 801a5c8:	801a4c00 	call	801a4c0 <epcs_await_wip_released>

  if(four_bytes_mode)
 801a5cc:	e0bfff17 	ldw	r2,-4(fp)
 801a5d0:	10000226 	beq	r2,zero,801a5dc <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 801a5d4:	e13ffd17 	ldw	r4,-12(fp)
 801a5d8:	801a9fc0 	call	801a9fc <epcs_exit_4_bytes_mode>
  }
}
 801a5dc:	e037883a 	mov	sp,fp
 801a5e0:	dfc00117 	ldw	ra,4(sp)
 801a5e4:	df000017 	ldw	fp,0(sp)
 801a5e8:	dec00204 	addi	sp,sp,8
 801a5ec:	f800283a 	ret

0801a5f0 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 801a5f0:	defff404 	addi	sp,sp,-48
 801a5f4:	dfc00b15 	stw	ra,44(sp)
 801a5f8:	df000a15 	stw	fp,40(sp)
 801a5fc:	df000a04 	addi	fp,sp,40
 801a600:	e13ffc15 	stw	r4,-16(fp)
 801a604:	e17ffd15 	stw	r5,-12(fp)
 801a608:	e1bffe15 	stw	r6,-8(fp)
 801a60c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 801a610:	008000c4 	movi	r2,3
 801a614:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 801a618:	e0800217 	ldw	r2,8(fp)
 801a61c:	10001026 	beq	r2,zero,801a660 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 801a620:	e0bffd17 	ldw	r2,-12(fp)
 801a624:	1004d63a 	srli	r2,r2,24
 801a628:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 801a62c:	e0bffd17 	ldw	r2,-12(fp)
 801a630:	1005d43a 	srai	r2,r2,16
 801a634:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 801a638:	e0bffd17 	ldw	r2,-12(fp)
 801a63c:	1005d23a 	srai	r2,r2,8
 801a640:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 801a644:	e0bffd17 	ldw	r2,-12(fp)
 801a648:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 801a64c:	00800144 	movi	r2,5
 801a650:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 801a654:	e13ffc17 	ldw	r4,-16(fp)
 801a658:	801a9a00 	call	801a9a0 <epcs_enter_4_bytes_mode>
 801a65c:	00000a06 	br	801a688 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 801a660:	e0bffd17 	ldw	r2,-12(fp)
 801a664:	1005d43a 	srai	r2,r2,16
 801a668:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 801a66c:	e0bffd17 	ldw	r2,-12(fp)
 801a670:	1005d23a 	srai	r2,r2,8
 801a674:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 801a678:	e0bffd17 	ldw	r2,-12(fp)
 801a67c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 801a680:	00800104 	movi	r2,4
 801a684:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 801a688:	e13ffc17 	ldw	r4,-16(fp)
 801a68c:	801a4c00 	call	801a4c0 <epcs_await_wip_released>

  alt_avalon_spi_command(
 801a690:	e0bfff17 	ldw	r2,-4(fp)
 801a694:	e0fffa04 	addi	r3,fp,-24
 801a698:	d8800015 	stw	r2,0(sp)
 801a69c:	e0bffe17 	ldw	r2,-8(fp)
 801a6a0:	d8800115 	stw	r2,4(sp)
 801a6a4:	d8000215 	stw	zero,8(sp)
 801a6a8:	e13ffc17 	ldw	r4,-16(fp)
 801a6ac:	000b883a 	mov	r5,zero
 801a6b0:	e1bff917 	ldw	r6,-28(fp)
 801a6b4:	180f883a 	mov	r7,r3
 801a6b8:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 801a6bc:	e0800217 	ldw	r2,8(fp)
 801a6c0:	10000226 	beq	r2,zero,801a6cc <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 801a6c4:	e13ffc17 	ldw	r4,-16(fp)
 801a6c8:	801a9fc0 	call	801a9fc <epcs_exit_4_bytes_mode>
  }

  return length;
 801a6cc:	e0bfff17 	ldw	r2,-4(fp)
}
 801a6d0:	e037883a 	mov	sp,fp
 801a6d4:	dfc00117 	ldw	ra,4(sp)
 801a6d8:	df000017 	ldw	fp,0(sp)
 801a6dc:	dec00204 	addi	sp,sp,8
 801a6e0:	f800283a 	ret

0801a6e4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 801a6e4:	defff904 	addi	sp,sp,-28
 801a6e8:	dfc00615 	stw	ra,24(sp)
 801a6ec:	df000515 	stw	fp,20(sp)
 801a6f0:	df000504 	addi	fp,sp,20
 801a6f4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 801a6f8:	00800184 	movi	r2,6
 801a6fc:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 801a700:	d8000015 	stw	zero,0(sp)
 801a704:	d8000115 	stw	zero,4(sp)
 801a708:	d8000215 	stw	zero,8(sp)
 801a70c:	e13fff17 	ldw	r4,-4(fp)
 801a710:	000b883a 	mov	r5,zero
 801a714:	01800044 	movi	r6,1
 801a718:	e1fffe04 	addi	r7,fp,-8
 801a71c:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 801a720:	e037883a 	mov	sp,fp
 801a724:	dfc00117 	ldw	ra,4(sp)
 801a728:	df000017 	ldw	fp,0(sp)
 801a72c:	dec00204 	addi	sp,sp,8
 801a730:	f800283a 	ret

0801a734 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 801a734:	defff804 	addi	sp,sp,-32
 801a738:	dfc00715 	stw	ra,28(sp)
 801a73c:	df000615 	stw	fp,24(sp)
 801a740:	df000604 	addi	fp,sp,24
 801a744:	e13ffe15 	stw	r4,-8(fp)
 801a748:	2805883a 	mov	r2,r5
 801a74c:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 801a750:	00800044 	movi	r2,1
 801a754:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 801a758:	e0bfff03 	ldbu	r2,-4(fp)
 801a75c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 801a760:	d8000015 	stw	zero,0(sp)
 801a764:	d8000115 	stw	zero,4(sp)
 801a768:	d8000215 	stw	zero,8(sp)
 801a76c:	e13ffe17 	ldw	r4,-8(fp)
 801a770:	000b883a 	mov	r5,zero
 801a774:	01800084 	movi	r6,2
 801a778:	e1fffd04 	addi	r7,fp,-12
 801a77c:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 801a780:	e13ffe17 	ldw	r4,-8(fp)
 801a784:	801a4c00 	call	801a4c0 <epcs_await_wip_released>
}
 801a788:	e037883a 	mov	sp,fp
 801a78c:	dfc00117 	ldw	ra,4(sp)
 801a790:	df000017 	ldw	fp,0(sp)
 801a794:	dec00204 	addi	sp,sp,8
 801a798:	f800283a 	ret

0801a79c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 801a79c:	defff404 	addi	sp,sp,-48
 801a7a0:	dfc00b15 	stw	ra,44(sp)
 801a7a4:	df000a15 	stw	fp,40(sp)
 801a7a8:	df000a04 	addi	fp,sp,40
 801a7ac:	e13ffc15 	stw	r4,-16(fp)
 801a7b0:	e17ffd15 	stw	r5,-12(fp)
 801a7b4:	e1bffe15 	stw	r6,-8(fp)
 801a7b8:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 801a7bc:	00800084 	movi	r2,2
 801a7c0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 801a7c4:	e0800217 	ldw	r2,8(fp)
 801a7c8:	10001026 	beq	r2,zero,801a80c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 801a7cc:	e0bffd17 	ldw	r2,-12(fp)
 801a7d0:	1004d63a 	srli	r2,r2,24
 801a7d4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 801a7d8:	e0bffd17 	ldw	r2,-12(fp)
 801a7dc:	1005d43a 	srai	r2,r2,16
 801a7e0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 801a7e4:	e0bffd17 	ldw	r2,-12(fp)
 801a7e8:	1005d23a 	srai	r2,r2,8
 801a7ec:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 801a7f0:	e0bffd17 	ldw	r2,-12(fp)
 801a7f4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 801a7f8:	00800144 	movi	r2,5
 801a7fc:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 801a800:	e13ffc17 	ldw	r4,-16(fp)
 801a804:	801a9a00 	call	801a9a0 <epcs_enter_4_bytes_mode>
 801a808:	00000a06 	br	801a834 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 801a80c:	e0bffd17 	ldw	r2,-12(fp)
 801a810:	1005d43a 	srai	r2,r2,16
 801a814:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 801a818:	e0bffd17 	ldw	r2,-12(fp)
 801a81c:	1005d23a 	srai	r2,r2,8
 801a820:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 801a824:	e0bffd17 	ldw	r2,-12(fp)
 801a828:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 801a82c:	00800104 	movi	r2,4
 801a830:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 801a834:	e13ffc17 	ldw	r4,-16(fp)
 801a838:	801a6e40 	call	801a6e4 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 801a83c:	e0fffa04 	addi	r3,fp,-24
 801a840:	d8000015 	stw	zero,0(sp)
 801a844:	d8000115 	stw	zero,4(sp)
 801a848:	00800044 	movi	r2,1
 801a84c:	d8800215 	stw	r2,8(sp)
 801a850:	e13ffc17 	ldw	r4,-16(fp)
 801a854:	000b883a 	mov	r5,zero
 801a858:	e1bff917 	ldw	r6,-28(fp)
 801a85c:	180f883a 	mov	r7,r3
 801a860:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 801a864:	e0bfff17 	ldw	r2,-4(fp)
 801a868:	d8000015 	stw	zero,0(sp)
 801a86c:	d8000115 	stw	zero,4(sp)
 801a870:	d8000215 	stw	zero,8(sp)
 801a874:	e13ffc17 	ldw	r4,-16(fp)
 801a878:	000b883a 	mov	r5,zero
 801a87c:	100d883a 	mov	r6,r2
 801a880:	e1fffe17 	ldw	r7,-8(fp)
 801a884:	801b60c0 	call	801b60c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 801a888:	e13ffc17 	ldw	r4,-16(fp)
 801a88c:	801a4c00 	call	801a4c0 <epcs_await_wip_released>

  if(four_bytes_mode)
 801a890:	e0800217 	ldw	r2,8(fp)
 801a894:	10000226 	beq	r2,zero,801a8a0 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 801a898:	e13ffc17 	ldw	r4,-16(fp)
 801a89c:	801a9fc0 	call	801a9fc <epcs_exit_4_bytes_mode>
  }

  return length;
 801a8a0:	e0bfff17 	ldw	r2,-4(fp)
}
 801a8a4:	e037883a 	mov	sp,fp
 801a8a8:	dfc00117 	ldw	ra,4(sp)
 801a8ac:	df000017 	ldw	fp,0(sp)
 801a8b0:	dec00204 	addi	sp,sp,8
 801a8b4:	f800283a 	ret

0801a8b8 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 801a8b8:	defff804 	addi	sp,sp,-32
 801a8bc:	dfc00715 	stw	ra,28(sp)
 801a8c0:	df000615 	stw	fp,24(sp)
 801a8c4:	df000604 	addi	fp,sp,24
 801a8c8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 801a8cc:	00bfeac4 	movi	r2,-85
 801a8d0:	e0bffd05 	stb	r2,-12(fp)
 801a8d4:	e03ffd45 	stb	zero,-11(fp)
 801a8d8:	e03ffd85 	stb	zero,-10(fp)
 801a8dc:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 801a8e0:	00800044 	movi	r2,1
 801a8e4:	d8800015 	stw	r2,0(sp)
 801a8e8:	e0bffe04 	addi	r2,fp,-8
 801a8ec:	d8800115 	stw	r2,4(sp)
 801a8f0:	d8000215 	stw	zero,8(sp)
 801a8f4:	e13fff17 	ldw	r4,-4(fp)
 801a8f8:	000b883a 	mov	r5,zero
 801a8fc:	01800104 	movi	r6,4
 801a900:	e1fffd04 	addi	r7,fp,-12
 801a904:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 801a908:	e0bffe03 	ldbu	r2,-8(fp)
}
 801a90c:	e037883a 	mov	sp,fp
 801a910:	dfc00117 	ldw	ra,4(sp)
 801a914:	df000017 	ldw	fp,0(sp)
 801a918:	dec00204 	addi	sp,sp,8
 801a91c:	f800283a 	ret

0801a920 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 801a920:	defff904 	addi	sp,sp,-28
 801a924:	dfc00615 	stw	ra,24(sp)
 801a928:	df000515 	stw	fp,20(sp)
 801a92c:	df000504 	addi	fp,sp,20
 801a930:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 801a934:	00bfe7c4 	movi	r2,-97
 801a938:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 801a93c:	008000c4 	movi	r2,3
 801a940:	d8800015 	stw	r2,0(sp)
 801a944:	e0bffe44 	addi	r2,fp,-7
 801a948:	d8800115 	stw	r2,4(sp)
 801a94c:	d8000215 	stw	zero,8(sp)
 801a950:	e13fff17 	ldw	r4,-4(fp)
 801a954:	000b883a 	mov	r5,zero
 801a958:	01800044 	movi	r6,1
 801a95c:	e1fffe04 	addi	r7,fp,-8
 801a960:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 801a964:	e0bffe43 	ldbu	r2,-7(fp)
 801a968:	10803fcc 	andi	r2,r2,255
 801a96c:	1006943a 	slli	r3,r2,16
 801a970:	e0bffe83 	ldbu	r2,-6(fp)
 801a974:	10803fcc 	andi	r2,r2,255
 801a978:	1004923a 	slli	r2,r2,8
 801a97c:	1886b03a 	or	r3,r3,r2
 801a980:	e0bffec3 	ldbu	r2,-5(fp)
 801a984:	10803fcc 	andi	r2,r2,255
 801a988:	1884b03a 	or	r2,r3,r2
}
 801a98c:	e037883a 	mov	sp,fp
 801a990:	dfc00117 	ldw	ra,4(sp)
 801a994:	df000017 	ldw	fp,0(sp)
 801a998:	dec00204 	addi	sp,sp,8
 801a99c:	f800283a 	ret

0801a9a0 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 801a9a0:	defff904 	addi	sp,sp,-28
 801a9a4:	dfc00615 	stw	ra,24(sp)
 801a9a8:	df000515 	stw	fp,20(sp)
 801a9ac:	df000504 	addi	fp,sp,20
 801a9b0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 801a9b4:	00bfedc4 	movi	r2,-73
 801a9b8:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 801a9bc:	e13fff17 	ldw	r4,-4(fp)
 801a9c0:	801a6e40 	call	801a6e4 <epcs_write_enable>

  alt_avalon_spi_command(
 801a9c4:	d8000015 	stw	zero,0(sp)
 801a9c8:	d8000115 	stw	zero,4(sp)
 801a9cc:	d8000215 	stw	zero,8(sp)
 801a9d0:	e13fff17 	ldw	r4,-4(fp)
 801a9d4:	000b883a 	mov	r5,zero
 801a9d8:	01800044 	movi	r6,1
 801a9dc:	e1fffe04 	addi	r7,fp,-8
 801a9e0:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 801a9e4:	0001883a 	nop
}
 801a9e8:	e037883a 	mov	sp,fp
 801a9ec:	dfc00117 	ldw	ra,4(sp)
 801a9f0:	df000017 	ldw	fp,0(sp)
 801a9f4:	dec00204 	addi	sp,sp,8
 801a9f8:	f800283a 	ret

0801a9fc <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 801a9fc:	defff904 	addi	sp,sp,-28
 801aa00:	dfc00615 	stw	ra,24(sp)
 801aa04:	df000515 	stw	fp,20(sp)
 801aa08:	df000504 	addi	fp,sp,20
 801aa0c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 801aa10:	00bffa44 	movi	r2,-23
 801aa14:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 801aa18:	e13fff17 	ldw	r4,-4(fp)
 801aa1c:	801a6e40 	call	801a6e4 <epcs_write_enable>

  alt_avalon_spi_command(
 801aa20:	d8000015 	stw	zero,0(sp)
 801aa24:	d8000115 	stw	zero,4(sp)
 801aa28:	d8000215 	stw	zero,8(sp)
 801aa2c:	e13fff17 	ldw	r4,-4(fp)
 801aa30:	000b883a 	mov	r5,zero
 801aa34:	01800044 	movi	r6,1
 801aa38:	e1fffe04 	addi	r7,fp,-8
 801aa3c:	801b60c0 	call	801b60c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 801aa40:	0001883a 	nop
}
 801aa44:	e037883a 	mov	sp,fp
 801aa48:	dfc00117 	ldw	ra,4(sp)
 801aa4c:	df000017 	ldw	fp,0(sp)
 801aa50:	dec00204 	addi	sp,sp,8
 801aa54:	f800283a 	ret

0801aa58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801aa58:	defff504 	addi	sp,sp,-44
 801aa5c:	df000a15 	stw	fp,40(sp)
 801aa60:	df000a04 	addi	fp,sp,40
 801aa64:	e13ffc15 	stw	r4,-16(fp)
 801aa68:	e17ffd15 	stw	r5,-12(fp)
 801aa6c:	e1bffe15 	stw	r6,-8(fp)
 801aa70:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801aa74:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801aa78:	008200b4 	movhi	r2,2050
 801aa7c:	10bad604 	addi	r2,r2,-5288
 801aa80:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 801aa84:	10003f26 	beq	r2,zero,801ab84 <alt_alarm_start+0x12c>
  {
    if (alarm)
 801aa88:	e0bffc17 	ldw	r2,-16(fp)
 801aa8c:	10003b26 	beq	r2,zero,801ab7c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 801aa90:	e0bffc17 	ldw	r2,-16(fp)
 801aa94:	e0fffe17 	ldw	r3,-8(fp)
 801aa98:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 801aa9c:	e0bffc17 	ldw	r2,-16(fp)
 801aaa0:	e0ffff17 	ldw	r3,-4(fp)
 801aaa4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801aaa8:	0005303a 	rdctl	r2,status
 801aaac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801aab0:	e0fff817 	ldw	r3,-32(fp)
 801aab4:	00bfff84 	movi	r2,-2
 801aab8:	1884703a 	and	r2,r3,r2
 801aabc:	1001703a 	wrctl	status,r2
  
  return context;
 801aac0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 801aac4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801aac8:	008200b4 	movhi	r2,2050
 801aacc:	10bad704 	addi	r2,r2,-5284
 801aad0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801aad4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801aad8:	e0fffd17 	ldw	r3,-12(fp)
 801aadc:	e0bff617 	ldw	r2,-40(fp)
 801aae0:	1885883a 	add	r2,r3,r2
 801aae4:	10c00044 	addi	r3,r2,1
 801aae8:	e0bffc17 	ldw	r2,-16(fp)
 801aaec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801aaf0:	e0bffc17 	ldw	r2,-16(fp)
 801aaf4:	10c00217 	ldw	r3,8(r2)
 801aaf8:	e0bff617 	ldw	r2,-40(fp)
 801aafc:	1880042e 	bgeu	r3,r2,801ab10 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 801ab00:	e0bffc17 	ldw	r2,-16(fp)
 801ab04:	00c00044 	movi	r3,1
 801ab08:	10c00405 	stb	r3,16(r2)
 801ab0c:	00000206 	br	801ab18 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 801ab10:	e0bffc17 	ldw	r2,-16(fp)
 801ab14:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801ab18:	e0fffc17 	ldw	r3,-16(fp)
 801ab1c:	008200b4 	movhi	r2,2050
 801ab20:	10bac704 	addi	r2,r2,-5348
 801ab24:	e0bff915 	stw	r2,-28(fp)
 801ab28:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801ab2c:	e0bffa17 	ldw	r2,-24(fp)
 801ab30:	e0fff917 	ldw	r3,-28(fp)
 801ab34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801ab38:	e0bff917 	ldw	r2,-28(fp)
 801ab3c:	10c00017 	ldw	r3,0(r2)
 801ab40:	e0bffa17 	ldw	r2,-24(fp)
 801ab44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801ab48:	e0bff917 	ldw	r2,-28(fp)
 801ab4c:	10800017 	ldw	r2,0(r2)
 801ab50:	e0fffa17 	ldw	r3,-24(fp)
 801ab54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801ab58:	e0bff917 	ldw	r2,-28(fp)
 801ab5c:	e0fffa17 	ldw	r3,-24(fp)
 801ab60:	10c00015 	stw	r3,0(r2)
 801ab64:	e0bff717 	ldw	r2,-36(fp)
 801ab68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801ab6c:	e0bffb17 	ldw	r2,-20(fp)
 801ab70:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801ab74:	0005883a 	mov	r2,zero
 801ab78:	00000306 	br	801ab88 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 801ab7c:	00bffa84 	movi	r2,-22
 801ab80:	00000106 	br	801ab88 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 801ab84:	00bfde84 	movi	r2,-134
  }
}
 801ab88:	e037883a 	mov	sp,fp
 801ab8c:	df000017 	ldw	fp,0(sp)
 801ab90:	dec00104 	addi	sp,sp,4
 801ab94:	f800283a 	ret

0801ab98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801ab98:	defffe04 	addi	sp,sp,-8
 801ab9c:	dfc00115 	stw	ra,4(sp)
 801aba0:	df000015 	stw	fp,0(sp)
 801aba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801aba8:	008200b4 	movhi	r2,2050
 801abac:	10bac204 	addi	r2,r2,-5368
 801abb0:	10800017 	ldw	r2,0(r2)
 801abb4:	10000526 	beq	r2,zero,801abcc <alt_get_errno+0x34>
 801abb8:	008200b4 	movhi	r2,2050
 801abbc:	10bac204 	addi	r2,r2,-5368
 801abc0:	10800017 	ldw	r2,0(r2)
 801abc4:	103ee83a 	callr	r2
 801abc8:	00000206 	br	801abd4 <alt_get_errno+0x3c>
 801abcc:	008200b4 	movhi	r2,2050
 801abd0:	10bace04 	addi	r2,r2,-5320
}
 801abd4:	e037883a 	mov	sp,fp
 801abd8:	dfc00117 	ldw	ra,4(sp)
 801abdc:	df000017 	ldw	fp,0(sp)
 801abe0:	dec00204 	addi	sp,sp,8
 801abe4:	f800283a 	ret

0801abe8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 801abe8:	defffa04 	addi	sp,sp,-24
 801abec:	dfc00515 	stw	ra,20(sp)
 801abf0:	df000415 	stw	fp,16(sp)
 801abf4:	df000404 	addi	fp,sp,16
 801abf8:	e13ffe15 	stw	r4,-8(fp)
 801abfc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801ac00:	e0bffe17 	ldw	r2,-8(fp)
 801ac04:	10000326 	beq	r2,zero,801ac14 <alt_dev_llist_insert+0x2c>
 801ac08:	e0bffe17 	ldw	r2,-8(fp)
 801ac0c:	10800217 	ldw	r2,8(r2)
 801ac10:	1000061e 	bne	r2,zero,801ac2c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 801ac14:	801ab980 	call	801ab98 <alt_get_errno>
 801ac18:	1007883a 	mov	r3,r2
 801ac1c:	00800584 	movi	r2,22
 801ac20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801ac24:	00bffa84 	movi	r2,-22
 801ac28:	00001306 	br	801ac78 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801ac2c:	e0bffe17 	ldw	r2,-8(fp)
 801ac30:	e0ffff17 	ldw	r3,-4(fp)
 801ac34:	e0fffc15 	stw	r3,-16(fp)
 801ac38:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801ac3c:	e0bffd17 	ldw	r2,-12(fp)
 801ac40:	e0fffc17 	ldw	r3,-16(fp)
 801ac44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801ac48:	e0bffc17 	ldw	r2,-16(fp)
 801ac4c:	10c00017 	ldw	r3,0(r2)
 801ac50:	e0bffd17 	ldw	r2,-12(fp)
 801ac54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801ac58:	e0bffc17 	ldw	r2,-16(fp)
 801ac5c:	10800017 	ldw	r2,0(r2)
 801ac60:	e0fffd17 	ldw	r3,-12(fp)
 801ac64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801ac68:	e0bffc17 	ldw	r2,-16(fp)
 801ac6c:	e0fffd17 	ldw	r3,-12(fp)
 801ac70:	10c00015 	stw	r3,0(r2)

  return 0;  
 801ac74:	0005883a 	mov	r2,zero
}
 801ac78:	e037883a 	mov	sp,fp
 801ac7c:	dfc00117 	ldw	ra,4(sp)
 801ac80:	df000017 	ldw	fp,0(sp)
 801ac84:	dec00204 	addi	sp,sp,8
 801ac88:	f800283a 	ret

0801ac8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 801ac8c:	defffd04 	addi	sp,sp,-12
 801ac90:	dfc00215 	stw	ra,8(sp)
 801ac94:	df000115 	stw	fp,4(sp)
 801ac98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801ac9c:	008200b4 	movhi	r2,2050
 801aca0:	10af6604 	addi	r2,r2,-17000
 801aca4:	e0bfff15 	stw	r2,-4(fp)
 801aca8:	00000606 	br	801acc4 <_do_ctors+0x38>
        (*ctor) (); 
 801acac:	e0bfff17 	ldw	r2,-4(fp)
 801acb0:	10800017 	ldw	r2,0(r2)
 801acb4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801acb8:	e0bfff17 	ldw	r2,-4(fp)
 801acbc:	10bfff04 	addi	r2,r2,-4
 801acc0:	e0bfff15 	stw	r2,-4(fp)
 801acc4:	e0ffff17 	ldw	r3,-4(fp)
 801acc8:	008200b4 	movhi	r2,2050
 801accc:	10af6704 	addi	r2,r2,-16996
 801acd0:	18bff62e 	bgeu	r3,r2,801acac <__alt_data_end+0xf801acac>
        (*ctor) (); 
}
 801acd4:	e037883a 	mov	sp,fp
 801acd8:	dfc00117 	ldw	ra,4(sp)
 801acdc:	df000017 	ldw	fp,0(sp)
 801ace0:	dec00204 	addi	sp,sp,8
 801ace4:	f800283a 	ret

0801ace8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 801ace8:	defffd04 	addi	sp,sp,-12
 801acec:	dfc00215 	stw	ra,8(sp)
 801acf0:	df000115 	stw	fp,4(sp)
 801acf4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801acf8:	008200b4 	movhi	r2,2050
 801acfc:	10af6604 	addi	r2,r2,-17000
 801ad00:	e0bfff15 	stw	r2,-4(fp)
 801ad04:	00000606 	br	801ad20 <_do_dtors+0x38>
        (*dtor) (); 
 801ad08:	e0bfff17 	ldw	r2,-4(fp)
 801ad0c:	10800017 	ldw	r2,0(r2)
 801ad10:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801ad14:	e0bfff17 	ldw	r2,-4(fp)
 801ad18:	10bfff04 	addi	r2,r2,-4
 801ad1c:	e0bfff15 	stw	r2,-4(fp)
 801ad20:	e0ffff17 	ldw	r3,-4(fp)
 801ad24:	008200b4 	movhi	r2,2050
 801ad28:	10af6704 	addi	r2,r2,-16996
 801ad2c:	18bff62e 	bgeu	r3,r2,801ad08 <__alt_data_end+0xf801ad08>
        (*dtor) (); 
}
 801ad30:	e037883a 	mov	sp,fp
 801ad34:	dfc00117 	ldw	ra,4(sp)
 801ad38:	df000017 	ldw	fp,0(sp)
 801ad3c:	dec00204 	addi	sp,sp,8
 801ad40:	f800283a 	ret

0801ad44 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801ad44:	defffa04 	addi	sp,sp,-24
 801ad48:	dfc00515 	stw	ra,20(sp)
 801ad4c:	df000415 	stw	fp,16(sp)
 801ad50:	df000404 	addi	fp,sp,16
 801ad54:	e13ffe15 	stw	r4,-8(fp)
 801ad58:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801ad5c:	e0bfff17 	ldw	r2,-4(fp)
 801ad60:	10800017 	ldw	r2,0(r2)
 801ad64:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801ad68:	e13ffe17 	ldw	r4,-8(fp)
 801ad6c:	800338c0 	call	800338c <strlen>
 801ad70:	10800044 	addi	r2,r2,1
 801ad74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801ad78:	00000d06 	br	801adb0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801ad7c:	e0bffc17 	ldw	r2,-16(fp)
 801ad80:	10c00217 	ldw	r3,8(r2)
 801ad84:	e0bffd17 	ldw	r2,-12(fp)
 801ad88:	1809883a 	mov	r4,r3
 801ad8c:	e17ffe17 	ldw	r5,-8(fp)
 801ad90:	100d883a 	mov	r6,r2
 801ad94:	8002d780 	call	8002d78 <memcmp>
 801ad98:	1000021e 	bne	r2,zero,801ada4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801ad9c:	e0bffc17 	ldw	r2,-16(fp)
 801ada0:	00000706 	br	801adc0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801ada4:	e0bffc17 	ldw	r2,-16(fp)
 801ada8:	10800017 	ldw	r2,0(r2)
 801adac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801adb0:	e0fffc17 	ldw	r3,-16(fp)
 801adb4:	e0bfff17 	ldw	r2,-4(fp)
 801adb8:	18bff01e 	bne	r3,r2,801ad7c <__alt_data_end+0xf801ad7c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801adbc:	0005883a 	mov	r2,zero
}
 801adc0:	e037883a 	mov	sp,fp
 801adc4:	dfc00117 	ldw	ra,4(sp)
 801adc8:	df000017 	ldw	fp,0(sp)
 801adcc:	dec00204 	addi	sp,sp,8
 801add0:	f800283a 	ret

0801add4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801add4:	defff904 	addi	sp,sp,-28
 801add8:	dfc00615 	stw	ra,24(sp)
 801addc:	df000515 	stw	fp,20(sp)
 801ade0:	df000504 	addi	fp,sp,20
 801ade4:	e13ffc15 	stw	r4,-16(fp)
 801ade8:	e17ffd15 	stw	r5,-12(fp)
 801adec:	e1bffe15 	stw	r6,-8(fp)
 801adf0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801adf4:	e0800217 	ldw	r2,8(fp)
 801adf8:	d8800015 	stw	r2,0(sp)
 801adfc:	e13ffc17 	ldw	r4,-16(fp)
 801ae00:	e17ffd17 	ldw	r5,-12(fp)
 801ae04:	e1bffe17 	ldw	r6,-8(fp)
 801ae08:	e1ffff17 	ldw	r7,-4(fp)
 801ae0c:	801afb40 	call	801afb4 <alt_iic_isr_register>
}  
 801ae10:	e037883a 	mov	sp,fp
 801ae14:	dfc00117 	ldw	ra,4(sp)
 801ae18:	df000017 	ldw	fp,0(sp)
 801ae1c:	dec00204 	addi	sp,sp,8
 801ae20:	f800283a 	ret

0801ae24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801ae24:	defff904 	addi	sp,sp,-28
 801ae28:	df000615 	stw	fp,24(sp)
 801ae2c:	df000604 	addi	fp,sp,24
 801ae30:	e13ffe15 	stw	r4,-8(fp)
 801ae34:	e17fff15 	stw	r5,-4(fp)
 801ae38:	e0bfff17 	ldw	r2,-4(fp)
 801ae3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801ae40:	0005303a 	rdctl	r2,status
 801ae44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801ae48:	e0fffb17 	ldw	r3,-20(fp)
 801ae4c:	00bfff84 	movi	r2,-2
 801ae50:	1884703a 	and	r2,r3,r2
 801ae54:	1001703a 	wrctl	status,r2
  
  return context;
 801ae58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801ae5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801ae60:	e0bffa17 	ldw	r2,-24(fp)
 801ae64:	00c00044 	movi	r3,1
 801ae68:	1884983a 	sll	r2,r3,r2
 801ae6c:	1007883a 	mov	r3,r2
 801ae70:	008200b4 	movhi	r2,2050
 801ae74:	10bad504 	addi	r2,r2,-5292
 801ae78:	10800017 	ldw	r2,0(r2)
 801ae7c:	1886b03a 	or	r3,r3,r2
 801ae80:	008200b4 	movhi	r2,2050
 801ae84:	10bad504 	addi	r2,r2,-5292
 801ae88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801ae8c:	008200b4 	movhi	r2,2050
 801ae90:	10bad504 	addi	r2,r2,-5292
 801ae94:	10800017 	ldw	r2,0(r2)
 801ae98:	100170fa 	wrctl	ienable,r2
 801ae9c:	e0bffc17 	ldw	r2,-16(fp)
 801aea0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801aea4:	e0bffd17 	ldw	r2,-12(fp)
 801aea8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801aeac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801aeb0:	0001883a 	nop
}
 801aeb4:	e037883a 	mov	sp,fp
 801aeb8:	df000017 	ldw	fp,0(sp)
 801aebc:	dec00104 	addi	sp,sp,4
 801aec0:	f800283a 	ret

0801aec4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801aec4:	defff904 	addi	sp,sp,-28
 801aec8:	df000615 	stw	fp,24(sp)
 801aecc:	df000604 	addi	fp,sp,24
 801aed0:	e13ffe15 	stw	r4,-8(fp)
 801aed4:	e17fff15 	stw	r5,-4(fp)
 801aed8:	e0bfff17 	ldw	r2,-4(fp)
 801aedc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801aee0:	0005303a 	rdctl	r2,status
 801aee4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801aee8:	e0fffb17 	ldw	r3,-20(fp)
 801aeec:	00bfff84 	movi	r2,-2
 801aef0:	1884703a 	and	r2,r3,r2
 801aef4:	1001703a 	wrctl	status,r2
  
  return context;
 801aef8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801aefc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801af00:	e0bffa17 	ldw	r2,-24(fp)
 801af04:	00c00044 	movi	r3,1
 801af08:	1884983a 	sll	r2,r3,r2
 801af0c:	0084303a 	nor	r2,zero,r2
 801af10:	1007883a 	mov	r3,r2
 801af14:	008200b4 	movhi	r2,2050
 801af18:	10bad504 	addi	r2,r2,-5292
 801af1c:	10800017 	ldw	r2,0(r2)
 801af20:	1886703a 	and	r3,r3,r2
 801af24:	008200b4 	movhi	r2,2050
 801af28:	10bad504 	addi	r2,r2,-5292
 801af2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801af30:	008200b4 	movhi	r2,2050
 801af34:	10bad504 	addi	r2,r2,-5292
 801af38:	10800017 	ldw	r2,0(r2)
 801af3c:	100170fa 	wrctl	ienable,r2
 801af40:	e0bffc17 	ldw	r2,-16(fp)
 801af44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801af48:	e0bffd17 	ldw	r2,-12(fp)
 801af4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801af50:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801af54:	0001883a 	nop
}
 801af58:	e037883a 	mov	sp,fp
 801af5c:	df000017 	ldw	fp,0(sp)
 801af60:	dec00104 	addi	sp,sp,4
 801af64:	f800283a 	ret

0801af68 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801af68:	defffc04 	addi	sp,sp,-16
 801af6c:	df000315 	stw	fp,12(sp)
 801af70:	df000304 	addi	fp,sp,12
 801af74:	e13ffe15 	stw	r4,-8(fp)
 801af78:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801af7c:	000530fa 	rdctl	r2,ienable
 801af80:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801af84:	e0bfff17 	ldw	r2,-4(fp)
 801af88:	00c00044 	movi	r3,1
 801af8c:	1884983a 	sll	r2,r3,r2
 801af90:	1007883a 	mov	r3,r2
 801af94:	e0bffd17 	ldw	r2,-12(fp)
 801af98:	1884703a 	and	r2,r3,r2
 801af9c:	1004c03a 	cmpne	r2,r2,zero
 801afa0:	10803fcc 	andi	r2,r2,255
}
 801afa4:	e037883a 	mov	sp,fp
 801afa8:	df000017 	ldw	fp,0(sp)
 801afac:	dec00104 	addi	sp,sp,4
 801afb0:	f800283a 	ret

0801afb4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801afb4:	defff504 	addi	sp,sp,-44
 801afb8:	dfc00a15 	stw	ra,40(sp)
 801afbc:	df000915 	stw	fp,36(sp)
 801afc0:	df000904 	addi	fp,sp,36
 801afc4:	e13ffc15 	stw	r4,-16(fp)
 801afc8:	e17ffd15 	stw	r5,-12(fp)
 801afcc:	e1bffe15 	stw	r6,-8(fp)
 801afd0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801afd4:	00bffa84 	movi	r2,-22
 801afd8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801afdc:	e0bffd17 	ldw	r2,-12(fp)
 801afe0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801afe4:	e0bff817 	ldw	r2,-32(fp)
 801afe8:	10800808 	cmpgei	r2,r2,32
 801afec:	1000271e 	bne	r2,zero,801b08c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801aff0:	0005303a 	rdctl	r2,status
 801aff4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801aff8:	e0fffa17 	ldw	r3,-24(fp)
 801affc:	00bfff84 	movi	r2,-2
 801b000:	1884703a 	and	r2,r3,r2
 801b004:	1001703a 	wrctl	status,r2
  
  return context;
 801b008:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801b00c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 801b010:	008200b4 	movhi	r2,2050
 801b014:	10bb2304 	addi	r2,r2,-4980
 801b018:	e0fff817 	ldw	r3,-32(fp)
 801b01c:	180690fa 	slli	r3,r3,3
 801b020:	10c5883a 	add	r2,r2,r3
 801b024:	e0fffe17 	ldw	r3,-8(fp)
 801b028:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801b02c:	008200b4 	movhi	r2,2050
 801b030:	10bb2304 	addi	r2,r2,-4980
 801b034:	e0fff817 	ldw	r3,-32(fp)
 801b038:	180690fa 	slli	r3,r3,3
 801b03c:	10c5883a 	add	r2,r2,r3
 801b040:	10800104 	addi	r2,r2,4
 801b044:	e0ffff17 	ldw	r3,-4(fp)
 801b048:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801b04c:	e0bffe17 	ldw	r2,-8(fp)
 801b050:	10000526 	beq	r2,zero,801b068 <alt_iic_isr_register+0xb4>
 801b054:	e0bff817 	ldw	r2,-32(fp)
 801b058:	e13ffc17 	ldw	r4,-16(fp)
 801b05c:	100b883a 	mov	r5,r2
 801b060:	801ae240 	call	801ae24 <alt_ic_irq_enable>
 801b064:	00000406 	br	801b078 <alt_iic_isr_register+0xc4>
 801b068:	e0bff817 	ldw	r2,-32(fp)
 801b06c:	e13ffc17 	ldw	r4,-16(fp)
 801b070:	100b883a 	mov	r5,r2
 801b074:	801aec40 	call	801aec4 <alt_ic_irq_disable>
 801b078:	e0bff715 	stw	r2,-36(fp)
 801b07c:	e0bff917 	ldw	r2,-28(fp)
 801b080:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801b084:	e0bffb17 	ldw	r2,-20(fp)
 801b088:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801b08c:	e0bff717 	ldw	r2,-36(fp)
}
 801b090:	e037883a 	mov	sp,fp
 801b094:	dfc00117 	ldw	ra,4(sp)
 801b098:	df000017 	ldw	fp,0(sp)
 801b09c:	dec00204 	addi	sp,sp,8
 801b0a0:	f800283a 	ret

0801b0a4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801b0a4:	defff904 	addi	sp,sp,-28
 801b0a8:	dfc00615 	stw	ra,24(sp)
 801b0ac:	df000515 	stw	fp,20(sp)
 801b0b0:	df000504 	addi	fp,sp,20
 801b0b4:	e13ffc15 	stw	r4,-16(fp)
 801b0b8:	e17ffd15 	stw	r5,-12(fp)
 801b0bc:	e1bffe15 	stw	r6,-8(fp)
 801b0c0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 801b0c4:	e13ffd17 	ldw	r4,-12(fp)
 801b0c8:	e17ffe17 	ldw	r5,-8(fp)
 801b0cc:	e1bfff17 	ldw	r6,-4(fp)
 801b0d0:	801b2f80 	call	801b2f8 <open>
 801b0d4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 801b0d8:	e0bffb17 	ldw	r2,-20(fp)
 801b0dc:	10001c16 	blt	r2,zero,801b150 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 801b0e0:	008200b4 	movhi	r2,2050
 801b0e4:	10b5ff04 	addi	r2,r2,-10244
 801b0e8:	e0fffb17 	ldw	r3,-20(fp)
 801b0ec:	18c00324 	muli	r3,r3,12
 801b0f0:	10c5883a 	add	r2,r2,r3
 801b0f4:	10c00017 	ldw	r3,0(r2)
 801b0f8:	e0bffc17 	ldw	r2,-16(fp)
 801b0fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801b100:	008200b4 	movhi	r2,2050
 801b104:	10b5ff04 	addi	r2,r2,-10244
 801b108:	e0fffb17 	ldw	r3,-20(fp)
 801b10c:	18c00324 	muli	r3,r3,12
 801b110:	10c5883a 	add	r2,r2,r3
 801b114:	10800104 	addi	r2,r2,4
 801b118:	10c00017 	ldw	r3,0(r2)
 801b11c:	e0bffc17 	ldw	r2,-16(fp)
 801b120:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801b124:	008200b4 	movhi	r2,2050
 801b128:	10b5ff04 	addi	r2,r2,-10244
 801b12c:	e0fffb17 	ldw	r3,-20(fp)
 801b130:	18c00324 	muli	r3,r3,12
 801b134:	10c5883a 	add	r2,r2,r3
 801b138:	10800204 	addi	r2,r2,8
 801b13c:	10c00017 	ldw	r3,0(r2)
 801b140:	e0bffc17 	ldw	r2,-16(fp)
 801b144:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801b148:	e13ffb17 	ldw	r4,-20(fp)
 801b14c:	8018ab00 	call	8018ab0 <alt_release_fd>
  }
} 
 801b150:	e037883a 	mov	sp,fp
 801b154:	dfc00117 	ldw	ra,4(sp)
 801b158:	df000017 	ldw	fp,0(sp)
 801b15c:	dec00204 	addi	sp,sp,8
 801b160:	f800283a 	ret

0801b164 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801b164:	defffb04 	addi	sp,sp,-20
 801b168:	dfc00415 	stw	ra,16(sp)
 801b16c:	df000315 	stw	fp,12(sp)
 801b170:	df000304 	addi	fp,sp,12
 801b174:	e13ffd15 	stw	r4,-12(fp)
 801b178:	e17ffe15 	stw	r5,-8(fp)
 801b17c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801b180:	010200b4 	movhi	r4,2050
 801b184:	21360204 	addi	r4,r4,-10232
 801b188:	e17ffd17 	ldw	r5,-12(fp)
 801b18c:	01800044 	movi	r6,1
 801b190:	01c07fc4 	movi	r7,511
 801b194:	801b0a40 	call	801b0a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801b198:	010200b4 	movhi	r4,2050
 801b19c:	2135ff04 	addi	r4,r4,-10244
 801b1a0:	e17ffe17 	ldw	r5,-8(fp)
 801b1a4:	000d883a 	mov	r6,zero
 801b1a8:	01c07fc4 	movi	r7,511
 801b1ac:	801b0a40 	call	801b0a4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801b1b0:	010200b4 	movhi	r4,2050
 801b1b4:	21360504 	addi	r4,r4,-10220
 801b1b8:	e17fff17 	ldw	r5,-4(fp)
 801b1bc:	01800044 	movi	r6,1
 801b1c0:	01c07fc4 	movi	r7,511
 801b1c4:	801b0a40 	call	801b0a4 <alt_open_fd>
}  
 801b1c8:	e037883a 	mov	sp,fp
 801b1cc:	dfc00117 	ldw	ra,4(sp)
 801b1d0:	df000017 	ldw	fp,0(sp)
 801b1d4:	dec00204 	addi	sp,sp,8
 801b1d8:	f800283a 	ret

0801b1dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801b1dc:	defffe04 	addi	sp,sp,-8
 801b1e0:	dfc00115 	stw	ra,4(sp)
 801b1e4:	df000015 	stw	fp,0(sp)
 801b1e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801b1ec:	008200b4 	movhi	r2,2050
 801b1f0:	10bac204 	addi	r2,r2,-5368
 801b1f4:	10800017 	ldw	r2,0(r2)
 801b1f8:	10000526 	beq	r2,zero,801b210 <alt_get_errno+0x34>
 801b1fc:	008200b4 	movhi	r2,2050
 801b200:	10bac204 	addi	r2,r2,-5368
 801b204:	10800017 	ldw	r2,0(r2)
 801b208:	103ee83a 	callr	r2
 801b20c:	00000206 	br	801b218 <alt_get_errno+0x3c>
 801b210:	008200b4 	movhi	r2,2050
 801b214:	10bace04 	addi	r2,r2,-5320
}
 801b218:	e037883a 	mov	sp,fp
 801b21c:	dfc00117 	ldw	ra,4(sp)
 801b220:	df000017 	ldw	fp,0(sp)
 801b224:	dec00204 	addi	sp,sp,8
 801b228:	f800283a 	ret

0801b22c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801b22c:	defffd04 	addi	sp,sp,-12
 801b230:	df000215 	stw	fp,8(sp)
 801b234:	df000204 	addi	fp,sp,8
 801b238:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801b23c:	e0bfff17 	ldw	r2,-4(fp)
 801b240:	10800217 	ldw	r2,8(r2)
 801b244:	10d00034 	orhi	r3,r2,16384
 801b248:	e0bfff17 	ldw	r2,-4(fp)
 801b24c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801b250:	e03ffe15 	stw	zero,-8(fp)
 801b254:	00001d06 	br	801b2cc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801b258:	008200b4 	movhi	r2,2050
 801b25c:	10b5ff04 	addi	r2,r2,-10244
 801b260:	e0fffe17 	ldw	r3,-8(fp)
 801b264:	18c00324 	muli	r3,r3,12
 801b268:	10c5883a 	add	r2,r2,r3
 801b26c:	10c00017 	ldw	r3,0(r2)
 801b270:	e0bfff17 	ldw	r2,-4(fp)
 801b274:	10800017 	ldw	r2,0(r2)
 801b278:	1880111e 	bne	r3,r2,801b2c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801b27c:	008200b4 	movhi	r2,2050
 801b280:	10b5ff04 	addi	r2,r2,-10244
 801b284:	e0fffe17 	ldw	r3,-8(fp)
 801b288:	18c00324 	muli	r3,r3,12
 801b28c:	10c5883a 	add	r2,r2,r3
 801b290:	10800204 	addi	r2,r2,8
 801b294:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801b298:	1000090e 	bge	r2,zero,801b2c0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801b29c:	e0bffe17 	ldw	r2,-8(fp)
 801b2a0:	10c00324 	muli	r3,r2,12
 801b2a4:	008200b4 	movhi	r2,2050
 801b2a8:	10b5ff04 	addi	r2,r2,-10244
 801b2ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801b2b0:	e0bfff17 	ldw	r2,-4(fp)
 801b2b4:	18800226 	beq	r3,r2,801b2c0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801b2b8:	00bffcc4 	movi	r2,-13
 801b2bc:	00000a06 	br	801b2e8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801b2c0:	e0bffe17 	ldw	r2,-8(fp)
 801b2c4:	10800044 	addi	r2,r2,1
 801b2c8:	e0bffe15 	stw	r2,-8(fp)
 801b2cc:	008200b4 	movhi	r2,2050
 801b2d0:	10bac104 	addi	r2,r2,-5372
 801b2d4:	10800017 	ldw	r2,0(r2)
 801b2d8:	1007883a 	mov	r3,r2
 801b2dc:	e0bffe17 	ldw	r2,-8(fp)
 801b2e0:	18bfdd2e 	bgeu	r3,r2,801b258 <__alt_data_end+0xf801b258>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801b2e4:	0005883a 	mov	r2,zero
}
 801b2e8:	e037883a 	mov	sp,fp
 801b2ec:	df000017 	ldw	fp,0(sp)
 801b2f0:	dec00104 	addi	sp,sp,4
 801b2f4:	f800283a 	ret

0801b2f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801b2f8:	defff604 	addi	sp,sp,-40
 801b2fc:	dfc00915 	stw	ra,36(sp)
 801b300:	df000815 	stw	fp,32(sp)
 801b304:	df000804 	addi	fp,sp,32
 801b308:	e13ffd15 	stw	r4,-12(fp)
 801b30c:	e17ffe15 	stw	r5,-8(fp)
 801b310:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801b314:	00bfffc4 	movi	r2,-1
 801b318:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 801b31c:	00bffb44 	movi	r2,-19
 801b320:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801b324:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801b328:	e13ffd17 	ldw	r4,-12(fp)
 801b32c:	014200b4 	movhi	r5,2050
 801b330:	297abf04 	addi	r5,r5,-5380
 801b334:	801ad440 	call	801ad44 <alt_find_dev>
 801b338:	e0bff815 	stw	r2,-32(fp)
 801b33c:	e0bff817 	ldw	r2,-32(fp)
 801b340:	1000051e 	bne	r2,zero,801b358 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801b344:	e13ffd17 	ldw	r4,-12(fp)
 801b348:	801b8100 	call	801b810 <alt_find_file>
 801b34c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 801b350:	00800044 	movi	r2,1
 801b354:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801b358:	e0bff817 	ldw	r2,-32(fp)
 801b35c:	10002926 	beq	r2,zero,801b404 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 801b360:	e13ff817 	ldw	r4,-32(fp)
 801b364:	801b9240 	call	801b924 <alt_get_fd>
 801b368:	e0bff915 	stw	r2,-28(fp)
 801b36c:	e0bff917 	ldw	r2,-28(fp)
 801b370:	1000030e 	bge	r2,zero,801b380 <open+0x88>
    {
      status = index;
 801b374:	e0bff917 	ldw	r2,-28(fp)
 801b378:	e0bffa15 	stw	r2,-24(fp)
 801b37c:	00002306 	br	801b40c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 801b380:	e0bff917 	ldw	r2,-28(fp)
 801b384:	10c00324 	muli	r3,r2,12
 801b388:	008200b4 	movhi	r2,2050
 801b38c:	10b5ff04 	addi	r2,r2,-10244
 801b390:	1885883a 	add	r2,r3,r2
 801b394:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801b398:	e0fffe17 	ldw	r3,-8(fp)
 801b39c:	00900034 	movhi	r2,16384
 801b3a0:	10bfffc4 	addi	r2,r2,-1
 801b3a4:	1886703a 	and	r3,r3,r2
 801b3a8:	e0bffc17 	ldw	r2,-16(fp)
 801b3ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801b3b0:	e0bffb17 	ldw	r2,-20(fp)
 801b3b4:	1000051e 	bne	r2,zero,801b3cc <open+0xd4>
 801b3b8:	e13ffc17 	ldw	r4,-16(fp)
 801b3bc:	801b22c0 	call	801b22c <alt_file_locked>
 801b3c0:	e0bffa15 	stw	r2,-24(fp)
 801b3c4:	e0bffa17 	ldw	r2,-24(fp)
 801b3c8:	10001016 	blt	r2,zero,801b40c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 801b3cc:	e0bff817 	ldw	r2,-32(fp)
 801b3d0:	10800317 	ldw	r2,12(r2)
 801b3d4:	10000826 	beq	r2,zero,801b3f8 <open+0x100>
 801b3d8:	e0bff817 	ldw	r2,-32(fp)
 801b3dc:	10800317 	ldw	r2,12(r2)
 801b3e0:	e13ffc17 	ldw	r4,-16(fp)
 801b3e4:	e17ffd17 	ldw	r5,-12(fp)
 801b3e8:	e1bffe17 	ldw	r6,-8(fp)
 801b3ec:	e1ffff17 	ldw	r7,-4(fp)
 801b3f0:	103ee83a 	callr	r2
 801b3f4:	00000106 	br	801b3fc <open+0x104>
 801b3f8:	0005883a 	mov	r2,zero
 801b3fc:	e0bffa15 	stw	r2,-24(fp)
 801b400:	00000206 	br	801b40c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801b404:	00bffb44 	movi	r2,-19
 801b408:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801b40c:	e0bffa17 	ldw	r2,-24(fp)
 801b410:	1000090e 	bge	r2,zero,801b438 <open+0x140>
  {
    alt_release_fd (index);  
 801b414:	e13ff917 	ldw	r4,-28(fp)
 801b418:	8018ab00 	call	8018ab0 <alt_release_fd>
    ALT_ERRNO = -status;
 801b41c:	801b1dc0 	call	801b1dc <alt_get_errno>
 801b420:	1007883a 	mov	r3,r2
 801b424:	e0bffa17 	ldw	r2,-24(fp)
 801b428:	0085c83a 	sub	r2,zero,r2
 801b42c:	18800015 	stw	r2,0(r3)
    return -1;
 801b430:	00bfffc4 	movi	r2,-1
 801b434:	00000106 	br	801b43c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 801b438:	e0bff917 	ldw	r2,-28(fp)
}
 801b43c:	e037883a 	mov	sp,fp
 801b440:	dfc00117 	ldw	ra,4(sp)
 801b444:	df000017 	ldw	fp,0(sp)
 801b448:	dec00204 	addi	sp,sp,8
 801b44c:	f800283a 	ret

0801b450 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801b450:	defffa04 	addi	sp,sp,-24
 801b454:	df000515 	stw	fp,20(sp)
 801b458:	df000504 	addi	fp,sp,20
 801b45c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801b460:	0005303a 	rdctl	r2,status
 801b464:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801b468:	e0fffc17 	ldw	r3,-16(fp)
 801b46c:	00bfff84 	movi	r2,-2
 801b470:	1884703a 	and	r2,r3,r2
 801b474:	1001703a 	wrctl	status,r2
  
  return context;
 801b478:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 801b47c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801b480:	e0bfff17 	ldw	r2,-4(fp)
 801b484:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801b488:	e0bffd17 	ldw	r2,-12(fp)
 801b48c:	10800017 	ldw	r2,0(r2)
 801b490:	e0fffd17 	ldw	r3,-12(fp)
 801b494:	18c00117 	ldw	r3,4(r3)
 801b498:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 801b49c:	e0bffd17 	ldw	r2,-12(fp)
 801b4a0:	10800117 	ldw	r2,4(r2)
 801b4a4:	e0fffd17 	ldw	r3,-12(fp)
 801b4a8:	18c00017 	ldw	r3,0(r3)
 801b4ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801b4b0:	e0bffd17 	ldw	r2,-12(fp)
 801b4b4:	e0fffd17 	ldw	r3,-12(fp)
 801b4b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 801b4bc:	e0bffd17 	ldw	r2,-12(fp)
 801b4c0:	e0fffd17 	ldw	r3,-12(fp)
 801b4c4:	10c00015 	stw	r3,0(r2)
 801b4c8:	e0bffb17 	ldw	r2,-20(fp)
 801b4cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801b4d0:	e0bffe17 	ldw	r2,-8(fp)
 801b4d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801b4d8:	e037883a 	mov	sp,fp
 801b4dc:	df000017 	ldw	fp,0(sp)
 801b4e0:	dec00104 	addi	sp,sp,4
 801b4e4:	f800283a 	ret

0801b4e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801b4e8:	defffb04 	addi	sp,sp,-20
 801b4ec:	dfc00415 	stw	ra,16(sp)
 801b4f0:	df000315 	stw	fp,12(sp)
 801b4f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801b4f8:	d0a01217 	ldw	r2,-32696(gp)
 801b4fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 801b500:	d0a02217 	ldw	r2,-32632(gp)
 801b504:	10800044 	addi	r2,r2,1
 801b508:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801b50c:	00002e06 	br	801b5c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 801b510:	e0bffd17 	ldw	r2,-12(fp)
 801b514:	10800017 	ldw	r2,0(r2)
 801b518:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801b51c:	e0bffd17 	ldw	r2,-12(fp)
 801b520:	10800403 	ldbu	r2,16(r2)
 801b524:	10803fcc 	andi	r2,r2,255
 801b528:	10000426 	beq	r2,zero,801b53c <alt_tick+0x54>
 801b52c:	d0a02217 	ldw	r2,-32632(gp)
 801b530:	1000021e 	bne	r2,zero,801b53c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801b534:	e0bffd17 	ldw	r2,-12(fp)
 801b538:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801b53c:	e0bffd17 	ldw	r2,-12(fp)
 801b540:	10800217 	ldw	r2,8(r2)
 801b544:	d0e02217 	ldw	r3,-32632(gp)
 801b548:	18801d36 	bltu	r3,r2,801b5c0 <alt_tick+0xd8>
 801b54c:	e0bffd17 	ldw	r2,-12(fp)
 801b550:	10800403 	ldbu	r2,16(r2)
 801b554:	10803fcc 	andi	r2,r2,255
 801b558:	1000191e 	bne	r2,zero,801b5c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801b55c:	e0bffd17 	ldw	r2,-12(fp)
 801b560:	10800317 	ldw	r2,12(r2)
 801b564:	e0fffd17 	ldw	r3,-12(fp)
 801b568:	18c00517 	ldw	r3,20(r3)
 801b56c:	1809883a 	mov	r4,r3
 801b570:	103ee83a 	callr	r2
 801b574:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 801b578:	e0bfff17 	ldw	r2,-4(fp)
 801b57c:	1000031e 	bne	r2,zero,801b58c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 801b580:	e13ffd17 	ldw	r4,-12(fp)
 801b584:	801b4500 	call	801b450 <alt_alarm_stop>
 801b588:	00000d06 	br	801b5c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801b58c:	e0bffd17 	ldw	r2,-12(fp)
 801b590:	10c00217 	ldw	r3,8(r2)
 801b594:	e0bfff17 	ldw	r2,-4(fp)
 801b598:	1887883a 	add	r3,r3,r2
 801b59c:	e0bffd17 	ldw	r2,-12(fp)
 801b5a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801b5a4:	e0bffd17 	ldw	r2,-12(fp)
 801b5a8:	10c00217 	ldw	r3,8(r2)
 801b5ac:	d0a02217 	ldw	r2,-32632(gp)
 801b5b0:	1880032e 	bgeu	r3,r2,801b5c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801b5b4:	e0bffd17 	ldw	r2,-12(fp)
 801b5b8:	00c00044 	movi	r3,1
 801b5bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 801b5c0:	e0bffe17 	ldw	r2,-8(fp)
 801b5c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801b5c8:	e0fffd17 	ldw	r3,-12(fp)
 801b5cc:	d0a01204 	addi	r2,gp,-32696
 801b5d0:	18bfcf1e 	bne	r3,r2,801b510 <__alt_data_end+0xf801b510>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801b5d4:	0001883a 	nop
}
 801b5d8:	e037883a 	mov	sp,fp
 801b5dc:	dfc00117 	ldw	ra,4(sp)
 801b5e0:	df000017 	ldw	fp,0(sp)
 801b5e4:	dec00204 	addi	sp,sp,8
 801b5e8:	f800283a 	ret

0801b5ec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 801b5ec:	deffff04 	addi	sp,sp,-4
 801b5f0:	df000015 	stw	fp,0(sp)
 801b5f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801b5f8:	000170fa 	wrctl	ienable,zero
}
 801b5fc:	e037883a 	mov	sp,fp
 801b600:	df000017 	ldw	fp,0(sp)
 801b604:	dec00104 	addi	sp,sp,4
 801b608:	f800283a 	ret

0801b60c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 801b60c:	defff404 	addi	sp,sp,-48
 801b610:	df000b15 	stw	fp,44(sp)
 801b614:	df000b04 	addi	fp,sp,44
 801b618:	e13ffc15 	stw	r4,-16(fp)
 801b61c:	e17ffd15 	stw	r5,-12(fp)
 801b620:	e1bffe15 	stw	r6,-8(fp)
 801b624:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 801b628:	e0ffff17 	ldw	r3,-4(fp)
 801b62c:	e0bffe17 	ldw	r2,-8(fp)
 801b630:	1885883a 	add	r2,r3,r2
 801b634:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 801b638:	e0c00217 	ldw	r3,8(fp)
 801b63c:	e0800117 	ldw	r2,4(fp)
 801b640:	1885883a 	add	r2,r3,r2
 801b644:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 801b648:	e0800117 	ldw	r2,4(fp)
 801b64c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 801b650:	e0bffe17 	ldw	r2,-8(fp)
 801b654:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 801b658:	00800044 	movi	r2,1
 801b65c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 801b660:	e0bffc17 	ldw	r2,-16(fp)
 801b664:	10800504 	addi	r2,r2,20
 801b668:	1009883a 	mov	r4,r2
 801b66c:	e0bffd17 	ldw	r2,-12(fp)
 801b670:	00c00044 	movi	r3,1
 801b674:	1884983a 	sll	r2,r3,r2
 801b678:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 801b67c:	e0800317 	ldw	r2,12(fp)
 801b680:	1080008c 	andi	r2,r2,2
 801b684:	1000051e 	bne	r2,zero,801b69c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 801b688:	e0bffc17 	ldw	r2,-16(fp)
 801b68c:	10800304 	addi	r2,r2,12
 801b690:	1007883a 	mov	r3,r2
 801b694:	00810004 	movi	r2,1024
 801b698:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 801b69c:	e0bffc17 	ldw	r2,-16(fp)
 801b6a0:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 801b6a4:	e0bffc17 	ldw	r2,-16(fp)
 801b6a8:	10800204 	addi	r2,r2,8
 801b6ac:	10800037 	ldwio	r2,0(r2)
 801b6b0:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 801b6b4:	e0bffa17 	ldw	r2,-24(fp)
 801b6b8:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 801b6bc:	10000226 	beq	r2,zero,801b6c8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 801b6c0:	e0bff717 	ldw	r2,-36(fp)
 801b6c4:	1000031e 	bne	r2,zero,801b6d4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 801b6c8:	e0bffa17 	ldw	r2,-24(fp)
 801b6cc:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 801b6d0:	103ff426 	beq	r2,zero,801b6a4 <__alt_data_end+0xf801b6a4>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 801b6d4:	e0bffa17 	ldw	r2,-24(fp)
 801b6d8:	1080100c 	andi	r2,r2,64
 801b6dc:	10001e26 	beq	r2,zero,801b758 <alt_avalon_spi_command+0x14c>
 801b6e0:	e0bff717 	ldw	r2,-36(fp)
 801b6e4:	00801c0e 	bge	zero,r2,801b758 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 801b6e8:	e0bff717 	ldw	r2,-36(fp)
 801b6ec:	10bfffc4 	addi	r2,r2,-1
 801b6f0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 801b6f4:	e0ffff17 	ldw	r3,-4(fp)
 801b6f8:	e0bff817 	ldw	r2,-32(fp)
 801b6fc:	18800a2e 	bgeu	r3,r2,801b728 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 801b700:	e0bffc17 	ldw	r2,-16(fp)
 801b704:	10800104 	addi	r2,r2,4
 801b708:	1009883a 	mov	r4,r2
 801b70c:	e0bfff17 	ldw	r2,-4(fp)
 801b710:	10c00044 	addi	r3,r2,1
 801b714:	e0ffff15 	stw	r3,-4(fp)
 801b718:	10800003 	ldbu	r2,0(r2)
 801b71c:	10803fcc 	andi	r2,r2,255
 801b720:	20800035 	stwio	r2,0(r4)
 801b724:	00000c06 	br	801b758 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 801b728:	e0bff517 	ldw	r2,-44(fp)
 801b72c:	10000826 	beq	r2,zero,801b750 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 801b730:	e0bff517 	ldw	r2,-44(fp)
 801b734:	10bfffc4 	addi	r2,r2,-1
 801b738:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 801b73c:	e0bffc17 	ldw	r2,-16(fp)
 801b740:	10800104 	addi	r2,r2,4
 801b744:	0007883a 	mov	r3,zero
 801b748:	10c00035 	stwio	r3,0(r2)
 801b74c:	00000206 	br	801b758 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 801b750:	00bf0004 	movi	r2,-1024
 801b754:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 801b758:	e0bffa17 	ldw	r2,-24(fp)
 801b75c:	1080200c 	andi	r2,r2,128
 801b760:	10001726 	beq	r2,zero,801b7c0 <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 801b764:	e0bffc17 	ldw	r2,-16(fp)
 801b768:	10800037 	ldwio	r2,0(r2)
 801b76c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 801b770:	e0bff617 	ldw	r2,-40(fp)
 801b774:	10000426 	beq	r2,zero,801b788 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 801b778:	e0bff617 	ldw	r2,-40(fp)
 801b77c:	10bfffc4 	addi	r2,r2,-1
 801b780:	e0bff615 	stw	r2,-40(fp)
 801b784:	00000506 	br	801b79c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 801b788:	e0800217 	ldw	r2,8(fp)
 801b78c:	10c00044 	addi	r3,r2,1
 801b790:	e0c00215 	stw	r3,8(fp)
 801b794:	e0fffb17 	ldw	r3,-20(fp)
 801b798:	10c00005 	stb	r3,0(r2)
      credits++;
 801b79c:	e0bff717 	ldw	r2,-36(fp)
 801b7a0:	10800044 	addi	r2,r2,1
 801b7a4:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 801b7a8:	e0bff617 	ldw	r2,-40(fp)
 801b7ac:	1000041e 	bne	r2,zero,801b7c0 <alt_avalon_spi_command+0x1b4>
 801b7b0:	e0c00217 	ldw	r3,8(fp)
 801b7b4:	e0bff917 	ldw	r2,-28(fp)
 801b7b8:	1880011e 	bne	r3,r2,801b7c0 <alt_avalon_spi_command+0x1b4>
        break;
 801b7bc:	00000106 	br	801b7c4 <alt_avalon_spi_command+0x1b8>
    }
    
  }
 801b7c0:	003fb806 	br	801b6a4 <__alt_data_end+0xf801b6a4>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 801b7c4:	e0bffc17 	ldw	r2,-16(fp)
 801b7c8:	10800204 	addi	r2,r2,8
 801b7cc:	10800037 	ldwio	r2,0(r2)
 801b7d0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 801b7d4:	e0bffa17 	ldw	r2,-24(fp)
 801b7d8:	1080080c 	andi	r2,r2,32
 801b7dc:	103ff926 	beq	r2,zero,801b7c4 <__alt_data_end+0xf801b7c4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 801b7e0:	e0800317 	ldw	r2,12(fp)
 801b7e4:	1080004c 	andi	r2,r2,1
 801b7e8:	1000041e 	bne	r2,zero,801b7fc <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 801b7ec:	e0bffc17 	ldw	r2,-16(fp)
 801b7f0:	10800304 	addi	r2,r2,12
 801b7f4:	0007883a 	mov	r3,zero
 801b7f8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 801b7fc:	e0800117 	ldw	r2,4(fp)
}
 801b800:	e037883a 	mov	sp,fp
 801b804:	df000017 	ldw	fp,0(sp)
 801b808:	dec00104 	addi	sp,sp,4
 801b80c:	f800283a 	ret

0801b810 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801b810:	defffb04 	addi	sp,sp,-20
 801b814:	dfc00415 	stw	ra,16(sp)
 801b818:	df000315 	stw	fp,12(sp)
 801b81c:	df000304 	addi	fp,sp,12
 801b820:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801b824:	008200b4 	movhi	r2,2050
 801b828:	10babd04 	addi	r2,r2,-5388
 801b82c:	10800017 	ldw	r2,0(r2)
 801b830:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801b834:	00003106 	br	801b8fc <alt_find_file+0xec>
  {
    len = strlen(next->name);
 801b838:	e0bffd17 	ldw	r2,-12(fp)
 801b83c:	10800217 	ldw	r2,8(r2)
 801b840:	1009883a 	mov	r4,r2
 801b844:	800338c0 	call	800338c <strlen>
 801b848:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801b84c:	e0bffd17 	ldw	r2,-12(fp)
 801b850:	10c00217 	ldw	r3,8(r2)
 801b854:	e0bffe17 	ldw	r2,-8(fp)
 801b858:	10bfffc4 	addi	r2,r2,-1
 801b85c:	1885883a 	add	r2,r3,r2
 801b860:	10800003 	ldbu	r2,0(r2)
 801b864:	10803fcc 	andi	r2,r2,255
 801b868:	1080201c 	xori	r2,r2,128
 801b86c:	10bfe004 	addi	r2,r2,-128
 801b870:	10800bd8 	cmpnei	r2,r2,47
 801b874:	1000031e 	bne	r2,zero,801b884 <alt_find_file+0x74>
    {
      len -= 1;
 801b878:	e0bffe17 	ldw	r2,-8(fp)
 801b87c:	10bfffc4 	addi	r2,r2,-1
 801b880:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801b884:	e0bffe17 	ldw	r2,-8(fp)
 801b888:	e0ffff17 	ldw	r3,-4(fp)
 801b88c:	1885883a 	add	r2,r3,r2
 801b890:	10800003 	ldbu	r2,0(r2)
 801b894:	10803fcc 	andi	r2,r2,255
 801b898:	1080201c 	xori	r2,r2,128
 801b89c:	10bfe004 	addi	r2,r2,-128
 801b8a0:	10800be0 	cmpeqi	r2,r2,47
 801b8a4:	1000081e 	bne	r2,zero,801b8c8 <alt_find_file+0xb8>
 801b8a8:	e0bffe17 	ldw	r2,-8(fp)
 801b8ac:	e0ffff17 	ldw	r3,-4(fp)
 801b8b0:	1885883a 	add	r2,r3,r2
 801b8b4:	10800003 	ldbu	r2,0(r2)
 801b8b8:	10803fcc 	andi	r2,r2,255
 801b8bc:	1080201c 	xori	r2,r2,128
 801b8c0:	10bfe004 	addi	r2,r2,-128
 801b8c4:	10000a1e 	bne	r2,zero,801b8f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 801b8c8:	e0bffd17 	ldw	r2,-12(fp)
 801b8cc:	10c00217 	ldw	r3,8(r2)
 801b8d0:	e0bffe17 	ldw	r2,-8(fp)
 801b8d4:	1809883a 	mov	r4,r3
 801b8d8:	e17fff17 	ldw	r5,-4(fp)
 801b8dc:	100d883a 	mov	r6,r2
 801b8e0:	8002d780 	call	8002d78 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801b8e4:	1000021e 	bne	r2,zero,801b8f0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801b8e8:	e0bffd17 	ldw	r2,-12(fp)
 801b8ec:	00000806 	br	801b910 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 801b8f0:	e0bffd17 	ldw	r2,-12(fp)
 801b8f4:	10800017 	ldw	r2,0(r2)
 801b8f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801b8fc:	e0fffd17 	ldw	r3,-12(fp)
 801b900:	008200b4 	movhi	r2,2050
 801b904:	10babd04 	addi	r2,r2,-5388
 801b908:	18bfcb1e 	bne	r3,r2,801b838 <__alt_data_end+0xf801b838>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801b90c:	0005883a 	mov	r2,zero
}
 801b910:	e037883a 	mov	sp,fp
 801b914:	dfc00117 	ldw	ra,4(sp)
 801b918:	df000017 	ldw	fp,0(sp)
 801b91c:	dec00204 	addi	sp,sp,8
 801b920:	f800283a 	ret

0801b924 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801b924:	defffc04 	addi	sp,sp,-16
 801b928:	df000315 	stw	fp,12(sp)
 801b92c:	df000304 	addi	fp,sp,12
 801b930:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 801b934:	00bffa04 	movi	r2,-24
 801b938:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801b93c:	e03ffd15 	stw	zero,-12(fp)
 801b940:	00001d06 	br	801b9b8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 801b944:	008200b4 	movhi	r2,2050
 801b948:	10b5ff04 	addi	r2,r2,-10244
 801b94c:	e0fffd17 	ldw	r3,-12(fp)
 801b950:	18c00324 	muli	r3,r3,12
 801b954:	10c5883a 	add	r2,r2,r3
 801b958:	10800017 	ldw	r2,0(r2)
 801b95c:	1000131e 	bne	r2,zero,801b9ac <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 801b960:	008200b4 	movhi	r2,2050
 801b964:	10b5ff04 	addi	r2,r2,-10244
 801b968:	e0fffd17 	ldw	r3,-12(fp)
 801b96c:	18c00324 	muli	r3,r3,12
 801b970:	10c5883a 	add	r2,r2,r3
 801b974:	e0ffff17 	ldw	r3,-4(fp)
 801b978:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801b97c:	008200b4 	movhi	r2,2050
 801b980:	10bac104 	addi	r2,r2,-5372
 801b984:	10c00017 	ldw	r3,0(r2)
 801b988:	e0bffd17 	ldw	r2,-12(fp)
 801b98c:	1880040e 	bge	r3,r2,801b9a0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 801b990:	008200b4 	movhi	r2,2050
 801b994:	10bac104 	addi	r2,r2,-5372
 801b998:	e0fffd17 	ldw	r3,-12(fp)
 801b99c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 801b9a0:	e0bffd17 	ldw	r2,-12(fp)
 801b9a4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 801b9a8:	00000606 	br	801b9c4 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801b9ac:	e0bffd17 	ldw	r2,-12(fp)
 801b9b0:	10800044 	addi	r2,r2,1
 801b9b4:	e0bffd15 	stw	r2,-12(fp)
 801b9b8:	e0bffd17 	ldw	r2,-12(fp)
 801b9bc:	10800810 	cmplti	r2,r2,32
 801b9c0:	103fe01e 	bne	r2,zero,801b944 <__alt_data_end+0xf801b944>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801b9c4:	e0bffe17 	ldw	r2,-8(fp)
}
 801b9c8:	e037883a 	mov	sp,fp
 801b9cc:	df000017 	ldw	fp,0(sp)
 801b9d0:	dec00104 	addi	sp,sp,4
 801b9d4:	f800283a 	ret

0801b9d8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 801b9d8:	defffe04 	addi	sp,sp,-8
 801b9dc:	df000115 	stw	fp,4(sp)
 801b9e0:	df000104 	addi	fp,sp,4
 801b9e4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 801b9e8:	e0bfff17 	ldw	r2,-4(fp)
 801b9ec:	10bffe84 	addi	r2,r2,-6
 801b9f0:	10c00428 	cmpgeui	r3,r2,16
 801b9f4:	18001a1e 	bne	r3,zero,801ba60 <alt_exception_cause_generated_bad_addr+0x88>
 801b9f8:	100690ba 	slli	r3,r2,2
 801b9fc:	008200b4 	movhi	r2,2050
 801ba00:	10ae8404 	addi	r2,r2,-17904
 801ba04:	1885883a 	add	r2,r3,r2
 801ba08:	10800017 	ldw	r2,0(r2)
 801ba0c:	1000683a 	jmp	r2
 801ba10:	0801ba50 	cmplti	zero,at,1769
 801ba14:	0801ba50 	cmplti	zero,at,1769
 801ba18:	0801ba60 	cmpeqi	zero,at,1769
 801ba1c:	0801ba60 	cmpeqi	zero,at,1769
 801ba20:	0801ba60 	cmpeqi	zero,at,1769
 801ba24:	0801ba50 	cmplti	zero,at,1769
 801ba28:	0801ba58 	cmpnei	zero,at,1769
 801ba2c:	0801ba60 	cmpeqi	zero,at,1769
 801ba30:	0801ba50 	cmplti	zero,at,1769
 801ba34:	0801ba50 	cmplti	zero,at,1769
 801ba38:	0801ba60 	cmpeqi	zero,at,1769
 801ba3c:	0801ba50 	cmplti	zero,at,1769
 801ba40:	0801ba58 	cmpnei	zero,at,1769
 801ba44:	0801ba60 	cmpeqi	zero,at,1769
 801ba48:	0801ba60 	cmpeqi	zero,at,1769
 801ba4c:	0801ba50 	cmplti	zero,at,1769
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 801ba50:	00800044 	movi	r2,1
 801ba54:	00000306 	br	801ba64 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 801ba58:	0005883a 	mov	r2,zero
 801ba5c:	00000106 	br	801ba64 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801ba60:	0005883a 	mov	r2,zero
  }
}
 801ba64:	e037883a 	mov	sp,fp
 801ba68:	df000017 	ldw	fp,0(sp)
 801ba6c:	dec00104 	addi	sp,sp,4
 801ba70:	f800283a 	ret

0801ba74 <atexit>:
 801ba74:	200b883a 	mov	r5,r4
 801ba78:	000d883a 	mov	r6,zero
 801ba7c:	0009883a 	mov	r4,zero
 801ba80:	000f883a 	mov	r7,zero
 801ba84:	801bac01 	jmpi	801bac0 <__register_exitproc>

0801ba88 <exit>:
 801ba88:	defffe04 	addi	sp,sp,-8
 801ba8c:	000b883a 	mov	r5,zero
 801ba90:	dc000015 	stw	r16,0(sp)
 801ba94:	dfc00115 	stw	ra,4(sp)
 801ba98:	2021883a 	mov	r16,r4
 801ba9c:	801bbd40 	call	801bbd4 <__call_exitprocs>
 801baa0:	008200b4 	movhi	r2,2050
 801baa4:	10bab504 	addi	r2,r2,-5420
 801baa8:	11000017 	ldw	r4,0(r2)
 801baac:	20800f17 	ldw	r2,60(r4)
 801bab0:	10000126 	beq	r2,zero,801bab8 <exit+0x30>
 801bab4:	103ee83a 	callr	r2
 801bab8:	8009883a 	mov	r4,r16
 801babc:	801bd680 	call	801bd68 <_exit>

0801bac0 <__register_exitproc>:
 801bac0:	008200b4 	movhi	r2,2050
 801bac4:	defffa04 	addi	sp,sp,-24
 801bac8:	10bab504 	addi	r2,r2,-5420
 801bacc:	dc000315 	stw	r16,12(sp)
 801bad0:	14000017 	ldw	r16,0(r2)
 801bad4:	dc400415 	stw	r17,16(sp)
 801bad8:	dfc00515 	stw	ra,20(sp)
 801badc:	80805217 	ldw	r2,328(r16)
 801bae0:	2023883a 	mov	r17,r4
 801bae4:	10003626 	beq	r2,zero,801bbc0 <__register_exitproc+0x100>
 801bae8:	10c00117 	ldw	r3,4(r2)
 801baec:	010007c4 	movi	r4,31
 801baf0:	20c00e16 	blt	r4,r3,801bb2c <__register_exitproc+0x6c>
 801baf4:	1a400044 	addi	r9,r3,1
 801baf8:	8800211e 	bne	r17,zero,801bb80 <__register_exitproc+0xc0>
 801bafc:	18c00084 	addi	r3,r3,2
 801bb00:	18c7883a 	add	r3,r3,r3
 801bb04:	18c7883a 	add	r3,r3,r3
 801bb08:	12400115 	stw	r9,4(r2)
 801bb0c:	10c7883a 	add	r3,r2,r3
 801bb10:	19400015 	stw	r5,0(r3)
 801bb14:	0005883a 	mov	r2,zero
 801bb18:	dfc00517 	ldw	ra,20(sp)
 801bb1c:	dc400417 	ldw	r17,16(sp)
 801bb20:	dc000317 	ldw	r16,12(sp)
 801bb24:	dec00604 	addi	sp,sp,24
 801bb28:	f800283a 	ret
 801bb2c:	00820034 	movhi	r2,2048
 801bb30:	10896a04 	addi	r2,r2,9640
 801bb34:	10002526 	beq	r2,zero,801bbcc <__register_exitproc+0x10c>
 801bb38:	01006404 	movi	r4,400
 801bb3c:	d9400015 	stw	r5,0(sp)
 801bb40:	d9800115 	stw	r6,4(sp)
 801bb44:	d9c00215 	stw	r7,8(sp)
 801bb48:	80025a80 	call	80025a8 <malloc>
 801bb4c:	d9400017 	ldw	r5,0(sp)
 801bb50:	d9800117 	ldw	r6,4(sp)
 801bb54:	d9c00217 	ldw	r7,8(sp)
 801bb58:	10001c26 	beq	r2,zero,801bbcc <__register_exitproc+0x10c>
 801bb5c:	80c05217 	ldw	r3,328(r16)
 801bb60:	10000115 	stw	zero,4(r2)
 801bb64:	02400044 	movi	r9,1
 801bb68:	10c00015 	stw	r3,0(r2)
 801bb6c:	80805215 	stw	r2,328(r16)
 801bb70:	10006215 	stw	zero,392(r2)
 801bb74:	10006315 	stw	zero,396(r2)
 801bb78:	0007883a 	mov	r3,zero
 801bb7c:	883fdf26 	beq	r17,zero,801bafc <__alt_data_end+0xf801bafc>
 801bb80:	18d1883a 	add	r8,r3,r3
 801bb84:	4211883a 	add	r8,r8,r8
 801bb88:	1211883a 	add	r8,r2,r8
 801bb8c:	41802215 	stw	r6,136(r8)
 801bb90:	01000044 	movi	r4,1
 801bb94:	11806217 	ldw	r6,392(r2)
 801bb98:	20c8983a 	sll	r4,r4,r3
 801bb9c:	310cb03a 	or	r6,r6,r4
 801bba0:	11806215 	stw	r6,392(r2)
 801bba4:	41c04215 	stw	r7,264(r8)
 801bba8:	01800084 	movi	r6,2
 801bbac:	89bfd31e 	bne	r17,r6,801bafc <__alt_data_end+0xf801bafc>
 801bbb0:	11806317 	ldw	r6,396(r2)
 801bbb4:	3108b03a 	or	r4,r6,r4
 801bbb8:	11006315 	stw	r4,396(r2)
 801bbbc:	003fcf06 	br	801bafc <__alt_data_end+0xf801bafc>
 801bbc0:	80805304 	addi	r2,r16,332
 801bbc4:	80805215 	stw	r2,328(r16)
 801bbc8:	003fc706 	br	801bae8 <__alt_data_end+0xf801bae8>
 801bbcc:	00bfffc4 	movi	r2,-1
 801bbd0:	003fd106 	br	801bb18 <__alt_data_end+0xf801bb18>

0801bbd4 <__call_exitprocs>:
 801bbd4:	008200b4 	movhi	r2,2050
 801bbd8:	10bab504 	addi	r2,r2,-5420
 801bbdc:	10800017 	ldw	r2,0(r2)
 801bbe0:	defff404 	addi	sp,sp,-48
 801bbe4:	dd800815 	stw	r22,32(sp)
 801bbe8:	d8800015 	stw	r2,0(sp)
 801bbec:	10805204 	addi	r2,r2,328
 801bbf0:	dd000615 	stw	r20,24(sp)
 801bbf4:	dc800415 	stw	r18,16(sp)
 801bbf8:	dfc00b15 	stw	ra,44(sp)
 801bbfc:	df000a15 	stw	fp,40(sp)
 801bc00:	ddc00915 	stw	r23,36(sp)
 801bc04:	dd400715 	stw	r21,28(sp)
 801bc08:	dcc00515 	stw	r19,20(sp)
 801bc0c:	dc400315 	stw	r17,12(sp)
 801bc10:	dc000215 	stw	r16,8(sp)
 801bc14:	2025883a 	mov	r18,r4
 801bc18:	2829883a 	mov	r20,r5
 801bc1c:	d8800115 	stw	r2,4(sp)
 801bc20:	05bfffc4 	movi	r22,-1
 801bc24:	d8800017 	ldw	r2,0(sp)
 801bc28:	14c05217 	ldw	r19,328(r2)
 801bc2c:	98001d26 	beq	r19,zero,801bca4 <__call_exitprocs+0xd0>
 801bc30:	dd400117 	ldw	r21,4(sp)
 801bc34:	98800117 	ldw	r2,4(r19)
 801bc38:	173fffc4 	addi	fp,r2,-1
 801bc3c:	e0000d16 	blt	fp,zero,801bc74 <__call_exitprocs+0xa0>
 801bc40:	14000044 	addi	r16,r2,1
 801bc44:	8421883a 	add	r16,r16,r16
 801bc48:	8421883a 	add	r16,r16,r16
 801bc4c:	84402004 	addi	r17,r16,128
 801bc50:	9c63883a 	add	r17,r19,r17
 801bc54:	9c21883a 	add	r16,r19,r16
 801bc58:	a0001e26 	beq	r20,zero,801bcd4 <__call_exitprocs+0x100>
 801bc5c:	80804017 	ldw	r2,256(r16)
 801bc60:	15001c26 	beq	r2,r20,801bcd4 <__call_exitprocs+0x100>
 801bc64:	e73fffc4 	addi	fp,fp,-1
 801bc68:	843fff04 	addi	r16,r16,-4
 801bc6c:	8c7fff04 	addi	r17,r17,-4
 801bc70:	e5bff91e 	bne	fp,r22,801bc58 <__alt_data_end+0xf801bc58>
 801bc74:	00820034 	movhi	r2,2048
 801bc78:	10896f04 	addi	r2,r2,9660
 801bc7c:	10000926 	beq	r2,zero,801bca4 <__call_exitprocs+0xd0>
 801bc80:	98800117 	ldw	r2,4(r19)
 801bc84:	1000311e 	bne	r2,zero,801bd4c <__call_exitprocs+0x178>
 801bc88:	98800017 	ldw	r2,0(r19)
 801bc8c:	10003426 	beq	r2,zero,801bd60 <__call_exitprocs+0x18c>
 801bc90:	9809883a 	mov	r4,r19
 801bc94:	a8800015 	stw	r2,0(r21)
 801bc98:	80025bc0 	call	80025bc <free>
 801bc9c:	acc00017 	ldw	r19,0(r21)
 801bca0:	983fe41e 	bne	r19,zero,801bc34 <__alt_data_end+0xf801bc34>
 801bca4:	dfc00b17 	ldw	ra,44(sp)
 801bca8:	df000a17 	ldw	fp,40(sp)
 801bcac:	ddc00917 	ldw	r23,36(sp)
 801bcb0:	dd800817 	ldw	r22,32(sp)
 801bcb4:	dd400717 	ldw	r21,28(sp)
 801bcb8:	dd000617 	ldw	r20,24(sp)
 801bcbc:	dcc00517 	ldw	r19,20(sp)
 801bcc0:	dc800417 	ldw	r18,16(sp)
 801bcc4:	dc400317 	ldw	r17,12(sp)
 801bcc8:	dc000217 	ldw	r16,8(sp)
 801bccc:	dec00c04 	addi	sp,sp,48
 801bcd0:	f800283a 	ret
 801bcd4:	98800117 	ldw	r2,4(r19)
 801bcd8:	80c00017 	ldw	r3,0(r16)
 801bcdc:	10bfffc4 	addi	r2,r2,-1
 801bce0:	17001526 	beq	r2,fp,801bd38 <__call_exitprocs+0x164>
 801bce4:	80000015 	stw	zero,0(r16)
 801bce8:	183fde26 	beq	r3,zero,801bc64 <__alt_data_end+0xf801bc64>
 801bcec:	00800044 	movi	r2,1
 801bcf0:	1708983a 	sll	r4,r2,fp
 801bcf4:	98806217 	ldw	r2,392(r19)
 801bcf8:	9dc00117 	ldw	r23,4(r19)
 801bcfc:	2084703a 	and	r2,r4,r2
 801bd00:	1000061e 	bne	r2,zero,801bd1c <__call_exitprocs+0x148>
 801bd04:	183ee83a 	callr	r3
 801bd08:	98800117 	ldw	r2,4(r19)
 801bd0c:	15ffc51e 	bne	r2,r23,801bc24 <__alt_data_end+0xf801bc24>
 801bd10:	a8800017 	ldw	r2,0(r21)
 801bd14:	14ffd326 	beq	r2,r19,801bc64 <__alt_data_end+0xf801bc64>
 801bd18:	003fc206 	br	801bc24 <__alt_data_end+0xf801bc24>
 801bd1c:	98806317 	ldw	r2,396(r19)
 801bd20:	2084703a 	and	r2,r4,r2
 801bd24:	1000061e 	bne	r2,zero,801bd40 <__call_exitprocs+0x16c>
 801bd28:	89400017 	ldw	r5,0(r17)
 801bd2c:	9009883a 	mov	r4,r18
 801bd30:	183ee83a 	callr	r3
 801bd34:	003ff406 	br	801bd08 <__alt_data_end+0xf801bd08>
 801bd38:	9f000115 	stw	fp,4(r19)
 801bd3c:	003fea06 	br	801bce8 <__alt_data_end+0xf801bce8>
 801bd40:	89000017 	ldw	r4,0(r17)
 801bd44:	183ee83a 	callr	r3
 801bd48:	003fef06 	br	801bd08 <__alt_data_end+0xf801bd08>
 801bd4c:	98800017 	ldw	r2,0(r19)
 801bd50:	982b883a 	mov	r21,r19
 801bd54:	1027883a 	mov	r19,r2
 801bd58:	983fb61e 	bne	r19,zero,801bc34 <__alt_data_end+0xf801bc34>
 801bd5c:	003fd106 	br	801bca4 <__alt_data_end+0xf801bca4>
 801bd60:	0005883a 	mov	r2,zero
 801bd64:	003ffa06 	br	801bd50 <__alt_data_end+0xf801bd50>

0801bd68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801bd68:	defffd04 	addi	sp,sp,-12
 801bd6c:	df000215 	stw	fp,8(sp)
 801bd70:	df000204 	addi	fp,sp,8
 801bd74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801bd78:	0001883a 	nop
 801bd7c:	e0bfff17 	ldw	r2,-4(fp)
 801bd80:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801bd84:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801bd88:	10000226 	beq	r2,zero,801bd94 <_exit+0x2c>
    ALT_SIM_FAIL();
 801bd8c:	002af070 	cmpltui	zero,zero,43969
 801bd90:	00000106 	br	801bd98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801bd94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801bd98:	003fff06 	br	801bd98 <__alt_data_end+0xf801bd98>
