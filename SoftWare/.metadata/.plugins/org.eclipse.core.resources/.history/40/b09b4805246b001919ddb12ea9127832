/*
 * screen.c
 *
 *  Created on: 2019年4月26日
 *      Author: 12757
 */

#include "screen_type.h"
#include "screen.h"
#include <string.h>
#include <stdio.h>
#include "font_manage.h"
#include "icon_pic_extern.h"
#include <stdlib.h>
#include "txt_read.h"


//	sprintf(str, "%02d", num);可以将数字变为字符串

//整个屏幕变量
ScreenContainer tftlcdScreenInst;

ColorInfo defaultColorInfo = {  DEFAULT_BORDER_COLOR, DEFAULT_BKG_COLOR, DEFAULT_OBJ_COLOR };

char *str1 = "Happy";

//设置区域范围
bool setAreaRange( AreaRange *areaPtr, short x_min, short x_max, short y_min, short y_max )
{
	areaPtr->x_min = x_min;
	areaPtr->x_max = x_max;
	areaPtr->y_min = y_min;
	areaPtr->y_max = y_max;
	if ( x_min > x_max || y_min > y_max )
	{
		return false;
	}
	return true;
}
//区域范围自动转换
bool setAreaRangeByAreaFmt( AreaRange *areaPtr, AreaFmt *areaFmtPos, short width, short height )
{

	AreaFmtCenter *tempFmtCenterPos;
	AreaFmtMargin *tempFmtMarginPos;

	bool status = true;

	//处理x方向
	switch( areaFmtPos->fmtTypeX )
	{
		case AREA_FMT_CENTER:
			tempFmtCenterPos = &((areaFmtPos->fmtValX).fmtCenterVal);

			areaPtr->x_min = tempFmtCenterPos->center - tempFmtCenterPos->half + 1;
			areaPtr->x_max = tempFmtCenterPos->center + tempFmtCenterPos->half;

			break;

		case AREA_FMT_MARGIN:
			tempFmtMarginPos = &((areaFmtPos->fmtValX).fmtMarginVal);

			areaPtr->x_min = tempFmtMarginPos->margin_LU + 1;
			areaPtr->x_max = width - tempFmtMarginPos->margin_RD;

			break;
		default:
			status = false;
	}
	//处理y方向
	switch( areaFmtPos->fmtTypeY )
	{
		case AREA_FMT_CENTER:
			tempFmtCenterPos = &((areaFmtPos->fmtValY).fmtCenterVal);

			areaPtr->y_min = tempFmtCenterPos->center - tempFmtCenterPos->half + 1;
			areaPtr->y_max = tempFmtCenterPos->center + tempFmtCenterPos->half;

			break;

		case AREA_FMT_MARGIN:
			tempFmtMarginPos = &((areaFmtPos->fmtValY).fmtMarginVal);

			areaPtr->y_min = tempFmtMarginPos->margin_LU + 1;
			areaPtr->y_max = width - tempFmtMarginPos->margin_RD;

			break;
		default:
			status = false;
	}

	if ( areaPtr->x_min > areaPtr->x_max || areaPtr->y_min > areaPtr->y_max )
	{
		return false;
	}
	if ( areaPtr->x_max > width || areaPtr->y_max > height )
	{
		return false;
	}

	return status;

}

//设置区域格式
bool setAreaFmt( AreaFmt *areaFmtPos, enum areaFmtID fmtXID, enum areaFmtID fmtYID, short xC_xML, short xHf_xMR, short yC_yMU, short yHf_yMD )
{
	bool status = true;
	areaFmtPos->fmtTypeX = fmtXID;
	areaFmtPos->fmtTypeY = fmtYID;

	switch( fmtXID )
	{
		case AREA_FMT_CENTER:
			(areaFmtPos->fmtValX).fmtCenterVal.center = xC_xML;
			(areaFmtPos->fmtValX).fmtCenterVal.half = xHf_xMR;
			break;

		case AREA_FMT_MARGIN:
			(areaFmtPos->fmtValX).fmtMarginVal.margin_LU = xC_xML;
			(areaFmtPos->fmtValX).fmtMarginVal.margin_RD = xHf_xMR;
			break;
		default:
			status = false;
	}
	switch( fmtYID )
	{
		case AREA_FMT_CENTER:
			(areaFmtPos->fmtValY).fmtCenterVal.center = yC_yMU;
			(areaFmtPos->fmtValY).fmtCenterVal.half = yHf_yMD;
			break;

		case AREA_FMT_MARGIN:
			(areaFmtPos->fmtValY).fmtMarginVal.margin_LU = yC_yMU;
			(areaFmtPos->fmtValY).fmtMarginVal.margin_RD = yHf_yMD;
			break;
		default:
			status = false;
	}
	return status;
}

//居中设置区域范围(如果不是偶数，就稍微偏左上角)
bool setAreaRangeCentered( AreaRange *areaPtr, short width, short height, short objXSize, short objYSize )
{
	bool status = true;

	if ( width < objXSize || height < objYSize )//obj尺寸超出模块范围，不考虑对象obj的需求尺寸，obj直接使用模块尺寸
	{
		setAreaRange( areaPtr, 1, width, 1, height );
		status = false;//参数设置有误（有模块的对象尺寸超出边界）
		return status;
	}

	//区域范围正常
	short marginXL = ( width - objXSize ) >> 1;//左边距
	short marginXR = ( width - objXSize ) - marginXL;//右边距
	short marginYU = ( height - objYSize )>> 1;//上边距
	short marginYD = ( height - objYSize ) - marginYU;//下边距

	setAreaRange( areaPtr, marginXL+1, width-marginXR, marginYU+1, height-marginYD );

	return status;
}
//设置默认居中标签
bool setDefaultTagBlock( TagBlock *tagPtr, char *text, short width, short height )
{
	tagPtr->borderVisible = true;
	tagPtr->tagColorInfo = defaultColorInfo;
	tagPtr->wordSpacing = DEFAULT_WORD_SPACING;
	tagPtr->letterSpacing = DEFAULT_LETTER_SPACING;
	(tagPtr->tagText).text = text;

	short textLen = strlen(text);
	(tagPtr->tagText).textSize = textLen;

	if ( text == NULL )
	{
		tagPtr->textVisible = false;
	}
	else
	{
		tagPtr->textVisible = true;
	}
	short textWidthSum = getWidthOfText( text, textLen );

	bool status = setAreaRangeCentered( &(tagPtr->textArea ), width, height, textWidthSum, SRC_WORD_SIZE_Y );

	return status;
}
//设置默认居中图标
bool setDefaultIconBlock( IconBlock *iconPtr, const alt_u8 *iconModel, short width, short height, short iconXSize, short iconYSize )
{
	iconPtr->borderVisible = true;
	iconPtr->iconPic = iconModel;
	iconPtr->iconWidth = iconXSize;
	iconPtr->iconXSizeInByte = (iconXSize+7)>>3;//除8，向上取整
	iconPtr->iconYSizeInByte = iconYSize;

	if ( iconModel == (void*)0 )
	{
		iconPtr->picVisible = false;
	}
	else
	{
		iconPtr->picVisible = true;
	}
	iconPtr->iconColorInfo = defaultColorInfo;

	bool status = setAreaRangeCentered( &(iconPtr->picArea ), width, height, iconXSize, iconYSize );

	return status;
}

//设置取色板信息(颜色的位置colorPos表示屏幕中选中的位置，根据该位置，显示器会突出该块颜色的边界)
void setDefaultColorTable( ColorTable *colorPickerInst, color_u8 *colorSel, short width, short height )
{
	colorPickerInst->colorIndex = colorSel;
	colorPickerInst->colorXNum = 16;//颜色有16行
	colorPickerInst->colorYNum = 16;//颜色有16列
	colorPickerInst->colorXSize = width / 16;
	colorPickerInst->colorYSize = height / 16;
	colorPickerInst->colorSpace = color_form;
}

//计算有效文本全部显示时的像素宽度
short getWidthOfText( char *str, short len )
{
	char *strType = (char*)malloc( sizeof( char ) );
	short strTypeVaildNum = 0;

	int i;
	for ( i = 0; i < len; i ++ )
	{
		char curChar = str[i];
		if ( curChar == 0 )//结束标志
		{
			break;
		}
		if ( curChar < 0 )//当前字节为汉字高字节
		{
			strType[strTypeVaildNum] = 'c';//中文CHINESE
			i = i + 1;
			if ( i == len || str[i] == 0 )//低字节不存在，有问题，返回文本长度为0，表示文本*str有误
			{
				free(strType);
				return 0;
			}
		}
		else
		{
			strType[strTypeVaildNum] = 'e';//英文ENGLISH
		}
		strTypeVaildNum += 1;
	}
	short textWidth = ( strType[0] == 'e' ) ? SRC_LETTER_SIZE_X : SRC_WORD_SIZE_X;
	for ( i = 1; i < strTypeVaildNum; i ++ )
	{
		if( strType[i-1] == 'e' && strType[i] == 'e' )
		{
			textWidth = textWidth + DEFAULT_LETTER_SPACING;
		}
		else
		{
			textWidth = textWidth + DEFAULT_WORD_SPACING;
		}
		if ( strType[i] == 'e' )
		{
			textWidth = textWidth + SRC_LETTER_SIZE_X;
		}
		else
		{
			textWidth = textWidth + SRC_WORD_SIZE_X;
		}
	}
	free(strType);
	return textWidth;
}


//设置默认标签组
bool setDefaultTagBlockGroup( TagBlockGroup *tagGroupInst, AreaFmt *tagStaticPos, AreaFmt *tagVarPos, short width, short height,\
			char *tagStaText, char *tagVarText )
{
	bool status = true;

	tagGroupInst->bkgColor = DEFAULT_BKG_COLOR;
	tagGroupInst->borderColor = DEFAULT_BORDER_COLOR;
	tagGroupInst->borderVisible = true;

	//设置静态标签的位置
	AreaRange *tempArea = &(tagGroupInst->staticTagArea);
	status = status && setAreaRangeByAreaFmt( tempArea, tagStaticPos, width, height );
	//设置静态标签内容
	status = status && setDefaultTagBlock( &(tagGroupInst->staticTag), tagStaText, \
			tempArea->x_max - tempArea->x_min + 1, tempArea->y_max - tempArea->y_max + 1);


	//设置动态标签的位置
	tempArea = &(tagGroupInst->varTagArea);
	status = status && setAreaRangeByAreaFmt( tempArea, tagVarPos, width, height );
	//设置动态标签内容
	status = status && setDefaultTagBlock( &(tagGroupInst->varTag), tagVarText, \
			tempArea->x_max - tempArea->x_min + 1, tempArea->y_max - tempArea->y_max + 1);

	return status;
}

//设置默认可编辑数字(动态标签+静态图标)
bool setDefaultNumEditGroup( TagIconGroup *numEditGrpInst, short width, short height, short numMax, short numMin, short num, char *unitName )
{
	bool status = true;

	//设置基本信息
	numEditGrpInst->bkgColor = DEFAULT_BKG_COLOR;
	numEditGrpInst->borderColor=  DEFAULT_BORDER_COLOR;
	numEditGrpInst->borderVisible = true;

	//设置数字变化范围
	numEditGrpInst->value = num;
	numEditGrpInst->valueMax = numMax;
	numEditGrpInst->valueMin = numMin;

	//设置各个块的位置
	/*
	 * ________________________
	 * |                      |
	 * |  plusIcon            |
	 * |                      |
	 * |  numTag    unitTag   |
	 * |                      |
	 * |  minusIcon           |
	 * |______________________|
	 */

	short tagHeight = 30;
	short tagWidth = 30;
	short iconBlockWidth = 30;
	short iconBlockHeight = 20;
	short numTagMarginXL = 10;
	short plusIconMarginYU = 10;
	short minusIconMarginYD = 10;
	short twoTagSpacingX = 20;

	//设置plusIcon
	status = status && setAreaRange( &(numEditGrpInst->plusIconArea), numTagMarginXL+1, numTagMarginXL+iconBlockWidth,\
				plusIconMarginYU + 1, plusIconMarginYU + iconBlockHeight );
	status = status && setDefaultIconBlock( &(numEditGrpInst->plusIcon), icon_plus, \
				iconBlockWidth, iconBlockHeight, ICON_PLUS_X_SIZE, ICON_PLUS_Y_SIZE );

	//设置numberTag
	status = status && setAreaRange( &(numEditGrpInst->valueTagArea), numTagMarginXL+1, numTagMarginXL+tagWidth,\
				(height>>1)-(tagHeight>>1)+1, (height>>1)+(tagHeight>>1) );
	status = status && setDefaultTagBlock( &(numEditGrpInst->valueTag), sprintf( "%02d", num ), tagWidth, tagHeight );


	//设置minusIcon
	status = status && setAreaRange( &(numEditGrpInst->valueTagArea), numTagMarginXL+1, numTagMarginXL+tagWidth,\
				height - minusIconMarginYD - iconBlockHeight, height - minusIconMarginYD );
	status = status && setDefaultIconBlock( &(numEditGrpInst->minusIcon), icon_minus, \
				iconBlockWidth, iconBlockHeight, ICON_MINUS_X_SIZE, ICON_MINUS_Y_SIZE );


	//设置unitTag
	short unitTagMarginXL = numTagMarginXL+tagWidth + twoTagSpacingX;
	status = status && setAreaRange( &(numEditGrpInst->valueTagArea), unitTagMarginXL+1, unitTagMarginXL+tagWidth,\
					(height>>1)-(tagHeight>>1)+1, (height>>1)+(tagHeight>>1) );
	status = status && setDefaultTagBlock( &(numEditGrpInst->valueTag), unitName, tagWidth, tagHeight );


	return status;
}


//初始化
bool screenInit()
{
	//以下子模块宽度都相同 ( 1 ≤ x ≤ SCR_WIDE )


	//初始化屏幕总体尺寸 ( 1 ≤ y ≤ SCR_HEIGHT )
	setAreaRange( &(tftlcdScreenInst.screenArea), 1, SCR_WIDTH, 1, SCR_HEIGHT );

	//1.初始化顶栏 ( 1 ≤ y ≤ headerHeight )
	short headerHeight = SCR_HEADER_HEIGHT;//顶栏高度 (
	setAreaRange( &(tftlcdScreenInst.headerArea), 1, SCR_WIDTH, 1, headerHeight );

	bool status1 = screenHeaderInit( &(tftlcdScreenInst.scrHeader), SCR_WIDTH, headerHeight );

	//2.初始化底栏 ( SCR_HEIGHT - footerHeight + 1 ≤ y ≤ SCR_HEIGHT )
	short footerHeight = SCR_FOTTER_HEIGHT;//底栏高度
	setAreaRange( &(tftlcdScreenInst.headerArea), 1, SCR_WIDTH, SCR_HEIGHT - footerHeight + 1, SCR_HEIGHT );

	bool status2 = screenFooterInit( &(tftlcdScreenInst.scrFooter), SCR_WIDTH, footerHeight );

	//3.初始化主栏  ( headerHeight + 1 ≤ y ≤ SCR_HEIGHT - footerHeight )
	short mainAreaHeight = SCR_HEIGHT - headerHeight - footerHeight;
	setAreaRange( &(tftlcdScreenInst.mainArea), 1, SCR_WIDTH, headerHeight + 1, SCR_HEIGHT - footerHeight );

	bool status3 = screenMainHomeInit( &(tftlcdScreenInst.scrHome), SCR_WIDTH, mainAreaHeight );
	bool status4 = screenMainBookInit( &(tftlcdScreenInst.scrBook), SCR_WIDTH, mainAreaHeight );
	bool status5 = screenMainSettingInit( &(tftlcdScreenInst.scrSetting), SCR_WIDTH, mainAreaHeight );
	bool status6 = screenMainColorPickerInit( &(tftlcdScreenInst.scrColorPicker), SCR_WIDTH, mainAreaHeight );

	//4.初始化主栏页面信息
	screenMainAreaInfo( &(tftlcdScreenInst.mainAreaInfo) );

	return status1 && status2 && status3 && status4 && status5 && status6;
}

bool screenHeaderInit( ScreenHeaderTime *scrHeaderInst, short width, short height )
{

	scrHeaderInst->borderVisible = true;
	scrHeaderInst->bkgColor = DEFAULT_BKG_COLOR;
	scrHeaderInst->borderColor = DEFAULT_BORDER_COLOR;

	short marginX = 100;//横向边距
	short marginY = 5;//纵向边距

	setAreaRange( &(scrHeaderInst->tagTimeArea), marginX+1, width-marginX, marginY+1, height-marginY );

	scrHeaderInst->timeHour = 0;
	scrHeaderInst->timeMinute = 0;
	scrHeaderInst->timeSecond = 0;

	//时间文本为"00:00"(0时0分)
	bool status = setDefaultTagBlock( &(scrHeaderInst->tagTime), "00:00", width - (marginX<<1), height - (marginY<<1) );
//	(scrHeaderInst->tagTime).borderVisible = false;

	return status;
}
bool screenFooterInit( ScreenFooterBtn *scrFooterInst, short width, short height )
{
	scrFooterInst->borderVisible = true;
	scrFooterInst->borderColor = DEFAULT_BORDER_COLOR;
	scrFooterInst->bkgColor = DEFAULT_BKG_COLOR;

	//SETTING键,HOME键,BACK键分别处于下边栏的左、中、右位置
	short marginX = 20;
	short marginY = 10;
	short iconBlockHeight = height - (marginY<<1);
	short iconBlockWidth = width / 5;


	setAreaRange( &(scrFooterInst->iconSettingArea), marginX+1, marginX+iconBlockWidth, marginY+1, height - marginY );
	setAreaRangeCentered( &(scrFooterInst->iconHomeArea), width, height, iconBlockWidth, iconBlockHeight );
	setAreaRange( &(scrFooterInst->iconSettingArea), width-marginX-iconBlockWidth+1, width-marginX, marginY+1, height - marginY );


	bool status1 = setDefaultIconBlock( &(scrFooterInst->iconSetting), icon_setting, iconBlockWidth, iconBlockHeight, ICON_SETTING_X_SIZE, ICON_SETTING_Y_SIZE );
	bool status2 = setDefaultIconBlock( &(scrFooterInst->iconHome), icon_setting, iconBlockWidth, iconBlockHeight, ICON_HOME_X_SIZE, ICON_HOME_Y_SIZE );
	bool status3 = setDefaultIconBlock( &(scrFooterInst->iconBack), icon_setting, iconBlockWidth, iconBlockHeight, ICON_BACK_X_SIZE, ICON_BACK_Y_SIZE );

	return status1 && status2 && status3;
}

bool screenMainHomeInit( ScreenHome *scrHomeInst, short width, short height )
{
	scrHomeInst->borderVisible = true;
	scrHomeInst->borderColor = DEFAULT_BORDER_COLOR;
	scrHomeInst->bkgColor = DEFAULT_BKG_COLOR;


	bool status = true;
	return status;
}
//设置默认文本列表
bool setDefaultTextList( TextList *textlistInst, short elemWidth, short elemHeight, short elemNum, TextType *textArray, bool elemBorderVisible,\
		                 ColorInfo *colorInfoPtr )
{
	//设置列表元素区域大小
	setAreaRange( &(textlistInst->elemBaseArea), 1, elemWidth, 1, elemHeight );
	//计算文本所在区域
	//计算文本宽度(使用中文尺寸来估计）
	short textWidth = ( BOOK_ROW_BYTES >> 1) * ( SRC_WORD_SIZE_X + DEFAULT_WORD_SPACING );
	short marginXL = ( elemWidth - textWidth )>>1;
	short marginXR = elemWidth - marginXL - textWidth;
	short marginYU = ( elemHeight - SRC_WORD_SIZE_Y )>>1;
	short marginYD = elemHeight - marginYU - SRC_WORD_SIZE_Y;
	bool status = true;
	if ( elemWidth < textWidth || elemHeight < SRC_WORD_SIZE_Y )
	{
		marginXL = 0;
		marginXR = 0;
		marginYU = 0;
		marginYD = 0;
		status = false;
	}
	//设置元素文本区域位置
	setAreaRange( &(textlistInst->textArea), marginXL+1, elemWidth-marginXR, marginYU+1, elemHeight-marginYD );



	textlistInst->wordSpacing = DEFAULT_WORD_SPACING;
	textlistInst->letterSpacing = DEFAULT_LETTER_SPACING;

	textlistInst->elemNum = elemNum;
	textlistInst->elemBorderVisible = elemBorderVisible;
	textlistInst->elemColorInfo = *colorInfoPtr;

	int i;

	AreaRange *elemAreaArray = (AreaRange*)malloc( sizeof( AreaRange ) * elemNum );
	TagBlock *tagBolckArray = (TagBlock*)malloc( sizeof( TagBlock ) * elemNum );

	AreaRange *curElemAreaPtr;
	TagBlock *curTagPtr;

	short elemYPos = 0;
	for ( i = 0; i < elemNum; i ++ )
	{
		curTagPtr = &(tagBolckArray[i]);
		curElemAreaPtr = &(elemAreaArray[i]);

		curTagPtr->borderVisible = textlistInst->elemBorderVisible;
		curTagPtr->tagColorInfo = textlistInst->elemColorInfo;
		curTagPtr->wordSpacing = textlistInst->wordSpacing;
		curTagPtr->letterSpacing = textlistInst->letterSpacing;
		curTagPtr->tagText = textArray[i];
		curTagPtr->textVisible = true;
		curTagPtr->textArea = textlistInst->textArea;
		setAreaRange( curElemAreaPtr, 1, elemWidth, elemYPos + 1, elemYPos + elemHeight );
		elemYPos = elemYPos + elemHeight;
	}

	return status;

}

bool screenMainBookInit( ScreenBook *scrBookInst, short width, short height )
{
	bool status = true;

	scrBookInst->borderVisible = true;
	scrBookInst->borderColor = DEFAULT_BORDER_COLOR;
	//可编辑的颜色（电子书背景颜色与字体颜色）
	scrBookInst->bkgColorIndex = 0;
	scrBookInst->txtColorIndex = 255;

	//设置左中右点击区范围
	short leftAreaWidth = width/3;
	short rightAreaWidth = width/3;
	short middleAreaWidth = width - leftAreaWidth - rightAreaWidth;
	setAreaRange( &(scrBookInst->turnBackPageAreaPos), 1, leftAreaWidth, 1, height );
	setAreaRange( &(scrBookInst->openPageInfoAreaPos), leftAreaWidth+1, leftAreaWidth+middleAreaWidth, 1, height );
	setAreaRange( &(scrBookInst->turnBackPageAreaPos), width-rightAreaWidth+1, width, 1, height );

	//设置电子书范围（居中）
	short bookAreaHeight = BOOK_ROW_HEIGHT * BOOK_COL_NUM;
	short marginYU = ( height - bookAreaHeight )>>1;
	short marginYD = height - bookAreaHeight - marginYU;
	setAreaRange( &(scrBookInst->txtBookArea), 1, width, marginYU+1, height-marginYD );

	//设置电子书阅读进度信息页面范围
	short pageInfoAreaHeight = height/4;
	setAreaRange( &(scrBookInst->pageInfoArea), 1, width, height-pageInfoAreaHeight, height-1 );

	//设置电子书阅读进度信息页面是否可见
	scrBookInst->pageInfoVisable = false;

	TextType textArray[BOOK_COL_NUM];

	int i;
	for( i = 0; i < BOOK_COL_NUM; i ++ )
	{
		(textArray[i]).text = txtBookSpace[i];
		(textArray[i]).textSize = BOOK_ROW_BYTES;
	}

	ColorInfo colorSel = { DEFAULT_BORDER_COLOR, color_form[scrBookInst->bkgColorIndex], color_form[scrBookInst->txtColorIndex] };
	//设置电子书文本域（文本域为由TagBlock组成的TextList文本列表）
	status =  setDefaultTextList( &(scrBookInst->txtBook), width, BOOK_ROW_HEIGHT, BOOK_COL_NUM, textArray, false, &colorSel );


	//设置电子书阅读进度信息页面
	/***************************************
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 *
	 */

	return status;
}
bool screenMainSettingInit( ScreenSetting *scrSettingInst, short width, short height )
{
	bool status = true;

	scrSettingInst->borderVisible = true;

	scrSettingInst->bkgColor = DEFAULT_BKG_COLOR;
	scrSettingInst->borderColor = DEFAULT_BORDER_COLOR;

	//设置左侧所有标签的位置
	short LeftTagMarginXL = 20;//左侧所有标签的左边距
	short LeftTextMarginInTagX = 15;//在标签内部的文本与标签横向边界的距离
	short LeftTagGroupMarginXL = 10;//标签组的左边距
	//高度设定
	short tag1CenterY = 60;
	short tag1HalfH = 25;
	short editBkgColorCenterY = tag1CenterY + 70;
	short editBkgColorHalfH = 25;
	short editWordColorCenterY = editBkgColorCenterY + 60;
	short editWordColorHalfH = 25;
	short editTurnPageModCenterY = editWordColorCenterY + 60;
	short editTurnPageModHalfH = 25;
	short tag2CenterY = editTurnPageModCenterY + 70;
	short tag2HalfH = 25;

	if ( tag2CenterY + tag2HalfH > height )
	{
		status = false;
	}

	//设置静态标签：
	short textWidth1 = getWidthOfText( "休息定时", 8 );//4字汉字文本的像素宽度
	short staticTagXMin = LeftTagMarginXL+1;
	short staticTagXLen = (LeftTextMarginInTagX<<1)+textWidth1;
	short staticTagXMax = LeftTagMarginXL+staticTagXLen;


	//"休息定时"
	setAreaRange( &(scrSettingInst->tag1Area), staticTagXMin, staticTagXMax, tag1CenterY-tag1HalfH+1, tag1CenterY+tag1HalfH );
	status = status && setDefaultTagBlock( &(scrSettingInst->tag1), "休息定时", staticTagXLen, tag1HalfH<<1 );
	//"自动翻页定时"
	short textWidth2 = getWidthOfText( "自动翻页定时", 12 );//6字汉字文本的像素宽度
	setAreaRange( &(scrSettingInst->tag1Area), staticTagXMin, LeftTagMarginXL+(LeftTextMarginInTagX<<1)+textWidth2, tag2CenterY-tag2HalfH+1, tag2CenterY+tag2HalfH );
	status = status && setDefaultTagBlock( &(scrSettingInst->tag1), "自动翻页定时", (LeftTextMarginInTagX<<1)+textWidth2, tag2HalfH<<1 );

	//声明2个定位变量
	AreaFmt tempAreaFmt1;
	AreaFmt tempAreaFmt2;

	//"背景颜色","字体颜色","自动翻页"
	//设置tagGroup位置(水平用边距，垂直用中心距)

	short tagGroupWidth = width*2/3;
	short tagGroupHalfH = editBkgColorHalfH + 5;
	short tagGroupXSpacing = 50;//标签组中两个标签的水平间距

	status = status && setAreaFmt( &tempAreaFmt1, AREA_FMT_MARGIN, AREA_FMT_CENTER, \
			    LeftTagGroupMarginXL, width - tagGroupWidth - LeftTagGroupMarginXL, editBkgColorCenterY, tagGroupHalfH );

	setAreaRangeByAreaFmt( &(scrSettingInst->editBkgColorArea), &tempAreaFmt1, width, height );
	tempAreaFmt1.fmtValY.fmtCenterVal.center = editWordColorCenterY;
	setAreaRangeByAreaFmt( &(scrSettingInst->editWordColorArea), &tempAreaFmt1, width, height );
	tempAreaFmt1.fmtValY.fmtCenterVal.center = editTurnPageModCenterY;
	setAreaRangeByAreaFmt( &(scrSettingInst->editTurnPageModArea), &tempAreaFmt1, width, height );

	//设置tagGroup内容
	//左边的静态标签范围
	short leftTagMarginInGroupXL = LeftTagMarginXL - LeftTagGroupMarginXL;
	status = status && setAreaFmt( &tempAreaFmt1, AREA_FMT_MARGIN, AREA_FMT_CENTER, \
				leftTagMarginInGroupXL, tagGroupWidth - leftTagMarginInGroupXL - staticTagXLen, editBkgColorCenterY, editBkgColorHalfH );
	//右边的动态标签范围
	short rightTagMarginInGroupXL = leftTagMarginInGroupXL + staticTagXLen + tagGroupXSpacing;
	short rightTagWidth = 50;//要保证取值大于文本"off"的宽度，即3*SRC_LETTER_SIZE_X+2*DEFAULT_LETTER_SPACING
	status = status && setAreaFmt( &tempAreaFmt2, AREA_FMT_MARGIN, AREA_FMT_CENTER, \
				rightTagMarginInGroupXL, tagGroupWidth - leftTagMarginInGroupXL - rightTagWidth, editBkgColorCenterY, editBkgColorHalfH );

	//设置标签组
	status = status && setDefaultTagBlockGroup( &(scrSettingInst->editBkgColor), &tempAreaFmt1, &tempAreaFmt2, \
				tagGroupWidth, tagGroupHalfH<<1,"背景颜色", (void*)0 );

	tempAreaFmt1.fmtValY.fmtCenterVal.half = editWordColorHalfH;
	tempAreaFmt2.fmtValY.fmtCenterVal.half = editWordColorHalfH;
	status = status && setDefaultTagBlockGroup( &(scrSettingInst->editWordColor), &tempAreaFmt1, &tempAreaFmt2, \
				tagGroupWidth, tagGroupHalfH<<1,"字体颜色", (void*)0 );

	tempAreaFmt1.fmtValY.fmtCenterVal.half = editTurnPageModHalfH;
	tempAreaFmt2.fmtValY.fmtCenterVal.half = editTurnPageModHalfH;
	status = status && setDefaultTagBlockGroup( &(scrSettingInst->editTurnPageMod), &tempAreaFmt1, &tempAreaFmt2, \
				tagGroupWidth, tagGroupHalfH<<1,"自动翻页", "off" );


	//设置可编辑数字域
	short numEditGrpWidth = 100;
	short numEditGrpHeight = 110;

	short tagNumHourSpacingX = 20;
	short numHourNumMinuteSpacingX = 10;


	//闹钟的"时"(默认值为1)
	setAreaRange( &(scrSettingInst->editAlarmHourArea), staticTagXMax+tagNumHourSpacingX+1, staticTagXMax+tagNumHourSpacingX+numEditGrpWidth, \
				tag1CenterY - (numEditGrpHeight>>1)+1, tag1CenterY + (numEditGrpHeight>>1) );
	status = status && setDefaultNumEditGroup( &(scrSettingInst->editAlarmHour), numEditGrpWidth, numEditGrpHeight, 23, 0, 1, "时" );

	//闹钟的"分"(默认值为0)
	setAreaRange( &(scrSettingInst->editAlarmHourArea), staticTagXMax+tagNumHourSpacingX+1, staticTagXMax+tagNumHourSpacingX+numEditGrpWidth, \
				tag1CenterY - (numEditGrpHeight>>1)+1, tag1CenterY + (numEditGrpHeight>>1) );
	status = status && setDefaultNumEditGroup( &(scrSettingInst->editAlarmHour), numEditGrpWidth, numEditGrpHeight, 59, 0, 0, "分" );

	return status;
}
bool screenMainColorPickerInit( ScreenColorPicker *scrColorPickerInst, short width, short height )
{
	scrColorPickerInst->borderVisible = true;

	scrColorPickerInst->borderColor = DEFAULT_BORDER_COLOR;//上下边界颜色（不包括左右）
	scrColorPickerInst->bkgColor = DEFAULT_BKG_COLOR;//背景颜色


	bool status = true;
	if ( height < width )
	{
		status = false;
	}
	short marginYU = (height-width) >> 1;//上边距

	setAreaRange( &(scrColorPickerInst->colorPickerArea), 1, width, marginYU + 1, height - marginYU );

	setDefaultColorTable( &(scrColorPickerInst->colorPicker), (void*)0, width, width );

	return status;
}

void screenMainAreaInfo( ScrMainAreaInfo *mainAreaInfoInst )
{
	//设置当前页面为第一页
	mainAreaInfoInst->curScrIndex = 0;
	//设置第一页为主页
	(mainAreaInfoInst->scrIDStack)[0] = SCR_HOME;
	//清空后面的栈页（即后面不存在栈页）
	int i;
	for ( i = 1; i < 4; i ++ )
	{
		(mainAreaInfoInst->scrIDStack)[i] = SCR_NONE;
	}
}

