	component ED2platform is
		port (
			clk_clk               : in    std_logic                     := 'X';             -- clk
			key_export            : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			lcd_base_ctrl_export  : out   std_logic_vector(2 downto 0);                     -- export
			lcd_cmd_export        : out   std_logic_vector(2 downto 0);                     -- export
			lcd_data_export       : inout std_logic_vector(15 downto 0) := (others => 'X'); -- export
			ledgreen_export       : out   std_logic_vector(8 downto 0);                     -- export
			ledred_export         : out   std_logic_vector(17 downto 0);                    -- export
			reset_reset_n         : in    std_logic                     := 'X';             -- reset_n
			sd_card_b_SD_cmd      : inout std_logic                     := 'X';             -- b_SD_cmd
			sd_card_b_SD_dat      : inout std_logic                     := 'X';             -- b_SD_dat
			sd_card_b_SD_dat3     : inout std_logic                     := 'X';             -- b_SD_dat3
			sd_card_o_SD_clock    : out   std_logic;                                        -- o_SD_clock
			sdram_clk_clk         : out   std_logic;                                        -- clk
			sdram_wire_addr       : out   std_logic_vector(12 downto 0);                    -- addr
			sdram_wire_ba         : out   std_logic_vector(1 downto 0);                     -- ba
			sdram_wire_cas_n      : out   std_logic;                                        -- cas_n
			sdram_wire_cke        : out   std_logic;                                        -- cke
			sdram_wire_cs_n       : out   std_logic;                                        -- cs_n
			sdram_wire_dq         : inout std_logic_vector(31 downto 0) := (others => 'X'); -- dq
			sdram_wire_dqm        : out   std_logic_vector(3 downto 0);                     -- dqm
			sdram_wire_ras_n      : out   std_logic;                                        -- ras_n
			sdram_wire_we_n       : out   std_logic;                                        -- we_n
			seg7l_HEX4            : out   std_logic_vector(6 downto 0);                     -- HEX4
			seg7l_HEX5            : out   std_logic_vector(6 downto 0);                     -- HEX5
			seg7l_HEX6            : out   std_logic_vector(6 downto 0);                     -- HEX6
			seg7l_HEX7            : out   std_logic_vector(6 downto 0);                     -- HEX7
			sge7r_HEX0            : out   std_logic_vector(6 downto 0);                     -- HEX0
			sge7r_HEX1            : out   std_logic_vector(6 downto 0);                     -- HEX1
			sge7r_HEX2            : out   std_logic_vector(6 downto 0);                     -- HEX2
			sge7r_HEX3            : out   std_logic_vector(6 downto 0);                     -- HEX3
			sram_DQ               : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DQ
			sram_ADDR             : out   std_logic_vector(19 downto 0);                    -- ADDR
			sram_LB_N             : out   std_logic;                                        -- LB_N
			sram_UB_N             : out   std_logic;                                        -- UB_N
			sram_CE_N             : out   std_logic;                                        -- CE_N
			sram_OE_N             : out   std_logic;                                        -- OE_N
			sram_WE_N             : out   std_logic;                                        -- WE_N
			sw_export             : in    std_logic_vector(17 downto 0) := (others => 'X'); -- export
			touch_ctrl_export     : out   std_logic_vector(2 downto 0);                     -- export
			touch_msg_export      : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- export
			touch_pen_intr_export : in    std_logic                     := 'X'              -- export
		);
	end component ED2platform;

